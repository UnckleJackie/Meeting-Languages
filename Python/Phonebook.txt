### Информация

- ****************Словарик****************
    - ТРИЗ / АРИП, GIST / Impact / Road Planning
    - Метод Канбан, Scrum Framework, HADI
    - Модель культур Шнейдера / OKR / Workplace Learning
    - CJM продукта
    - Business Model Canvas
    - TAM, SAM, SOM
    - Теория ограничений и развития систем
    - Определение стратегии выхода на рынок (ADL-матрица, 5 сил Портера, SWOT-анализ, PEST-анализ
    - Определение бизнес-модели продукта (Lean Canvas, Business Model Canvas, Value Proposition)
    - CustDev
    - Customer Journey Map, Customer Research
    - Питчинг
    - **Астроциты**
        
        Астроциты — это глиальные клетки, которые составляют большую часть глии в центральной нервной системе. Они выполняют множество функций, включая поддержку нейронов, регуляцию мозгового кровотока и участие в обмене веществ. Астроциты также играют важную роль в защите нервных клеток от повреждений и болезней.
        
    - **Глии**
        
        Глия - это клетки, которые не являются нейронами, но играют важную роль в работе нервной системы. Глия выполняет разнообразные функции, такие как поддержка нейронов, защита нервных клеток и регуляция мозгового кровотока. К глиальным клеткам относятся астроциты, микроглия и олигодендроциты.
        
        - Микроглия
            
            
        - Олигодендроциты
    - **************Имплицитный**************
        
        Содержащийся внутри, подразумеваемый, внешне не проявляющийся, не выраженный прямо; скрытый, неявный.
        
    - ********************Математика********************
        - ******************************Принцип Дирихле******************************
            
            
        - Среднее гармоническое
        - ****************************************************Программа обучения на [неком курсе](https://proglib.academy/mathspro?utm_source=proglib&utm_medium=partner&utm_campaign=mathspro&utm_content=link_sidebar_adv) за 6 месяцев за 30,000р**
            - ****Модуль 0. Школьная математика****
                
                Вспомните базу. Научитесь брать производные, считать интегралы, исследовать функции. Познакомитесь с последовательностями и прогрессиями. Узнаете, что такое неравенства.
                
                Основные темы:
                
                - Начала теории множеств.
                - Геометрическая прогрессия. Векторы.
                - Теория вероятностей. Рациональные уравнения.
                - Алгебраические уравнения.
                - Иррациональные уравнения. Графический способ решения систем.
                - Неравенства.
                - Функции, график и свойства.
                - Графики функций и их преобразования.
                - Производная, исследование функций.
                - Исследование функций. Интеграл.
            - ********Модуль 1. Математический анализ********
                
                Изучите пределы, дифференцируемость и ряды. Научитесь считать разные интегралы.
                
                Важные темы:
                
                - Числовые последовательности.
                - Предел числовой функции.
                - Непрерывность числовой функции.
                - Дифференцируемость числовой функции.
                - Основные теоремы дифференциального исчисления.
                - Другие вопросы дифференциального исчисления.
                - Функции многих переменных.
                - Дифференцируемость функций многих переменных.
                - Интеграл Римана.
                - Вопросы интегрального исчисления.
                - Ряды.
                - Теория меры и интеграла Лебега.
            - **Модуль 2. Линейная алгебра**
                
                Научитесь работать с матрицами, узнаете что такое СЛАУ и как их решать.
                
                Направления:
                
                - Матрицы и операции над ними.
                - Определитель матрицы. Разложения определителя.
                - Обратная матрица, ее явный вид.
                - Матричные перемножения.
                - Однородные и неоднородные системы линейных уравнений – геометрический подход.
                - Линейная зависимость в векторном пространстве.
                - Комплексные числа.
                - Линейные отображения (операторы).
                - Собственные значения и собственные векторы линейных отображений.
                - Евклидовы пространства.
                - Отображения в евклидовых пространствах.
                - Билинейные формы
            - **Модуль 3. Комбинаторика**
                
                Узнаете основные правила комбинаторики и научитесь с ними работать.
                
                Основные понятия:
                
                - Правила комбинаторики.
                - Множества.
                - Сочетания.
            - **Модуль 4. Теория вероятностей и математическая статистика**
                
                Изучите дискретную теорию вероятностей, статистические методы, случайные величины и события, матожидание, дисперсию и корреляцию. Разберетесь в законах распределения. Сформулируете гипотезы для A/B-тестирования.
                
                Темы:
                
                - Случайные события.
                - Случайные величины.
                - Совместное распределение, условное распределение.
                - Математическое ожидание, дисперсия, корреляция.
                - Основные законы распределения.
                - Моделирование случайных величин.
                - Точечные оценки и их свойства.
                - Интервальные оценки.
                - Проверка гипотез.
                - Проверка гипотез при A/B тестировании.
                - Исследование зависимостей.
                - Регрессии.
            - **Модуль 5. Машинное обучение**
                
                Узнаете, как пройденное применяется в работе аналитика данных.
                
                Дополнительные темы:
                
                - Word2vec.
                - Градиентный спуск.
                - Backpropagation.
                - Случайный лес.
                - Классификация наблюдений: логистическая и пробит регрессии.
                - Метод ближайших соседей (KNN).
                - Классификация наблюдений: байесовский классификатор.
    - ****************Синопсис****************
        
        Синопсис - это краткое и структурированное изложение информации. Это метод обучения, который помогает запомнить большое количество информации, разбивая ее на небольшие блоки и организуя их в логические цепочки. Синопсис позволяет быстро ориентироваться в информации и легко вспоминать ее, что делает его очень полезным инструментом для учебы и научной работы.
        
    - **Фасилитатор**
        
        Специалист в области управления процессами групповой работы и коммуникации. Он помогает людям работать вместе более эффективно, облегчает процесс принятия решений и решения конфликтов в коллективе. Возможно, в контексте документа, где вы видели это слово, фасилитатор отвечает за проведение тренингов, семинаров или других мероприятий, связанных с карьерным развитием. Надеюсь, это поможет вам понять, кто такой фасилитатор. Если вам нужна какая-то конкретная информация, я готова помочь вам еще раз.
        
    - **************Чанк**************
        
        Чанк - это когнитивное понятие, которое описывает процесс организации информации в группы (чанки), которые могут быть легко запомнены и использованы. Чанк может содержать как числа и факты, так и более сложные элементы, такие как идеи или понятия.
        
        - Примеры чанков
            - Числа телефонов: мы легко запоминаем телефонный номер в формате 123-456-7890, потому что он состоит из трех чанков, каждый из которых содержит три цифры.
            - Английские фразы: многие часто используемые английские фразы, например, "how are you?" или "what's up?" являются чанками, которые мы легко запоминаем и используем в повседневном общении.
            - Акронимы: многие акронимы, такие как NASA или ASAP, являются чанками, которые представляют собой сокращения нескольких слов или фраз.
            - Рецепты: рецепты могут быть организованы в чанки, такие как список ингредиентов, инструкции по приготовлению, время приготовления и т.д.
            - Музыкальные аккорды: музыкальные аккорды могут быть организованы в чанки, которые соответствуют определенным аккордам и легко запоминаются.
            - Веб-страницы: веб-страницы могут быть организованы в чанки, такие как заголовки, параграфы, списки, изображения и т.д. Это помогает нам быстро сканировать страницу и находить необходимую информацию.
            - Календарные даты: даты могут быть организованы в чанки, такие как день, месяц и год. Например, 25 декабря 2021 года - это чанк, который легко запоминается.
            - Списки задач: списки задач могут быть организованы в чанки, такие как заголовки задач, описания и сроки выполнения. Это помогает нам лучше организовывать свою работу и управлять своим временем.
            - Код: программный код может быть организован в чанки, такие как функции, классы, переменные и т.д. Это помогает нам лучше понимать код и быстрее находить ошибки.
            - Термины и определения: термины и их определения могут быть организованы в чанки, которые легко запоминаются и помогают нам лучше понимать сложные понятия.

### Инструменты

- ********Куча********
    - К уроку 1. Программист / Итоги блока. Выбор специализации
        
        ### **Юрий Секин рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Типичный программист](https://t.me/tproger_official)
        
        2. [Точка входа в программирование](https://t.me/prog_point)
        
        3. [Soft Skillz](https://t.me/soft_skillz)
        
        4. [Книги по программированию](https://t.me/devs_books)
        
        5. [Инструменты программиста](https://t.me/prog_tools)
        
        **Литературу:**
        
        1. [«Паттерны проектирования» Эрик Фримен, Элизабет Фримен](https://clck.ru/sLP5L)
        
        2. [«Чистый код» Роберт Мартин](https://www.labirint.ru/books/642466)
        
        3. [«Совершенный код. Мастер-класс» Стив Макконнелл](https://www.labirint.ru/books/272529)
        
        4. [«Алгоритмы: построение и анализ» Томас Кормен, Чарльз Лейзерсон](https://vk.com/wall-54530371_2325)
        
        5. [«Искусство программирования» (все тома) Дональд Кнут](https://vk.com/wall-54530371_113285)
        
        6. [«Сколько стоит программный проект» Стив Макконнелл](https://clck.ru/sLPQp)
        
        7. [«Эмоциональный интеллект» Дэниел Гоулман](https://www.labirint.ru/books/788316)
        
        8. [«Человеческий фактор: успешные проекты и команды» Том Демарко](https://clck.ru/sLPTD)
        
        9. [«Психбольница в руках пациентов» Алан Купер](https://clck.ru/epuT3)
        
        **Сайты:**
        
        1. [HTML Academy](https://htmlacademy.ru/)
        
        2. [Code Basics](https://ru.code-basics.com/)
        
        3. [Coding Game](https://www.codingame.com/start)
        
        4. [Codecademy](https://www.codecademy.com/)
        
        5. [Scrimba](https://scrimba.com/)
        
        6. [freeCodeCamp](https://www.freecodecamp.org/)
        
        **Тренажёры:**
        
        1. [Tproger](https://tproger.ru/)
        
        2. [Тренировки по алгоритмам](https://yandex.ru/yaintern/algorithm-training)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 2. Тестировщик / Итоги блока. Выбор специализации
        
        ### **Дмитрий Криницын рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Серьёзный тестировщик](https://t.me/serious_tester)
        
        2. [Тестировщик от бога](https://t.me/godoftesting)
        
        3. [QA — Automation](https://t.me/qa_automation)
        
        **Литературу:**
        
        1. [«Программист-прагматик. Путь от подмастерья к мастеру» Эндрю Хант, Дэвид Томас](https://clck.ru/sLT9Q)
        
        2. [«Выразительный JavaScript. Современное веб-программирование» Марейн Хавербеке](https://vk.com/wall-51126445_40916)
        
        3. [«Архитектура компьютера», Эндрю Таненбаум](https://clck.ru/sLTKT)
        
        4. [«Рефакторинг Улучшение существующего кода» Мартин Фаулер](https://www.labirint.ru/books/601754)
        
        5. [«Эффективная работа с унаследованным кодом» Майкл Физерс](https://www.labirint.ru/books/231685)
        
        6. [«Head First. Паттерны проектирования» Эрик Фримен, Берт Бейтс, Кэти Сьерра, Элизабет Робсон](https://www.labirint.ru/books/632960)
        
        7. [«Код. Тайный язык информатики» Чарльз Петцольд](https://clck.ru/sLTT9)
        
        8. [«Введение в компьютерные науки» Гленн Брукшир, Деннис Брилов](https://www.labirint.ru/books/720522)
        
        9. [«Грокаем алгоритмы. Иллюстрированное пособие для программистов и любопытствующих» Адитья Бхаргава](https://clck.ru/sLTXv)
        
        10. [«Непрерывное развёртывание ПО» Джез Хамбл, Дейвид Фарли](https://www.labirint.ru/books/534957)
        
        11. [«Принципы юнит-тестирования» Хориков Владимир](https://clck.ru/sLTZP)
        
        12. [«Тестирование программного обеспечения. Базовый курс» Станислав Куликов](https://svyatoslav.biz/software_testing_book)
        
        13. [«Тестирование Дот Ком» Роман Савин](https://clck.ru/sLTnF)
        
        14. [«Тестирование программного обеспечения» Канер Сэм, Фолк Джек, Нгуен Енг Кек](https://clck.ru/sLTzk)
        
        15. [«Тестирование черного ящика» Борис Бейзер](https://clck.ru/sLwgv)
        
        16. [«Искусство тестирования программ» Гленфорд Майерс, Том Баджетт, Кори Сандлер](https://clck.ru/sLTtD)
        
        17. [«Ключевые процессы тестирования» Рекс Блэк](https://clck.ru/sLTs6)
        
        18. [«Гибкое тестирование» Лиза Криспин, Джанет Грегори](https://clck.ru/sLwko)
        
        19. [«Автоматизированное тестирование программного обеспечения» Элфрид Дастин, Джефф Рэшка, Джон Пол](https://www.chitai-gorod.ru/catalog/book/1175642)
        
        20. [«Как тестируют в Google» Арбон Джейсон, Каролло Джефф, Уиттакер Джеймс](https://clck.ru/sLTwn)
        
        21. [«Дневник охотника за ошибками. Путешествие через джунгли проблем безопасности программного обеспечения» Тобиас Клейн](https://clck.ru/sLwnh)
        
        22. [«Software Testing» Ron Patton](https://www.amazon.com/Software-Testing-Ron-Patton/dp/0672327988)
        
        23. [«Agile-тестирование. Обучающий курс для всей команды» Джанет Грегори, Лайза Криспин](https://www.mann-ivanov-ferber.ru/books/agile-testirovanie)
        
        24. [«Быстрое тестирование» Роберт Калбертсон, Крис Браун, Гэри Кобб](https://ru.bookmate.com/books/V0eiYpnv)
        
        **Видео:**
        
        1. [Alexei Barantsev - YouTube](https://www.youtube.com/channel/UCVMFyEVvaBDQ3PrExtCH0uw)
        
        2. [QAGuild - YouTube](https://www.youtube.com/channel/UCHtyBZ2XbtsRmNiAxh48RGg)
        
        3. [Heisenbug](https://www.youtube.com/channel/UCX6fjZa167tSy_4ryTLcOBw)
        
        4. [iTechArt - YouTube](https://www.youtube.com/channel/UC5f8qKFSxMcxpIlc29w9zJQ)
        
        **Сайты:**
        
        1. [Software-Testing.Ru](https://software-testing.ru/)
        
        2. [Gcoder](https://gcoder.ru/category/study/qa)
        
        3. [Автоматизация тестирования с помощью Selenium и Python · Stepik](https://stepik.org/course/575/promo)
        
        4. [ISTQB Foundation Level Certification – The Definitive Guide](http://tryqa.com/istqb-certification-the-definitive-guide)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 3. Аналитик  / Итоги блока. Выбор специализации
        
        ### **Андрей Вельгушев рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [LEFT JOIN](https://t.me/leftjoin)
        
        2. [Дашбордец](https://t.me/dashboardets)
        
        3. [Дата-сторителлинг](https://t.me/data_publication)
        
        4. [Бизнес-анализ & IT](https://t.me/bamrus)
        
        5. [Reveal the Data](https://t.me/revealthedata)
        
        **Литературу:**
        
        1. [«Базы данных» С.М Диго](https://clck.ru/sCwUd)
        
        2. [«Путь аналитика. Практическое руководство IT-специалиста» Прерва А., Иванова В.](https://clck.ru/sM4uy)
        
        3. [«Разработка требований к программному обеспечению» Карл Вигерс](https://clck.ru/sM4x4)
        
        4. [«Азбука системного мышления» Донелли Медоуз](https://www.mann-ivanov-ferber.ru/books/azbuka-sistemnogo-myishleniya)
        
        5. [«Графики, которые убеждают всех» Богачев А.](https://clck.ru/sM53N)
        
        6. [«Системное мышление» Левенчук А.](https://clck.ru/sM56F)
        
        7. [«Как измерить все, что угодно. Оценка стоимости нематериального в бизнесе» Дуглас У. Хаббард](https://clck.ru/sM56p)
        
        8. [«Голая статистика» Чарльз Уилан](https://clck.ru/sM58Y)
        
        9. [«DAMA-DMBOK: Data Management Body of Knowledge» (2-е издание)](https://www.labirint.ru/books/732389)
        
        10. [«Аналитическая культура. От сбора данных до бизнес-результатов» Карл Андерсон](https://www.mann-ivanov-ferber.ru/books/analiticheskaya-kultura)
        
        11. [«Азбука аналитики» Ю. Курносов](https://clck.ru/sM5Bi)
        
        12. [«Веб-аналитика 2.0 на практике» А. Кошик](https://clck.ru/sM5CG)
        
        13. [«Lean Analytics» Алистер Кролл](https://clck.ru/sM5EE)
        
        14. [«Искусство статистики» Дэвид Шпигельхалтер](https://www.mann-ivanov-ferber.ru/books/iskusstvo-statistiki)
        
        15. [«Google Таблицы. Это просто Евгений Намоконов» Ренат Шагабутдинов](https://www.mann-ivanov-ferber.ru/books/google-tabliczyi-eto-prosto)
        
        16. [«Маркетинг от потребителя» Роджер Бест](https://www.mann-ivanov-ferber.ru/books/sse/mbmanagement)
        
        17. [«Данные: визуализируй, расскажи, используй» Коул Нассбаумер Нафлик](https://www.mann-ivanov-ferber.ru/books/dannye-vizualiziruj-rasskazhi-ispolzuj)
        
        18. [«Измеряйте самое важное» Джон Дорр](https://www.mann-ivanov-ferber.ru/books/izmeryajte-samoe-vazhnoe)
        
        19. [«Почему. Руководство по поиску причин и принятию решений» Саманта Клейнберг](https://www.mann-ivanov-ferber.ru/books/pochemu-rukovodstvo)
        
        20. [«Управление на основе данных» Тим Филлипс](https://www.mann-ivanov-ferber.ru/books/upravlenie-na-osnove-dannyix)
        
        21. [«Говори на языке диаграмм» Джин Желязны](https://www.mann-ivanov-ferber.ru/books/mif/026)
        
        22. [«Визуализация данных при помощи дашбордов и отчетов в Excel» Дик Куслейка](https://clck.ru/sLsZt)
        
        23. [«Now You see it: Simple visualization techniques for quantitative analysis» Стивен Фью](https://clck.ru/sLsfg)
        
        24. [«Искусство визуализации в бизнесе» Нейтан Яу](https://clck.ru/sLsh6)
        
        25. [«Анализ данных в Tableau на практике, 100 советов, уроков и стратегий от мастера Дзен в Tableau» Райан Слипер](https://clck.ru/sLspc)
        
        **Сайты:**
        
        1. [Crayon. Blog](https://bigdata-madesimple.com/)
        
        2. [Database Trends and Applications](https://www.dbta.com/)
        
        3. [Tableau. Blog](https://www.tableau.com/about/blog)
        
        4. [Capterra](https://blog.capterra.com/articles/business-intelligence)
        
        5. [Data Talks](https://datatalks.rt.ru/)
        
        6. [Open Data Science](https://ods.ai/)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 4. Проджект-менеджер / Итоги блока. Выбор специализации
        
        ### **Роман Рыбкин рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [No Flame No Game](https://t.me/proproduct)
        
        2. [UX Horn](https://t.me/uxhorn)
        
        3. [Индекс дятла](https://t.me/dindex)
        
        4. [Менеджер от боженьки](https://t.me/pm_god)
        
        5. [Junior PM](https://t.me/junior_pm)
        
        6. [Project management | IT](https://t.me/pm_and_it)
        
        7. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
        
        8. [PMCLUB — про проекты, продукты и людей](https://t.me/pmclub)
        
        9. [Тимлид Леонид](https://t.me/teamleadleonid)
        
        10. [Владимир Завертайлов | Управление digital-проектами и продуктами](https://t.me/sibirix)
        
        11. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
        
        **Литературу:**
        
        1. [«Deadline», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
        
        2. [«Сделано», Скотт Беркун](https://www.mann-ivanov-ferber.ru/books/sdelano)
        
        3. [«Основы проектного менеджмента», Джозеф Хигни](https://www.mann-ivanov-ferber.ru/books/osnovyi-proektnogo-menedzhmenta)
        
        4. [«Путь scrum-мастера», Зузана Шохова](https://clck.ru/sM5GU)
        
        5. [«Канбан», Дэвид Андерсон](https://www.mann-ivanov-ferber.ru/books/kanban)
        
        6. [«Человеческий фактор: успешные проекты и команды», Том ДеМарко, Тимоти Листер](https://clck.ru/avy4h)
        
        7. [«Цели и ключевые результаты. Полное руководство по внедрению OKR», Пол Нивен и Бен Ламорт](https://www.mann-ivanov-ferber.ru/books/celi-i-klyuchevye-rezultaty)
        
        8. [«Эмоциональный интеллект для менеджеров проектов», Энтони Мерсино](https://www.chitai-gorod.ru/catalog/book/1014639)
        
        9. [«Исследование трендов», Мартин Реймонд](https://www.mann-ivanov-ferber.ru/books/issledovanie-trendov)
        
        10. [«Постигая Agile», Эндрю Стэллман, Дженнифер Грин](https://www.chitai-gorod.ru/catalog/book/1181653)
        
        11. [«Управление продуктом в Scrum», Роман Пихлер](https://www.mann-ivanov-ferber.ru/books/upravlenie-produktom-v-scrum)
        
        12. [«Цель. Процесс непрерывного совершенствования», Элияху Голдратт](https://clck.ru/reQVv)
        
        13. [«Цель-2. Дело не в везении», Элияху Голдратт](https://www.litres.ru/eliyahu-goldratt/cel-2-delo-ne-v-vezenii)
        
        14. [«Как привести дела в порядок», Дэвид Аллен](https://clck.ru/QdGrQ)
        
        15. [«Управление проектами, людьми и собой», Николай Товеровский](https://clck.ru/sM5PC)
        
        16. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
        
        17. [«От хорошего к великому» Джим Коллинз](https://www.mann-ivanov-ferber.ru/books/sse/good-great)
        
        18. [«Путь камикадзе», Эдвард Йордон](https://www.chitai-gorod.ru/catalog/book/1028345)
        
        19. [«Руководство PMBOK + Agile», Хеннер Ширенбер, Мойра Листер, Штефан Кирмсе](https://clck.ru/sM5TS)
        
        20. [«Scrum. Революционный метода управления проектами», Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
        
        21. [«Управление повседневным хаосом», Александр Фридман](https://clck.ru/sM5VC)
        
        22. [«Черная книга менеджера», Слава Панкратов](https://ru.bookmate.com/books/ZlzbUFjl)
        
        **Сайты:**
        
        1. [GoPractice](https://gopractice.ru/)
        
        2. [No Flame No Game](https://nfng.pro/)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 5. Продакт-менеджер / Итоги блока. Выбор специализации
        
        ### **Ярослав Карасёв рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Притчи продуктолога](https://t.me/product_proverbs)
        
        2. [Grow Horse](https://t.me/growhorse)
        
        3. [Продукторий Владимира Меркушева](https://t.me/vladimir_merkushev)
        
        4. [Improve Your Product (на украинском языке)](https://t.me/toceo)
        
        5. [Strategic move: стратегия, бизнес-модели, продукты](https://t.me/strategic_move)
        
        6. [Игорь Кузнецов о темных паттернах](https://t.me/brainshare)
        
        7. [Индекс дятла](https://t.me/dindex)
        
        8. [Alexcouncil⚡](https://t.me/alexcouncil)
        
        9. [Fresh Product Manager](https://t.me/FreshProductGo)
        
        10. [Epic Growth — рост продуктов](https://t.me/epicgrowth)
        
        11. [Product Management](https://t.me/ruspm)
        
        12. [FEDOR BORSHEV](https://t.me/pmdaily)
        
        13. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
        
        14. [ProductSense](https://t.me/productsense)
        
        15. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
        
        16. [Analysis Paradisis](https://t.me/analysis_paradisis)
        
        **Литературу:**
        
        1. [«На крючке. Как создавать продукты-хиты», Марти Кэган](https://clck.ru/sM5Y7)
        
        2. [«Построение бизнес-моделей», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5aX)
        
        3. [«Разработка ценностных предложений», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5b3)
        
        4. [«Стратегия голубого океана», В. Чан Ким, Рене Моборн](https://www.mann-ivanov-ferber.ru/books/paperbook/blueoceanstrategy)
        
        5. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
        
        6. [«Поведенческая экономика. Почему люди ведут себя иррационально и как на этом заработать», Дэн Ариели](https://clck.ru/sM5cL)
        
        7. [«Как чашка за чашкой строилась Starbucks», Говард Шульц](https://clck.ru/sM5dN)
        
        8. [«Покупатель на крючке», Нир Эяль и Райан Хувер](https://clck.ru/sM5fT)
        
        9. [«Корпорация гениев. Как управлять командой творческих людей», Эд Кэтмелл](https://www.litres.ru/ed-ketmell/korp-8645061/chitat-onlayn)
        
        10. [«Стартап. Настольная книга основателя», Стив Бланк, Боб Дорф](https://clck.ru/sM5g9)
        
        11. [«Позиционирование: битва за умы», Джек Траут, Эл Райс](https://www.chitai-gorod.ru/catalog/book/1001412)
        
        12. [«Как создать продукт, который купят. Метод Lean Customer Development», Синди Альварес](https://clck.ru/sM5i5)
        
        13. [«Когда кофе и капуста конкуренты», Алан Клемент](https://jobs-to-be-done.ru/)
        
        14. [«Scrum» Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
        
        15. [«Intercom on Product Management», Des Traynor](https://www.intercom.com/resources/books/intercom-product-management)
        
        16. [«Intercom on Jobs-to-be-Done», Des Traynor](https://www.intercom.com/resources/books/intercom-jobs-to-be-done)
        
        17. [«Growth hacks», Aladdin Happy](https://clck.ru/sM5s8)
        
        18. [«Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World with OKRs», Джон Доер](https://clck.ru/sM5un)
        
        19. [«Закон успешных инноваций. Зачем клиент «нанимает» ваш продукт и как знание об этом помогает новым разработкам», Клейтон Кристенсен](https://clck.ru/sM5ux)
        
        20. [«Deadline. Роман об управлении проектами», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
        
        21. [«Jobs To Be Done», Энтони Ульвик](https://jobs-to-be-done.ru/jobs-to-be-done-1)
        
        **Видео:**
        
        1. [20 Years of Product Management in 25 Minutes by Dave Wascha](https://www.youtube.com/watch?v=i69U0lvi89c)
        
        2. [The art of innovation | Guy Kawasaki | TEDxBerkeley](https://www.youtube.com/watch?v=Mtjatz9r-Vc)
        
        3. [Margaret Gould Stewart: How giant websites design for you (and a billion others, too)](https://www.youtube.com/watch?v=quJdL9ggETI)
        
        4. [Epic Growth Conference: Михаил Трутнев (Ultimate Guitar). Повышающий продажи маркетинговый абсурд](https://www.youtube.com/watch?v=1gwGRRGaEMo)
        
        5. [Андрей Хусид (CEO RealtimeBoard). Как построить команду и процессы, ориентированные на быстрый рост](https://www.youtube.com/watch?v=C1U4MD6DPI8)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К урокам модуля Знакомство с базами данных
        
        📚 Пселтис Эндрю Дж. «Потоковая обработка данных» 
        
        📚 Моргунов Евгений «PostgreSQL. Основы языка SQL»
        
        📚 Конолли Томас, Бегг Каролин «Базы данных»
        
        📚 Бэнкер Кайл «MongoDB в действии»
        
        📚 Дюбуа Поль «MySQL. Сборник рецептов»
        
        📚 Ульман Джеффри, Уидом Дженифер, Гарсия-Молина Гектор «Системы баз данных»
        
        📚 Мишра Санжей, Бьюли Алан «Секреты Oracle SQL»
        
    - Видео с Youtube
        
        [GPT-4 Turbo. Презентация](https://www.youtube.com/watch?v=8MBUl0f2Ojw&list=WL&index=3&pp=gAQBiAQB) - 47 мин
        
        [Учим Python. Уроки. Полный курс](https://www.youtube.com/watch?v=5g-MHZ0MzZY&list=WL&index=34&pp=gAQBiAQB) - 07:03
        
        [Большой бесплатный курс по ChatGPT](https://www.youtube.com/watch?v=Genj8-NcmBo&list=WL&index=11&pp=gAQBiAQB) - 1 часть - 68 мин
        
        [TCP/IP - что это и зачем нужно](https://www.youtube.com/watch?v=rLUzYeLdM0k&list=WL&index=12&pp=gAQBiAQB) - 96 мин
        
        [JavaScript для начинающих. Уроки + Практика](https://www.youtube.com/watch?v=maPRR_jjyOE&list=WL&index=28&pp=gAQBiAQB) - 06:46
        
        [Лекция по теории игр](https://www.youtube.com/watch?v=LVrjE8RAkBw&list=WL&index=7&pp=gAQBiAQB) (МФТИ) - 69 мин
        
    - Ссылки
        
        С семинаров по языкам рекомендации:
        
        [«ASP.NET Core. Разработка приложений»](http://asp.net/)
        
        - Джеймс Чамберс
        - Дэвид Пэкетт
        - Саймон Тиммс
        
        Скачать. Евгения Роньжина советует:
        
        1. Лао-цзы «Книга об истине и силе»
        2. Н. Островский «Как закалялась сталь»
        3. Е. Водолазкин «Лавр»
        4. М. Уолтер «Развитие силы воли»
        5. В. Франкл «Воля к смыслу»
        6. М. Ибука «После трех уже поздно»
        7. О. Бахтияров «Активное сознание»
        8. Р. Грин «Большая книга мастера»
        
        Скачать и отсортировать. Роман Моисеев советует:
        
        [Зарецкий А. В. Энциклопедия профессора Фортрана](https://www.docdroid.net/qu4g/professora-fortrana-pdf)
        
        [Журнал «Наука и жизнь»](https://www.nkj.ru/)
        
        [Джаред Даймонд. Ружья, микробы и сталь. История человеческих сообществ](https://baguzin.ru/wp/wp-content/uploads/2016/08/%D0%94%D0%B6%D0%B0%D1%80%D0%B5%D0%B4-%D0%94%D0%B0%D0%B9%D0%BC%D0%BE%D0%BD%D0%B4.-%D0%A0%D1%83%D0%B6%D1%8C%D1%8F-%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D0%B1%D1%8B-%D0%B8-%D1%81%D1%82%D0%B0%D0%BB%D1%8C.pdf)
        
        [Телеграм-канал ForkLog](https://tlgrm.ru/channels/@forklog)
        
        **Что советует Алексей Денисенко и его команда**
        
        1. Отслеживать новые стартапы на [Product Hunt](https://www.producthunt.com/)
        
        2. Изучать компании, в которые инвестирует акселераратор [YCombinator](https://www.ycombinator.com/) и венчурный фонд [Andreessen Horowitz](https://a16z.com/)
        
        3. Читать новости технологий [TechCrunch](https://techcrunch.com/)
        
        4. Регулярно читать материалы на ресурсе [habr.com](https://habr.com/ru/all/)
        
        5. Подписаться на рассылку [Dear Architects](https://www.deararchitects.xyz/)
        
        ******************************************************Сергей Корнеев рекомендует:******************************************************
        
        [Уолтер Айзексон. Стив Джобс](https://www.labirint.ru/books/307571/)
        
        [Андрей Мовчан, Алексей Митров. Проклятые экономики](https://www.litres.ru/andrey-movchan/proklyatye-ekonomiki/)
        
        [Андрей Мовчан. Россия в эпоху постправды](https://www.chitai-gorod.ru/catalog/book/1181650/)
        
        [YouTube-канал Андрея Мовчана](https://www.youtube.com/Movchans)
        
        **********Акмаль Пайзиев рекомендует:**********
        
        [Подкаст Equity](https://castbox.fm/channel/Equity-id2088851?country=ru)
        
        [Подкаст Acquired](https://castbox.fm/channel/Acquired-id1987509?country=ru)
        
        [YouTube-канал Stanford](https://www.youtube.com/c/stanford/videos)
        
        [«Антихрупкость», Н. Н. Талеб](https://clck.ru/sXUjG)
        
        ****************************************************************Александр Пожаренко рекомендует:****************************************************************
        
        [Рэй Далио, «Принципы»](https://www.ozon.ru/category/printsipy-zhizn-i-rabota-dalio-rey/)
        
        [В. Тарасов, «Технология жизни»](https://www.ozon.ru/search/?deny_category_prediction=true&from_global=true&text=%D0%A2%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F+%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8.+%D0%9A%D0%BD%D0%B8%D0%B3%D0%B0+%D0%B4%D0%BB%D1%8F+%D0%B3%D0%B5%D1%80%D0%BE%D0%B5%D0%B2.+%7C+%D0%A2%D0%B0%D1%80%D0%B0%D1%81%D0%BE%D0%B2+%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80+%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D0%B8%D0%BD%D0%BE%D0%B2%D0%B8%D1%87&product_id=7016012)
        
        [Л. Ярухина «Финансы для нефинансистов»](https://www.ozon.ru/search/?deny_category_prediction=true&from_global=true&text=%D0%A4%D0%B8%D0%BD%D0%B0%D0%BD%D1%81%D1%8B+%D0%B4%D0%BB%D1%8F+%D0%BD%D0%B5%D1%84%D0%B8%D0%BD%D0%B0%D0%BD%D1%81%D0%B8%D1%81%D1%82%D0%BE%D0%B2+%7C+%D0%AF%D1%80%D1%83%D1%85%D0%B8%D0%BD%D0%B0+%D0%9B%D1%8E%D0%B4%D0%BC%D0%B8%D0%BB%D0%B0+%D0%98%D0%B2%D0%B0%D0%BD%D0%BE%D0%B2%D0%BD%D0%B0&product_id=147725580)
        
        [Элияху Голдратт. «Цель: процесс непрерывного совершенствования»](https://mybook.ru/author/eliyahu-goldratt/cel-process-nepreryvnogo-sovershenstvovaniya/read/)
        
        **Дмитрий Кибкало рекомендует**
        
        Книги:
        
        [После трех уже поздно, Масару Ибука](https://clck.ru/32sG9X)
        
        [К черту все! Берись и делай! Ричард Брэнсон](https://clck.ru/32rsE6)
        
        [Бизнес как игра, С. Абдульманов, Д. Кибкало, Д. Борисов](https://clck.ru/EnGa9)
        
        [Бизнес на свои, С. Абдульманов, Д. Кибкало](https://clck.ru/G9tY4)
        
        [Конец маркетинга, каким мы его знаем, Серхио Займан](https://clck.ru/32sKvS)
        
        [Анна Каренина, Лев Толстой](https://clck.ru/32rsMB)
        
        [Проект «Аве Мария», Энди Вейер](https://clck.ru/32rsMo)
        
        [Марсианин, Энди Вейер](https://clck.ru/32rsNR)
        
        [Тобол, Алексей Иванов](https://clck.ru/32rsPx)
        
        [Пищеблок, Алексей Иванов](https://clck.ru/32rsRu)
        
        [Географ глобус пропил, Алексей Иванов](https://clck.ru/32rsTx)
        
        Фильмы и сериалы:
        
        [Тед Лассо](https://clck.ru/Vjebx)
        
        [Мистический квест](https://clck.ru/32sHFb)
        
        [Медленные лошади](https://clck.ru/32sHHu)
        
        [Довод](https://clck.ru/QU7Zb)
        
        [Интерстеллар](https://clck.ru/JfuoK)
        
        [Счастливые люди](https://clck.ru/32rsYt)
        
        Телеграм-канал Дмитрия Кибкало — [«Киба у аппарта»](https://clck.ru/32sHqu)
        
- **********************************Программы на комп**********************************
    - ******Git (установлено 29.08.2023)******
    - ********************************************************************GitKraken (установлено 01.09.2023)********************************************************************
    - ************************************Visual Studio Code (установлено 29.08.2023)************************************
    - Для работы с C# - [Dotnet нужна 6 версия](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)
    - Для работы в Python
        - [Интерпретатор](https://www.python.org/)
        - VSCode - расширение Python
        - Ctrl + Shift + P → format - Python Document - устанавливаем плагин форматирования кода
- **********Книги**********
    - **********************Базы данных**********************
        
        Дейт К. Дж. «[Введение в системы баз данных](https://drive.google.com/file/d/1MSlQy3AelE_-33upT0VAaEP7qEBrpfPY/view?usp=drive_link)» - **************Скачана**************
        
        Уилсон Джим Р, Редмонд Эрик «[Семь баз данных за семь недель](https://drive.google.com/file/d/1nHrcuYZ3qmrIP_c6gSZ-qnSZqy7uD42Z/view?usp=drive_link)» - **************Скачана**************
        
        Хопкрофт Д. “[Структуры данных и алгоритмы](https://drive.google.com/file/d/1-QhPndk27_rE9844Oo9bjP_uUN5fGIjU/view?usp=drive_link)” - **Скачана**
        
        Шварц Б., Зайцев П., Ткаченко В. [“MySQL по максимуму”](https://www.litres.ru/book/beron-shvarc/mysql-po-maksimumu-pdf-epub-34946775/) - **Скачана**
        
    - ********************************Программирование********************************
        
        С. Чакон, Б. Штрауб. “[Git для профессионального программиста. Подробное описание самой популярной системы контроля версий.”](https://gbcdn.mrgcdn.ru/uploads/asset/4245110/attachment/d4eb8c232f8f2bdf4e42ba7cb49e0c50.pdf) (книга с курса ГБ)
        
        [Кен Швабер и Джефф Сазерленд “Руководство по Scrum”](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Russian.pdf) (Сергей Артюхов советует)
        
        [Дональд Кнут “Искусство программирования”](https://drive.google.com/file/d/1SUo8lnN6IuYNrANVdKe32RC1GC079riF/view?usp=drive_link) (Николай Ермаков советует)
        
        - Топология команд (на англ)
            
            [Team Topologies Organizing Business and Technology Teams for Fast Flow (Matthew Skelton  Manuel Pais [Skelton etc.).epub](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a54e031c-b8bf-4ead-88c3-c28cb2814fb5/Team_Topologies_Organizing_Business_and_Technology_Teams_for_Fast_Flow_(Matthew_Skelton__Manuel_Pais_Skelton_etc.).epub)
            
        
        Таненбаум Эндрю “Архитектура компьютера”
        
        Таненбаум Эндрю, Уэзеролл Дэвид “Компьютерные сети”
        
        Таненбаум Эндрю, “Операционные системы”
        
        Касперски Крис “Искусство дизассемблирования”
        
        Касперски Крис, Холмогоров Валентин, Кириллова Ксения “Восстановление данных “
        
        Касперски Крис “Компьютерные вирусы внутри и снаружи”
        
        Синтх Саймон “Книга шифров”
        
        Шнайдер Брюс “Прикладная криптография”
        
        Немет Эви “Unix и Linux для системного администратора”
        
        Макдауэлл Гейл Лакман [“Карьера программиста”](https://drive.google.com/file/d/1lCgiZk4zdnWxSNmlk0gvHgEM3Oa4BAqM/view?usp=drive_link) (Андрей Володин советует)
        
        [Newman. Networks](https://drive.google.com/file/d/1WeOmBD4IcDEB9Jqg9lzmFf4LMY1HhnSX/view?usp=drive_link) (Иван Козицын советует)
        
        Вьюгин “[Математические основы машинного обучения и прогнозирования](https://www.litres.ru/book/v-v-vugin/matematicheskie-osnovy-mashinnogo-obucheniya-i-prognozirovaniya-9013752/)”
        
        Окулов [“Алгоритмы компьютерной арифметики”](https://www.litres.ru/book/oleg-pestov/algoritmy-komputernoy-arifmetiki-11251994/)
        
        ***Адитья Бхартава “Грохаем алгоритмы” - Прочитана***
        
        ***Чарльз Петцольд “Код. Тайный язык информатики” - отправная точка в мир ИТ - Прочитана***
        
        [Литература.zip](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/86541372-578f-4a53-b4df-f02753b0838d/%D0%9B%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%B0.zip)
        
        - **Assembler**
            
            Зубков Сергей “Ассемблер. Для Dos, Windows, Unix” 
            
        - **С++**
            
            
            Доусон Майкл “[Изучаем С++ через программирование игр](https://drive.google.com/file/d/1k9Ry3KQa3I8dgZU1kp4fdPGISFBjbMbo/view?usp=drive_link)”, 353 стр. **********************************************Закладка стр. (% в день)**********************************************
            
        - **C#**
            
            [Рихтер Джеффри “C# программирование](https://drive.google.com/file/d/1pSCrd1lKnX2XOzdG8WsqQpUKZo69dD_U/view?usp=drive_link)” (книга с курса ГБ)
            
            [Мартин Дрейер “C# для школьников”](https://drive.google.com/file/d/1QgjLk2g9rG87jC5SoVS-SXF2EaKn1CRA/view?usp=drive_link) (книга с курса ГБ)
            
        - **Java**
            
            Брюс Эккель [“Философия Java”](https://drive.google.com/file/d/1gQdDMSh2p9g16NFH7srrtiwM8_lyffEI/view?usp=drive_link) (посоветовал С. Михайлов, гендир GetCource)
            
        - **Python**
            
            
            - [ ]  Лучано Р. “[Python. К вершинам мастерства](https://drive.google.com/file/d/1B-qyrwTYEmHdDq_HDz1nVyV41jrtoq9O/view?usp=drive_link)”, 898 стр.
            
            - [ ]  Эрик Мэтиз - “[Изучаем Python](https://drive.google.com/file/d/1HZKinI37wMwkdOwIogrVC7h7uqN8d68U/view?usp=drive_link)”, 512 стр.
            
            - [ ]  Луц М. “Программирование на Python” [Том 1](https://drive.google.com/file/d/1-_xb3VLrNUV8bnm11SlQiNjypP4mzHem/view?usp=drive_link), 991 стр. (возможно это лишь предверсия 5го издания)
            
            - [ ]  Луц М. “Python. [Карманный справочник](https://drive.google.com/file/d/1_HMpFkgiBOEvF2LOW633VftKTaeg1PIQ/view?usp=drive_link)”, 321 стр.
            
            - [ ]  Луц М. “Изучаем Python” [Tом 1](https://drive.google.com/file/d/1qIEWsYROkd7nkNr5l5u899LDIExTlKyS/view?usp=drive_link), [Том 2](https://drive.google.com/file/d/1st2oWXletinjxPOFMhq5J6eLuYPShUn1/view?usp=drive_link), 833 + 722 стр.
            
            - [ ]  **********.18%********** Лейси Н. “[Python, например](https://drive.google.com/file/d/1via9T_eNnrar0z0XrY6Z2e-GJy-5zKlQ/view?usp=drive_link)”, 192 стр.  с 30.11.23 **Закладка  стр. (1% в день)**
        - **Алгоритмы и структуры данных**
            
            [Кормен, Лейзерсон, Ривест: Алгоритмы. Построение и анализ](https://drive.google.com/file/d/1s2geqg3wAGP1krbPabsTqS9uHy_ItlAm/view?usp=drive_link) (Камиль Хадиев советует)
            
            [Кормен Томас : Алгоритмы. Вводный курс](https://drive.google.com/file/d/1C5wEWj3IWNNQpHIHS4bNGZP40d7M5km2/view?usp=drive_link) (Камиль Хадиев советует)
            
            Дэвид Сэломон “Сжатие данных, изображений и звука”
            
    - ********************Математика********************
        - ******************************************************************************Авхадиев Фарит Габидинович насоветовал:******************************************************************************
            
            [И. П. Натансон. Конструктивная теория функций](https://cloud.mail.ru/public/G2vN/6Nn1FDxmK?_ga=2.54499816.1552182271.1693810780-1408849439.1690880580).
            
            [Г. Е. Иванов. Слабо выпуклые множества и функции: теория и приложения](https://litportal.ru/avtory/grigoriy-ivanov/kniga-slabo-vypuklye-mnozhestva-i-funkcii-teoriya-i-prilozheniya-729857.html).
            
            [Н. В. Ефимов, С. Б. Стечкин. Некоторые свойства чебышевских множеств](http://www.mathnet.ru/links/31d3da6577383076b4a301a9e8134c01/dan22637.pdf).
            
            [А. И. Шерстнёва, О. В. Янущик, Е. Г. Пахомова, О. Н. Имас. Лекции по высшей алгебре](https://portal.tpu.ru/SHARED/y/YANUSCHIK/Leaningw/Reference/algebra.pdf).
            
            [Г. Г. Харди. Апология математика](https://avidreaders.ru/book/apologiya-matematika.html).
            
        
        [«Math for Game Programmers», Christopher Tremblay](https://drive.google.com/file/d/1lCgiZk4zdnWxSNmlk0gvHgEM3Oa4BAqM/view?usp=drive_link) (Андрей Володин советует)
        
        [Вернон Смит “Экспериментальная экономика”](https://www.litres.ru/book/vernon-smit/eksperimentalnaya-ekonomika-kompleks-issledovaniy-po-sovokupno-49787167/) (Александр Чабан советует)
        
        [Джон фон Нейман, Моргенштерн Оскар. “Теория игр и экономическое поведение](https://pandia.ru/422310/)” (Александр Чабан советует)
        
        Школа [Опойцева ссылка](https://oschool.ru/lectures/maths/V1Yr1-O2) (Николай Коргин советует)
        
        В. Опойцев. [Интуиция и математика](https://www.koob.ru/boss/intuicija_i_matematika) (Николай Коргин советует)
        
        Герман Вейль. [Симметрия](https://drive.google.com/file/d/1_edWrKJQ7g4oLhCvCJCEBpbO_paGL1nj/view?usp=drive_link) (Савватеев рекомендуэ)
        
        Элияху Голдратт. [Цель или процесс непрерывного совершенствования](https://mybook.ru/author/eliyahu-goldratt/cel-process-nepreryvnogo-sovershenstvovaniya/read/) (Николай Коргин советует)
        
        Киселев. [Арифметика](https://drive.google.com/file/d/1FPtgt_zh7OSAYpJBJ3hrdt5wJ8fiRL5N/view?usp=drive_link) (Савватеев рекомендуэ)
        
        Киселев. [Сборник задач по арифметике для 5-6 классов](https://drive.google.com/file/d/1weAQ4vOxKFsjH6TLO0foBRBTBAWE6Lfi/view?usp=drive_link) (Савватеев рекомендуэ)
        
        [Что такое математика? Элементарный очерк идей и методов](https://drive.google.com/file/d/1t3H_92mMYyYaWNg_wsU2FWSXfNYaU6W8/view?usp=drive_link) (Савватеев рекомендуэ)
        
        ***Литвак Н. [“Математика для безнадежных гуманитариев”](https://www.litres.ru/book/nelli-litvak/matematika-dlya-beznadezhnyh-gumanitariev-dlya-teh-kto-uchil-40600183/) (Савватеев рекомендуэ) - Прочитана***
        
        ***Боулер Джо [“Математическое мышление”](https://www.litres.ru/static/or4/view/or.html?baseurl=/download_book_subscr/44379662/52692344&art=44379662&user=315004159&uilang=ru&catalit2&track_reading&subscription) (Литвак Нелли рекомендует) - Прочитана!***
        
        - Кострикин. “Алгебра. Основы алгебры” (Савватеев рекомендуэ)
            
            [Кострикин. “Алгебра. Основы алгебры. Часть 1”](https://drive.google.com/file/d/1t3H_92mMYyYaWNg_wsU2FWSXfNYaU6W8/view?usp=drive_link) (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Линейная алгебра. Часть 2 (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Часть 3  (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Основные структуры. Часть 3  (Савватеев рекомендуэ)
            
        - Гаусс “Арифметические исследования” (Савватеев рекомендуэ)
            
            [Lizana Antonio. Если бы числа могли говорить. Гаусс. Теория чисел - royallib.com.rtf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e4b37083-1cd7-4945-8dde-a02d47ba4504/Lizana_Antonio._%D0%95%D1%81%D0%BB%D0%B8_%D0%B1%D1%8B_%D1%87%D0%B8%D1%81%D0%BB%D0%B0_%D0%BC%D0%BE%D0%B3%D0%BB%D0%B8_%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D0%B8%D1%82%D1%8C._%D0%93%D0%B0%D1%83%D1%81%D1%81._%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%87%D0%B8%D1%81%D0%B5%D0%BB_-_royallib.com.rtf)
            
        - **************************************************************Савватеев А. “Математика для гуманитариев. Живые лекции**************************************************************
            
            [А. Савватеев. Математика для гуманитариев. Живые лекции.pdf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/72de3d71-0757-4d13-afbe-576d1517f319/%D0%90._%D0%A1%D0%B0%D0%B2%D0%B2%D0%B0%D1%82%D0%B5%D0%B5%D0%B2._%D0%9C%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0_%D0%B4%D0%BB%D1%8F_%D0%B3%D1%83%D0%BC%D0%B0%D0%BD%D0%B8%D1%82%D0%B0%D1%80%D0%B8%D0%B5%D0%B2._%D0%96%D0%B8%D0%B2%D1%8B%D0%B5_%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8.pdf)
            
        - Шень, Верещагин “Начала теории множеств” (Савватеев рекомендуэ)
            
            [Шень, Верещагин. Начала теории множеств.pdf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22c94b95-39c8-427e-b02d-94f612415c80/%D0%A8%D0%B5%D0%BD%D1%8C_%D0%92%D0%B5%D1%80%D0%B5%D1%89%D0%B0%D0%B3%D0%B8%D0%BD._%D0%9D%D0%B0%D1%87%D0%B0%D0%BB%D0%B0_%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D0%B8_%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2.pdf)
            
    - **************************Деловые книги**************************
        - Джим Коллинг. От хорошего к великому (посоветовал С. Михайлов, гендир GetCource)
            
            [Джим_Коллинз_От_хорошего_к_великому (1).pdf](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/cccb669f-2c07-4910-b4f8-663f73a0aa89/%D0%94%D0%B6%D0%B8%D0%BC_%D0%9A%D0%BE%D0%BB%D0%BB%D0%B8%D0%BD%D0%B7_%D0%9E%D1%82_%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B5%D0%B3%D0%BE_%D0%BA_%D0%B2%D0%B5%D0%BB%D0%B8%D0%BA%D0%BE%D0%BC%D1%83_(1).pdf)
            
        - Стивен Кови. 7 навыков высокоэффективных людей (Андрей Володин советует)
            
            [Kovi_S._7_Navyikov_Vyisokoyeffekt.a4.pdf](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/ea2f99c1-7a2b-4d05-a15b-945340749b70/Kovi_S._7_Navyikov_Vyisokoyeffekt.a4.pdf)
            
        
        [Нил Рекхэм: СПИН-продажи](https://drive.google.com/file/d/1ZZuOdZePfBleCEcuGjsFwufw1jaJifdr/view?usp=drive_link) (Юрий Солодовников советует)
        
        [Александр Ведяхин. “Сильный искусственный интеллект на подступах к сверхразуму”](https://drive.google.com/file/d/1bpTC96JdbMoMJPTc8ByuxaWYUW-0kTIZ/view?usp=drive_link)  (Юрий Солодовников советует)
        
        [Даниэль Канеман “Думай медленно… решай быстро”](https://www.litres.ru/book/daniel-kaneman/dumay-medlenno-reshay-bystro-6444517/) (Максим Суркиз советует)
        
        [Ричард Фейнман: Вы, конечно, шутите, мистер Фейнман](https://www.litres.ru/book/richard-fillips-feynman/vy-konechno-shutite-mister-feynman-142044/) (Камиль Хадиев советует)
        
        [Норберт Винер “Кибернетика и общество”](https://www.litres.ru/book/norbert-viner/kibernetika-i-obschestvo-41339381/chitat-onlayn/) (Фуад Алескеров советует)
        
        Паронджанов В. [“Как улучшить работу ума”](https://drive.google.com/file/d/1J_X0QHCsblMVx8HCd7j0dFaCLm950pPD/view?usp=drive_link)
        
    - ************Другие************
        
        [Жан Бодрийяр. “К критике политической экономии знака”](https://www.litres.ru/book/zhan-bodriyyar/k-kritike-politicheskoy-ekonomii-znaka-68010589/) (Ларюшин Иван советует)
        
        [Лев Троцкий “Литература и революция”](https://www.litres.ru/book/lev-trockiy/literatura-i-revoluciya-68658901/) (Ларюшин Иван советует)
        
        [Герман Гессе “Степной волк”](https://www.litres.ru/book/german-gesse/stepnoy-volk-138905/) (Ларюшин Иван советует)
        
        [Иоганн Гете “Фауст](https://www.litres.ru/book/iogann-volfgang-fon-gete/faust-146095/)” (Ларюшин Иван советует)
        
        [Генри Олди “Черный баламут”](https://www.litres.ru/book/genri-layon-oldi/groza-v-beznachale-121586/) (Ларюшин Иван советует)
        
        [Филип Пулман. Серия “Темные начала”](https://www.litres.ru/serii-knig/temnye-nachala/) (Анастасия Топчинина советует)
        
        [Ник Горькавый. Серия “Астравитянка”](https://www.litres.ru/serii-knig/astrovityanka/elektronnie-knigi/) (Анастасия Топчинина советует)
        
        [Сергей Лукьяненко. Цикл “Глубина”](https://www.litres.ru/book/sergey-lukyanenko/glubina-labirint-otrazheniy-falshivye-zerkala-prozrachny-166292/) (Максим Суркиз советует)
        
        [Прохоров Александр. “Русская модель управления”](https://www.litres.ru/book/aleksandr-prohorov/russkaya-model-upravleniya-127587/) (Иван Кузнецов советует)
        
- **Приложения**
    - ************Notion************
    - **************Quizlet (Карточки смыслов)**************
        
        **************************************************************************************Подписка - 2,350 р/год (месячная - 690 р/мес)**************************************************************************************
        
    - ************************************Соло на клавиатуре************************************
        
        ************************************************************************Подписка. Безлимит - 5,000р навсегда************************************************************************
        
    - Puzzle English
- **********Ссылки**********
    - **Git**
        - Скринкаст от Ильи Кантора. [Весь плейлист](https://vimeo.com/showcase/5616060)
        - [Самоучитель Git](https://githowto.com/ru)
        - [GitHub: работа с ветками и коммитами](https://gb.ru/posts/github-rabota-s-vetkami-i-kommitami)
        - [Документация на английском](https://git-scm.com/docs)
        - [GitHub: настройка и первая публикация проекта](https://gb.ru/posts/github-nastrojka-i-pervaya-publikaciya-proekta)
        - [Как устроен и работает GitHub](https://gb.ru/posts/kak-ustroen-i-rabotaet-github)
        - [Руководство по Git на русском](https://git-scm.com/book/ru/v2)
        - https://www.gitkraken.com/
        - Git для новичков. [Часть 1](https://habr.com/ru/articles/541258/); [Часть 2](https://habr.com/ru/articles/542616/)
        - [Знакомство с Microsoft Learn](https://learn.microsoft.com/ru-ru/teamblog/microsoft-learn-tour)
        - [**Интерактивный учебник-тренажер по Git**](https://learngitbranching.js.org/?locale=ru_RU)
    - **********************************Биржи фрилансеров**********************************
        - [www.youdo.com](http://www.youdo.com)
        - 
    - **********Курсы**********
        
        [Онлайн-курсы Массачусетского технологического института](https://ocw.mit.edu/) (Николай Ермаков советует)
        
        [Онлайн-курсы Google](https://learndigital.withgoogle.com/digitalgarage/courses) (Николай Ермаков советует)
        
        **[Академия Яндекса](https://academy.yandex.ru/)**
        
        ******************************************************************************ФКН ВШЭ - дистанционные занятия ([Youtube-канал](https://www.youtube.com/@hse-cs-lectures/videos))**
        
    - ********************Математика********************
        - https://www.geogebra.org/calculator - Ресурс по визуализация математики
    - ******************Нейросети******************
        - [claude.ai](http://claude.ai)/chats
        - [Gerwin.io](http://Gerwin.io)
        - Плагин Transcribe & Summary
        - [ideogram.ai](http://ideogram.ai)
        - [deepl.com](http://deepl.com)
        - [Notion.so](http://Notion.so) - подписку можно купить через “Плати-маркет
    - ****************************Фильмы и Видео****************************
        
        [YouTube-канал Alex Skutarenko](https://www.youtube.com/c/AlexSkutarenko/featured) ********************************************************************************************************(Андрей Володин советует)
        
        [YouTube-канал ИПУ РАН](https://clck.ru/32Rxfp) (Иван Козицын советует)
        
        [YouTube-канал Алексея Савватеева](https://www.youtube.com/c/%D0%9C%D0%B0%D1%82%D0%BA%D1%83%D0%BB%D1%8C%D1%82%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82)  (Фуад Алескеров советует)
        
        [Youtube-канал Душкин объяснит](https://www.youtube.com/@dushkin_will_explain) (Юрий Солодовников советует)
        
        Фильм “Заплати другому” (Андрей Володин советует)
        
        Сериал “Темные начала” (Анастасия Топчинина советует)
        
        [Сериалы и фильмы про айтишников от Яндекса](https://academy.yandex.ru/journal/7-serialov-pro-ajtishnikov)
        
    
    [**Плагин Quokka**](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3c5X242ci0tSnF4UC1QdXVYU2N0WTVYeUFNd3xBQ3Jtc0trQWF3RkNPNF9mNHRHOUJCYVFQTW04TWZTSHhwblNWbjEtNTI5ZC1BcHJEOWZiUktBN3lObTlFRm5Zc2x4SmUyZ3pKYWpVaHF5Unl0bXdtdVFPYnhqT0ZXNFZEQWxObHlYbURDMFVHTnR4Y0dROXJaYw&q=https%3A%2F%2Fquokkajs.com%2F&v=Kg08L-GJeaw)
    
    **[Рейтинг языков программирования](https://www.tiobe.com/tiobe-index/)**
    
    [**Рабочая среда для Python**](https://www.onlinegdb.com/online_python_compiler)
    
    [**Редактор блок-схем](https://programforyou.ru/block-diagram-redactor); [Редактор блок-схем 2](https://app.diagrams.net/)**
    
    [**Телеграм канал Разработчик для студентов направления ИТ**](https://t.me/gb_developer_news)
    
    **• [Научная работа Ларюшина Ивана Дмитриевича](https://gbcdn.mrgcdn.ru/uploads/asset/4312535/attachment/4c5bd028e41ca77039d2afb9f9609a30.pdf)**
    
- ********************Упражнения********************
    - [Стрелка часов](https://secundomer.online/tajmery/strelochnye-chasy-onlajn)
        
        Хочу делать 2 минуты каждый день утром и вечером (перед работой)
        
    - Пальцы рук
        
        Хочу делать каждый день минимум 1 раз по 2 минуты (в идеале 2 раза в день)
        
    - https://www.codewars.com/ - решение задач
        
        **[Учимся программировать на codewars](https://www.youtube.com/watch?v=DLZ6IpxV6qU) (!!! Посмотреть !!!)**
        
    - https://leetcode.com/ - решение задач
    - [Головоломки](https://blockly.games/puzzle?lang=ru) (Даны на Семинаре 2. Решаем задачи с массивами)
        
        
    - [Программирование вечеринки](https://studio.code.org/s/dance-2019/lessons/1/levels/1) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Программирование Minecraft](https://studio.code.org/s/mc/lessons/1/levels/1) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Программирование маршрута и действий робота](https://online.piktomir.ru/) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Игра, где можно писать код](https://codecombat.com/) (Даны на Семинаре 2. Решаем задачи с массивами)
    - ******Git******
        
        [Интерактивный тренажер](https://learngitbranching.js.org/?locale=ru_RU) по Git
        
    - **********************************************************************************************************************************************************Читать код и ставить себя на место компьютера, прописывая (печатая) действия**********************************************************************************************************************************************************
- Последовательность действий
    - Список:
        1. Quizlet Касания
        2. 
    - **************Сегодня**************
        1. Упражнение                                            Пр+ЗР+
        2. Подпись               (1р / 10 движений)    
        3. Английский язык (3 минуты)                  
        4. Китайский язык   (3 минуты)                  
        5. Тайский язык (3 минуты)                        
        6. Урок в Notion      (7 минут)                    
        7. 200 шагов           (3 минуты)                  
        8. Чай, кофе, вэйп (1 минута)                    
        9. Домашнее задание. Блок-схема 1. Отработка навыка (10 минут) 
        10. Слова 1 - 25 Словосочетания (3 минуты)
        11. Quizlet Слова 26 - 50 (3 минуты)
        12. Слова 51 - 75 в Notion (2 минуты)
- ******************Житейские******************
    - ************************************************************************Примеры действий с разными видами сложностей. Раскладывать на составляющие************************************************************************
    (1. Необходимые, 2. Необязательные, 3. Случайные).

### Эмоции, переживания, записи

- **Хронометраж**
    - 3 страницы транскриба прочесть вдумчиво - **04:00**
    - Сделать данную запись в Notion, через разные языки, переключение, формирование мысли и всякое такое, всего лишь одна строчка, однако заняла - **00:55**
    - 14 минут видеоурока (для примера *урок 6. История изменений. Git. Базовый курс*) обработка в Notion - 41**:00 +** Обработка на практике **********30:00**********
    - 25 слов в словарь Notion - **08:30**
    - Шаблон - **:**
- **Чему я научился? И научился ли вообще???**
    1. Научился в Notion применять коды Markdown, что серьезно облегчает жизнь
    2. **Научился с клавиатуры переключаться между окнами, чтобы не терять время на мышку.**
    **Alt + Tab** - переключение на второе окно, нажимаем пробел или стрелочками, куда необходимо сдвинуть видео и затем быстро повторяем сочетание, чтобы вернуться к записям в Notion. Классная мелочь. Экономит вроде как доли секунды, однако ввиду крайне частого применения, думаю, сэкономит серьезное время + устраняет лишние телодвижения.
- **14.09.2023**
    
    Git. Склеивание коммитов - нихера не понял [про это](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
    
- **29.08.2023**
    
    ******************************Начался модуль “Введение в контроль версий”.****************************** Первый урок - Знакомство с контролем версий. И вот Преподаватель говорит, мол, вы уже наверное слышали за разные такие вещи. Но НЕТ!!! Я впервые это слышу. Никогда ранее о таком не слыхал. Надеюсь это не такая сложная штука, как линейное уравнение по математике, надо которым я бьюсь уже 4й день
    
    ****************************************************************************************************************Узнал про существование такой программы, как Git,**************************************************************************************************************** которую буду устанавливать на комп.
    
    **********************************************Введение в математику.**********************************************
    Этот ипаный алгоритм решения линейного уравнения. Я нихера не понимаю, как он устроен. Я почти уже зазубрил его, но не могу полноценно применять. Это какой-то слом башки. Чувствую себя дураком. Дети из 4 математического класса это умеют, а я нет!
    
- **28.08.2023**
    
    Скачал и установил Puzzle English. Попробовал. Тяжело, но блин!!! Отвал сцуко башки!!!
    
- ********************25.08.2023********************
    
    Скачал кучу книг по программированию на основе ролика “Книги, которые сделают из тебя хакера”.
    Когда их еще успевать читать? Ваще без понятия!!!
    
- **20.08.2023**
    
    На семинаре “Введение в программирование” скачал 5 ссылок на программирование, кодирование, головоломки и всякие полезные штучки
    
- **16.08.2023**
    
    Переформатировал всю Доску под новую недельную “расстановку” по типу Миро
    
- **10.08.2023**
    
    Узнал про Quizlet и карточки смыслов. 
    А также про Миро. Блин, сколько ж всего, чего я не знаю и даже не подозревал о существовании!
    
- **09.08.2023**
    
    Полностью перешел на ************Notion************. Вот уж поистине классная программа. Гораздо функциональнее Гугл Докс. 
    
- **08.08.2023**
    
    Узнал про упражнение “Пальцы рук”
    
- **06.08.2023**
    
    Начал Модуль “Умение учиться”
    Узнал про упражнение “Стрелка часов”
    
- **02.08.2023**
    
    Начал обучение на ГБ. Дух захватывает. Ничего не понятно, но оооочень интересно!!!
    

## Обучение

- **Программы обучения**
    - Программа обучения “Разработчик”. Специализация “Программирование”
        - Основной блок - 2 месяца
            1. Введение в программирование
            2. Введение в контроль версий + практикум
            3. Знакомство с языками программирования + практикум
            4. Знакомство с базами данных
            5. Итоги блока. Выбор специализации
        - Курсы по выбору
            1. Математика и информатика для программистов
            2. База данных в музее
        - Дисциплины по специализации - 7 месяцев
            1. Знакомство с языком Python
            2. Java: знакомство и как пользоваться базовым API
            3. Объектно-ориентированное программирование (ООП)
            4. Промежуточная аттестация
            5. Исключения в программировании и их обработка
            6. Операционные системы и виртуализация (Linux)
            7. Контейнеризация
            8. Базы данных и SQL
            9. Итоговая аттестация
        - Курсы по выбору
            1. Алгоритмы и структуры данных
            2. Контроль версий углубленно (Git)
            3. Компьютерные сети
            4. Гибкие методологии (Agile, SCRUM, Канбан и другие)
            5. Веб верстка html / css
            6. Вводный курс Big Data
            7. Искусственный интеллект
            8. Кибернетика умных устройств
            9. Data Science передовые технологии
            10. Основы информационной безопасности
            11. Парадигмы программирования и языки парадигм
        - Технологические специализации - 3 месяца
            - Веб-разработка на Java (Backend)
            - Frontend разработка на Angular.JS
            - Frontend разработка на Vue.JS
            - Веб-разработка на PHP Laravel
            - Веб-разработка на PHP Symphony
            - 

### Календарь учёбы /прописываем по понедельник включительно/

- **Текущее состояние (на сегодняшний день. Обновлять утром!) 14.09.2023**
    - [ ]  Составить данный список дел
    - [ ]  Секундная [стрелка](https://secundomer.online/tajmery/strelochnye-chasy-onlajn)
    - [ ]  Пальцы рук
    - [ ]  [Как изучать программирование](https://www.youtube.com/watch?v=Cser9bunQ7Q) - 31 мин
    - [ ]  [Путь программиста, который почти никто не вывозит](https://www.youtube.com/watch?v=BZ2Ee3HgIVY&t=486s) - 14 мин
    - [ ]  [Путь программиста с полного нуля до Дзен за 24 шага](https://www.youtube.com/watch?v=uOa7XtkK1vQ) - 25 мин Конспект и раскладка
    - [ ]  Как работать с битами. [Основы программирования](https://www.youtube.com/watch?v=qewavPO6jcA&t=1327s) - 25 мин
    - ************************************Самообучение. Чтение, Просмотр и Анализ************************************
        - **************English**************
            - [ ]  Puzzle English. Урок
            - [ ]  ********.0,9% - 39,640 слов******** Puzzle English. Добавление новых слов 280
            - [ ]  ********.0,7% - 39,720 слов******** Puzzle English. Тренировка новых слов 280
            - [ ]  Puzzle English. Тренировка созревших слов 360
            - [ ]  Puzzle English. Добавить незнакомые из А2 - T, U, V, W, X, Y, Z
            - [ ]  1,200  Из списка [“5,000 слов”](https://britlex.ru/5000_7000_English_words.pdf) добавить 15 слов. К 01.10.2024 будут добавлены все
            - [ ]  ******************.054 стр.****************** B. Shwartz “High Performance” 826 стр. **********************************Закладка 17 стр. (1 стр. в день)**********************************
        - **Python**
            - **Кирилл Панфилов. [Youtube - канал](https://www.youtube.com/channel/UCCC7ihYh4SNQZj26adlk2Kg)**
                - **Основы Python**
                    - [x]  Основы Python 1.1: [Представление данных, встроенные типы](https://www.youtube.com/watch?v=V9u3siTiNh0&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=1&pp=iAQB) - 18 мин 01.12.2023
                    - [x]  Основы Python 1.2: [Integer и Float](https://www.youtube.com/watch?v=tKArJcXrLHg&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=2&pp=iAQB) - 24 мин - 02.12.2023
                    - [x]  Основы Python 1.3: [String (Строки) часть 1](https://www.youtube.com/watch?v=yydEivzoam4&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=3&pp=iAQB) - 24 мин - 03.12.2023
                    - [x]  Основы Python 1.4: [String (Методы строк) часть 2](https://www.youtube.com/watch?v=3QenJXw34ww&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=4&pp=iAQB) - 27 мин - 04.12.2023
                    - [x]  Основы Python 1.5: [Boolean (логический тип данных, True и False)](https://www.youtube.com/watch?v=31_i9O81sKs&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=6&pp=iAQB) - 25 мин  - 05.12.2023
                    - [x]  Основы Python 2.1: [Оператор ветвления If (elif, else)](https://www.youtube.com/watch?v=97FqvEouqao&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=5) - 30 мин - 06.12.2023
                    - [x]  Основы Python 3.1: [Оператор цикла While](https://www.youtube.com/watch?v=HX0VGnsUMqE&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=7&pp=iAQB) - 28 мин - 07.12.2023
                    - [x]  Основы Python 3.2: [Оператор цикла For](https://www.youtube.com/watch?v=qEFPDTcD3aw&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=8&pp=iAQB) - 21 мин - 08.12.2023
                    - [x]  Основы Python 4.1: [Коллекции. Общее](https://www.youtube.com/watch?v=UdiOOsS4xSI&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=9&pp=iAQB) - 28 мин - 09.12.2023
                    - [ ]  Основы Python 4.2: [Списки (List). Общее](https://www.youtube.com/watch?v=FTb3ymAwqf0&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=10&pp=iAQB) - 23 мин - 10.12.2023
                    - [ ]  Основы Python 4.3: [Списки (List). Методы](https://www.youtube.com/watch?v=KESDflLpdT8&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=11&pp=iAQB) - 29 мин - 11.12.2023
                    - [ ]  Основы Python 4.4: [Кортежи (Tuple)](https://www.youtube.com/watch?v=Ni0bWILwvao&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=12&pp=iAQB) - 20 мин - 12.12.2023
                    - [ ]  Основы Python 4.5: [Множества (Set)](https://www.youtube.com/watch?v=4qr5oO8etXE&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=13&pp=iAQB) - 42 мин - 13.12.2023
                    - [ ]  Основы Python 4.6: [Словари (Dict)](https://www.youtube.com/watch?v=0RIusQhJ8hw&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=14&pp=iAQB) - 38 мин - 14.12.2023
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                - **Блоки кода**
                    - 001
                        
                        ```python
                        a = 4
                        b = a
                        c = 3
                        
                        print(type(a))
                        print(type(b))
                        print(type(c))
                        print(id(a))
                        print(id(b))
                        print(id(c))
                        
                        c += 1
                        
                        print(id(c))
                        print(c is a is b)
                        ```
                        
                    - 002
                        
                        ```python
                        a = 5
                        print(type(a))
                        
                        b = 5.67
                        print(type(b))
                        
                        a + b
                        a - b
                        a * b
                        a / b
                        a // b
                        a % b
                        a ** b
                        a < b
                        a <= b
                        a > b
                        a >= b
                        a == b
                        a != b
                        
                        a += b
                        a += 5
                        b += 2
                        a /= 2
                        a %= 2
                        a //= 2
                        
                        print(a)
                        print(b)
                        print(int(a))
                        print(int(b))
                        
                        import math
                        number = 1.3
                        
                        print(number)
                        print(round(number))
                        print(math.floor(number))
                        print(math.ceil(number))
                        ```
                        
                    - 003
                        
                        ```python
                        print((0.1 + 0.1 + 0.1 - 0.3) == 0)
                        print((1 + 1 + 1 - 3) == 0)
                        print(0.1 + 0.1 + 0.1 - 0.3)
                        
                        print(0.56)
                        print(0.56 * 100)
                        
                        from decimal import Decimal
                        
                        number = Decimal("0.56")
                        print(number * 10)
                        ```
                        
                    - 004
                        
                        ```python
                        some_one = 'word'
                        some_two = 'word'
                        some_three = 'wo\"rd'
                        print(some_three)
                        some_four = 'wo\'r\'d'
                        print(some_four)
                        print(type(some_two))
                        
                        string = 'word' + ' one more word'
                        print(string[3])
                        print(string[5:8])
                        print(id(string))
                        print(id(string[5:8]))
                        
                        string_slice = string[8:]
                        print(string_slice)
                        
                        string_slice2 = string[:-5]
                        print(string_slice2)
                        
                        string_slice3 = string[::2]
                        print(string_slice3)
                        
                        string_slice4 = string[::-1]
                        print(string_slice4)
                        ```
                        
                    - 005
                        
                        ```python
                        string = 'Грязный питон - охуенный питон - еще одна з'
                        
                        print(string.find('з'))  # 3
                        print(string.find('питон'))  # 8
                        print(string.split(' '))  # ['Грязный', 'питон', '-', 'охуенный', 'питон', '-', 'еще', 'одна', 'з']
                        print(string.split('пи'))  # ['Грязный ', 'тон - охуенный ', 'тон - еще одна з']
                        print(string.split('-'))  # ['Грязный питон ', ' охуенный питон ', ' еще одна з']
                        print(string.split())  # ['Грязный', 'питон', '-', 'охуенный', 'питон', '-', 'еще', 'одна', 'з']
                        
                        print(string.replace('п', 'П'))  # Грязный Питон - охуенный Питон - еще одна з
                        print(string.replace(' ', '|'))  # Грязный|питон|-|охуенный|питон|-|еще|одна|з
                        print(string.replace(' ', '|', 3))  # Грязный|питон|-|охуенный питон - еще одна з
                        
                        number = '67' + '1'
                        print(number.isdigit())  # True
                        print(string.istitle())  # False
                        
                        print(string.startswith('Гр'))
                        
                        print(string.count('п'))
                        print(string.count('о'))
                        
                        string2 = "- **************English**************- [ ]  Puzzle English. Урок- [ ]  Puzzle English. Тренировка новых слов 140- [ ]  Puzzle English. Тренировка созревших слов 140- [ ]  Puzzle English. Добавить незнакомые из А2 - T, U, V, W, X, Y, Z- [ ]  Английский язык. [Словарь Notion](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). 1,650 - 2,625 слов- [ ]  990  Из списка [“5,000 слов”](https://britlex.ru/5000_7000_English_words.pdf) добавить 15 слов. К 01.10.2024 будут добавлены все- [ ]  ******************.040 стр.****************** B. Shwartz “High Performance” 826 стр. **********************************Закладка 17 стр. (1 стр. в день)**********************************"
                        print(string2.count('*'))
                        print(len(string2))
                        print(string2.replace('*', ''))
                        
                        print(string2.strip())
                        ```
                        
                    - 006
                        
                        ```python
                        # try:
                        #     number = int(input('Enterthe number: '))
                        # except:
                        #     print('You entered not a number!')
                        
                        # number = input('Enter the number: ')
                        # if 0 < int(number) < 10 and number.isdigit():  # letters to int -> Error
                        #     print('You entered the number from 1 to 10')
                        
                        # number = input('Enter the number: ')
                        # if number.isdigit() and - 0 < int(number) < 10:  # lazy if - without the error
                        #     print('You entered the number from 1 to 10')
                        
                        number = input('Enter the number: ')
                        if number.isdigit() and int(number) != 0:
                            print(100 / int(number))
                        ```
                        
                    - 007
                        
                        ```python
                        number = int(input('Enter the number: '))
                        number = 'even' if number % 2 == 0 else 'odd'
                        print(number)
                        ```
                        
                    - 008
                        
                        ```python
                        number = 10
                        print(number % 2 == 0)
                        print(100 + (number % 2 == 0))
                        
                        print('not' * (number % 2 != 0) + 'even')
                        
                        print(bool(''))
                        print(bool(0))
                        print(bool([]))
                        print(bool({}))
                        print(bool(tuple()))
                        print(bool(None))
                        print(bool(set()))
                        print(bool(number))
                        
                        if number:
                            print(100 / number)
                        ```
                        
                    - 009
                        
                        ```python
                        m = 0
                        # while True:
                        #     n += 1
                        #     print('Huilow')
                        #     if n > 10:
                        #         print('Zaipalsa')
                        #         break
                        
                        # while m <= 10:
                        #     n = 0
                        #     while n <= 10:
                        #         n += 1
                        #         if n % 2:
                        #             continue
                        #         if n == m:
                        #             print('n == m')
                        #             break
                        #         else:
                        #             print('Huilow', n, m)
                        #     m += 1
                        # print('Zaipalsa')
                        
                        flag = True
                        while m <= 10 and flag:
                            n = 0
                            while n <= 10 and flag:
                                n += 1
                                if n % 2:
                                    continue
                                if n == m:
                                    print('n == m')
                                    flag = False
                                else:
                                    print('Huilow', n, m)
                            m += 1
                        print('Zaipalsa')
                        ```
                        
                    - 010
                        
                        ```python
                        lst = ['a', 'b', 'c', 'd']
                        for i in range(len(lst)):
                            if lst[i] == 'c':
                                lst[i] = 'C'
                        
                        print(lst)
                        
                        for i in range(len(lst)):
                            if lst[i] == 'd':
                                lst.remove('d')
                        
                        print(lst)
                        
                        b = [2, '5', True, 8.908, '@sutula', False]
                        for item in b:
                            print(item)
                        ```
                        
                    - 011
                        
                        ```python
                        from copy import deepcopy
                        
                        a = [1, 2, [3, 4]]
                        b = deepcopy(a)
                        print(a)
                        print(b)
                        
                        a.append(4)
                        print(a == b)
                        print(a is b)
                        print(a)
                        print(b)
                        a[2][1] = 'AAAA'
                        b.append('Я сильная и независимая')
                        print(a)
                        print(b)
                        print(id(a[0]))
                        print(id(b[0]))
                        
                        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                        print(matrix)
                        ```
                        
                    
                    ```python
                    
                    ```
                    
                    ```python
                    
                    ```
                    
            
            - [ ]  **.64%** Васильев А. “Python на примерах”, 430 стр. с 17.11.23 **Закладка 175 стр. (2% в день)**
            
            - [ ]  **.26% [Основы Python](https://education.yandex.ru/handbook/python) - Хендбук от АЯ, 20 пар, 260 задач. Закладка 2 пар. (1% в день)**
            - [ ]  **********************************Задачи - 42 (3 задачи в день)**********************************
            - [x]  Решения Задач. Видео 1:32:40
            
            - [ ]  ********************************************************************************************************************.49% -******************************************************************************************************************** [Python - Полный курс от Богдана, 15:40 с 16.11.23](https://www.youtube.com/watch?v=cfJrtx-k96U)********************************************************************************************************************. Закладка 01:24********************************************************************************************************************
            - [ ]  Python. [Roadmap](https://www.youtube.com/watch?v=i6n9-_oh_2E&t=520s) - 27 мин
        - **C#**
            - [ ]  **********.99%********** [Дрейер Мартин. С# для школьников](https://drive.google.com/file/d/1QgjLk2g9rG87jC5SoVS-SXF2EaKn1CRA/view?usp=drive_link). 128 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). ****************************Закладка 102 стр.****************************
            - [ ]  **.77% - 377 стр.** «[Программирование на C# для начинающих. Часть 1](https://drive.google.com/file/d/1iiEpF-ySsozaTzlZAycNwsYhaqLyp7f3/view?usp=drive_link)», Васильев А. 586 стр. ****************Закладка 302 стр. (1% в день)****************
            - [ ]  **.24,0%** «[C# Полное руководство](https://drive.google.com/file/d/1q1gFG89mbweMsNxQ_fjzOtG91gdc_JCp/view?usp=drive_link)», Шилдт Г. 1,056 стр. ****************Закладка 209 стр. (0,3% в день)****************
            - [ ]  **.24,0%** «[Разработка обслуживаемых программ на языке C#](https://drive.google.com/file/d/1OSyEwvwIodTLNlq6qOvXJApK_NlX3bUA/view?usp=drive_link)», Джуст В. 194 стр. ****************Закладка 39 стр.****************
            - [ ]  ******.11,7%** Троелсен Э. [“Язык программирования C#7](https://drive.google.com/file/d/1N7aTGyQwLVQP0ykN7x2aWkKEsLFy14m3/view?usp=drive_link)”. 1,330 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). **Закладка 64 стр**
            - [ ]  ******.11,7%** [Джеффри Рихтер. Программирование C#](https://drive.google.com/file/d/1pSCrd1lKnX2XOzdG8WsqQpUKZo69dD_U/view). 896 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21) **Закладка 50 стр.**
            - [ ]  **.24,0%** “[Unity и C#. Гейдев от идеи до реализации](https://drive.google.com/file/d/1A07H04R3g7kII1-k7wL34yY3hbPuMSCh/view?usp=drive_link)” 930 стр. ****************Закладка 65 стр. (0,3% в день)****************
            - [ ]  ******.16,5%****** “C# 7.0 Полное описание языка” Д. Албахари 1,026 стр.  **************************Закладка 31 стр. (0,3% в день)**************************
            
            - [ ]  **************.28% -************** [Курс C# с нуля. Степан Береговой](https://www.youtube.com/watch?v=hG1fTusZ_Lk&list=PL9dWBtRq5J0KoaUcSmEaklxKTwGKAeU68) - 25 уроков с 12.11.23. **********************************************************Закладка - (2 урока в неделю)**********************************************************
            
            - [ ]  **.77% - 7:48 мин** Курс 9-часовой [“Весь C# с нуля до профи”](https://www.youtube.com/watch?v=w8rRhAup4kg&t) с 01.10.2023 **Закладка (1% в день) - 5:42**
            
            - [ ]  **************.48% - 510 мин************** [Курс C# от новичка к профессионалу](https://www.youtube.com/watch?v=KyFWqbRfWIA&list=PLQOaTSbfxUtD6kMmAYc8Fooqya3pjLs1N&pp=iAQB) #SimpleCode 104 ур. - 1,500 мин **(1% в день). Закладка -**
        - **Git**
            - [ ]  **.75%** [Б. Штрауб “Git для профессионального программиста](https://gbcdn.mrgcdn.ru/uploads/asset/4245110/attachment/d4eb8c232f8f2bdf4e42ba7cb49e0c50.pdf) 496 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). **Закладка 236 стр.**
        - **Алгоритмы**
            
            
            - [ ]  **.32% “[Основы алгоритмов](https://academy.yandex.ru/handbook/algorithms)” - Хендбук от АЯ, 41 пар. Закладка 3 пар. (1% в день)**
            - [ ]  **.17%** “[Учебник по машинному обучению](https://academy.yandex.ru/handbook/ml)” **Хендбук от АЯ,** 35 пар. **Закладка  (1% в день)**
            - [ ]  **.12,2%** “[Анализ данных в социальных науках](https://academy.yandex.ru/handbook/data-analysis)” **Хендбук от АЯ,** 42 пар. **Закладка 3 пар.  (0,3% в день)**
            - [ ]  Ускорь свой код в миллион раз. [Алгоритмы](https://www.youtube.com/watch?v=cyIw3NKfdGw&t=1177s) - 33 мин
        - **Математика**
            - [ ]  ************.42%************ “Удовольствие от Х” С. Строгац, 293 стр. ****************************************Закладка 54 стр. (1% в день)****************************************
            - [ ]  ********.37%******** Уилкс Дж. “Математика в огне. Нескучный учебник”, 514 стр. **********************Закладка 30% (1% в день)**********************
            - [ ]  ********.11,1%******** Диксит А. “Теория игр. Искусство стратегического мышления”, 506 стр. ************************************************************Закладка 14 стр. (0,3% в день)************************************************************
        - **Общее развитие**
            - [ ]  **********.60%********** П. Палагин “Скорочтение на практике”, 290 стр. ************************************************Закладка 64% (1% в день)************************************************
            - [x]  **.50,0%** Деан С. “Сознание и мозг. Как мозг кодирует мысли” 417 стр.. А[нализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). ****************Закладка стр. 251  (0,5% в день)****************
            - [ ]  **********.24,9%********** “Гении и аутсайдеры”. М. Гладуэлл. ****************Закладка 54% (0,3% в день)****************
            - [ ]  ******.29,7%****** “Как устроена экономика” Ха-Джун Чанг ****************Закладка 19% (0,3% в день)****************
        - **Художественная литература**
            - [x]  ******.02,4%****** “Темный лес” Лю Цысинь, 651 стр. 10.12.23 -  ****************(0,3% в день)****************
        - [ ]  Поиск книг Джеймса Чамберса
        - [ ]  Поиск книг Дэвида Пэкетта
        - [ ]  Поиск книг Саймона Тиммса
    - **************************Рутинные Ежедневные**************************
        - [x]  Подпись 10 раз. С 16.10.2022 по 22.09.2026
        - [ ]  Вакуум 210 раз
        - [ ]  Прыжки, 100 секунд
        - [ ]  Зарядка
    - БУФЕР
        - [x]  ******.08,5% “Сердце тьмы” Д. Конрад,****** 448 стр. ****************************************************************Закончено 22.11.23 (0,3% в день)****************************************************************
        - [x]  ******.24,3%****** “Русская модель управления” А. Прохоров, 496 стр. ****************Закончено 21.11.23 (0,3% в день)****************
        - [x]  **.25,8%** “Думай медленно, решай быстро” Д. Канеман, 710 стр. **Закончена 20.11.23 (0,3% в день)**
        - [x]  ********.10,5%******** Островский Н. [“Как закалялась сталь”](https://www.litres.ru/book/nikolay-ostrovskiy/kak-zakalyalas-stal-14128044/), 420 стр. **********************(0,3% в день с 13.11.23)**********************
        - [x]  ******.30,3%****** “Степной волк” Г. Гессе, 288 стр. ****************Закладка 33% (0,3% в день)****************
        - [x]  **************.93% - 150 мин************** Вебинар от ГБ: [Начни зарабатывать на нейросетях](https://www.youtube.com/watch?v=0vtNWki52Bk&t=3093s). **********************Закладка - 06:02 из********************** 06:02 [анализ, конспект](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
        - [x]  **.77%** НейроКазань. Конференция. Анализ. ****************************************************************Закладка (1% в день - 5 мин) - 08:07 из 08:07****************************************************************
        - [x]  ******.84%****** “Код. Тайный язык информатики” Ч. Петцольд, 445 стр.
        - [x]  **************.22,4%************** “Литература и революция” Л. Троцкий, 510 стр. 26.08 - 23.11.23 ****************(0,3% в день)****************
        - [x]  **********.12,9%********** Конрад Дж. “Сердце тьмы”, 284 стр. ************************************************************Закладка 03 стр. (0,3% в день)************************************************************
        - [x]  ******.84%****** “Занимательная экономика” А. Савватеев, 352 стр. 25.11.23
        - [x]  ******.26,1%****** “Фауст” И. Гете, 768 стр. ****************(0,3% в день)****************
        - [x]  ******.46,0%****** “Тонкое искусство пофигизма” М. Мэнсон, 192 стр.  ****************(0,5% в день)****************
        - [x]  **.76%** Албахари Б. “[C# 7.0 Карманный справочник](https://drive.google.com/file/d/1x7x7Pa9MfcnDvQgVetGiy4JX7fx_2Dy8/view?usp=drive_link)” 174 стр. ****************с 06.09 по 28.11.23 !!! (1% в день)****************
        - [x]  ******.26,4%****** “Задача трех тел” Лю Цысинь, 440 стр. ****************(0,3% в день)****************
        - [x]  ******.06,3%****** “Война и мир” Л. Толстой, 1,700 стр.  **************************(0,3% в день)**************************
        - [x]  ************.24,6%************ “Кибернетика и общество”. Н. Винер, 288 стр. ****************(0,3% в день)****************
        - [x]  ******.27,0%****** “Гроза в Безначалье” Г. Олди, 450 стр.  02.12.2023 ****************(0,3% в день)****************
        - [x]  ******.04,2%****** “Человек - непослушное дитя биосферы” Дольник, 352 стр.  В.Р. 07.12.2023 ****************(0,3% в день)****************
        - [x]  ******.04,2%****** “Преступление и Наказание” Ф.М. Достоевский , 730 стр.  ****************(0,3% в день)****************
        - [x]  ******.25,8%****** “Глубина” С. Лукъяненко, 850 стр. ****************Закладка 39% (0,3% в день)****************
        - [x]  ******.14%****** “На пенсию в 35 лет” Бабайкин, 180 стр, 09.12.2023 ****************(1% в день)****************
        - [x]  ******.14%****** “Фак ю мани” Бабайкин, 210 стр 10.12.2023 ****************(1% в день)****************
    - **********************СДЕЛАНО !!!**********************
        
        
        - [x]  **************************.100%************************** [Как стать программистом Middle+ уровня](https://www.youtube.com/watch?v=fhYd20oLYlE&list=WL&index=1&pp=gAQBiAQB) с 12.11.23  - 127 мин  ******************(25% в неделю)******************
        - [x]  **.100%**. [Бхаргава. “Грокаем алгоритмы”](https://drive.google.com/file/d/1xx40h84UYIWurnwHUnd7sVY_OKWDlHDp/view?usp=drive_link). 290 стр. [анализ.](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
        - [x]  **********.100%**********  Литвак Н. [Математика для безнадежных гуманитариев](https://subscription.litres.ru/static/or3/view/or.html?art_type=4&bname=%25D0%259C%25D0%25B0%25D1%2582%25D0%25B5%25D0%25BC%25D0%25B0%25D1%2582%25D0%25B8%25D0%25BA%25D0%25B0%2520%25D0%25B4%25D0%25BB%25D1%258F%2520%25D0%25B1%25D0%25B5%25D0%25B7%25D0%25BD%25D0%25B0%25D0%25B4%25D0%25B5%25D0%25B6%25D0%25BD%25D1%258B%25D1%2585%2520%25D0%25B3%25D1%2583%25D0%25BC%25D0%25B0%25D0%25BD%25D0%25B8%25D1%2582%25D0%25B0%25D1%2580%25D0%25B8%25D0%25B5%25D0%25B2.%2520%25D0%2594%25D0%25BB%25D1%258F%2520%25D1%2582%25D0%25B5%25D1%2585%252C%2520%25D0%25BA%25D1%2582%25D0%25BE%2520%25D1%2583%25D1%2587%25D0%25B8%25D0%25BB%2520%25D1%258F%25D0%25B7%25D1%258B%25D0%25BA%25D0%25B8%252C%2520%25D0%25BB%25D0%25B8%25D1%2582%25D0%25B5%25D1%2580%25D0%25B0%25D1%2582%25D1%2583%25D1%2580%25D1%2583%2520%25D0%25B8%2520%25D0%25BF%25D1%2580%25D0%25BE%25D1%2587%25D1%2583%25D1%258E%2520%25D0%25BB%25D0%25B8%25D1%2580%25D0%25B8%25D0%25BA%25D1%2583&art=40600183&user=315004159&uuid=8bbc9843-2e12-11e9-be98-0cc47a5f3f85&uilang=ru&trial=1). 270 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21).
        - [x]  **.100%** Боулер Д “[Математическое мышление](https://www.litres.ru/static/or4/view/or.html?baseurl=/download_book_subscr/44379662/52692344&art=44379662&user=315004159&uilang=ru&catalit2&track_reading&subscription)”. 400 стр. анализ.
        - [x]  **.100%** [Кормен Т. “Алгоритмы. Вводный курс”](https://drive.google.com/file/d/1C5wEWj3IWNNQpHIHS4bNGZP40d7M5km2/view?usp=drive_link). 208 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21).
    - **********Видео**********
        - [ ]  Буткемп. [Продакт-менеджер](https://gb.ru/lessons/375308). Урок 2
        - [ ]  Буткемп. [Проджект-менеджер](https://gb.ru/lessons/375246). Урок 2
        - [ ]  Буткемп. [Аналитика](https://gb.ru/lessons/375096). Урок 2
        - [ ]  Буткемп. [Программирование](https://gb.ru/lessons/375186). Урок 1
        - [ ]  [Реферальная программа GeekBrains](https://gb.ru/chapters/33360). Урок 1
        - [ ]  [Стартовое обучение наставников](https://gb.ru/chapters/20328). Урок 1
        - [ ]  ****GeekSpeak_Разработчик.**** [Урок 5](https://gb.ru/lessons/256896) ********00 - 30 мин из 40 мин Ознакомиться
            - [ ]  Команда ИТ. [Урок 6](https://gb.ru/lessons/352778) 28.09.2023 [Урок 7](https://gb.ru/lessons/352779) 04.10.2023
            - [ ]  ********GeekSpeak_DigitalMaster&Geek.******** [Урок 15](https://gb.ru/lessons/299112) ********20.10.2023********
            - [ ]  Канал [Code Blog](https://www.youtube.com/playlist?list=PLIIXgDT0bKw6i4jQkHVgIrnsP-DcvBieq). CLR via C#. [Видео.](https://www.youtube.com/watch?v=m_nvUAXdbOY&list=PLIIXgDT0bKw6i4jQkHVgIrnsP-DcvBieq) Глава 2. Модель выполнения кода в среде CLR 15 - 30 мин
        - [x]  ****************CS50**************** [Лекция 4](https://www.youtube.com/watch?v=ej3EA451m2c)****************. Гарвард. 15**************** - 30 - 53 мин из 53 мин. Ознакомиться
    - ********************************************Факультативы и Касания********************************************
        - [ ]  Факультатив. [Самоучитель Git.](https://githowto.com/ru/creating_a_branch) Часть 31. [Раздел (чтоб не искать)](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
            - [ ]  Факультатив - Касание. [Упражнения по Git](https://learngitbranching.js.org/?locale=ru_RU).
            - [ ]  Факультатив - Касание. git-scm. Руководство. 1.1 Введение - [Ссылка](https://git-scm.com/book/ru/v2/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9)
            - [ ]  Факультатив - Касание. Atlas. Станьте гуру в Git. [Материал 1](https://www.atlassian.com/ru/git/tutorials/what-is-version-control) - Изучение и анализ
            - [ ]  Факультатив - Касание. [Git. Vimeo.](https://vimeo.com/showcase/5616060) Видео курс. Урок 1.1 из 72
        - [ ]  *Превентивно!* Знакомство с базами данных. [Лекция 1](https://gb.ru/lessons/370768)
            - [x]  [Транскриб](https://gbcdn.mrgcdn.ru/uploads/asset/4353003/attachment/fea2d5fc63798963884d43dd915a3988.pdf). Стр 13 - 14 из 14 Оформление и Анализ. **************************Закл - стр 14**************************
            - [ ]  [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3937498/attachment/f766e8412c307419774221800f2a3f00.pdf) 1. Стр 01 - 03 из 19. Анализ
            - [ ]  [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3589193/attachment/77636f965911bfa22e6273b81dc2da5f.pdf) 2. Стр 01 - 16 из 55
            - [ ]  [Видео](https://www.youtube.com/embed/3oE1o-MqgBg;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479) Лекции. 00:30 из 01:07
            - [x]  Ознакомиться с [Youtube каналом “Душкин объяснит”](https://www.youtube.com/@dushkin_will_explain)
    - [ ]  Знакомство с языками программирования. [Лекция 7](https://gb.ru/lessons/362976) Лекция. ****************************Закладка 09:11****************************
    - [ ]  Знакомство с языками программирования. [Семинар](https://gb.ru/lessons/362983) 7
    - [ ]  Знакомство с языками программирования. Семинар 7. **[Домашнее задание](https://gb.ru/lessons/362983/homework)**
        - [ ]  Задача 1
        - [ ]  Задача 2
        - [ ]  Задача 3
    - [ ]  Сходить на Тренировку
        - [x]  Заказать переходник
        - [x]  Заказать манго
        - [x]  Заказать чай, 3 кг
        - [x]  Заказать швабру самую крутую
    - [x]  Знакомство со специализациями. ******************************Домашняя работа******************************
- **Текущие приоритеты, хвосты, незавершенки, срочняк!!!**
    - Чат ********************************GPT !!! Что это?******************************** Как ИИ помогает решать задачи. Выяснить!!!

### Подготовка

### Модуль: Умение учиться. 06.08 - 16.08.2023

## ********************************Цели и Задачи КУРСА (очень ВАЖНО !)********************************

1. **Понять, как мозг запоминает информацию и создает Навыки**
2. **Научиться запоминать быстро и надолго**
3. **Правильно планировать учебу, как Проект, избегая ментальные ловушки**
4. **Изучить инструменты эффективного обучения, чтобы достигать Цели**

<aside>
☝ **********************************************************************************************************************Тренируемся создавать Чанки на темах и Итогах уроков курса**********************************************************************************************************************

</aside>

### 4 Темы

1. **Нейронауки и Обучение.** Как мозг воспринимает и обрабатывает новое
2. **Учеба как Проект.** Планирование, Задачи и контроль Прогресса
3. **Память, фрагментация и блоки смыслов.** Рабочая и долговременная Память. Блоки смыслов - чанкинг. Другие инструменты запоминания
4. **Прокрастинация и ментальные ловушки.** Как учиться быстро, не делая бесполезного

### 4 Касания нового

1. **Конспекты на листах**
2. **Облако знаний**
3. **Синопсис**
4. **Домашние задания**

### Результаты КУРСА

Вы научитесь:

1. **Планировать и управлять своей учебой**
2. **Выводить синопсис информации и формировать устойчивые блоки знаний**
3. **Правильно настраивать мозг на обучение и поддерживать энергию для учебы**
- **Урок 1. Вводный 06.08.2023**
    
    **********Умение учиться. Как эффективно приобретать новые знания и навыки**********
    
    - Преподаватель: ******************************Игорь Васильев-Распопов******************************
        - Учитель
        - Мыслитель
        - Исследователь жизни
        - Специалист по созданию образовательной среды
        - Методолог и методист
        - Руководитель проектов и продуктов
        
        Знакомимся ближе. Я - ваш Наставник и Советник, а не “спикер у доски”. 
        Учимся по методу Peer-2-Peer
        
        **********************Опыт и Навыки:**********************
        
        - Руководитель спецпроектов в Группе развития ГБ
        - Более 30 лет в бизнесе, обучении и управлении Проектами
        - Сферы: образование, спорт, путешествия, строительство, развитие детей
        - Живу в Италии. Работаю в Швейцарии, Австрии и онлайн по всему миру
        - Инструктор по яхтингу и айкидо
        - Говорю на английском и итальянском
        - Отец 3-х сыновей
        
        **************************************************Мои наука и исследования:**************************************************
        
        - Андрагогика и педагогика
        - Дизайн образовательной среды и программ обучения
        - Нейронауки в обучении
        - Образование, ориентированное на учащихся
        - Эмоциональный интеллект
        - Адаптивность и методы развития навыков
        - Прикладная философия для детей и взрослых
        - Благополучие и счастье
        - Работаю над новой философией эволюции в интеллектуальной лаборатории ПРИЗМА
        
        ****************************************************Адвокат жизни как Познания****************************************************
        
        - Московский Государственный Строительный Университет МГСУ (Москва, РФ)
        - Инженерная школа Джеймса Кларка Университета Мэриленда (США)
        - Университет Калифорнии (США)
        - Центр эмоционального интеллекта Йельского университета (США)
        - Институт управления проектами PMI (США)
        - Университет Эдинбурга (Шотландия). Факультет религии, философии и лингвистики
        - Международный тренинговый центр парусного мастерства IYT (Канада)
        - Школы айкидо и фехтования
        - Центр обеспечения личной безопасности и прикладных единоборств Ашита (Израиль)
        
        <aside>
        ☝ **************************************************************************************************************Учитель - это Наставник и Советник, а не спикер у доски**************************************************************************************************************
        
        </aside>
        
    - ************************************************Учиться - это Привилегия************************************************
        
        Учение - это жизненно важная привилегия. Зачем нам “за парту” в 21 веке?
        ******В Древней Греции в школу ходили только те, у кого были ВРЕМЯ и ДЕНЬГИ.
        Учеников приглашали в школу ПЕРСОНАЛЬНО !
        Образованный человек становился уважаемым гражданином.******
        Древняя Греция заложила основы современной науки и культуры.
        
        **************************************************Знания - это Достояние.************************************************** 
        Сила знаний много раз изменяла ход истории человечества
        
        **************************************************************************Советники ценились не менее рыцарей.**************************************************************************
        Знания помогали управлять и покорять страны и континенты.
        Писарям платили за количество букв
        
        ****************************************************************************************Умение учиться - это жизненно важный навык.****************************************************************************************
        В стремительном 21 веке без овладения новыми навыками и технологиями есть риск безвозвратно отстать от жизни и прогресса.
        
        ************************************************************************************************************************************Уметь познавать новое - навык современного лидера и профессионала************************************************************************************************************************************
        Мы живем во время информационной революции.
        Сейчас человечество имеет возможности, никогда ранее не существовавшие в истории.
        
    - **********************Как учимся?**********************
        - Теория трех касаний
        - Фрагментация знаний
        - Закрепление на практике
        
        ******************************************************************На каждом уроке новый слой знаний******************************************************************
        
        - ****************************************Спиральная модель -**************************************** на каждом слое более глубокое погружение в тему
        - ******3Д****** измерение каждого вопроса при рассмотрении с разных сторон
        - Каждая **************************************************************встреча с темой - это Касание,************************************************************** помогающее запоминать
        
        ******************Три категории осмысления итогов уроков******************
        
        - ************Знания************
        - ************Умения************
        - ******************Установки******************
        
        **************************Инструменты обучения**************************
        
        1. ************************Конспекты -************************ пишем от руки на отдельных листах (!) для стимулирования переноса
        2. ******************************Облако знаний****************************** в Ноушн или на Гугл Диске
        3. ******************Синопсис****************** по темам без подсматривания в материалы
        4. ******************************************Практические задания****************************************** без проверки, чтобы обеспечить касание новых знаний
        
        ******************************************Четыре касания нового******************************************
        
        1. ****************************************Конспекты на листах**************************************** включают все типы памяти и заставляют перенести данные в облако
        2. ********************************Облако знаний -******************************** это повторение и сохранение
        3. ******************Синопсис****************** активирует память и укрепляет понимание
        4. ****************Задания**************** закрепляют знания на практике
        
        ************Шаблон конспекта.************ Метод конспектирования Корнелла
        
        1. Возьмите отдельный лист бумаги А4
        2. Расположите его вертикально и разбейте на 3 части (1/3 от левого края - эта часть для основных мыслей и вопросов; и 1/3 от нижней части - это под Итоги; Основная часть для Заметок по теме урока)
        3. В заголовке напишите Тему урока. Дата. Лист 1”
    - **************************Итоги урока 1**************************
        
        ************Знания************
        
        - Зачем учиться в 21 веке
        - Теория 3-х касаний
        - Спиральная модель обучения
        
        ************Умения************
        
        - Составлять конспект по методу Корнелла
        
        ******************Установки******************
        
        - Умение учиться - это жизненно необходимый навык
- **Урок “Мозг - это супер-машина” 06.08.2023**
    
    ********************************************************************************************************************************************************************Мозг - это супер-машина. Он никогда не спит и работает в двух режимах.
    Память и все вокруг - это нейронные связи. Как действие побеждает прокрастинацию.********************************************************************************************************************************************************************
    
    - ****************************Сегодня на Уроке 1. План:****************************
        
        **********************************************************Тема №1. Нейронауки и Обучение**********************************************************
        
        - В чем уникальность мозга как органа и инструмента
        - Новые знания - это новые нейронные связи
        - Сфокусированный и рассеянный режимы работы мозга
        
        **************Тема №2. Учеба как Проект**************
        
        - Зачем нам перерывы
        - Почему учеба - это Проект?
        - Какие ресурсы нужны для обучения?
        
        **************************************************************Тема №3. Память и блоки смыслов**************************************************************
        
        - Память как процесс
        - Рабочая и долговременная память
        - Нейромеханика и ценность повторений
        
        **************************************************************************************************Тема №4. Прокрастинация и другие ловушки мышления**************************************************************************************************
        
        - Что такое прокрастинация и ее корни
        - Научная хитрость для избегания прокрастинации
        - Техника “Помодоро”
    - ******************************************************************************************************************************************************Тема №1: Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое?******************************************************************************************************************************************************
        - В чем уникальность мозга, как органа и инструмента?
        - Новые знания - это новые нейронные связи
        - Особенности и отличия сфокусированного и рассеянного режимов работы мозга
        
        ************************************************************Мозг - это система с самой высокой комплексностью известной человеку.************************************************************
        Научно-техническая революция и открытия нейронаук начала 2000-х изменили представление о том, как работает мозг
        
        ******************************************************************************Мозг человека - уникальный орган и инструмент******************************************************************************
        
        1. **********************************************************************************************************************************************Около 80 млрд нейронов и до 15 тысяч связей у каждого нейрона с другими**********************************************************************************************************************************************
        В мозге больше нейронных связей, чем известно звезд во Вселенной
        2. **********************************************************************************************************************Мозг в 10 раз мощнее, на единицу веса, чем любой орган тела**********************************************************************************************************************
        Занимая 2% от веса тела он потребляет до 20-30% всей энергии организма
        3. ******************************************************************************************************************Опыт для мозга - это буквально все, что с нами происходит******************************************************************************************************************
        Что мы видим, слышим, говорим, думаем, едим, где находимся, что делаем. В настоящем и прошлом.
        Опыт создает аффективную нишу.
        
        <aside>
        ☝ ******Способности человека мыслить, чувствовать и создавать образы компьютеры пока повторить не могут******
        
        </aside>
        
        > **************************************************************************************************************Мозг - это предиктивная машина прогнозирования мыслей, поведения и ощущений**************************************************************************************************************
        Буквально всю жизнь без остановки под влиянием аффективной ниши и опыта мозг выбирает самое подходящее следующее наше действие и поведение
        > 
        
        ****************************************************Мозг предсказывает и планирует постоянно****************************************************
        
        1. ****************************************24/7/365 дней в году****************************************
        буквально всю жизнь мозг собирает, анализирует все, что с нами происходит, прогнозирует и планирует наши мысли, ощущения и действия.
        2. ******************************************************************************Миф о “стимуле - отклике” опровергнут******************************************************************************
        Сетям мозга не нужны внешние воздействия или сигналы, чтобы включаться. Мы видим то, во что верим, а не наоборот.
        3. ****************************************************************************************************На прогнозы и выбор мозга влияет аффективная ниша****************************************************************************************************
        Изменение аффективной ниши - нашего стиля мышления и жизни - ведет к изменению работы мозга.
        
        <aside>
        ☝ **************************************************************Управлять мозгом и своим поведением можно через изменение аффективной ниши**************************************************************
        
        </aside>
        
        **************************************************************************************************Новые знания - это новые нейронные связи в мозге**************************************************************************************************
        Любая новая информация или действия приводят к физиологическим изменениям в структуре мозга
        
        ************************************************************Как мозг создает новое Знание?************************************************************
        
        1. ****************************Возникновение****************************
        Между нейронами через синапсы протекает ток, и возникает новая нейронная связь
        2. **********************Укрепление**********************
        Связь крепнет в процессе повторного использования, для этого требуется несколько касаний
        3. ****************************************Превращение в тракт****************************************
        Чем чаще используется связь, тем она прочнее, обрастает белковой массой и становится трактом - навыком и привычкой.
        
        <aside>
        ☝ ********************************************************************************************************************************************************Повторение и практика делают из нейронной связи тракт и сохраняют новые Знания********************************************************************************************************************************************************
        
        </aside>
        
        > ******************************************************************************************Мозг работает мощнее, когда мы “не думаем”******************************************************************************************
        Изобретение технологии fMRT позволило переосмыслить “рассеянный” режим работы мозга. Это - революция
        > 
        
        ************************************************Два режима работы мозга:************************************************
        
        1. **********************В фокусе -********************** привычный
        2. **************************Рассеянный -************************** вне сознания
        
        > **************************************************************Мозг работает всегда. Переход в рассеянный режим работы подключает больше зон мозга к работе.
        Мозг более активен, когда человек отдыхает**************************************************************
        Мы осознаем только часть работы мозга. Большой объем операций скрыт от сознания, но не менее эффективен.
        Подсознательные процессе в мозге влияют на мышление, память, эмоции
        > 
        
        <aside>
        ☝ ****************************************В фокусе мысли бьются в привычных рамках.
        В рассеянном режиме они движутся без барьеров.****************************************
        
        </aside>
        
        - **************************Итоги по Теме №1: Нейронауки и обучение**************************
            - ************Знания************
                - ************************************************************************************************************************************************************************Мозг - комплексный мощный инструмент. Он работает постоянно, как предиктивная машина************************************************************************************************************************************************************************
                - Все новое - это нейронные связи
                - Рассеянный режим мощнее фокусного
            - ************Умения************
                - Делать регулярные перерывы в любой деятельности без стресса и страха “потерять” время
            - ******************Установки******************
                - Управлять своей жизнью можно через изменение работы мозга
                - Перерывы - это не потеря времени, а переключение режимов работы мозга
        - ********************************Вопросы и Ответы********************************
            
            **************************************************************************Что значит “высокая комплексность?”**************************************************************************
            
            Это когда все элементы Системы связаны между собой.
            Пример и аналогия: система международных перевозок пассажиров, по которой вы можете добраться из любого места на Планете в любое другое. Все аэропорты, так или иначе связаны между собой. Система мозга имеет самую высокую, известную на сегодня человеку, комплексность.
            
            **********************************Не понятно, на основании чего мозг выбирает действия?**********************************
            
            В каждый момент времени мозг задает себе вопрос: “В прошлый раз в подобной ситуации, когда внутри организма были схожие ощущения, какое следующее действие я предпринял?
            Он опирается на опыт. Если происходит что-то новое, то опыт корректируется и включается в следующий предиктивный прогноз.
            
            ****************************************************************************************************А если не повторять что-то, то оно точно пропадет?****************************************************************************************************
            
            Навсегда может и не сотрется, но обратиться к такому навыку или знанию будет точно сложнее. Даже если вы хорошо знали иностранный язык, но 5 лет его не использовали, для реактивации потребуются значительные усилия и время.
            Чем интенсивнее вы запоминали и дольше практиковали в начале, чем лучше “прописали в мозг” новое, тем легче будет им воспользоваться в будущем.
            
- **Урок 2. “Чанк - меч самурая знаний…” 08.08.2023**
    
    **Сегодня на Уроке 2:**
    
    Техника Йяйдо. “Молниеносная первая атака”
    
    ************************************************Техника Йяйдо - это ЧАНК************************************************
    
    - **Что получите сегодня на Уроке 2. План**
        - **Знания**
            - Сон очищает мозг, помогает учиться и решать Задачи
            - Что такое “чанк”, и в чем его ценность?
            - Что такое иллюзия знания и избыток обучения
        - **Умения**
            - Ставить Цели по СМАРТ и декомпозировать
            - Определять “чанки”
            - Эффективно работать в группе
            - Тренировать внимание и память
        - **Установки**
            - Знания устойчивы, когда соединены смыслом
            - Важно создавать свои мысли
            - Нужно учиться вместе с сокурсниками
            - Сон - важный процесс в учебе
    - **Тема №1: Нейронауки и обучение. Как мозг воспринимает и обрабатывает новое?**
        - Важность сна для обучения.
        
        **Во сне мозг очищает и активно работает!**
        
        Сон - это важный процесс обучения
        
        ******************************************************Что делает ваш мозг во сне?******************************************************
        
        1. “Вымывает токсины из пространства между нейронами.
        Они создаются в процессе протекания тока по нейронным связям. Сон - единственное время, когда происходит чистка.
        2. Выключает внимание. 
        Происходит переключение из фокусного в рассеянный режим работы.
        Активируются обширные зоны мозга, КПД повышается.
        3. Работает над задачами и повторно обращается к новым нейронным связям.
        Он делает то, на что в сознательном состоянии нужны дополнительная энергия и ресурсы времени и внимания.
        
        ********************************************************************************Сон - это часть процесса познания и решения Задач********************************************************************************
        
        ********************************************************************Мозг - можно и нужно тренировать.******************************************************************** Нейропластичность - доказанное наукой свойство мозга изменяться на протяжении всей жизни.
        
        - Упражнения для внимания и концентрации
        1. **************************************************Для концентрации внимания “Стрелка часов”**************************************************
        Смотрите 2 минуты внимательно, не отрываясь на стрелку часов.
        Если мысли “улетают”, возвращайте их к стрелке
        Это нормально, если отвлекаетесь, в возвращении и есть тренировка.
        2. **************************************************Для переключения внимания “Пальцы руки”**************************************************
        За переключение отвечает межполушарное взаимодействие.
        Соедините большой палец руки последовательно со всеми остальными, образуя кольцо.
        Делайте это в разных направлениях на разных руках 1-3 минуты.
        3. ******************************************Для тренировки памяти “Натюрморт”******************************************
        Возьмите изображение со множеством элементов, например, натюрморт.
        Посмотрите на него внимательно 10 секунд.
        По памяти перечислите все предметы. Проверьте себя.
        
        ********************************************************************************************************************************************Только регулярные повторения нейроворкаутов гарантируют Результаты !!!********************************************************************************************************************************************
        
        - **********************************************************Что получили сегодня по Теме №1 ?**********************************************************
            
            ************Знания************
            
            - Сон очищает мозг, помогает учиться и решать Задачи
            
            ************Умения************
            
            - Тренировка внимания и памяти
            
            ******************Установки******************
            
            - Сон - важный процесс в учебе
    - **Тема №2: Учеба как Проект**
        - Модель СМАРТ для Целей
        - Принципы декомпозиции
        - Ценность групповой работы: техники “от равного к равному” и “совет директоров”
        - Техники “peer-2-peer” (от равного к равному) и “совет директоров”
        
        <aside>
        💡 **Удовлетворение жизнью приносит только наличие Цели, и именно она способствует улучшению здоровья, долголетию, а также воодушевляет вас в трудную минуту.** *Стив Джобс*
        
        </aside>
        
        - **Постановка Целей по методике SMART**
            - **S - Specific (Конкретная).** 
            Шаг 1. ******************************************************Конкретная. Глагол действия -****************************************************** Создать, сделать, провести …
            - **M - Mesurable (Измеримая)**
            Шаг 2. **********************************************************Измеримая. Существительное -********************************************************** Проект, программа, поездка …
            - **A - Attainable (Достижимая)**
            Шаг 3. ****************************************************************Достижимая. Понятные критерии -**************************************************************** 1000 шт, набор из 10 блоков, пять стран …
            - ********R - Relevant (Значимая)********
            Шаг 4. ************Значимая. Для чего это вам?************ Чтобы стать разработчиком, получить возможности …
            - ********T - Time Based (Ограниченная по времени)********
            Шаг 5. ******************************************************Ограничение по времени. К какой дате в будущем?****************************************************** Через год, с 1 января 2023, в 2030 году …
            
            Примеры: *В течение года пройти программу обучения в ГБ.
            Сдать экзамен, получить профессию и сертификат, чтобы больше зарабатывать и путешествовать.*
            
            > **На Эверест не запрыгивают, а поднимаются, шаг за шагом.**
            Ваши сокурсники или единомышленники - уникальный ресурс для эффективного обучения.
            > 
            
            <aside>
            💡 ****************************************************Слона едят по частям…,**************************************************** как Цели и Концепции делят на простые и достижимые части - это ************************ДЕКОМПОЗИЦИЯ************************
            
            </aside>
            
            - Шаг 1. ******************************************************************************************************************Разбить на части, чтобы можно было “потрогать руками”.****************************************************************************************************************** У вас не должны “опускать руки” при виде мини-задачи. Все должно быть понятно и просто.
            - Шаг 2. ************************Приоритеты.************************ То, что важнее и сложнее, обычно, делается сначала, но системная зависимость элементов тоже важна.
            - Шаг 3. **********************************План и Действия.********************************** Описанные четко шаги, техники работы с прокрастинацией и контроль Результатов
            
            > ********************************************************************************************Обмен пониманием и мнениями закрепляет знание********************************************************************************************
            Ваши сокурсники или единомышленники - уникальный рерурс для эффективного обучения.
            > 
        - **********************************Две техники групповой работы**********************************
            - ****************Peer-2-Peer.**************** От равного к равному. Обучение через научение
                1. ****************************************************Важно подготовить вопросы****************************************************
                Ваши вопросы должны стимулировать визави к глубокому пониманию темы.
                2. **********************************************************************Дружеское общение и советы равного**********************************************************************
                Вы равны. Нет учителя и ученика, есть два равных человека, которые пытаются разобраться вместе с чем-то инверсным.
                3. ************************Смена ролей************************
                Сначала вопросы задает один участник, потом другой. Тот, кто задает вопросы не отвечает на них, а помогает наводящими вопросами и просьбами уточнить и пояснить.
            - ******************Совет директоров.****************** Без модератора, на основе Плана и Тезисов
                1. **************************Нет главного**************************
                На совете собираются равные участники, объединенные едиными целями.
                Мнение каждого имеет равный вес.
                2. **********************************************************Нет фасилитатора и секретаря**********************************************************
                Каждый полностью отвечает за подготовку и тайминг своих выступлений, не перебивает и сам ведет записи.
                3. ************Короткое выступление с аргументацией и дискуссия************
                Перед встречей по темам и брифу все участники готовят короткие выступления.
                Важно быть готовым слушать и слышать других участников в процессе дискуссии.
            
            Правильная подготовка к групповой работе - залог успеха и проявление уважения к коллегам.
            
            > ****************************************************************************************************************************************************************************************************Peer-2-Peer и Совет директоров развивают интеллектуальную самостоятельность и навыки коммуникаций.****************************************************************************************************************************************************************************************************
            > 
        - ****************************************************************Что получили сегодня по Теме №2****************************************************************
            - ************Знания************
                - Техники Р2Р (от равного к равному) и Совет директоров.
            - ************Умения************
                - Эффективно работать в группе.
            - ******************Установки******************
                - Нужно учиться вместе с сокурсниками
    - **Тема №3: Память, фрагментация и блоки смысла**
        - Введение в понятие “чанки” - блоки смысла
        - Глубокое понимание процесса чанкинга
        - Техника синопсиса
        - Нейромеханика и ценность повторений
        
        > ************************************************************************************Чанк (chunk) - блок элементов информации, объединенных смыслом или действием, который быстро извлекается из памяти.************************************************************************************
        Чанки могут быть простые и комплексные.
        Масштаб и уровень комплексности отличаются.
        ********************Чанкинг (chunking) - это мыслительный процесс соединения частей по смыслу********************
        Ментальный скачок, который позволяет собрать целостный пазл нового знания.
        > 
        
        <aside>
        ☝ **************************************************************************************************************Быстрота доступа к Чанку - одно из его ключевых свойств**************************************************************************************************************
        
        </aside>
        
        <aside>
        ☝ **********************Техника “Йяйдо” - сложный комплексный чанк физического действия**********************
        
        </aside>
        
        **************************************************************************У вас работал рассеянный режим мозга**************************************************************************
        С начала урока информация о технике Йяйдо соединилась с другим знанием и приобрела новый смысл.
        
        ******************************Отдельный элемент информации не дает полного понимания******************************
        Поэтому только объединенные смыслом элементы информации несут устойчивое знание
        
        **********************************************************************************Отдельный элемент не дает полной картины**********************************************************************************
        Соединяясь с другими элементами информация приобретает смысл.
        ****************************************************************************************************************************************************************Множество элементов вместе - не просто их сумма! Это новый смысловой блок. Чанк.****************************************************************************************************************************************************************
        
        ************************************Особенности чанков************************************
        
        1. **********************В разных сферах разные чанки и процессы**********************
        В истории, химии или спорте чанки имеют различное наполнение, масштаб и процессы формирования.
        2. **********************************************************************************Для физической и ментальной деятельности**********************************************************************************
        Контекст применения влияет на принципы и работу по формированию чанков.
        3. **************************************************Алгоритм создания единый**************************************************
        Процессы работы мозга с информацией одинаковы
        
        **********************Пример. Чанк в Йяйдо:**********************
        
        - Приготовить ножны. Занять правильное положение
        - Выхватить меч
        - Нанести удар
        Все вместе - техника нанесения быстрого упреждающего смертельного удара.
        
        ****************************************************************Пример. Чанк в английском языке:****************************************************************
        
        **********************What’s up? - Как дела? Что случилось?**********************
        Устойчивое сочетание речи, имеющее определенный смысл, используемое в разговорной речи.
        ******В чанке “What’s up?” смысл целого отличен от смысла отдельных элементов******
        
        ********Чанкинг освобождает слоты рабочей памяти******** и делает вас в целом продуктивнее, а учебу эффективнее - это каскад положительных последствий
        
        **********************************************************************В начале вся рабочая память кипит.********************************************************************** Задействованы все 4 слота памяти для обработки и осмысления новой информации. Нейронные связи только создаются, они не четкие и непрочные.
        
        ****************После Касаний становится легче.**************** Слоты памяти постепенно освобождаются, Чанк формируется. Прокладывается тракт связи с долговременной памятью.
        
        ************************************************************************************************Доступный Чанк требует минимум ресурсов памяти.************************************************************************************************ Извлечение происходит практически бессознательно, легко и быстро. Информация быстро проходит по одному прочному тракту.
        
        <aside>
        ☝ **********************************************************************************Осмысленный Чанкинг делает вас эффективней во всем!**********************************************************************************
        
        </aside>
        
        ************************************************************************Что мы получили сегодня по Теме №3:************************************************************************
        
        - ************Знания************
            - Что такое “Чанк”
        - ************Умение************
            - Определять Чанки
        - ******************Установки******************
            - Знания устойчивы, когда соединены смыслом или действием
    - **Тема №4: Прокрастинация и другие ловушки.** Как учиться быстро, не делая бесполезного?
        - Прокрастинация и память
        - Другие способы с ней бороться
        - Ловушки мышления: иллюзия компетентности и избыток обучения
        
        > **********************************************************************************************Прокрастинация мешает знаниям закрепляться в памяти**********************************************************************************************
        Она убивает время и регулярность, необходимые для передачи знаний в долговременную память и создание чанков.
        > 
        
        <aside>
        ☝ ******************************************************************Обучение - как кладка кирпичиков******************************************************************
        Каждый элемент информации должен найти свое место, включиться в блок и закрепиться. ******************************************************************Этот процесс требует времени и Регулярности******************************************************************
        
        </aside>
        
        <aside>
        ☝ **************Без Системы и Регулярности ваши знания похожи на груду кирпичей и раствора. Здание само не получится!**************
        
        </aside>
        
        <aside>
        ☝ ********************************************************************************************************************************************************************Только на надежном основании, слой за слоем создается прочный фундамент глубоких знаний, а кирпичики - это разные по размеру и сложности Чанки.********************************************************************************************************************************************************************
        
        </aside>
        
        > ************************************************************************************************************************Прокрастинация может быть одним, но мощным убийцей добрых начинаний и Планов!************************************************************************************************************************
        > 
        
        **************************************************************Прокрастинация напоминает зависимость.**************************************************************
        Мозг делает все, чтобы получить временное облегчение от иногда скучной реальности
        
        ********************************************************Как работает прокрастинация?********************************************************
        
        1. **************************************************Активируются центры боли**************************************************
        Опасность дискомфорта и напряжение, неизбежных при учебе, активирует центры боли.
        Мозг реагирует как предписано эволюцией - спасается и оберегает.
        2. ****************************************************************************************************************Включается режим “сбегание во временное удовольствие”****************************************************************************************************************
        Именно в этом прокрастинация похожа на зависимость, игровую, наркотическую и т.п.
        Мозг рассказывает сам себе странные истории, в которые искренне верит.
        3. ******************************************************************************С каждым разом возвращаться все сложнее******************************************************************************
        На первичную “боль” накладывается новый страх, как например, “я уже устал”, “теперь я точно не успею” и тд
        
        > ************************************************************************************************************************Прокрастинация - как яд мелкими дозами, который может подорвать здоровье!************************************************************************************************************************
        > 
        - **********************************************Иллюзия компетентности**********************************************
        ”Вау! Я понял…” таит опасность. Вы читаете и понимаете чужие мысли, но знания создаются только на основе **********ваших********** собственных
            
            ****************************В чем суть иллюзии компетентности?****************************
            
            1. ****************************************************************Больше читаешь и смотришь - больше знаний получаешь.****************************************************************
            Объем информации нельзя путать с новыми знаниями и глубоким пониманием.
            2. **************************************************Я прочитал и понял, значит - знаю!**************************************************
            Вы читаете чужие мысли. 
            **Знания формируются из своих!**
            3. ********************************************************************Много подчеркиваний и выделений - крепче новые знания!********************************************************************
            На эту работу тратятся ментальная энергия и внимание, которые нужны для создания собственных мыслей и чанков
            
            ************************************Как избежать иллюзию компетентности?************************************
            
            1. ******************************************************************Техника воспроизведения (recall)******************************************************************
            Сразу после прочтения, просмотра повторить своими словами, что прочитал и понял.
            2. ********************************************************************************************Не подчеркивать и не выделять много в текстах********************************************************************************************
            Не больше одного выделения на странице.
            Пишем конспекты своими словами.
            3. ****************************************************Mind-map слабо эффективна****************************************************
            Без устойчивого фундамента рисовать схему - все равно, что решать шахматную задачу до конца не понимая, как ходят фигуры.
            
            > **************************************************************************************************************************************Воспроизведение (recall) эффективнее подчеркиваний и майнд-карт !!!**************************************************************************************************************************************
            > 
        - **********************************************************Ловушка избыточного обучения**********************************************************
        Больше читать и смотреть не значит больше знать!
            
            ******************************************************************Как избегать избыточное обучение?******************************************************************
            
            1. ********************************************************************************************************************Проводить само-тесты, выявлять ошибки и работать над ними********************************************************************************************************************
            Вместо того, чтобы повторять уже понятое или просто зубрить, находим слабые места и их переосмысливаем.
            2. **********************************************************************************************Применять технику воспроизведения и синопсиса.**********************************************************************************************
            Когда вы формируете новые мысли своими словами, мозг не зубрит, а создает мысли!
            3. ****************************************************Менять форматы и окружающую среду.****************************************************
            Это перезагружает внимание и приучает пользоваться новыми знаниями в любой обстановке.
            
        
        ******************************************************************Что получили сегодня по Теме №4:******************************************************************
        
        - ************Знания************
            - Прокрастинация нарушает память
            - Воспроизведение и Синопсис эффективнее подчеркиваний и майнд-карт
        - ************Умения************
            - Как избегать иллюзию компетентности и избыточное обучение
        - ******************Установки******************
            - Важно формировать собственные мысли
            - Прокрастинация может разъедать как зависимость!
    - **Итоги Урока 2. “Чанк - меч самурая знаний…”**
        - ************Знания************
            - Сон очищает мозг, помогает учиться
            - Что такое “Чанк”, и в чем его ценность?
            - Как эффективно работать в группе
            - Как прокрастинация может все “убить”
        - ************Умения************
            - Ставить цели по СМАРТ и декомпозировать
            - Определять Чанки
            - Тренировать внимание и память
            - Избегать ловушки мышления
        - ******************Установки******************
            - Сон - важный процесс в учебе
            - Нужно учиться вместе с сокурсниками
            - Знания устойчивы, когда соединены смыслом
            - Важно создавать свои мысли
    - **Домашние задания и Практика**
        - ****************************************************Дневник и Практики здорового сна****************************************************
            - В Облаке знаний записывайте 14 дней каждое утро общее состояние после сна
            - Фиксируйте, что делали из практик здорово сна накануне
            
            **********************************Практики здорового сна:**********************************
            
            - Не пользоваться девайсами за 30 минут до сна
            - Засыпать не позже 23:00
            - Не есть ближе, чем 1,5 часа до сна
            - Не работать и не смотреть кино в кровати
            - Затемнять спальню полностью заранее
        - **************************************************************************************************************Расписать свои личные Цели по СМАРТ на курс Разработчик**************************************************************************************************************
            1. В Облаке знаний прописать стратегические Цели
            2. Декомпозировать Цели на первые 3 месяца
            3. Декомпозировать 3-х месячные Цели в еженедельные задачи. Они могут быть рутинные и повторяющиеся.
            
            На этапе 3 использовать удобный и привычный календарь - планировщик.
            
        - ************************************Описать Чанки на курсе Умение учиться 1.0************************************
            1. В Облаке знаний своими словами описать 3 Чанка по темам пройденных курсов.
            2. Перед ДЗ выполнить упражнения из МайндБрейк, которые проходят на уроках и на концентрацию внимания “Стрелку часов”.
            3. Не подсматривать в свои конспекты и Облако знаний перед выполнением задания.
- **Урок 3. “Как Гоголь поможет учиться…”**
    - **Сегодня на Уроке 3. План:**
        
        ********************************************Тема 1. Нейронауки и Обучение********************************************
        
        - Знания: как работает консолидация Памяти
        - Умения: определять этапы запоминания
        - Установки: важно уточнять знания при каждом Касании. Сон - супер важен
        
        ******************************************Тема 2. Учеба как Проект******************************************
        
        - Знания: матрица анализа стратегий и чек-лист мониторинга процесса
        - Умения: выбирать стратегии и эффективно оценивать работу
        - Установки: акцент на успехах важен
        
        ************************************************************Тема 3. Память и блоки смыслов************************************************************
        
        - Знания: алгоритм создания чанков и контекста применения, ошибки
        - Умения: создавать чанки, и где их применять
        - Установки: мы недооцениваем пользу повторений из-за непонимания
        
        ****************************************************************Тема 4. Прокрастинация и ловушки****************************************************************
        
        - Знания: метод Гоголя; ловушки образа мысли и “удушья”
        - Умения: начинать работу через микро-шаги
        - Установки: “open mind” и любопытство помогут создавать новые знания
    - ****************************************************************************************Тема №1: Нейронауки и обучение. Как мозг воспринимает и обрабатывает новое?****************************************************************************************
        
        Сегодня в Теме №1:
        
        - **************************Гипокампус -************************** центр прописывания информации в память
        - ************************Астроциты -************************ вторые по важности клетки мозга
        - **************************************************Схема консолидации памяти**************************************************
        
        ********************Гипокампус - зона консолидации памяти.******************** 
        Имеет форму “морского конька” и назван греческими словами: гиппос - конь, кампос - морской монстр.
        Без него невозможно хранить новые данные в коре головного мозга.
        Процесс консолидации памяти может занять годы
        
        ************************************************************************************************************************При удалении гипокампуса пациент НМ потерял способность запоминать.************************************************************************************************************************
        У него возникла полная амнезия. Он утратил способность консолидировать и передавать в долговременную память информацию. Через минуту он забывал собеседника, и о чем они говорили
        
        <aside>
        ☝ ****************************************************************************************Консолидация памяти - Процесс перевода первичных отпечатков (энграмм) памяти в стабильную Долговременную Память****************************************************************************************
        
        </aside>
        
        **************************************************************************Консолидация памяти. Схема процесса:************************************************************************** 
        При каждом использовании информации происходит повторное прописывание в памяти с изменениями:
        
        - ******************************Консолидация -****************************** первичное запоминание с созданием новых синапсов
        - ****************************Реактивация -**************************** “сборка” воспоминания
        - ****************Реконсолидация -**************** повторная запись в памяти
        
        <aside>
        ☝ ******************************************Консолидация и Реконсолидация протекают активно во сне.******************************************
        Еще одно подтверждение важности сна для обучения.
        ************При реконсолидации воспоминание укрепляется, но и изменяется!************
        
        </aside>
        
        ****************************Астроциты - вторые важные клетки мозга!
        Человеческие астроциты, внедренные в мозги мышей, радикально усиливали их способность к обучению.****************************
        
        - Астроциты - один из типов клеток белковой глии (изоляции нейронов)
        - Астроциты питают нейроны и участвуют в восстановлении зон мозга при повреждениях
        - Поддерживают ионный баланс вне клеток и обеспечивают протекание электрических сигналов
        
        <aside>
        ☝ ********************************************************************************Чем мозг Эйнштейна отличался от мозга других людей?
        Мозг Эйнштейна отличался только большим количеством астроцитов.********************************************************************************
        ***************Все сферы влияния белковой субстанции глии на работу мозга только изучается, но значимость клеток астроцитов уже не вызывает сомнений***************
        
        </aside>
        
        > **************************************************************************************************************************************************************************Астроциты обеспечивают питание нейронам и среду для электрических сигналов между ними**************************************************************************************************************************************************************************
        > 
        
        ****************************************************Итоги по Теме №1. Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое:****************************************************
        
        - ************Знания************
            - Астроциты - вторые важные белковые клетки мозга
            - Схема процесса консолидации памяти
        - ************Умения************
            - Определять этапы формирования записей в памяти
        - ******************Установки******************
            - Важность сна подтверждена еще раз
            - Важно уточнять знания при каждом касании
        
        ******Вопрос №1. Если все постоянно меняется, то почему же мы помним все почти одинаково?******
        Ответ. Во-первых, мы редко осознанно фиксируем в деталях одни и те же воспоминания в разные периоды, поэтому говорить об “одинаковости” воспоминаний нужно осторожно. Мы знаем наверняка, что они одинаковые. 
        Во-вторых, все зависит от контекста и вашей аффективной ниши в момент повторного обращения. Если они не изменились, то и информация не поменяется. И наоборот.
        
        ****************************************************************************Вопрос №2. Как правильно питать мозг?****************************************************************************
        Ответ. Нужно самому питаться сбалансированно и осознанно. Мозг и тело - единая Система. Энергия, которая вырабатывается в желудке питает и мозг. Чем она качественнее, тем мозг эффективнее. Обратный эффект заметен очень ярко. Попробуйте начать есть всякую “жесть”, и ваша работоспособность резко снизится.
        Существуют проверенные медициной добавки и препараты для стимулирования мозговой активности, но применяйте их ******************************************************только по назначению врача.******************************************************
        
        ********************************************************************************************Почему учеба влияет на количество астроцитов?********************************************************************************************
        Ответ. Учеба - это второй по затратам энергии процесс для мозга. В нем задействовано много сетей, и работают они очень активно. Создание новых связей и их использование требует от мозга обеспечения всех необходимых условий. Только рост астроцитов, пропорционально количеству новых нейронных связей и их использованию, позволяет этой активной деятельности происходить. Мозг это понимает и делает.
        
    - **Тема №2: Учеба как Проект. Планирование, Задачи и контроль Прогресса**
        
        ************************************Сегодня в Теме №2:************************************
        
        - ************************************************Матрица оценки стратегий************************************************
            
            <aside>
            ☝ ********************************************************************************************************************************************************************************************************************************************Стратегия без тактики - это самый медленный путь к победе.
            Тактика без стратегии - это просто суета перед поражением.********************************************************************************************************************************************************************************************************************************************
            **********Сунь Цзы.**********
            
            </aside>
            
            ****************************************************Матрица оценки стратегий.**************************************************** Для выбора максимально эффективного движения к Цели.
            
            Вопросы матрицы оценки стратегий:
            
            1. ************************************Как использовать?************************************ 
            Глубоко понять основные принципы и приложить на себя
            2. ****************************************Когда использовать?****************************************
            Выявить ситуации, когда стратегия эффективна
            3. ****************************************Зачем использовать?****************************************
            Определить Результаты и сравнить с Целями
            
            Пример матрицы оценки Стратегий чтения. 
            Задача понять, когда именно применять определенную стратегию развивающего чтения М. Адлера
            
            ![Стратегия чтения.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a830d69-d5d5-4813-8fc7-65eb02a49ffb/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F.png)
            
            > ****************************************************************************************************Оценка стратегий - как прокладка курса корабля !!!****************************************************************************************************
            > 
            
            ******************************************************************************************************************************************************************************************************************************************************************************Я иду медленно, но никогда не двигаюсь назад! “I am a slow walker, but I never walk back.”************************************************************************************************************************************************************************************ Авраам Линкольн*
            
        - ************************************************************Чек-лист мониторинга прогресса************************************************************
            
            ********Чек-лист мониторинга процесса.******** Визуализация результатов - отличный мотиватор.
            ********************************************************************************Вопросы чек-листа мониторинга прогресса:********************************************************************************
            
            1. **********************************Что было хорошо?********************************** Фиксация на Достижения и Успехи
            2. ********************************************Что могло быть лучше?******************************************** Ошибки и зоны роста
            3. **********************Идеи и План Действий.********************** Продолжение Пути и новые мысли
            
            **********************************************************************************Матрица быстрой ретроспективы от MIRO.********************************************************************************** Синтетическая оценка проделанной работы за неделю и планирование. 
            Можно делать как на листе А4, так и в приложении.
            
            <aside>
            ☝ **********************************************************************************************************************Фиксация на успехах не менее важна, чем работа над ошибками**********************************************************************************************************************
            
            </aside>
            
        - ************************************************Итоги по Теме №2. Учеба как Проект. Планирование, Задачи и Контроль прогресса:************************************************
            - **Знания**
                - Матрица оценки стратегий
                - Чек-лист прогресса
            - ************Умения************
                - Определять подходящие стратегии
                - Эффективно подводить итоги недели и планировать работы
            - ******************Установки******************
                - Акцент на Успехах не менее важен, чем анализ ошибок.
        - ********************************Вопросы и Ответы********************************
            
            **************Вопрос №1. Если изменились обстоятельства нужно ли, и как именно менять стратегию?**************
            Ответ. Да, менять стратегию нужно, тем более в сегодняшнем мире, который меняется очень быстро. Это непросто, для этого планируйте несколько стратегий “на берегу”. По методике Agile Focus нужно запланировать 5 стратегий: одну основную, две запасные и две второстепенные. Если наступит момент, то вам будет легко переключиться.
            
            **********************Вопрос №2. Как часто нужно делать чек-лист мониторинга прогресса?**********************
            Я рекомендую делать не реже одного раза в две недели. В период интенсивной работы - каждую неделю.
            
    - **Тема №3: Память, фрагментация и блоки смысла**
        
        ************************************Сегодня в Теме №3:************************************
        
        - ****************************************Как создаются Чанки?****************************************
            
            > ****************************************************************************************************************************************************************************************************************************Чанк - блок элементов информации, объединенных смыслом или действием, который быстро извлекается из Памяти.****************************************************************************************************************************************************************************************************************************
            Чанки могут быть простые и комплексные.
            Масштаб и уровень комплексности отличаются
            > 
            
            **************************************Особенности Чанков:**************************************
            
            1. **************************************************В разных сферах разные Чанки и процессы**************************************************
            В истории, химии или спорте Чанки имеют различное наполнение, масштаб и процессы формирования.
            2. ******************Для физической и ментальной деятельности******************
            Контекст применения влияет на принципы и работу по формированию чанков
            3. **************************************************Алгоритм создания единый**************************************************
            Процессы работы мозга одинаковы
            
            <aside>
            ☝ ******************************************************************************************Урок на курсе - комплексный Чанк информации !******************************************************************************************
            
            </aside>
            
            ****************************************************Из каких трех типов Чанков меньшего масштаба состоит чанк урока?****************************************************
            1. Чанки топиков внутри тем
            2. Чанки тем
            3. Чанки итогов: Знания, Умения, Установки
            
            > **************************************************ВНИМАНИЕ. ПОНИМАНИЕ. КОНТЕКСТ - три кита создания Чанка**************************************************
            Это алгоритм эффективен для создания Чанков любого типа, масштаба и комплексности.
            > 
            
            ************Алгоритм создания Чанка:************
            
            1. **********Фокусировка внимания**********
            Информация должна быть изучена и понята
            2. ******************************Понимание сути******************************
            Основная идея должна быть ясна и изложена своими словами
            3. ********************************************Определение контекста********************************************
            сферы применения знаний и навыков для эффективного запоминания
            
            <aside>
            ☝ ************************Понимание - это супер-клей, соединяющий в единое целое отдельные отпечатки в памяти************************
            Оно создает широкий взгляд на различные следы в памяти (энграммы), которые могут связываться с другими.
            
            </aside>
            
            **************Ошибки:**************
            
            - Ошибка 1.
            **************************************Фокус только на шагах, без понимания их связи**************************************
            Важно понимать, почему именно этот шаг идет за предыдущим. Это формирует комплексное понимание.
                
                <aside>
                ☝ **********За деревьями можно не увидеть леса**********
                
                </aside>
                
            - Ошибка 2. 
            ****************************************************************************Формирование Чанка без глубокого понимания****************************************************************************
            Заучивание без понимания не пропишет информацию в долговременную память. Это похоже на “зубрежку” перед экзаменом. Знания быстро улетучатся.
                
                <aside>
                ☝ **********************************************Можно ли создать Чанк без понимания? Да, можно, но … это бесполезно!**********************************************
                
                </aside>
                
            
            <aside>
            ☝ ************************************************************************************************************************Контекст определяет КОГДА использовать знания и решения
            Чанкинг определяет КАК использовать знания и техники решения************************************************************************************************************************
            
            </aside>
            
            **************************************************************************************************************************От практики к контексту (Bottom Up)
            Как применять ту или иную практику или знания для решения задачи:**************************************************************************************************************************
            
            - Отсеивать неподходящие чанки
            - Закреплять нужные
            
            **************************************************************************************************************************От масштаба к контексту (Top Down)
            Через понимание большой картины ситуации. “Big Picture” может быть определена через:**************************************************************************************************************************
            
            - Изучение оглавления книг и статей
            - Через схемы, таблицы, карты концепций, инфографику
            - Достоверные Веб-источники
            - Общение с действующими лицами
                
                <aside>
                ☝ **Big Picture - это ИДЕЯ художника. 
                Чанкинг - его ХОЛСТ и КРАСКИ.
                Две неотъемлемые части процесса**
                
                </aside>
                
        - ******************************************************Техника “Карточки смысла”******************************************************
            
            ********************************************************************************************Карточки смыслов для интервальных повторений.********************************************************************************************
            Простая и эффективная техника
            
            ******************************Карточка смысла******************************
            
            Чанк (лицо)
            
            Текст Чанка: описание, объяснение, ответ на вопрос и тд. (оборот)
            
            Любой удобный формат: Облако знаний, Quizlet или вообще бумажные
            
            - ********************************************************Работа с карточками смыслов:********************************************************
                1. ****************************Создайте наборы карточек****************************
                Тематику определяйте как вам удобно. Ставьте дату создания набора. Это поможет планировать интервал
                2. ********************************************************Обращайтесь в течение дня********************************************************
                Найди слот времени на работу. 5 мин - это ок.
                3. ******************************************Повторяйте перед сном или сразу после пробуждения******************************************
                Вы ближе всего к рассеянному режиму работы памяти в эти моменты
                4. **********Откладывайте, что выучили**********
                Это осознанная практика работы над ошибками и избегания избыточного обучения
                5. **********************************************Увеличивайте интервалы**********************************************
                Второе касание через 2-4 дня, по мере запоминания увеличивайте интервалы
                6. **************************************************************************************************Привлекайте коллег к работе**************************************************************************************************
                Это интересная кооперация. Темы и карточки могут быть разные для каждого участника.
                
                ******************************************************************************************************************************По какому принципу вы бы создавали карточки смыслов для уроков?******************************************************************************************************************************
                
                1. Урок 1 / Тема 1-4
                2. Тема 1 / Урок 1-4
                
                ************************[Quizlet.com](http://Quizlet.com) - приложение для работы с карточками смыслов**
                
                - Создание папок и наборов карточек
                - Прогресс результатов и напоминания
                - Поиск по темам среди всех пользователей программы
                - Разные интерактивные режимы повторений
                - Напоминания и доска прогресса
            - ******************************************************************************Мини-практикум в Ноушн. Карточка смысла******************************************************************************
                
                ************************************************Создаем карточку смысла:************************************************
                
                - Создайте в облаке знаний в уроке закладку “Тема 3. Карточки смысла”
                - Придумайте короткий заголовок или вопрос для карточки на тему: “Два способа создания Биг Пикчер контекста”. Эффективно придумывать что-то необычное: “ВПК создания чанков” - это запоминающаяся игра слов.
                - Напишите ответ или объяснение своими словами, сохраняя смысл понятий
                - **Quizlet**
                    
                    Приложение для работы с карточками смыслов и прокачки своих мозгов.
                    
        - **************************************************Итоги по Теме №3 Урока 3. Память и блоки смыслов**************************************************
            - ************Знания************
                - Алгоритм создания чанков
                - Схема определения контекста их применения
                - Техника “Карточки смысла”
            - ************Умения************
                - Формировать чанки
                - Определять контекст их применения
                - Работать с карточками смыслов
            - ******************Установки******************
                - Без понимания чанки бесполезны
                - Мы недооцениваем эффективность повторений, потому что путаем их с зубрежкой
        - ********************************Вопросы и Ответы********************************
            - **********************Как для физической деятельности использовать карточки смысла? Зачем?**********************
                
                Глубокое понимание деталей и смысла важны в любом процессе. Работая с карточками, мозг прогоняет ток по тем же нейронным связям, которые будут задействованы в реальных действиях. Эффективно чередовать работу с карточками смысла и саму физическую деятельность.
                Создается 3Д картинка, и отработка действий ускоряется.
                
            - **********************************************************************************************************************************************Как именно не потерять общую картину и не залипнуть на отдельных шагах?**********************************************************************************************************************************************
                
                Я рекомендую спиральную модель изучения многоголовых комплексных чанков:
                1. Изучайте все шаги для понимания общей картины
                2. Создаете карточку смысла по процессу со всеми шагами
                3. Углубляетесь в каждый шаг, периодически возвращаясь к сводной карточке смысла по процессу
                4. Создаете карточки по каждому шагу и прорабатываете их в наборе с карточкой по процессу
                
            - ******Как определить достоверность источника информации?******
                
                Нужно развивать медийную грамотность. 
                Гигиенический минимум - всегда изучать в деталях автора материалов перед началом работы с материалом. Сегодня эта информация буквально на расстоянии двух кликов.
                
    - **Тема №4: Прокрастинация и другие ловушки.** Как учиться быстро, не делая бесполезного?
        
        **************************************Сегодня в Теме №4:************************************** 
        
        - **********************************Метод Н.В. Гоголя**********************************
            
            <aside>
            ☝ Чем знаменит Николай Васильевич Гоголь?
            ********************************************************************Николай Гоголь ВСЕГДА сдавал рукописи ВОВРЕМЯ !!!********************************************************************
            
            </aside>
            
            ****************************************************************************Как Гоголь боролся с прокрастинацией?****************************************************************************
            Включение в работу через **МИКРО-ЗАДАЧИ
            Метод** ********Гоголя. Когда нужно просто начать…********
            
            1. **************************************************Поточи перо и сложи стопку чистых листов бумаги**************************************************
            Это же не писать? Легко!
            2. ****Сядь за рабочий стол и посиди****
            Просто посиди. Ничего не делай.
            3. ********************************************************************************************************Напиши строку буквы “а”, потом “б”, слово, предложение…********************************************************************************************************
            Не заметишь, как войдешь в ритм.
            
            <aside>
            ☝ ****************************************************************************************************************************************************Метод Гоголя работает через фокус на ПРОЦЕСС и погружение в среду ДЕЙСТВИЯ****************************************************************************************************************************************************
            
            </aside>
            
        - ****************************************Обзор других ловушек****************************************
            
            > ****************************************************************************Эйнштенллунг. Ловушка образа мышления****************************************************************************
            ”Einstenllung” в переводе с немецкого “отношение, настройка”
            **********************************************************Привычные концепции и шаблоны могут блокировать мышление**********************************************************
            Это как поставить много дорожных блоков на пути новой мысли
            > 
            
            <aside>
            ☝ ****************************************************************************************Интеллектуальная автономность и “Опен Майнд” открывают путь к новым мыслям****************************************************************************************
            
            </aside>
            
            > **************Удушье. “Choking”**************
            В переводе с англ. - удушение, задыхаться, подавиться
            ****************************************************************************************************************Решение Задач без подготовки порождает стресс и неудачи****************************************************************************************************************
            Это как начать делать ДЗ без изучения учебника и материала, посещения лекций, просмотра вебинаров или даже без разговора с кем-то знающим.
            > 
            
            <aside>
            ☝ **************************Для новых Знаний нужно Время и поэтапное Погружение !!!**************************
            
            </aside>
            
        - ******************************Итоги по Теме №4 Урока 3. Прокрастинация и другие ловушки мышления******************************
            - ************Знания************
                - ********************************************************************Метод Гоголя против прокрастинации********************************************************************
                - **************************************************************************Суть ловушек образа мышления и “Удушья”**************************************************************************
            - ************Умения************
                - **************************************************************Начинать работу как Н.В. Гоголь**************************************************************
                - **********************************************************************************************Не загонять себя в стресс и неудачи с заданиями**********************************************************************************************
            - ******************Установки******************
                - **************************************************Важно развивать “Опен майнд” и любопытство**************************************************
        - ********************************Вопросы и Ответы********************************
            
            **************************************************************************************************************Точно ли метод Гоголя работает не только для писателей?**************************************************************************************************************
            
            Да, точно. Потому что в его основе нейропсихология. Его принципы совпадают с движущимися маховиками метода “Помодоро”, и они обоснованы нейропсихологией. Любая деятельность может быть разбита на простые, выполнимые Задачи.
            
            **********************************************************************************************Что такое “интеллектуальная самостоятельность”?**********************************************************************************************
            
            Способность составлять собственное мнение, особенно по сложным и неоднозначным вопросам. Не лениться в поиске ответов. Уметь определять достоверные источники информации и автором. Задавать вопросы себе и автору в процессе изучения темы, и находить на них ответы. Уметь обосновывать и защищать свои суждения и умозаключения.
            
            ****************А как быть если нужны деньги, и хочется сделать работу, которую еще не очень хорошо умеешь делать?****************
            
            Это отчасти ваш ответ на философский вопрос ответственности за свои действия и качества своего труда. Нужно здраво оценивать вероятность ошибки и последствия своих ошибок для других людей. 
            Два способа точно помогают:
            1. Супер-быстро получить недостающий навык, если возможно и/или
            2. Нанять профессионала в партнеры, честно поделившись заработком. 
            В паре с профи можно быстро научиться.
            
    - **************************************************Итоги Урока №3 “Как Гоголь поможет учиться…”**************************************************
        - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
            - **************Знания:************** как работает консолидация памяти; значимость астроцитов и гипокампуса
            - **************Умения:************** определять этапы консолидации памяти
            - **********************Установки:********************** важно уточнять знания при каждом касании; жертвовать сном неэффективно
        - ************************************************Тема 2. Учеба как Проект************************************************
            - **************Знания:************** почему стратегия так важна; матрица анализа стратегий; чек-лист мониторинга процесса
            - **************Умения:************** определять оптимальные стратегии; быстро подводить итоги и планировать действия
            - **********************Установки:********************** важно всегда идти вперед, пусть и маленькими шагами; акцент на успехах не менее важен, чем анализ ошибок
        - ********************************************Тема 3. Память и блоки смыслов********************************************
            - **************Знания:************** как создавать чанки; схема поиска контекста их применения; ошибки при чанкинге; “Карточки смыслов”: методика и принципы
            - **************Умения:************** создавать чанки, находить контекст их применения; работать с карточками смыслов
            - **********************Установки:********************** без понимания чанки бесполезны; не следует недооценивать эффективность повторений
        - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
            - **************Знания:************** как и почему работает метод Гоголя; суть ловушек образа мышления и “удушья”
            - **************Умения:************** применять метод Гоголя; не загонять себя; развивать интеллектуальную автономность и “open mind”
            - **********************Установки:********************** в учебе очень важна подготовка
    - ******************************************************Домашние задания и Практика******************************************************
        
        ********************************************************************************************************Сформируйте дерево тем по Урокам 1-3 в Облаке знаний********************************************************************************************************
        
        - Разверните закладку Урока дальше: Урок / Тема / Топики в теме / Ваше видение
        - Самостоятельная формулировка топиков помогает осмысливать материал
        - Начните с тех, которые кажутся максимально сложными и непонятными
        
        ******************************************************************************************************************Создайте по одному набору карточек на каждую тему Урока 3******************************************************************************************************************
        
        - Распишите темы Урока 3
        - По каждой теме составьте набор из 2-х карточек
        - Используйте пример практикума из урока
- **Урок 4. “Рушим мифы…”**
    - **Сегодня на Уроке 4. План**
        
        ********************************************Тема 1. Нейронауки и Обучение********************************************
        
        - Что нас мотивирует?
        Нейромодуляторы и мотивация, поведение, внимание
        - Как стать эффективным учеником? 
        Нейрофизиология учебы и знаний
        
        ******************************************Тема 2. Учеба как Проект******************************************
        
        - Метакогнитивные процессы
        - Метакогнитивный чек-лист
        - Как встраивать учебу в повседневную жизнь?
        
        ************************************************************Тема 3. Память и блоки смыслов************************************************************
        
        - Визуально-пространственная память
        - Метафоры и аналоги как инструмент запоминания
        - Техника “Дворец памяти”
        - Техника перемежения (интерливинг)
        
        ****************************************************************Тема 4. Прокрастинация и ловушки****************************************************************
        
        - Концепция гениальных достижений
        - Меняйте мысли - меняйте жизнь
        - Обзор техник
    - ******************************************************Тема №1: Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое?******************************************************
        
        ****************************************************************************************************Красный ходовой огонь всегда расположен на левом борту по ходу движения.
        Сердце и улица красных фонарей.
        Зачем? Какая связь?..****************************************************************************************************
        
        **********План по Теме №1:**********
        
        - **Что нас мотивирует?**
        Нейромодуляторы и мотивация, поведение, внимание
            
            > ************************************************************Легко учить то, что ИНТЕРЕСНО !!!************************************************************
            Отсутствие интереса усложняет обучение
            ********************************************************************************Интерес влияет на способность учиться********************************************************************************
            ”******************************Мне интересно!” -****************************** учиться легко
            ****************************”Не интересно…” -**************************** учиться тяжело
            Осознанное развитие эмоции “Интерес” пробуждает любознательность и помогает эффективно учиться
            > 
            
            ******************Что на мотивирует?******************
            Нейромодуляторы - это химические соединения определенных нейронов, влияющие на мотивацию, внимание и социальное поведение
            
            > ************************************************************************************************************************************************************Нейромодуляторы несут информацию о важности опыта и ценности его для будущего************************************************************************************************************************************************************
            Нейроны обрабатывают и передают содержание опыта
            > 
            
            <aside>
            ☝ ****Опыт для мозга - это ВСЕ, что происходит с нами.
            Все, что мы слышим, видим, знаем, чувствуем, едим и пьем и т.д.****
            
            </aside>
            
            **********Ацетилхолин, Допамин и Серотонин - основные нейромодуляторы
            Зоны влияния нейромодуляторов затрагивают весь мозг
            Они влияют на Мотивацию, концентрацию Внимания и социальное Поведение**********
            
            <aside>
            ☝ **********************************************************************************************************************************************************Нейромодуляторы регулируют, как быстро нейроны передают информацию друг другу**********************************************************************************************************************************************************
            
            </aside>
            
            **********Ацетилхолин -********** Формирует синоптические связи нейромодуляторов с корой мозга (кортексом), влияет на Долговременную память и концентрацию Внимания.
            
            ********Допамин - это НЕ “гормон” и НЕ “счастья” !********
            Миф о “гормоне счастья” - это яркий пример иллюзии компетентности и разницы между узнаванием и знанием
            ****************************************************************Активируется наличием вознаграждения, немедленного или отложенного во времени.
            Влияет на Мотивацию, принятие Решений и Обучение****************************************************************
            Вырабатывается в нейронах, расположенных в основании нервного столба
            
            <aside>
            ☝ ************************************************************************************************************************************************************Мотивация контролируется Допамином - химической субстанцией, а не силой воли************************************************************************************************************************************************************
            
            </aside>
            
            > ****************************************************************************************************************************************Больше риска и мало эмпатии в поведении при низком уровне серотонина****************************************************************************************************************************************
            У осужденных за насилие самый низкий серотонин
            > 
            
            ****************************Серотонин - отвечает за социальное поведение. У альфа-самцов обезьян самый высокий уровень серотонина в клане.****************************
            Вырабатывается в нейронах серотонина
            
            > ****************************************************************************************************************************Эмоции зависят от биохимии организма и вашей аффективной ниши****************************************************************************************************************************
            Аффективная ниша - это все, что на вас влияет снаружи и внутри. 
            Аффективную нишу можно изменять.
            > 
            
            ********************************************************Эмоции влияют на обучение !********************************************************
            Доказано, что эмоции связаны с когнитивными функциями и влияют на восприятие и внимание.
            Зависят от аллостасиса - взаимодействия различных систем и процесса распределения ресурсов внутри организма
            
            <aside>
            ☝ ******************************Мы создаем свои Эмоции, не они нами управляют******************************
            
            </aside>
            
        - **Как стать эффективным учеником?**
        Нейрофизиология учебы и знаний
            
            > **************************************************************************************************************************************************В префронтальной коре мозга идут процессы обучения, планирования и языка**************************************************************************************************************************************************
            Мозг - это система высокого уровня комплексности, в которой связи частей сильно переплетены между собой
            > 
            
            ****************************************************************************************Префронтальная кора головного мозга - это зона сетей принятия решений, планирования, обучения и языковой активности****************************************************************************************
            Нейронные связи переплетены, развитие одних нейронов в сети обязательно влияет на другие.
            
            <aside>
            ☝ **********************************************************************Когда вы учитесь, улучшаются принятие решений, планирование и способности к языкам**********************************************************************
            
            </aside>
            
            **********************************************************Физические упражнения сохраняют новые нейронные связи и активируют гипокампус на создание и укрепление нейронных связей.**********************************************************
            Забота об организме - это забота о мозге, потому что они в единой системе.
            
        - **********Итоги по Теме №1. Нейронауки и Обучение**********
            - ************Знания************
                - Как и на что влияют основные нейромодуляторы: ацетилхолин, допамин и серотонин
                - Физкультура помогает работе гипокампуса и укрепляет нейронные связи
            - ******************Установки******************
                - Мотивация зависит от состояния мозга, а не от силы воли
    - ******************************************************Тема №2: Учеба как Проект. Планирование. Задачи и контроль Прогресса******************************************************
        
        ******************************План по теме:******************************
        
        - ************************************************Метакогнитивные процессы************************************************
            
            > ************************************************Метакогнитивные процессы - это “знание о знании”, “мышление о мышлении”, “осознание об осознании”.************************************************ Основоположник подхода греческий философ Аристотель (384 - 322 до н.э.)
            > 
            
            <aside>
            ☝ ********************************************************Я знаю, что ничего не знаю********************************************************
            Так сказал философ Сократ (469 - 399 до н.э.)
            Это тоже метакогнитивный подход.
            **************************************************************************************************************Понимание своего знания дает мощный инструмент развития**************************************************************************************************************
            
            </aside>
            
        - ************************************************Метакогнитивный чек-лист************************************************
        Для выбора максимально эффективного движения к Цели
            
            > ****************************************************************************************************************************************Метакогнитивный чек-лист экономит время и помогает двигаться вперед****************************************************************************************************************************************
            Три этапа: планирование, мониторинг, оценка
            > 
            1. ************************Планирование************************
                1. Почему задача возникла?
                2. Какова точная точка Б?
                3. Где мне взять информацию?
                4. Сколько ресурсов нужно?
            2. ********************Мониторинг********************
                1. Четко ли я понимаю, что делаю?
                2. Приближаюсь ли я к Цели?
                3. Нужны ли изменения?
            3. ************Оценка************
                1. Достиг ли я Цели?
                2. На сколько в %, в долях, 3/4, половина?
            
            <aside>
            ☝ ******************************************************************************************************************************************Регулярный взгляд на себя и процесс со стороны повышает эффективность******************************************************************************************************************************************
            
            </aside>
            
        - **********Как встраивать учебу в повседневную жизнь**********
        Обучение - это набор множества элементов разного масштаба и значимости.
            
            > ************************************************************************************************************На Эверест не запрыгивают, а поднимаются шаг за шагом************************************************************************************************************
            Для формирования новых знаний и навыков нужно время
            > 
            
            ****************************************************************Как интегрировать учебу в жизнь?****************************************************************
            
            1. ****************************************Планировать на ночь****************************************
            Ночью мозг активно поработает над решением Задач.
            Ставь Задачи на неделю или на день, как удобно.
            2. ****************************************************************Разнообразить и делать перерывы****************************************************************
            Помодоро через 22 мин…
            На перерывах отключайся
            3. ******************************************************************************************Устанавливать время окончания учебы и работы******************************************************************************************
            Важно, чтобы оставалось время на отдых, хобби и развлечения
            
            <aside>
            ☝ ******************************************************************Учеба должна стать частью жизни !******************************************************************
            
            </aside>
            
            ************************************************************************************************************************************Только на надежном основании слой за слоем создается прочный фундамент глубоких знаний! Постоянство гарантирует Результат!************************************************************************************************************************************
            
            <aside>
            ☝ ******************************************************************Прогресс в учебе идет этапами.
            Сначала сложно - потом скачок !******************************************************************
            
            </aside>
            
        - **********************************************************Итоги по Теме №2. Учеба как Проект**********************************************************
            - ************Знания************
                - Что такое метакогнитивные процессы
                - Метакогнитивный чек-лист
            - ************Умения************
                - Проверять движение к Цели
                - Встраивать учебу в жизнь
            - ******************Установки******************
                - Прогресс в учебе требует времени
    - **Тема №3: Память, фрагментация и блоки смысла**
        
        ************************************Сегодня в Теме №3:************************************
        
        - **************************************************************Визуально-пространственная память**************************************************************
            
            > ****************************************************************************************************************************************************************************************************************************Визуально-пространственная память эффективная для переноса в долговременную****************************************************************************************************************************************************************************************************************************
            Метафоры и аналогии, техника “Дворца памяти”
            > 
            
            ****************************************************************************************************************************************************************************************************************************************************************Красный ходовой огонь всегда расположен на левом борту по ходу движения. 
            Сердце и улица красных фонарей
            Зачем это? Какая связь?
            
            Фонарь, сердце и “красные фонари” - красные.
            Сердце слева. Сердце - символ любви, а проституция - антитеза любви.****************************************************************************************************************************************************************************************************************************************************************
            Чем необычнее метафора, тем лучше для памяти.
            
            <aside>
            ☝ **************************************Хомо Сапиенс гораздо раньше начали помнить места и запоминать образы, чем научились говорить**************************************
            
            </aside>
            
        - ******************************************************************************************Метафоры и аналоги как инструмент запоминания******************************************************************************************
            
            ************************Метафоры************************
            Чем ярче впечатление, тем проще запоминание
            
            ************************************Метафоры в физике************************************
            Катионы - положительно заряженные частицы. 
            Анионы - отрицательные
            Метафоры и аналогии создают крючки в памяти на основе существующих знаний.
            
            ******************Аналогии******************
            Важно связывать с известным и понятным: процессы, даты, образы.
            
            ******************************************************************Аналогия для электрического тока******************************************************************
            Ток - это поток воды. Напряжение - как давление столба воды при перепаде. Важна связь с существующим пониманием или представлением.
            
            **********************************Аналогии в химии**********************************
            Двойные связи обезьян хвостами - бинарные связи. Сцепленные лапы - обычные. (Из немецкого научного журнала о химии начала 20 века)
            
        - **************************************************Техника “Дворец памяти”**************************************************
            
            Найдите знакомое в деталях помещение или пространство и разместите в нем образы новых знаний
            
            **********************************“Дворец памяти” - знакомое помещение или пространство**********************************
            Дворцы можно менять и создавать для разных направлений.
            
            **************************************************Техника “Дворец памяти”**************************************************
            
            1. **************************************************Найдите пространство и помещение, которое вы хорошо помните**************************************************
            Свой дом, офис или парк. Это станет вашим “дворцом”.
            2. ****************************************************************************************************************************************Расположите образы новых знаний в необычном контексте во “дворце”****************************************************************************************************************************************
            Сердце бьющееся на журнальном столике, кошка, жующая лук на диване.
            3. **************************************************************************************************************************Прогуляйтесь мысленно по дворцу и встретьте ваши новые знания**************************************************************************************************************************
            Чем необычнее метафоры или образы, тем ярче будет впечатление и след в памяти.
            
            <aside>
            ☝ **************************************************************************Учеба развивает креативность через навык создания образов и метафор**************************************************************************
            
            </aside>
            
        - ******************************************************************Техника перемежения (интерливинг)******************************************************************
            
            ****************************Перемежение (Interleaving) - малоизвестная, непростая, но очень эффективная техника формирования знаний****************************
            
            > ******************************************************************************Интервальные повторения и практика формируют устойчивые чанки******************************************************************************
            Создаем основу знания
            ****************Перемежение развивает гибкость и креативность****************
            Учимся применять знания максимально эффективно
            > 
            
            ******************************************************************************************************************************************************************************************************************************************************************************************************Перемежение - это изучение двух или более связанных концепций или навыков, вместо того, чтобы фокусироваться исключительно на чем-то одном за раз.******************************************************************************************************************************************************************************************************************************************************************************************************
            Вы можете смешивать разные темы и примеры, или переключаться с одной темы на другую несколько раз в процессе занятия.
            
            > ************************************************************************Классический подход изучения тем - Одна за одной с последовательным фокусом.
            Перемежение позволяет сравнивать и искать взаимосвязи между темами.************************************************************************
            > 
            
            ********************************************************Когда эффективно перемежение********************************************************
            
            1. ******************************************************************************************Когда темы связаны похожими методами решений******************************************************************************************
            Изменение объема разных фигур, изучения времен в языке, которые легко перепутать.
            2. ****************************************************************************************Когда вы уже как-то знакомы с каждой из тем****************************************************************************************
            Почитали три главы и теперь работаете с ними тремя вместе.
            3. ********************************************************************************************Когда вы хотите найти связи в разных областях********************************************************************************************
            Перемежение привело к множеству научных открытий.
            
            <aside>
            ☝ ********************************************************************************************************************************************************Перемежение делает вас мастером владения знания и создает глубокое понимание********************************************************************************************************************************************************
            
            </aside>
            
        - **************************************************Итоги по Теме №3 Урока 4. Память и блоки смыслов**************************************************
            - ************Знания************
                - Значимость метафор, аналогий для памяти
            - ************Умения************
                - Строить “Дворец памяти” из метафор и аналогов
                - Эффективно учить за раз несколько тем
            - ******************Установки******************
                - Учеба развивает креативность
    - ******************Тема №4: Прокрастинация и другие ловушки мышления******************
        
        ************************************Сегодня в Теме №4:************************************
        
        - **************************************************************Концепция гениальных достижений**************************************************************
            
            **Santiago Ramon y Cajal - отец нейронаук**
            Сантьяго Рамон Кахаль считал своим основным даром умение слушать других, менять мнения и признавать ошибки.
            До 20 лет он был хулиганом и попадал в тюрьмы.
            Решил начать изучать медицину после 22 лет и стал Нобелевским лауреатом.
            
            ************Charles Darwin был сначала священником************
            Чарльз Дарвин смог по-новому посмотреть на известные в его время теории развития геологических пластов и принципы классификации.
            Родился в 1809. Работу опубликовал в 1859. Умер в 1882
            
            > ******************************Занятия музыкой укрепляют нейронные связи******************************
            Не нужно быть Моцартом. Просто побренчать на гитаре лучше, чем не бренчать. Выбор огромен, можно найти свое решение.
            > 
        - **********************************************************Меняйте мысли - меняйте жизнь**********************************************************
            
            **************************************************************Меняйте мысли - меняйте жизнь!**************************************************************
            Образ мышления и мировоззрения - инструменты вашего развития
            
            <aside>
            ☝ ****************************************Мысли формируют Намерения
            Намерения - Действия
            Действия ведут к Результату****************************************
            
            </aside>
            
        - ************************Обзор техник************************
            
            **************************************************Саммари по прокрастинации**************************************************
            
            - Техника Помодоро
            - Метод Гоголя
            - Иллюзия компетентности
            - Избыточное обучение
            - Эйнштейнлунг. Ловушка образа мысли
            - “Удушье”
        - **********************************************Итоги по Теме №4 Урока 4. Прокрастинация и другие ловушки**********************************************
            - ******************Установки******************
                - Важно понимать Цель и быть проактивным в ее достижении
                - Поздно для начала не бывает
                - Мысли формируют Результаты
    - **************************************************Итоги Урока №4 “Рушим мифы…”**************************************************
        - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
            - **************Знания:************** как работают нейромодуляторы и на что они влияют; физкультура помогает гипокампусу и укрепляет нейронные связи
            - **********************Установки:********************** мотивация зависит от состояния мозга, от допамина, а не от силы воли
        - ************************************************Тема 2. Учеба как Проект************************************************
            - **************Знания:************** что такое метакогнитивные процессы и метакогнитивный чек-лист
            - **************Умения:************** анализировать развитие Проекта с мета позиций; встраивать учебу в жизнь
            - **********************Установки:********************** прогресс в учебе - это время
        - ********************************************Тема 3. Память и блоки смыслов********************************************
            - **************Знания:************** значимость визуально-пространственной памяти
            - **************Умения:************** создавать метафоры и аналогии; техники “Дворец памяти” и “Перемежение”
            - **********************Установки:********************** учеба развивает креативность; можно эффективно учить несколько тем сразу
        - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
            - **********************Установки:********************** важно понимать Цель и быть проактивным в ее достижении; для начала “поздно” не бывает; мысли формируют Результаты
- ********************************************************************************************************************************************************************Мини-практикум. Обучение в Notion. Как группировать материалы и строить план повторений********************************************************************************************************************************************************************
    - **************************************Сокращения и условные обозначения**************************************
        
        Касания указываются в начале строки в круглых скобках, например (2)
        
        Номер урока указывается просто цифрой после категории, через запятую
        
        Категории итогов (ЗУмУс): Знания (З), Умения (Ум), Установки (Ус)
        
        Тема №1: Нейронауки и Обучение - Нейронауки
        
        Тема №2: Учеба как Проект - Проект
        
        Тема №3: Память, фрагментация и блоки смыслов - Память
        
        Тема №4: Прокрастинация и другие ловушки мышления - Прокрастинация
        
    - ************************************************************************По Темам / Категории итогов / Уроки************************************************************************
        
        Нейронауки / ЗУ / 1,2
        
        Нейронауки / Ум / 1,2
        
        Прокрастинация / ЗУмУс / 1-4
        
        и т.д. как удобно
        
    - **********************************************************************По Категориям итогов / Тема / Уроки**********************************************************************
        
        Знания / Нейронауки / Уроки 1,2
        
        Знания / Нейронауки / Уроки 3,4
        
        Знания / Нейронауки / Все уроки
        
        ЗУс / Нейронауки / Урок 3
        
        и т.д.
        
    - ********************************************************************По Уроки / Темы / Категории итогов********************************************************************
        
        Урок 1 / Нейронауки / ЗУмУс
        
        Уроки 1-4 / Нейронауки / Установки
        
        Уроки 2,3 / Проект / Умения
        
    - ******************************************************************Группировка помогает спланировать******************************************************************
    - **********************************************************************************Сгруппируйте как вам удобно и Действуйте!**********************************************************************************
- **ИТОГИ КУРСА**
    - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
        - ******Знания******
            - О структуре курса
            - У нас 3 формата занятий: уроки, практикум и сессия вопросов и ответов, плюс - задания
            - Четыре темы изучаются послойно на каждом уроке по спиральной модели
            - Все новое - это нейронные связи в мозге
            - Мозг никогда не спит, он работает в фокусном и рассеянном режимах
            - Сон очищает мозг, помогает учиться и решать Задачи
            - Как работает консолидация Памяти
            - Значимость Астроцитов и Гипокампуса
            - Как работают Нейромодуляторы и на что они влияют
            - Физкультура помогает гипокампусу и упрепляет нейронные связи
        - ************Умения************
            - Вести конспект по методу Корнелла с тремя полями: в центре - для заметок, слева - для вопросов и мыслей, внизу - для выводов
            - Тренировать мозг, развивая внимание и концентрацию
            - Определять этапы консолидации Памяти
        - ******************Установки******************
            - Возможность учиться - это  привилегия
            - Образование - это достояние
            - Умение учиться - жизненно-важный навык человека 21 века
            - Перерывы - это не потеря времени, а переключение режимов работы мозга
            - Сон - важный процесс в Учебе
            - Важно уточнять Знания при каждом Касании
            - Жертвовать сном неэффективно
            - Мотивация зависит от состояния мозга, от допамина, а не от силы воли
    - ************************************************Тема 2. Учеба как Проект************************************************
        - ******Знания******
            - Для учебы нужны Ресурсы: ********************************************************************************Время, Внимание, Энергия. Они ОГРАНИЧЕНЫ********************************************************************************
            - Перерывы нужны для перезарядки энергии и внимания
            - Методика СМАРТ для Целей и Задач
            - Почему стратегия так важна?
            - Матрица анализа Стратегий
            - Чек-лист мониторинга процесса
            - Что такое метакогнитивные процессы
            - Что такое метакогнитивный чек-лист
        - ************Умения************
            - Создавать Облако знаний
            - Работать в группе по методике Р2Р и “Совет директоров”
            - Определять оптимальные стратегии
            - Быстро подводить итоги и планировать действия
            - Анализировать развитие Проекта с мета позиций
            - Встраивать учебу в жизнь
        - ******************Установки******************
            - Учеба - это Проект, в нем есть Цели, Ресурсы и Результаты
            - Облако знаний помогает работать с информацией и делает ее ценной
            - Нужно учиться с коллегами
            - На Эверест не запрыгивают, а поднимаются шаг за шагом - Цели достигаются поэтапно
            - Важно всегда идти вперед, пусть и маленькими шагами
            - Акцент на Успехах не менее важен, чем анализ ошибок
            - Прогресс в учебе - это время
    - ************************************************************Тема 3. Память и блоки смыслов************************************************************
        - ******Знания******
            - Для учебы важны Рабочая и Долговременная Память
            - У нас всего +/- 4 слота Рабочей Памяти
            - Новое может рассеиваться
            - Что такое Чанк и как работает Чанкинг
            - Чанкинг помогает освобождать слоты Рабочей памяти
            - Как создавать Чанки
            - Схема поиска контекста их применения
            - Ошибки при чанкинге
            - Карточки смыслов: Методика и Принципы
            - Значимость визуально-пространственной памяти
        - ************Умения************
            - Применение интервальных повторений
            - Определять и формировать Чанки
            - Создавать Чанки, находить контекст их применения
            - Работать с карточками смыслов
            - Создавать Метафоры и Аналогии
            - Техника “Дворец памяти”
            - Техника Перемежения
        - ******************Установки******************
            - Воспоминания создаются в моменте
            - Повторять важно с интервалами
            - Для сохранения новое следует перенести в Долговременную Память
            - Знания устойчив, когда соединены смыслом
            - Без понимания Чанки бесполезны
            - Не следует недооценивать эффективность повторений
            - Учеба развивает креативность
            - Можно эффективно учить несколько тем сразу
    - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
        - ******Знания******
            - Прокрастинация - это защита от экстра-затрат энергии
            - При защите от экстра-затрат энергии включаются центры боли
            - Действия выключают центры боли
            - Прокрастинация нарушает Память
            - Recall и синопсис эффективнее подчеркиваний и майнд-карт
            - Как и почему работает метод Гоголя
            - Суть ловушки образа мышления
            - Суть ловушки “Удушья”
        - ************Умения************
            - Техника “Помодоро”
            - Избегать иллюзию компетентности
            - Избегать избыточное обучение
            - Применять метод Гоголя
            - Не загонять себя
            - Развивать интеллектуальную автономность и Open Mind
        - ******************Установки******************
            - Действие выключает прокрастинацию
            - Важно формировать собственные мысли
            - Прокрастинация похожа на зависимость
            - В учебе очень важна Подготовка
            - Важно понимать Цель и быть проактивным в ее достижении
            - Для начала “поздно” не бывает
            - Мысли формируют Результаты
    
    ****************************Узнав, что Мозг - супер-машина, вооружившись мечом самурая знаний - Чанком, призвав в помощники Гоголя и разрушив вредные мифы, вы вышли на путь познания новой профессии и мира 21 века.****************************
    Вы можете честно гордиться своим достижением. 
    Инвестиции в умение учиться окупятся сторицей.
    
    <aside>
    ☝ **********************************************************************************В жизни всегда есть место новой профессии**********************************************************************************
    
    </aside>
    
    <aside>
    ☝ **********************************************************************Дорогу осилит идущий. Удачи в пути!**********************************************************************
    
    </aside>
    

### Модуль: Курс компьютерной грамотности. 10.08 - 17.08.2023

******************Преподаватель: Елена Бредова******************

### Урок 1. Компьютер и его базовые настройки

- **********Вступление**********
    
    Привет!
    Сейчас вы находитесь в специальном курсе, который создан для новых студентов ГБ. Этот курс будет полезен тем, кто только погружается в сферу современных технологий.
    Например, если вы не знаете, как устроен компьютер, какие горячие клавиши сделают вашу работу за ним проще и быстрей - этот курс будет полезен для вас.
    
    ************************************************Что внутри этого курса?************************************************
    Внутри - базовые вещи о компьютерной грамотности. Их нужно знать каждому. Вы можете изучить план курса в левом меню. Выбирайте для себя то, что вам непонятно.
    Если большая часть информации для вас новая - это нормально. Посмотрите курс - знания из него сделают ваше обучение легче.
    
    ******************************************************************************Кому точно можно пропустить этот курс?******************************************************************************
    Если вы знаете, что такое VPN, как компьютер устроен внутри, как работать с файлами в облачных хранилищах - вам можно смело пропустить этот курс.
    
    **************************Здравствуйте!**************************
    Сегодня урок посвящен компьютеру, и из чего он, собственно, состоит. Прежде чем мы об этом поговорим, я немного представлюсь.
    
    Меня зовут Елена Бредова, я в сфере ИТ примерно с 1999 года. Хотя в принципе раньше. Почему я сегодня рассказываю вам про эту тему? С компьютером я столкнулась в далеком 97 году, буду студенткой, когда мне понадобилось собрать собственный компьютер. Тогда это были древние 286, 386. Как вы понимаете, денег у студентов нет, поэтому я его собирала по запчастям. Это был увлекательный опыт, он позволил мне разобраться, из чего состоит компьютер и каким образом его можно модернизировать. Сегодня я вам об этом расскажу. Поехали?
    
- ************************План занятия************************
    
    Что мы сегодня разберем?
    Мы разберем как устроен компьютер, как можно подключить к нему внешние устройства, такие как мышка, монитор и другое. Узнаем, как найти на компьютере файлы и программы, и разберемся в самом важном аспекте - что же влияет на работоспособность нашего компьютера. Т.е. как заставить его работать быстрее.
    
- **********************************************************************Что такое компьютер? Виды компьютеров**********************************************************************
    
    **Что такое компьютер?**
    Компьютер - это устройство, которое помогает нам выполнять различные задачи от самых простых, например, набора текста, обработки фотографий или монтажа видео, до каких-то суперсложных. Я думаю, что вы, так или иначе, уже с ним сталкивались.
    
    **************************************************************************************************Какие же бывают компьютеры, как мы могли бы их с вами разделить?**************************************************************************************************
    
    - ************************************************************Настольный, стационарный компьютер************************************************************
    Состоит из системного блока, монитора и мыши и клавиатуры. Это обычный набор. ПК
        
        **************Плюсы:**************
          - Проще модернизировать, т.е. увеличить производительность.
        
        ****************Минусы:****************
         - Нельзя взять с собой
        
    - ****************************************************************Ноутбуки, переносные компьютеры****************************************************************
    Они намного компактнее и напоминают скорее большую книжку.
        
        ****************Плюсы:**************** 
         - Легко брать с собой и работать из любой точки мира, т.е. мобильность.
        
        ****************Минусы:****************
         - Увеличивать производительность ноутбука проблематично
         - Время работы от батареи недостаточно долгое
        
    
- ********************************************Как устроен компьютер?********************************************
    
    Мы поговорим именно о стационарном компьютере. Потому что с ноутбуком более или менее понятно, там единый блок. А что же касается такого компьютера?
    Оно состоит из системного блока, это мозг компьютера, главная часть внешних устройств, которые к нему подключаются.
    Что же это за внешние устройства? 
    Я уже говорила, что наш компьютер состоит из двух частей.
    
    **********************************Системный блок -********************************** это мозг и сердце нашего компьютера. Из чего он состоит? Есть основные части - это материнская плата. Она - фундамент оборудования, которое мы встраиваем в Системный блок. Но фундамент бывает разные, мы можем поставить какой-то легкий фундамент и поставить садовый домик, или поставить мощный фундамент и вырастить небоскреб. 
         Также важна материнская плата. Мы обязательно об этом поговорим. 
    Еще внутри системного блока прячется процессор, оперативная память, жесткий диск, а иногда бывает, что и не один жесткий диск, а так называемая карта расширения. К которому относится видеокарта, звуковая карта, сетевая карта. Чтобы питать эту систему, есть блок питания и порты, через которые мы и подключаем внешние устройства.
    
- ************************************Внешние устройства************************************
    
    А что же это за внешние устройства?
    Внешние устройства - это все устройства, которые не входят во внутренний состав нашего системного блока. Мы их еще называем устройствами ввода и вывода информации в компьютер. И их тоже можно поделить на 3 группы:
    
    1. **Устройства ввода информации**
    Клавиатура (с помощью нее набирается текс), мышь (является манипулятором, вы перемещаете курсор по экрану и совершаете какие-то действия) или классический планшет (помогает создавать рисунки, которые будут сразу появляться на экране).
    2. **Устройства вывода информации**
    Экран (монитор) демонстрирует результат работы компьютера (вывода информации). Проектор, который можно подключить к системному блоку или принтер, также колонки, наушники и тд.
    3. **Устройства хранения информации**
    Внешние жесткие диски или более маленькие носители - флешки.
- **************************************************************************Способы подключения устройств. Порты.**************************************************************************
    
    Как же подключить устройства ввода-вывода информации или, если говорить простым языком мышь, клавиатуру, наушники?
    Все достаточно просто. Если вы посмотрите на системный блок с обратной стороны, то увидите блок разъемов. Они будут разделены по типам. 
    Устройство, которое вы будете подключать к этим портам опять же, имеют определенные штекеры. И все задумано так, чтобы вы практически не могли ошибиться. А некоторые порты даже подписаны.
    Если вы обратите внимание, то, например, порты рс2, с помощью которых подключается мышка и клавиатура даже подписаны, на них есть иконки.
    На одном мышь, на другом клавиатура, чтобы вы не ошиблись с выбором.
    А круглые разъемы отвечают за звук. Причем, красный блок за ввод звука (микрофон), а зеленый и синий отвечают за вывод звука, туда мы можем подключить колонки или какой-то сабвуфер.
    
    Но чаще всего мы пользуемся именно USB портами. Они бывают нескольких типов, и мы сейчас разберемся, какие именно и почему они бывают разных цветов. Вы знали, что цвет разъема USB портов говорит нам о его серии?
    
    Белый - это USB первой версии, он позволял нам передавать данные до 12 МБ в секунду. Версия на самом деле уже устаревшая, и вы практически не встретите такие порты, но тем не менее они могут вам попадаться.
    
    Черный - это USB 2 версии, он позволяет передавать данные уже с большей скоростью до 480 Мб в секунду. Но все равно это недостаточно много.
    
    После USB 2.0 у нас появился порт USB 3.0, такие порты обозначаются синим цветом и позволяют нам передавать информацию со скоростью до 5 Гб в секунду. Обратите внимание, какая разница появилась в скоростях.
    
    Красный и желтый порты, их тоже можно встретить, говорят, что разъем не будет отключаться от питания даже если компьютер будет в режиме сна или ожидания. Например, вы можете поставить на зарядку свой телефон.
    
    Если цвет порта бирюзовый - это уже версия 3.1 USB с еще большей скоростью передачи данных до 10 Гб в секунду. Но есть тонкость. Обратите внимание на штекер, который вы будете вставлять в этот порт. Если, например, у вас USB-порт синего цвета с возможность передачи данных до 5 Гб, а вы будете подключать разъем, в котором есть такое же обозначение, то шнур, например, белого цвета такую скорость поддерживать не будет.
    Обращайте внимание, пожалуйста, на совпадение цветов.
    
- ******************************Шнуры и разъемы******************************
    
    Теперь, когда мы заговорили про шнуры и разъемы, давайте посмотрим, а что у нас сейчас есть? Какие разъемы существуют? 
    Есть так называемый Type-A, они самые обыкновенные и распространенные, подходят для флешек, мышек, клавиатуры.
    Существует разъем Type-B, который обычно бывает у принтеров. Я думаю, что вы встречали, например, принтеры или сканеры. Есть mini Type-B, он относится  к цифровым камерам, модемам, кардридерам. Есть еще и микро Тип-Б и ему на смену пришел самый новый такой разъем, уже достаточно распространенный на сегодняшний момент это Type-C.
    Type-C новый и наиболее перспективный вид. Он поддерживает стандарт 3.1, это достаточно высокая скорость передачи данных.
    
- ****************************************************************************************Как включить, выключить, перезапустить компьютер****************************************************************************************
    
    Мы немного разобрались с тем, какие порты и разъемы бывают, теперь обратимся к тому, как нам включить и выключить компьютер.
    Есть несколько способов
    
    1. Первый самый простой - воспользоваться кнопкой, которая находится на системном блоке. Она обычно достаточно заметная. Вы просто ее нажимаете и компьютер включается. 
    2. Если мы говорим о ноутбуке, то обычно она находится в верхнем либо правом, либо левом углу, и она специально обозначена, чтобы был виден значок именно питания. Нажмите и компьютер включается.
    
    Как выключить компьютер?
    Сейчас ОС позволяет при помощи кнопки выключать компьютер. Но правильнее будет, конечно, это делать через меню. В правом нижнем углу нажимаете и выбираете, что именно вы хотите сделать (завершить работу или перезагрузить)
    
    Что же такое режим сна?
    Например, вы не пользуетесь компьютером и не хотите, чтобы он зря работал, то можете компьютер как бы усыпить. Конечно, он сам через какое-то время погружается в режим сна, это тоже можно настроить, но вы можете это сделать принудительно при помощи этого пункта меню. 
    
- ******************************************************************Как найти на компьютере файлы или программы?******************************************************************
    
    Еще один важный аспект. Как найти на компьютере файлы или программы?
    Все очень сильно зависит от вашей ОС. В Виндоус для этого нам нужен проводник. В нижнем меню находите желтый значок папки, нажимаете, и перед вами открывается список жестких дисков, которые подключены к вашему компьютеру. 
    Жесткий диск может быть не один, а несколько. А может быть так, что один жесткий диск разделен на несколько частей. Допустим, Диск С и Диск Д.
    Щелкнув по жесткому диску, вы видите свои файлы, программы, которые установлены и т.д. Я рекомендую всегда разбивать жесткий диск хотя бы на 2 части. И первую часть - Диск С отдать полностью, если мы говорим про Виндоус, под ОС. А файлы с фотографиями, архивами и тд хранить на другой части жесткого диска, например, на диске Д. Физически это один диск, просто он фигурально разбит на 2 части.
    Для чего нужно поступать именно так? Например, чтобы случайно не повредить ОС или если нам понадобится удалить или переустановить ОС, чтобы наша информация не была затерта.
    
    Как нам найти программы, установленные на компьютере?
    Обычно при установке ОС, будь то Виндоус или МакОС в комплекте идет определенный пакет программ. Чтобы увидеть, что уже установлено на компьютере, вы всегда может нажать внизу на значок “Пуск”, он выглядит как окошки, и во всплывающем меню вы увидите список установленных программ. Увидеть все программы можно, нажав на кнопку “Все приложения”, тогда вы увидите полный список установленных программ.
    
- **************************Параметры компьютера и их влияние на его работоспособность?**************************
    
    Какие параметры есть у компьютера и как они влияют на его работоспособность?
    Что может повлиять на скорость компьютера?
    
    Я уже говорила, что фундаментом нашего системного блока является материнская плата. Чем мощнее материнская плата, тем больше мы можем иметь возможности увеличивать мощность нашего компьютера. 
    Также на работоспособность влияют: микропроцессор, оперативная память, видеокарта, жесткий диск и количество одновременно запущенных приложений. Но об этом мы сейчас поговорим поподробнее.
    
    ************************************Материнская плата является основой.************************************ К ней мы подключаем и микропроцессор, и оперативную память и все, что есть в системном блоке. Поэтому это самый важный и основной элемент. Не зря он называется материнская плата.
    
    **********************************Микропроцессор -********************************** его еще называют центральный процессор, и это одна из составляющих, которая отвечает за производительность компьютера. Есть два параметра: тактовая частота и количество ядер. Чем выше тактовая частота, тем больше операций производит наш компьютер за секунду. А ядра позволяют расширять эту мощность. Получается, что для дома или офиса, если вам не нужно решать какие-то суперзадачи, то достаточно двухядерного процессора, двух поточного с частотой 2-3 ГГц (гигагерц)
    
    Следующая составляющая оказывающего влияние на производительность - ****************************************оперативная память.**************************************** 
    Что такое оперативная память? По сути, оперативная память - это запоминающее устройство, которое кратковременно хранит данные о том, какие вычисления производятся, какие действия происходят и так далее. Отвечает за хранение всех системных процессов. Поэтом, чем больше оперативной памяти, тем быстрее работает и обрабатывает запросы ваш компьютер.
    Один из важных факторов - это ****************************************************объем оперативной памяти,**************************************************** а второй параметр - ********************************быстродействие,******************************** потому что оперативная память бывает разной. 
    Измеряется она в наносекундах. 
    Что нам понадобится для обычной работы, офиса или дома? 
    В принципе достаточно, конечно, будет 4-8 ГБ, но я бы порекомендовала поставить не меньше 16. А если вы увлекаетесь играми, обрабатываете фотографии или работаете с графикой, то нужно расширять оперативную память до 32 Гб, я думаю, это будет оптимальный вариант.
    
    Еще одна составляющая - ************************видеокарта.************************ Самый важный элемент для нашего компьютера или графической станции. 
    Видеокарта отвечает за вывод видео и графики на экран. Если мы гвоорим про домашний или офисный компьютер, то можно обойтись без внешней видеокарты.
    Есть встроенные в материнскую плату и их должно хватить. Но если вы любите поиграть в игры или занимаетесь обработкой видео графики, то видеокарта - немаловажный элемент, на который стоит обратить внимание при покупке. Я думаю, что вас всегда могут проконсультировать в магазине. Еще эту информацию можно найти в сети.
    
    ****************************Жесткий диск.**************************** 
    Без жесткого диска тоже никуда. Если без внешней видеокарты мы обойдемся, то без жесткого диска никак. На жестком диске хранится все, что относится к софту: файлы ОС, ваши личные файлы и тд. 
    В настоящее время существует три типа жестких дисков. Основные - HDD, SDD, про третий я расскажу позже.
    На что стоит обращать внимание?
    Конечно же на размер жесткого диска. Чем больше информации, которую нужно хранить, тем больше нужен жесткий диск. 
    А еще на что мы должны обращать внимание?
    На размер свободного пространства, которое остается после того, как мы загрузили на компьютер все, что хотели. Это важный параметр, который влияет на производительность. Чем меньше свободного пространства остается, тем меньше возможностей у ОС или программ, которые вы запускаете и тем больше компьютер будет тормозить.
    Универсальная рекомендация - это оставлять не меньше 15-20% свободного пространства, чтобы у вас не было проблем с производительностью. Но для дома и офиса в принципе подойдет диск 256 Гб.
    Я бы рекомендовала иметь отдельный диск, который внешне подключается для хранения архивов. На случай если что-то случится с вашим основным диском или, например, с ноутбуком, чтобы вся информация у вас обязательно сохранилась. Основную архивную информацию старайтесь хранить на внешних дисках.
    
- **********************************************Какая разница между HDD и SSD?**********************************************
    
    Разберем, какие есть типы жестких дисков и почему они по-разному называются?
    Какова разница в устройстве HDD, SSD?
    
    **Что из себя представляет диск, который относится к типу HDD?**
    Это пластины, их может быть несколько, которые находятся на общей оси. Внутри этого диска также существует считывающая головка, которая записывает информацию на диск и считывает с него. Если мы вскроем его, то увидим, как он выглядит изнутри. 
    
    **********************************А как выглядит изнутри диск другого типа?**********************************
    Он называется твердо накопительный и представляет собой просто ряд пластинок, как флешка, только больше.
    
    ****************************************************************************************************Какие различия и преимущества есть у каждого типа?****************************************************************************************************
    Начнем с HDD. Он дешевле его более нового собрата, за счет технологий. 
    Один из плюсов - это достаточно большой объем памяти, можно найти до 20 Тб. А у SSD - максимальный объем 8 Тб, технологии пока не позволяют сделать больше.
    Преимуществом HDD также является то, что при необходимости мы почти всегда можем восстановить потерянную информацию при помощи специальных утилит или специальных мастерских. 
    Еще одно преимущество дисков этого поколения в том, что при отсутствии питания с ними ничего не случится. Если же SSD полежит без питания год, а некоторые вообще пару недель, то есть вероятность, что наша информация затрется.
    
    Теперь про преимущества SSD дисков. Так как это практически микросхема, в них нет механических частей (головок, крутящих элементов), поэтому они практически бесшумны и потребляют значительно меньше энергии. Их используют в ноутбуках для увеличения производительности, чтобы вы могли обходиться без сети достаточно долго. 
    Конечно, они работают значительно быстрее, и мы быстрее получим доступ к информации. Опять же из-за того, что у нас нет механики.
    
    У каждого типа есть плюсы и минусы. Какой именно жесткий диск выбрать, решать вам. Но так как технологии не стоят на месте, минусы и плюсы объединили, таким образом появился третий тип жестких дисков - гибридные диски SSHD, эта аббревиатура сложения обеих технологий.
    Внутри такого диска находится традиционный диск, при этом некоторая часть отдана для быстрой памяти. У них средняя скорость, но тем не менее это хороший компромиссный вариант.
    
    Последний параметр, который очень влияет на скорость работы компьютера - это количество одновременно открытых программ. Есть программы, которые потребляют достаточно много оперативной памяти и занимают практически ее полностью. Например, браузер Хром. Поэтому, если вы видите, что компьютер притормаживает, посмотрите, можно ли что-то закрыть? И вы увидите, как изменится работа.
    
- **********Итоги**********
    
    Подведем итоги.
    Мы поговорили о том, что такое компьютер. 
    Разобрались немного, как он устроен, поговорили о подключении внешних устройств и их параметрах.
    В заключение я бы хотела сказать, наверняка у вас возникнет вопрос, как же разобраться во всех параметрах, как их посмотреть?
    
    **************Параметры,************** которыми обладает компьютер, всегда доступны. В физическом магазине их можно увидеть на карточке, которая выставлена рядом с ноутбуком или компьютером. Там перечислены все параметры, о которых мы говорили: количество оперативной памяти, объем жесткого диска и тд.
    А в интернет-магазине эта информация всегда есть в карточке товара. 
    И в самом компьютере можно увидеть, если открыть информацию о системе и посмотреть конфигурацию нашего компьютера. 
    
    Производительность - это всегда разумное сочетания нескольких элементов. Сочетание оперативной памяти, жесткого диска, материнской платы и тд. Поэтому я желаю вам успехов в освоении данного направления.
    Я верю у вас все получится. И до новых встреч в эфире.
    

### Урок 2. Управление окнами

- ************************************************Вструпление и План урока************************************************
    
    Здравствуйте!
    Сегодня мы поговорим с вами об управлении окнами. Прежде чем углубляться в теорию и немного практики, давайте познакомимся. Меня зовут Елена Бредова, я работаю в ИТ-сфере с 1999 года. За это время успела накопить достаточно большой и разнообразный багаж знаний, которыми с удовольствием поделюсь с вами.
    Посмотрим, что будет на уроке:
    мы с вами поговорим про виды окон, как ими управлять, как перемещать их на рабочем столе, как сделать скриншот и запись экрана.
    
- ******************Что такое окно?******************
    
    Для начала разберемся, собственно, а что такое окно?
    Окно - это прямоугольная область экрана, в который вы видите либо содержание дисков, либо содержимое программы, либо какие-то служебные сообщения, документы.
    
    Наверняка вы открывали на компьютере, например, Ворд, почту, Ватсап, еще проводник, чтобы посмотреть файлы и другие программы. 
    Операционные системы многозадачны, и вы можете работать одновременно со многими приложениями. Но это приводит к захламлению экрана, окна заслоняют друг друга. Сегодня мы узнаем, как сделать работу с окнами удобнее, чтобы быстрее решать задачи.
    
- **************************************Элементы управления**************************************
    
    Теперь разберемся, что такое элементы управления - они есть у каждого окна. Окна программ или проводника для просмотра файлов обычно содержат три элемента: “свернуть окно”, “развернуть окно” и “закрыть окно”. В разных операционных системах внешний вид этих значков может отличаться - мы обязательно посмотрим, как это выглядит.
    
    Итак, как мы можем управлять, повелевать окнами в ОС Виндоус?
    Запустим проводник. Вот эта прямоугольная область, которая открылась с содержимым нашего жесткого диска, и называется окном. Кстати, окно вы видите и, например, при очистке корзины. Выбираем “очистить корзину”, и вот это маленькое всплывающее окошко - тоже окно со своими элементами управления.
    
    Окно мы нашли. Где же элементы управления им?
    В правом верхнем углу - три значка. При наведении на них мышкой мы получаем подсказку системы, что выполняет тот или иной значок. 
    Первый - это “свернуть”, при нажатии на него окошко спрячется вниз в панель задач.
    Горящий значок под этой программой означает, что она не закрыта, а свернута и работает в фоновом режиме. Чтобы развернуть окно обратно, мы снова нажимаем на него.
    
    Следующий элемент похож на прямоугольник. При нажатии на него окно разворачивается во всю ширину - иногда это нужно для рассмотрения деталей в большем объеме информации. 
    Чтобы свернуть окно обратно, нажимаем на этот же значок. Для разворачивания окна на весь экран можно также щелкнуть по заголовку окна два раза ЛКМ. 
    Двойной щелчок по заголовку окна поможет и вернуть окно к исходным размерам.
    
    Последний значок в этом ряду - это “закрыть”, изображенный в виде крестика. При нажатии на него окно закрывается.
    
- **************************************************************************************************************************Размещение нескольких окон на рабочем столе, переключение между окнами**************************************************************************************************************************
    
    Мы разобрались, как свернуть, развернуть и закрыть окно. Что еще мы можем делать мы с окнами?
    
    Окна мы можем:
    
    - Перемещать
    - Менять их размер
    - Упорядочивать
    - Переключаться между ними
    
    Предварительно посмотрим на клавиатурные сокращения, чтобы облегчить работу с окнами.
    Это клавиатура для работы с ОС Виндоус, ее отличительная черта - в наличии кнопки с иконкой Виндоус, которая называется Вин.
    Какие кнопки нам пригодятся?
    Кнопка Esc, которая находится в левом верхнем углу.
    Tab - для переключения между окнами
    Alt - для выбора сочетания клавиш
    Ну, и стрелочки вверх, вниз, влево, вправо - чтобы упорядочить окна.
    
- ****************Практика****************
    
    Перейдем от теории к практике.
    Посмотрим, как можно работать с окнами в ОС Виндоус.
    Что мы можем делать с окнами? **********************Перемещать.********************** Для чего это может понадобиться?
    Представьте, что у меня уже открыто одно окно, я запустила еще программу - и вот окно программы закрыло предыдущее окно. Я могу ЛКМ зажать заголовок окна и, не отпуская клавишу, переместить его в нужное мне место. Окон может быть много, но активное только одно. Это то окно, где мы совершаем какие-то действия: вводим текст, перемещаем курсор. Перемещать мы можем только активное окно - в данном случае мы поменяем его местами с другим.
    
    Что еще мы можем делать с окнами?
    Да, мы их переместили, но из-за больших размеров невозможно разместить два окна рядом, чтобы было видно их содержимое. Мы можем поменять размеры окна!
    Итак, переместим окно, чтобы было удобнее с ним работать, зажав левую кнопку мыши. Теперь для увеличения окна в ширину наводим курсор на его край, пока вместо курсора не появится значок со стрелочками влево, вправо. Далее мы зажимаем ЛКМ и тащим этот край на нужное расстояние. Мы можем окно как расширить, так и уменьшить в размере.
    
    А как увеличить его в высоту?
    По тому же принципу. Подводим курсор к нижнему краю окна, пока не появятся знакомые стрелочки, только теперь вверх, вниз. Зажимаем ЛКМ и не отпускаем, пока окно не станет нужного нам размера. Тащим его либо вниз, либо вверх, увеличивая или уменьшая окно по высоте. Так получилось довольно симпатичное окошко, с которым удобно работать.
    
    Есть еще один способ сразу увеличить окно и по ширине и по высоте. Для этого нам понадобится угол окна: подводим к нему курсор и видим третий тип стрелки “диагональный вверх, вниз”. Это значит, что мы можем зажимать ЛКМ и тянуть это окно настолько, насколько нам необходимо. И оно будет увеличиваться или уменьшаться пропорционально по высоте и ширине. Идем дальше.
    
- **************************************Упорядочивание окон**************************************
    
    Мы также можем окна упорядочивать.
    Разберемся, что это такое и как работает? Запустим какую-нибудь еще программу, допустим, браузер. У нас уже три окна на рабочем столе. И это не предел. Мне нужно их расставить так, чтобы видеть все окна сразу. Я, конечно, могу подогнать их по размеру, сделать одно меньше, другое больше.
    Но есть более простой способ упорядочивания окон. Наведем мышку на элемент управления “развернуть”. Появляются варианты расположения окон: двух рядом, одно из которых занимает 2/3 экрана; трех узких в одном ряду; трех окон с одним широким, находящимся посередине.
    
    Решим, куда разместить проводник. Чтобы задать его местоположение на рабочем столе, нужно выбрать схему расположения окон. Я просто щелкну по этому прямоугольнику, чтобы показать системе, куда нужно встроить окно. И вот проводник оказался на своем месте. Теперь разместим два оставшихся окна. Белым помечена область, которая будет больше и слева. Белый прямоугольник отвечает за область, которая расположена справа, она поменьше. Пусть браузер будет в этом окне, а архиватор расположится здесь. Буквально за несколько секунд мы расположили окна на рабочем столе так, что видим содержимое каждого окна и можем спокойно работать: перетаскивать файлы, сверять содержимое. Это очень удобный вариант работы с окнами.
    
    Конечно, данный вариант доступен для Виндоус 11. 
    При работе с Виндоус 10 для упорядочивания окон пригодятся клавиатурные сокращения Вин + стрелочка вверх, вниз, влево или вправо, чтобы указать, как окно должно располагаться на экране.
    
- ************************************************Перемещение между окнами************************************************
    
    Последний пункт, который хотелось бы рассмотреть, - это перемещение между окнами. Итак, у нас есть два окна, и нам нужно обращаться то к одному, то к другому. Как мы можем между ними лавировать?
    Первый и самый простой способ - это клик по окну.
    Мы с вами уже разбирали, что есть активное окно, оно всегда одно. Щелкнув по окну, мы делаем его активным, и система ждет наших действий с ним.
    
    Следующий вариант перемещения - нажать на соответствующий значок в панели задач, чтобы активировать это окно. Я нажимаю, и активным окном снова становится проводник.
    
    Как еще мы можем переключаться между окнами?
    Для этого пригодится сочетание клавиш Alt + Tab.
    
    Можно использовать не только клавиатурные сокращения, но и иконку на панели задач. Мы вызываем рабочий стол и выбираем, какое окно будет активным.
    
- ********************************************************Как сделать скриншот экрана?********************************************************
    
    Следующая распространенная задача - как сделать скриншот и запись экрана?
    Скриншот - это снимок экрана. Для чего он может понадобиться? Например, вам нужно объяснить, где находится та или иная кнопка на экране. Можно просто сделать скриншот этой кнопки, т.е. мгновенный снимок экрана.
    
    Разберемся, как сделать снимки и запись экрана. Но перед этим посмотрим на клавиатуру и найдем волшебную кнопку, чтобы быстро и легко делать скриншоты в ОС Виндоус. Эта кнопка PrintScr, при нажатии на которую и делается снимок экрана. Он будет закинут в буфер обмена, в память компьютера. А дальше можно вставить эту картинку через сочетание клавиш Ctrl + V в любой документ, например, в Пэйнт.
    
    Снимок экрана можно сделать и путем нажатия клавиш Вин + ПринтСкр. Система сохранит рисунок в формате .пнг самостоятельно, а найти его можно в папке “Изображения” (Мой компьютер / Изображения / Снимки экрана).
    
    Сочетание клавиш Alt + PrintScr, сделает скриншот не всего экрана, а только активного окна. Дальше снимок закидывается в буфер обмена, и его можно вставить в любой документ.
    
    Также есть специальная программа-утилита, которая позволяет делать набросок на фрагменте экрана. Для запуска нужно нажать три клавиши: Win + Shift + S.
    
    Посмотрим, как работают скриншоты в действии. Запустим какие-нибудь окна - пусть это будут браузер и проводник.
    
    Попробуем сделать скриншот нажатием на PrintScr,
    Сфотографировалось все содержимое экрана. Что делать дальше с этим скриншотом? Как я уже говорила, система закидывает его в буфер обмена, и дальше его можно вставить в любую программу.
    
    Следующий способ, который был озвучен - это сочетание клавиш Вин + PrintScr. Система делаем снимок всего экрана, в который попадают все окна, рабочий стол, и сохраняет его в папку “Изображения” (Снимки экрана).
    
- ********************************************Универсальные средства********************************************
    
    Ну, и куда без универсальных средств, которые будут работать на всех ОС!
    Что у нас есть в арсенале?
    Есть программы, которые позволяют делать скриншоты экранов, есть дополнения к браузеру, расширяющие его возможности, также есть онлайн-сервис для записи видео.
    
    Итак, программы.
    Lightshot - ее можно скачать как для Виндоус, так и для МакОС, поставить на компьютер как отдельную программу и делать с ее помощью скриншоты. Есть аналог Клип2Нет - это тоже программа, которую необходимо ставить на компьютер.
    
    А есть другое семейство - дополнения к браузеру, тот же Лайтшот. Установить его можно через главное меню (вкладка с дополнениями). В браузере появится фирменный ярлык дополнения Лайтшот, при нажатии на который можно выбрать область для сохранения и зафиксировать ее мышкой. При необходимости обязательно снимем отдельный видеокурс по установке дополнений.
    
- **************************************************Как сделать видео экрана?**************************************************
    
    Для записи видео в любой ОС можно использовать универсальный онлайн-сервис Screen Capture. Единственное ограничение в бесплатной версии - водяной знак, который невозможно убрать.
    Если запись не профессиональная, то такой вариант вполне подойдет. Нажимаем на запись экрана. Сервис запрашивает, какой экран записывать. Записываем вкладку браузера. Запись экрана пошла. После окончания записи нажимаем на клавишу “Стоп”. Видео можно сохранить на компьютер.
    
- **********Итоги**********
    
    Подведем итоги.
    Мы разобрали, что такое окно, как оно выглядит, и какие у него есть элементы управления. 
    Также мы узнали, что можем делать с этими окнами: перемещать, увеличивать, уменьшать, упорядочивать и переключаться между ними. 
    И, что немаловажно, разобрались, как сделать скриншот и запись экрана.
    Надеюсь, этот урок был для вас понятным и полезным. А я прощаюсь с вами. До новых встреч!
    

### Урок 3. Базовая безопасность при работе с компьютером

- **************************************Вступление и План урока**************************************
    
    Сегодня мы погрузимся в важную тему - базовую безопасность при работе с компьютером
    
    На занятии поговорим про:
    
    - ****************************************************************************************************************************пароли - какими они должны быть, как их хранить и использовать****************************************************************************************************************************
    - **************************************вирусы и антивирусы**************************************
    - ******VPN - что это, и зачем нужно******
- ********************************Пароли для входа********************************
    - ******************О паролях******************
        
        Представьте ситуацию: аккаунт Ольги в ОК взломали, весь урожай из Фермы собрали и вывезли, а друзьям поставили единицы. Теперь на встрече одноклассников Ольге не рады. История смешная, но показательная: мошенничество преследует нас не только в обычной офлайн-жизни, но и онлайн. Нужно быть внимательными, чтобы не потерять личные данные, деньги, репутацию и даже технику.
        
        Разговор о базовой безопасности начнем с паролей. 
        Они должны быть сложными: из букв (заглавных и строчных), цифр и спецсимволов (#, $, & и тд). 
        ************Длина************ еще важнее сложности: пароль из 7 символов компьютер подберет за несколько часов, а пароль из 10 символов - за несколько лет. Поэтому минимальная длина пароля - 8 символов, но чем больше, тем лучше.
        
        Не используйте в качестве пароля личные данные (например, дату рождения, номер СНИЛС или фамилию). Такие пароли легко запомнить, но они уязвимы, их можно быстро раскрыть с помощью некоторых баз.
        
        Для каждого сайта создавайте отдельный пароль. Иногда базы с личными данными на разных сервисах попадают в открытый доступ - среди них могут быть и пароли. Если ваш общий пароль для разных сайтов станет известен, вы можете потерять доступ ко всем из них.
        
    - ************************************************************Как придумать надежный пароль?************************************************************
        
        Есть лайфхак - можно взять стихотворение, которое вы помните наизусть, или запомнившуюся фразу и зашифровать их: заменить буквы на понятные символы.
        
        > ******************************************************Я помню чудное мгновенье - I_p0Mny|_4ydn0e_Mg№0veniE******************************************************
        > 
        
        Фраза остается читаемой, и запомнить такой пароль легко
        
        Другой способ придумывать надежные пароли - сервис для их генерации. Таких программ в интернете много, вы можете выбрать ту, которая вас устраивает. Все достаточно просто и не приходится ломать голову над тем, как сделать пароль сложным.
        
    - ******************************************Как запомнить пароль?******************************************
        
        Мы уже обговорили, что пароли должны быть разными для разных сайтов. 
        Как же запомнить, где какой используется?
        Можно создать сложный пароль и добавить к нему зашифрованное название ресурса. Шифр с названием сервиса можно добавить к паролю через спецсимвол, точку, тире - как удобнее.
        
        Чтобы не запутаться в паролях, нужно определиться с порядком цифр и букв, с их размером (когда заглавные, а когда сточные). Т.е. нужно придумать систему шифрования и никому о ней не рассказывать.
        
    - **************************************Где хранить пароли?**************************************
        
        Если паролей много, и они сложные, хранить их в голове не получится - можно забыть. Есть два других варианта:
        
        1. ********************************************Записать в блокноте -******************************************** не самый безопасный вариант, если блокнот хранится на видном месте. Придется убрать его в закрытый ящик или сейф, чтобы защитить от посторонних.
        2. **************************************Менеджер паролей -************************************** это программа для хранения паролей. Доступ к ним можно получить только введя мастер-пароль - пароль от всех паролей.
        
        Менеджеров паролей много. Один из самый популярных - [Kaspersky Password Manager](https://www.kaspersky.ru/password-manager). Но есть и другие программы. Выберите удобный для вас инструмент, но лучше избегайте зарубежных сервисов и менеджеров паролей в браузерах.
        
        Еще одна рекомендация - уберите автозаполнение форм (когда браузер запоминает информацию и подставляет ее), чтобы ваши данные не хранились в браузере.
        
        **************Выводы:**************
        
        - Не храните информацию о паролях и логинах на зарубежных сайтах
        - Не храните пароли на бумаге. Или убирайте блокнот с паролями в надежное место.
        - Отключите автозаполнение форм.
        - Проверьте параметры восстановления пароля. Например, если вашу почту взломают, у вас должна быть возможность восстановить пароль с помощью мобильного или резервной почты. Иначе доступ можно потерять безвозвратно.
        - Используйте двухфакторную авторизацию, т.е. двойную систему защиты: сперва вводите пароль, затем код подтверждения, который приходит на телефон, указанный при регистрации. С двухфакторной авторизацией взломать аккаунт гораздо сложнее.
        - Регулярно менять пароли. В мире все ненадежно: базы вскрываются, серверы сливают информацию, происходят утечки данных. Следите за информацией в СМИ, чтобы вовремя узнать об утечке данных, и раз в 3 месяца меняйте пароли. Чтобы не запутаться, в пароле можно зашифровать дату смены по принципу названий сайтов.
- **************************************Вирусы и антивирусы**************************************
    - ******************О вирусах******************
        
        Вирусы не попадают на смартфоны или компьютеры воздушно-капельным путем. Любой вирус запускает сам пользователь. Например, когда загружает бесплатную программу вместе с вирусом, использует зараженную флешку или переходит по ссылке из письма со спамом.
        Виндоус особенно подвержен атакам, поэтому будьте внимательны. Чтобы обезопасить свой компьютер, не открывайте письма от неизвестных отправителей, не скачивайте из них файлы и не переходите по ссылкам.
        
        Иногда мошенники маскируются под известные сайты. Письмо выглядит также, как и другие, которые присылала компания. Но ссылка ведет не на страницу оплаты домена, а на пополнение электронного кошелька мошенников.
        
        Перепроверяйте информацию, прежде чем совершить какое-либо действие.
        
    - ********************************************************Меры предосторожности в сети********************************************************
        
        Залог безопасного исследования сети - сочетание здравого смысла и программы-антивируса.
        
        Не передавайте свои персональные данные незнакомым. Иногда мошенники запрашивают сканы документов, а потом продают их или используют против пользователей. Проверяйте, от кого приходит просьба предоставить персональную информацию. Если есть возможность, позвоните или напишите официальной службе поддержки сервиса или сайта.
        
        Внимательно относитесь к ссылкам и игнорируйте спам. Если вам пришло письмо об умершем в Африке дядюшке, который оставил вам наследство, это мошенническая схема. Будьте внимательны.
        
    - ******************************Как определить, что компьютер заражен?******************************
        
        Есть явные и неявные признаки. 
        Пример явного - на экране появляется баннер, который не дает ничего сделать. На нем написано, куда отправить деньги, чтобы разблокировать систему. Иногда в таких случаях спасает только полное форматирование диска.
        
        Но вирусы не всегда явно видны. Компьютер может начать подвисать, могут появиться проблемы с доступом к папкам, клавиши могут менять свои роли, а сайты - не открываться (в первую очередь вирусы блокируют сайты компаний, которые продают антивирусное ПО).
        
        Все это - звоночки, что с вашим компьютером что-то не то.
        
    - ********************************************Антивирусные программы********************************************
        
        ************************Антивирус -************************ программа для борьбы с вредоносным ПО: уничтожает вирусы и помогает восстановить поврежденные файлы. Известные антивирусы - Касперский, ЕЗЕТ, Доктор Веб
        
        На что обратить внимание при выборе антивируса?
        
        - ************************************************************************************Регулярное обновление антивирусной базы -************************************************************************************ время от времени появляются новые вирусы, ваш компьютер должен быть от них защищен.
        - ************************************************Восстановление файлов -************************************************ пригодится, если важные документы повреждены вредоносным ПО.
        
        Обычно у антивируса есть бесплатная версия, если ее функционала хватает, платную можно не покупать.
        
        Для примера рассмотрим функционал антивируса Доктор Веб:
        
        - ******************************************************Обновление вирусной базы -****************************************************** если она актуальна, программа подскажет, что обновление не требуется.
        - ************Режимы проверки:************ быстрая и полная.
        - ********************************Фоновый режим -******************************** антивирус отслеживает любые действия на устройстве. Если вы сохраняете файл, программа сканирует его на лету: если есть вирус, вы получите уведомление.
- ******VPN******
    - ******VPN******
        
        (Virtual Private Network) - виртуальная частная сеть. 
        Задача технологии - защитить персональные данные (сайты не могут их собирать) и обходить блокировки. Например, в Китае запрещены сервисы Гугл: просто так не получится открыть ни Ютуб, ни Гугл-документы, а с VPN - получится.
        
        Еще одно преимущество технологии - защита от доступа третьих лиц в общественных сетях. Например, подключаясь к бесплатному вай-фай в метро или кафе, мы становимся более уязвимы: через такое соединение хакер может получить доступ к перепискам, данным карт или другой информации. VPN шифрует данные и значительно усложняет задачу.
        
        **Как же работает VPN?**
        
        - Когда мы выходим в сеть без VPN, компьютер обращается к интернет-провайдеру, и через него мы получаем доступ в интернет. Сайты, на которые мы переходим, получают данные о местонахождении и других характеристиках: например, поле и возрасте. Они могут использовать их для навязчивой рекламы.
        - VPN-клиенты шифруют данные. Можно стать другой личностью в сети, чтобы узнать о настоящих характеристиках было невозможно.
    - **Какой VPN выбрать?**
        
        VPN можно установит на телефон, компьютер или как расширение для браузера. Чтобы выбрать подходящий, обратите внимание на параметры:
        
        - **************Удобство использования,************** чтобы не пришлось разбираться в функциях и настройках. Принцип хорошего VPN - включил и работает.
        - **********************************Скорость работы.********************************** Некоторые VPN замедляют скорость интернета, из-за этого страницы открываются подолгу.
        - ****************************Безопасность.**************************** VPN-сервисы ********************************даже бесплатные, ее гарантируют - личные данные не будут передаваться сайтам.
        - **********************Стоимость.********************** Есть бесплатные сервисы, а есть платные с дополнительными бонусами. Цены начинаются от 5 долл
        - **********************************Универсальность.********************************** Если вы часто путешествуете, важно, чтобы VPN работал во всех странах без потерь качества.
        - **********************************************Есть служба поддержки.********************************************** Если вы платите за сервис, а он сбоит, здорово иметь возможность быстро получить ответ и решение от поддержки.
        
        Важный вопрос - законно ли использовать VPN?
        Да, законодательство этого не запрещает. 
        
        У платных и бесплатных VPN есть свои плюсы и минусы:
        
        - ******************У платных****************** высокая скорость, нет навязчивой рекламы, усиленная защита персональных данных, помощь техподдержки.
        Недостаток - придется платить.
        - **************************У бесплатных************************** есть лимиты по скорости, из-за которых VPN придется включать и отключать, когда он не нужен. Есть реклама.
        
        Но бесплатные сервисы не так уж плохи. Один из них - [Kaspersky Secure Connection.](https://www.kaspersky.ru/secure-connection)
        Его можно установить на разные ОС, как на смартфон, так и на компьютер. А можно зайти на официальный сайт и купить версию для 5 устройств за 1,790 рублей в год.
        
        Для компьютеров на Виндоус ищите и скачивайте VPN только на официальных сайтах. Для айфонов и МакОС - в Аппстор, для Андроидов - в Плэй Маркет. Набирайте в поиске VPN, смотрите на оценки, читайте отзывы и нажимайте Загрузить, когда нашли подходящий сервис.
        
- **********Итоги**********
    
    Сегодня мы коснулись трех важных тем:
    
    - Пароли - как их придумывать и хранить
    - Вирусы и как от них защищаться
    - VPN - что это, и зачем пригодится в жизни.
    
    Надеюсь, этот урок был для вас полезным. До новых встреч в эфире!
    

### **************Урок 4. Интернет и регистрация**************

- **************************На этом уроке**************************
    
    Сегодня на уроке мы:
    
    - Узнаем, что такое интернет
    - Поймем, как искать в нем информацию
    - Научимся регистрироваться и авторизовываться на сайтах
- **************************************Что такое интернет?**************************************
    
    Сперва интернет был военной технологией, потом инструментом для университетов. Сейчас он так глубоко проник в нашу жизнь, что представить ее без интернета уже нельзя.
    
    **********************Интернет -********************** это глобальная компьютерная сеть, объединяющая множество компьютеров, на которых хранится информация. 
    
    ****************************************Компьютерная сеть -**************************************** два или несколько компьютеров, объединенных для обмена информацией.
    Компьютерные сети могут быть локальными: например, соединенные компьютеры в офисе. Две локальные сети на расстоянии - это уже глобальная сеть.
    Получается: ********************************************************************************Интернет - глобальная компьютерная сеть.********************************************************************************
    
- ****************************************************************Что мы можем делать в интернете?****************************************************************
    
    Самая частая задача в интернете - поиск информации.
    Сегодня, когда у нас появляется вопрос, первым делом мы достаем телефон и заходим в поисковую систему. Кроме того, в интернете можно работать: ИТ-специалист, живущий в Таиланде, может выполнять задачи для заказчика из любой точки мира. 
    Другие варианты - поиск людей, общение в мессенджерах, покупки, обучение и развлечения: онлайн-кинотеатры и другие ресурсы, которые занимают наше свободное время.
    
- **********************************Поисковые системы**********************************
    - ****************************************О поисковых системах****************************************
        
        Давайте разбираться, как искать информацию в интернете. 
        Точка входа в интернет - **********браузер,********** инструмент для поиска информации - **************************поисковая система.**************************
        
        Поисковая система - веб-узел или сайт, который выдает информацию в ответ на запрос. Например, Яндекс и Гугл.
        
        Как же работают поисковые системы?
        У них есть роботы-пауки (web-crawler), которые ходят по сайтам, анализируют информацию, собирают ее в базу данных и хранят.
        В ответ на запрос они находят в базе те сайты, которые подходят, и выдают их пользователю. Все просто и сложно одновременно.
        
        Главный элемент поисковых систем - ****************************строка поиска.****************************
        Сюда вводятся запросы. Чтобы они были эффективными, их лучше упрощать и формулировать правильно. В ответ на запрос поисковая система предложит выдачу из нескольких страниц. Выберите среди них сайт, который подходит лучше всего.
        
        Можно искать не только текст, но и картинки, видео или другие категории информации. У поисковых систем есть специальные разделы, посвященные разным направлениям.
        Например, у Яндекса есть сервис Яндекс.Маркет для поиска товаров и онлайн-покупок и Яндекс.Карты для поиска адресов.
        
        Если вы не нашли информацию, например, в Яндексе, можно поискать ее в Гугл.
        
    - **********************************************************Поиск разного типа информации**********************************************************
        
        Теперь рассмотрим, как искать другие типы информации на примере Яндекса и Гугл. Разделы расположены под поисковой строкой: Видео, картинки, новости, карты, еще
        
        Если переключимся на вкладку “Видео”, перейдем на страницу с видеозаписями по запросу.
        Так мы фильтруем информацию - даем поисковой системе понять, что хотим посмотреть именно видеорецепты. Так же можем найти картинки, новости или отфильтровать информацию с помощью других вкладок.
        
- **********************Регистрация**********************
    
    Регистрация позволяет получить расширенный доступ к функциям сайта. Нужна один раз: ввели свои данные, подтвердили регистрацию, получили личный кабинет - готово.
    В личном кабинете можно смотреть историю заказов, получать бонусы и персональные предложения. Т.е. зарегистрированным пользователям даются дополнительные возможности.
    
    Для регистрации используются разные данные: логин, телефон или почта, а также пароль.
    
    Некоторые сайты дают за регистрацию бонус, потому что этот этап требует небольших усилий и времени. На некоторых сайтах регистрация не нужна.
    
- **********************Авторизация**********************
    
    После регистрации на сайте нужно будет авторизоваться - войти по указанным логину и паролю:
    
    - ****************Логин -**************** уникальное имя. Должно отличаться от других имен на сайте, чтобы система вас узнавала.
    - ******************Пароль -****************** секретный набор символов. Его нужно аккуратно хранить и не передавать другим людям, иначе злоумышленники могут получить доступ к вашему личному кабинету. Придумывайте сложные пароли и храните в надежном месте.
- ****************Практика****************
    
    Посмотрим на практике, как выглядит процесс регистрации и авторизации. Для примера возьмем интернет-магазин обуви [Zenden.](https://zenden.ru/)
    
    Регистрация - процесс трудозатратный, поэтому хорошие магазины стараются ее облегчить: помогают сориентироваться с помощью понятных иконок и подсказок. Кнопка регистрации и входа на сайт часто изображается в виде человечка.
    При нажатии на ее мы можем войти (если уже зарегистрировались), зарегистрироваться или получить доступ к программе лояльности. Сперва зарегистрируемся. 
    
    Для регистрации понадобится номер телефона. Когда мы его введем, появится кнопка “Получить код”. Это нужно, чтобы система убедилась, что телефон наш и у нас есть к нему доступ. После нажатия кнопки на телефон придет СМС с кодом - уникальным паролем для входа на сайт. На этом регистрация на сайте закончена - все легко и просто.
    
- **********Итоги**********
    
    На уроке мы узнали, что такое интернет, научились искать информацию, регистрироваться и авторизоваться на сайтах. А также закрепили знания на практике.
    

### **************Урок 5. Основные производители цифровой техники и их особенности**************

- ********************План урока********************
    
    Сегодня на уроке мы:
    
    - Поговорим об основных производителях компьютеров и ноутбуков
    - Узнаем о плюсах и минусах основных производителей смартфонов
    - Разберем отличия между ОС iOS и Android
    
    Давайте начинать!
    
- **************************************************************************Производители компьютеров и ноутбуков**************************************************************************
    
    Представьте: вам нужно подобрать компьютер. Вы заходите в магазин и видите огромный выбор - тут недолго растеряться. Сейчас на рынке множество производителей и множество форматов компьютеров: стационарные, ноутбуки, мини-версии. 
    Что же выбрать?
    
    Прежде всего нужно ответить себе на несколько вопросов:
    
    1. Для чего нужен компьютер? Для офисных задач или игр?
    2. Он может быть стационарным или вы хотите брать его с собой?
    3. Какой бюджет заложен на покупку?
    
    Исходя из этих вводных можем принимать решение о выборе производителя и компьютера. 
    На вопрос “Какой производитель лучше?” однозначного ответа нет - здесь все субъективно. Мне, например, нравится Эппл. Для меня это лучший производитель, но для других - нет.
    
    Производители как звезды в космосе: появляются и исчезают. Поэтому, чтобы быть в курсе, нужно следить за ежегодными рейтингами, читать и смотреть обзоры - они помогут принять взвешенное решение.
    
    Теперь пройдем по основным производителям на рынке.
    
    - ********Acer********
        
        Крупная компания из Тайваня. Предлагает большой выбор компьютеров под разные задачи. Чтобы было проще ориентироваться, у них есть линейки. Например:
        
        - ************Nitro************ - линейка для геймеров, которым важна мощность компьютера
        - ******************ConceptD******************  - для создателей контента.
        
        Главная особенность производителя - широкий выбор в области профессиональных и игровых компьютеров.
        Операционные системы, которые можно установить на компьютеры производителя - Виндоус или Линукс. Здесь на ваше усмотрение.
        
    - **********Apple**********
        
        Американская компания. Производит не только компьютеры, но и цифровую технику, в т.ч. мобильные телефоны.
        
        Линейки достаточно ограничены. Есть:
        
        - **********************Mac mini********************** - компактный системный блок.
        - ************iMac************ - моноблок, т.е. системный блок и монитор, объединенные в одном устройстве.
        - **************MacBook************** - ноутбуки.
        
        Эппл не затачивает свои компьютеры под игры. МакОС с одной стороны стороны дает безопасность, а с другой несколько ограничивает. Чтобы обойти ограничения, в качестве второй ОС можно поставить Виндоус, но полноценно играть на таком устройстве все же не получится. Это компьютеры для дизайнеров, для профессиональных задач.
        ОС - МакОС
        
    - **********Assus**********
        
        Корпорация, производящая компьютерную технику: материнские платы, мониторы, ноутбуки и т.д. - спектр очень большой.
        
        У Асус тоже есть линейки. Например:
        
        - ******ROG****** - максимальная производительность, то, что нужно для компьютерных игр.
        - ****ROG Strix**** - компактные мощные игровые системы.
        
        Асус производят комплектующие, поэтому у них нет проблем с совместимостью элементов. Компания держит высокий уровень сборки, а ее материнские платы для своих компьютеров используют многие мировые бренды.
        
        ОС - Виндоус и Линукс.
        
    - **Intel**
        
        Американская компания, крупнейший в мире производитель компонентов для компьютеров. Микропроцессоры Интел используют для своих ПК многие известные производители.
        
        Специфика бренда - мини-станции, которые подходят для фото- и видеоконтента, видеомонтажа и просмотра фильмов в формате 4К. Их нельзя назвать геймерскими, но для сложных задач они вполне подходят.
        
        ОС - Виндоус и Линукс.
        
    - **Lenovo**
        
        Компьютерный гигант, который занимает практически 20% рынка. Производит стационарные ПК, ноутбуки, моноблоки, рабочие станции.
        
        Ассортимент разделен на линейки. Например:
        
        - ************Legion************ - для игр
        - **********IdeaCentre********** - для творчества
        
        Как отмечают эксперты, особенности Леново - отличное качество сборки, тщательный отбор комплектующих и оперативная поддержка пользователей.
        
        ОС - Виндоус и Линукс
        
    - **Dell**
        
        Один из крупнейших и старейших производителей родом из США. Выпускает ПК, ноутбуки, рабочие станции и серверы. В модельном ряду есть множество решений для дома и офиса. 
        
        Линейки:
        
        - **G** - высокая производительность для новичков и игроков с ограниченным бюджетом.
        - ********************Allienware******************** - более дорогая линейка со стильным дизайном и логотипом в виде головы инопланетянина.
        
        Особенности - дизайн и легкость ноутбуков.
        
        ОС - Виндоус и Линукс.
        
    - **Hewlett-Packard (HP)**
        
        Вы наверняка встречали оргтехнику под этим брендом: принтеры, сканеры, мониторы. Также производитель создает и компьютерную технику.
        
        Линейки:
        
        - **************HP Omen************** - ноутбуки и настольные персональные компьютеры.
        - ****************************Pavilion, Omen**************************** - линейка с высокой мощностью, подходит для геймеров.
        
        Производитель выпускает компьютеры не только для игр, но и для более сложных задач: проектирования и трехмерного моделирования. И, конечно, для дома и офиса.
        
        Особенности - внимание к дизайну.
        
        ОС - Виндоус и Линукс.
        
    - **MSI**
        
        Производитель из Тайваня с широким ассортиментом ноутбуков, моноблоков, станций и даже игровых башен.
        
        Особенности - производит комплектующие для своих ПК, гарантирует хорошее качество сборки, совместимость деталей и высокую производительность. Еще одна фишка - высокая стоимость, но за качество нужно платить.
        
        ОС - Виндоус и Линукс.
        
    - **Gigabyte**
        
        Компания известна своими материнскими платами и видеокартами, но производит не только комплектующие, но и ПК.
        
        Специализация - мини-ПК, т.е. маленькие системные блоки с интересным дизайном и настраиваемой подсветкой. Производитель делает акцент на дизайне и размере своих устройств.
        
        ОС - Виндоус и Линукс.
        
    - **IRU**
        
        Российский производитель, существует с 2002 года. Специализируется как на технике для дома, так и для крупных корпораций.
        
        Линейки:
        
        - ********Home******** - компьютеры для повседневных задач
        - ********Game******** - игровые компьютеры более высокой мощности
        
        Компания входит в топ-5 производителей компьютеров в РФ
        
        ОС - Виндоус и Линукс.
        
    - **Softline**
        
        Еще один российский бренд. Ведет свою историю с 1993 года и до сих пор успешно работает. В линейке есть компьютеры для дома, офиса, игр.
        
        Фишка Софтлайн в том, что они являются глобальными партнерами компании Майкрософт, поэтому их компьютеры уже поставляются с предустановленной ОС Виндоус.
        
        ОС - Виндоус и Линукс.
        
    - **HYPERPC**
        
        Российская компания, основанная в 2009 году. Предлагает модели в обычном корпусе и с оригинальным дизайном.
        
        - ********Volt******** - необычная игровая серия, запоминающаяся дизайном корпусов. У нее есть отличие, которого не найти среди других пользователей - с помощью конфигуратора на сайте можно выбрать дизайн, подсветку, наклейки и тд. Т.е. сделать свой компьютер не только мощным, но и красивым.
        
        ОС - Виндоус и Линукс.
        
        Компьютеры дорогие, но это удовольствие для истинных фанатов.
        
    - **OLDI Computers**
        
        Российский бренд, существует на рынке более 25 лет и выпускает широкую линейку компьютерной техники, четко разделенную по функциям:
        
        - ************Office************ - недорогие, но качественные компьютеры для простых повседневных задач
        - ********Home******** - для дома
        - ********Game******** - линейка для игр.
        
        Преимущества: сочетание цены и качества, сбалансированная система. Уделяют внимание дизайну корпусов, среди них можно встретить интересные экземпляры.
        
        ОС - Виндоус и Линукс.
        
    - **Razer**
        
        Вернемся к зарубежным компаниям. О Рэйзор вы могли слышать как о производителе всевозможной периферии: мышек, клавиатур и тд. Некоторое время назад компания стала специализироваться на производстве ноутбуков.
        
        Есть игровая линейка и линейка для повседневных задач.
        
        ОС - Виндоус и Линукс.
        
    - **Microsoft**
        
        Знаменитая компания, которая выпускает ноутбуки, ультрабуки и трансформеры под брендом Surface. Фишка девайсов в том, что в них сделан упор на передовые технологии, качество и дизайн.
        
        Бренд премиальный, но позволяет работать с последними достижениями в области компьютерных технологий. Например, с ноутбуками с сенсорным экраном или ноутбуками, которые легко превращаются в планшеты. Техника хорошо подходит для тех, кто делает упор на дизайн и графику.
        
        Главная фишка производителя ноутбуки-трансформеры с сенсорным экраном.
        
        ОС - Виндоус и Линукс.
        
    - **Huawei**
        
        Производитель ворвался на рынок компьютерной техники относительно недавно - раньше он специализировался на смартфонах.
        
        Линейки четко определяют функции устройств:
        
        - ********************MateBook D******************** - линейка с большим выбором на любой вкус и кошелек
        - ********************************MateBook X / Pro******************************** - премиальная линейка с упором на дизайн, компактность, легкость.
        
        Фишка Хуавей - я думаю, некоторое подражание Эппл. Есть общая экосистема с телефоном той же компании и устройства с сенсорным экраном, как у Майкрософт. Компьютеры предназначены для игр, но достаточно легких. Для более ресурсозатратных лучше обратить внимание на других производителей.
        
        ОС - Виндоус и Линукс.
        
    - **Honor**
        
        Еще один производитель, который долгое время делал упор на телефоны и планшеты, но решил расширить ассортимент и начал выпускать ноутбуки.
        
        Линейки:
        
        - ******************MagicBook****************** - для работы с изображениями и легких игр
        - **************************MagicBook Pro************************** - для более сложных задач, например, для 3Д-рендеринга
        
        Так как производитель занимался телефонами, среди его устройств можно организовать общую среду для обмена данными. Еще одна фишка - сенсорные экраны. Компьютеры не предназначены для тяжелого гейминга, но для легких игр подойдут.
        
        ОС - Виндоус и Линукс.
        
    - **********Итоги**********
        
        Стационарные компьютеры и ноутбуки - совершенно разные устройства с принципиальными отличиями в размере и мобильности, производительности и энергопотреблении.
        
        Стационарные компьютеры более удобны в плане модернизации. Например, если вы хотите увеличить память или поменять жесткий диск, это значительно проще, чем в ноутбуках. Другой важный аспект - возможность подключения периферийных устройств, устройств ввода-вывода.
        
        Преимущество ноутбуков - бесперебойность. Если у вас, допустим, отключили свет, ноутбук позволит какое-то время оставаться на связи и сохранить данные.
        
        Поэтому, как я и говорила в начале, перед выбором производителя нужно определиться с тем, какой компьютер нужен. Чтобы принять взвешенное решение, почитайте рейтинги, реальные отзывы, поговорите с консультантами. Где-то на стыке информации вы увидите ПК, который подойдет для решения ваших задач.
        
- ********************************Производители смартфонов********************************
    
    Про компьютеры мы поговорили, теперь поговорим про телефоны. Чтобы было проще систематизировать производителей, я разделила их по категориям. Начнем с крупнейших.
    
    - **Apple**
        
        Я считаю, что Эппл производит самые качественные смартфоны в мире - iPhone. Проверила это на собственной практике: они действительно долговечны, если не смотреть на то, что технологии со временем устаревают.
        
        В плане безотказности iPhone - телефон №1. 
        Это единственное устройство, которое работает на операционной системе компании-производителя iOS. Все приложения будут только официальными, потому что у Эппл есть пунктик в плане безопасности. Кроме того, Эппл всегда задавал планку для остальных производителей в плане дизайна.
        
        ************Плюсы:************
        
        - качество сборки
        - передовые разработки
        - хорошие камеры
        - мощные процессоры
        - большой объем памяти
        
        **************Минусы:**************
        
        - высокая стоимость
        - малое кол-во моделей в линейках
        - не всегда смартфоны совместимы с аксессуарами других производителей
        
        Операционная система - iOS
        
    - **Samsung**
        
        Еще один производитель-гигант. Компания лидирует в области производства смартфонов нового поколения. Отличается множеством моделей и линеек. Самая популярная, наверное Galaxy S, которая по праву считается лучшей в мире.
        
        Самсунг держит руку на пульсе и оснащает смартфоны передовыми технологиями, обновляя и обновляя модели.
        
        ************Плюсы:************
        
        - большой выбор моделей: от простых до премиальных
        - хорошее качество сборки
        - качественные экраны
        - мощные процессоры
        - отличные камеры
        - интересное и обновляемое ПО
        - дизайн
        
        **************Минусы:**************
        
        - высокая цена даже на простые линейки
        - смартфоны мощные, но заряда батареи надолго не хватает
        
        Операционная система - Android
        
    - **Huawei**
        
        Новичок в мире смартфонов, умудрившийся взорвать рынок. Предлагают интересные модели уровня А-брендов, но по цене почти в 2 раза ниже. Устройства обычно оснащены хорошими камерами, экранами и процессорами, достаточно мощными для игр.
        
        ************Плюсы:************
        
        - производит собственные процессоры для телефонов, что и помогает держать низкие цены
        - большой ассортимент
        - стильный дизайн
        - своевременное обновление системы
        
        **************Минусы:**************
        
        - телефон служит 2-3 года
        - из-за того, что новые модели выходят быстро, старые не успевают обновлять
        
        Операционная система - Android
        
    - **Asus**
        
        Открывает следующую категорию смартфонов - камерофоны
        
        Специализация компании - компьютеры, но все же они расширили ассортимент смартфонами. Стремятся сделать из телефона качественный компьютер.
        
        ************Плюсы:************
        
        - упор на производительность и дизайн
        - начинка смартфонов с геймерским уклоном
        - первоклассные камеры
        - встроенная система охлаждения (важно, когда играешь в игры)
        - умные датчики и сканеры
        
        **************Минусы:**************
        
        - ограниченная линейка
        - высокие цены за счет технологического оснащения смартфонов
        
        Операционная система - Android
        
    - **One Plus**
        
        Дочерняя компания ВВК, созданная для производства смартфонов. Тоже делает упор на камеры - смартфоны могут снимать в формате 4К, есть множество датчиков, помогающих во время съемки. Еще одно отличие - ************************************************ультрасовременный дизайн************************************************
        
        ************Плюсы:************
        
        - камеры
        - мощная батарея
        - крупные экраны
        - крутые стереодинамики
        - объем памяти для быстрой работы
        
        **************Минусы:**************
        
        - небольшой выбор (он же плюс - выбрать проще)
        - сервисные центры в Китае (но ситуация может измениться)
        
        Операционная система - Android
        
    - **Sony**
        
        Как производитель фотоаппаратов, Сони всегда специализировалась на фото- и видеотехнике. Не удивительно, что смартфоны Сони отличаются первоклассными камерами и позволяют снимать практически профессиональное видео. Они оснащены тройными модулями с минимальной диафрагмой и дают возможность снимать в темное время суток.
        
        ************Плюсы:************
        
        - камеры с высоким разрешением
        - хорошие стереодинамики
        - защита от падения и влаги
        - большой ассортимент
        
        **************Минусы:**************
        
        - слабые батареи - придется носить с собой ЗУ или внешний аккумулятор
        - несвоевременные обновления
        
        Операционная система - Android
        
    - **Xiomi**
        
        Бюджетные доступные смартфоны с высоким качеством фото- и видеосъемки. Есть флагманские модели, которые оценил рынок: Mi 8 Pro, серия Микс
        
        Производит гаджеты (часы, наушники и тд), с которыми можно соединять смартфон, создавая экосистему.
        
        ************Плюсы:************
        
        - регулярное обновление устаревших моделей
        - большой ассортимент
        - продвинутые датчики для качественных фото и видео
        - яркие и четкие дисплеи
        - дизайн
        - доступные цены
        
        **************Минусы:**************
        
        - иногда страдает качество сборки
        - слабая батарея
        
        Операционная система - Android
        
        Мы отмечали, что мощность у телефонов большая, а батарейка слабая. Теперь рассмотрим производителей, которые делают упор именно на батарею - ее емкость и длительность работы. Если для вас это важно, обратите внимание на этих производителей.
        
    - **Vivo**
        
        Производитель делает упор не только на батарею, но и на стильный дизайн, а также хорошие экраны. Они первые ввели сканер отпечатка пальца.
        
        ************Плюсы:************
        
        - качество сборки всегда на высоте
        - мощная батарея - телефон долго держит заряд
        - компания не стоит на месте - исследования и разработки помогают совершенствовать устройства
        - низкая стоимость
        
        **************Минусы:**************
        
        - из-за упора на емкость батареи другие стороны могут страдать - например, процессоры недостаточно мощные
        - динами снизу - это не всегда удобно
        
        Операционная система - Android
        
    - **Meizu**
        
        Еще один китайский производитель. Предлагает широкий ассортимент качественных телефонов за небольшие деньги. 60 моделей смартфонов плюс гаджеты образуют общую среду.
        
        ************Плюсы:************
        
        - неплохие камеры
        - неплохой функционал
        - качество сборки
        - большой выбор при доступных ценах
        
        **************Минусы:**************
        
        - уступают в дизайне другим производителям
        
        Операционная система - Android
        
    - **ZTE**
        
        Главное отличие - собственные исследовательские центры, где разрабатывают новые технические фишки и внедряют их в свои устройства. Хорошее сочетание цены и качества.
        
        ************Плюсы:************
        
        - емкость батареи
        - улучшенный беспроводной доступ к сети
        - множество функций
        - хороший экран
        
        **************Минусы:**************
        
        - иногда хромает качество сборки
        - слабые процессоры
        - средняя производительность
        - мало встроенной памяти
        
        Операционная система - Android
        
        Итак, мы разобрали флагманов рынка, производителей с классными камерами и с мощными батареями. Последняя подборка - производители защищенных смартфонов. С ними можно делать что угодно: ронять в воду или на землю - ничего не случится.
        
    - **Blackview**
        
        Специализируется на производстве защищенных смартфонов. В линейке есть множество вариантов дизайна: от брутальных с шестиугольной окантовкой до достаточно простых. Главный минус - процессор. Чудес не бывает: если упор сделан на что-то одно, другие функции страдают.
        
        Смартфоны производителя сделаны из металла и пластика. Корпусы защищены по стандарту IP68
        
        ************Плюсы:************
        
        - надежная защита от внешних воздействий - телефоны можно давать маленьким детям и не бояться, что они их разобьют
        - широкий выбор моделей
        - запас оперативной памяти
        - емкость батареи
        - доступная цена
        
        **************Минусы:**************
        
        - проседает производительность из-за маломощных процессоро
        - есть ограничения по функциям: отпечатку пальца и тд
        
        Телефоны бренда подойдут людям с узконаправленным запросом.
        
        Операционная система - Android
        
    - **Ulefone**
        
        Еще один производитель неубиваемых телефонов. Это новичок в мире смартфонов, который уже успел покорить покупателей за счет мощной батареи и хороших экранов.
        
        ************Плюсы:************
        
        - акцент компании на дизайне - он стильный и современный
        - максимальная защита
        - полноценный функционал
        
        **************Минусы:**************
        
        - низкая производительность за счет слабых процессоров
        - качество камер
        
        Операционная система - Android
        
    - **Doogee**
        
        Молодая китайская компания, которая уже несколько лет занимает высокие позиции на рынке. Почему?
        Их смартфоны достаточно бюджетные, но при этом мощные, производительные, с хорошими экранами и необходимым набором функций.
        
        ************Плюсы:************
        
        - хорошая защита от ударов и воды
        - мощная батарея
        - современный дизайн
        - широкий спектр возможностей
        
        **************Минусы:**************
        
        - слабые процессоры
        - слабые камеры
        
        Операционная система - Android
        
- ********************************************************************************Android - iOS: чему отдать предпочтение?********************************************************************************
    
    Я несколько раз упоминала операционные системы Android и iOS, и вы, наверное, задались вопросами: “Что лучше? Что выбрать? Кому отдавать предпочтение?” Давайте разбираться.
    
    Война между поклонниками Android и iOS, как мне кажется, будет вечной. Каждая сторона старается доказать, что их ОС лучше.
    
    - **************************************Сперва об Apple iOS**************************************
        
        Ключевая особенность ОС в том, что ее код закрыт, потому что Эппл делает упор на безопасность и сохранение данных. Так что не получится что-то настроить, адаптировать или поменять в системе самостоятельно. Но это ограничение обеспечивает безопасность.
        
        АйОС разработана под телефоны Эппл. Она хорошо заточена под них, поэтому дает высокую производительность при минимальном количестве сбоев и багов.
        
        ********************Плюсы iOS:********************
        
        - риск вирусов минимален - это касается операционных систем на всех устройствах Эппл: компьютеров, ноутбуков, планшетов.
        - Работает стабильно
        
        ********************Минусы iOS:********************
        
        - невозможно работать с библиотекой файлов
        - сложно и дорого разрабатывать программы под эту платформу, поэтому выбор приложений меньше, чем на Андроид
        - урезанный функционал Блютуз - нельзя обмениваться файлами с телефонами других производителей из соображений безопасности.
        - нельзя сделать откат на прошлую версию ОС - если старый телефон обновился на новую версию, он может начать “задыхаться”
    - **************Android**************
        
        Основан на модифицированном ядре Линукс и открыт к изменениям. Компания Гугл выпускает всевозможные инструменты, чтобы разработчики могли выпускать софт и поощряет их в этом направлении. Нет проблем с тем, чтобы скачать приложение из Гугл Плэй Маркет или из сторонней платформы. Но в этом есть и подводные камни.
        
        **************************Плюсы Андроид:**************************
        
        - открытый код - можно свободно писать приложения
        - бюджетная система - на платформе работает множество недорогих производителей
        - открытая файловая система - можно работать с внутренними файлами, интерфейс настраивается
        
        ******************************Минусы Андроид:******************************
        
        - открытый код - из-за внесенных изменений даже новые версии могут работать нестабильно
        - уязвимая система - есть случаи кражи персональных данных, нужен антивирус
        - при покупке смартфона нужно выяснить, какая версия ОС доступна, можно ли обновиться до последней
        - предустановленные программы иногда сложно удалить.
    
    Сравнивать эти ОС объективно сложно. Минус айОС в том, что она заточена только под смартфоны Эппл - выбор смартфонов, доступных на этой ОС ограничен.
    Андроид более массовый, он стоит практически на всех телефонах в мире, так что выбор моделей гораздо шире. Выбирайте, тестируйте и принимайте решения, что больше подходит вам.
    
- ********************Заключение********************
    
    У любого производителя есть свои сильные и слабые места: высокая или низкая производительность, современный или устаревший дизайн и так далее. Самое классное - мы можем сделать взвешенный выбор на основе обзоров, рейтингов и отзывов покупателей.
    
    На сегодняшнем занятии мы разобрали производителей компьютерной техники и смартфонов, познакомились с особенностями операционных систем Андроид и айОС.
    
    Надеюсь, вы узнали для себя что-то новое и полезное. Желаю вам всего хорошего и до новой встречи в эфирах.
    

### **************Урок 6. Особенности использования разных ОС. Виндоус**************

- ********************План урока********************
    
    О чем мы с вами сегодня поговорим:
    
    - Что такое Виндоус и какие особенности имеет эта ОС
    - Как работать в Виндоус
    - Про директории, файлы, программы
    - Про установку, переустановку и обновления программ
    
    Надеюсь, вы готовы. Поехали!
    
- **********************************************Краткая история Виндоус**********************************************
    
    Давайте заглянем немножечко в историю. Виндоус появилась впервые в 1985 году как графическая оболочка. Это была версия 1.0.
    А уже в 1990 году появилась версия 3.0, и за первые полгода было продано более миллиона копий этой ОС.
    Что же происходило с Виндоус дальше?
    С тех пор выходили разные версии: кто-то называет их удачными, кто-то неудачными, но сегодня актуальна версия Виндоус 11. С ней мы и будем разбираться на этом уроке.
    
- ********************************************************Основные особенности Виндоус********************************************************
    
    В же особенность Виндоус?
    Наверное, самая главная особенность Виндоус в том, что эта ОС может работать на компьютерах разных производителей, в отличие от МакОС, работающей только на компьютерах фирмы Эппл. И, конечно же, как любая современная ОС, Виндоус обладает многозадачностью: мы можем работать в нескольких программах, выполнять параллельно несколько действий. 
    Есть поддержка мультимедийных технологий, видео и аудио, и красивая удобная оболочка, радующая глаз и работающая по принципу “бери и тащи”.
    
- ********************************Работа в Виндоус********************************
    
    Как же работать в Виндоус 11? Из чего состоит интерфейс Виндоус?
    Если условно его делить, то на рабочем столе, который мы с вами видим, основную часть занимают программы, файлы, корзина, линейка, меню и информационное меню.
    
    Давайте посмотрим на это вживую. Вот рабочий стол. На нем располагаются иконки программ. Здесь могут располагаться файлы, но это нежелательно, конечно, - лучше их хранить в папках. Корзина. Линейка с меню, нижняя серая панель и в правом нижнем углу - информационное меню. 
    Основная главная кнопка - это кнопка меню Пуск, через которое мы с вами можем запускать программы, выключать, перезагружать или переводить в спящий режим компьютер. Также на панели меню располагается строка поиска, чтобы быстро искать программы и файлы. Еще у нас есть возможность работать с несколькими рабочими столами.
    
    Что такое рабочий стол?
    Представьте, что у вас несколько мониторов. Мы с вами можем расположить какие-то программы на одном рабочем столе, а другие - на другом, чтобы они не мешали. И таких рабочих столов мы можем сделать бесчисленное множество. 
    С помощью кнопки Представление задач легко переключаться между рабочими столами. Другая важная кнопка - Проводник. Она помогает работать с файлами. Здесь мы видим папки, расположенные на жестком диске. И при помощи двойного щелчка мы можем посмотреть, что находится в папках. О проводнике мы с вами еще поговорим чуть позже.
    
    Что еще у нас с вами есть?
    Информационное меню. В правом нижнем углу переключения языка, сейчас у нас активен русский. Если вы работаете с ноутбука, отображается уровень заряда, ну и, конечно же, время и календарь. Чтобы работать в Виндоус быстро и легко, желательно выучить горячие клавиши. 
    Возможно, вы уже какими-то из них пользуетесь: например, сочетания Ctrl + С и Ctrl + V позволяют копировать и вставлять информацию из буфера обмена. Это получается намного быстрее, нежели при использовании мышки.
    
- ******************************Горячие клавиши******************************
    
    Давайте посмотрим, какие еще горячие клавиши Виндоус облегчат работу с этой ОС. Вернее, не облегчат даже - ускорят.
    Для быстрого открытия меню Пуск достаточно нажать на клавиатуре клавишу Вин. Она представлена в виде такого флажка из четырех окошек. 
    Вин + Таб позволяет переключаться между программами.
    Вин + Д сворачивает все окна и показывает рабочий стол.
    Также мы с вами при помощи горячих клавиш можем управлять окнами Виндоус. Например, разворачивать окна на весь экран, сворачивать, ставить их рядом. Для этого есть сочетания клавиши Вин и курсорных стрелок. Стрелки у нас располагаются в правой части клавиатуры. А чтобы разделить экран пополам и одно окно поместить с одной стороны, а с другой стороны - другое, мы можем использовать сочетание клавиш Вин + Шифт + стрелка
    
- **********************************************************************************Директории, расширения и работа с файлами**********************************************************************************
    
    Теперь, как я обещала, давайте разберемся, каким образом мы можем работать с файлами, директориями и искать программы. 
    Наш проводник в мир файлов и директорий так и называется Проводник. Или Файл Эксплорер. Это приложение для управления файлами. 
    Мы с вами говорили про горячие клавиши: Проводник можно запустить либо при помощи клика мыши по иконке, либо нажав Вин + Е. И, конечно же, когда заговорили о файлах, мы не можем обойти тему расширения файлов.
    
    Что такое расширение файла? - спросите вы.
    Это то, что вы видите в названии файла после его имени и точки. Дальше идет некая аббревиатура, которая называется расширением.
    Зачем файлу расширение?
    Чтобы ОС понимала, где мы можем открывать этот файл, какие программы могут помочь его отредактировать и тд.
    Например, думаю, вы сталкивались с таким расширением, как .дос - с файлами этого типа работает Ворд.
    Расширений много, но в них зашито как раз название программы, которая, собственно, их создает, редактирует и поддерживает. Дело в том, что некоторые расширения универсальны, и вы можете работать с этими файлами как в Виндоус, так и МакОС или другой ОС.
    Но есть расширение, присущее только Виндоус - это расширение ехе. Это исполняемые файлы программ, установщиков и тд.
    
    Давайте рассмотрим Проводник поближе. Запустим его, нажав на иконку в меню. Запустив Проводник, мы видим содержимое нашего жесткого диска. 
    Чтобы у нас был порядок, файлы разложены по папкам: есть системная папка, в которой находятся файлы, относящиеся к системе Виндоус, а есть файлы, которые создали или загрузили мы. 
    Чтобы попасть в папку или директорию, как ее еще называют, достаточно нажать два раза ЛКМ: вы увидите содержимое этой директории.
    Папки могут содержать в себе еще папки, в которых могут содержаться файлы или другие папки. Вложенность и порядок устанавливаете вы.
    Что позволяет делать Проводник?
    Первое, с чего бы я начала - это внешнее представление наших файлов и папок. Мы можем отображать их как в виде списка, так и, например, в виде больших иконок. 
    Чтобы переключить режим, в правом нижнем углу достаточно нажать на иконку отображения элементов в виде крупных эскизов. И мы поулчим такой вариант.
    Либо, если нам неудобен такой вид отображения, переключимся в режим списка. В левой части мы видим содержимое нашего жесткого диска, те папки, которые есть внутри. Нажав на стрелочку, мы можем развернуть структуру диска и посмотреть, а что находится в каждой из директорий. 
    Также для быстрого поиска у нас в правом верхнем углу есть поисковая строка. И здесь мы можем задавать, если помнитм, например, имя файла, которй нм необходим. 
    Мы можем ввести имя файла и найти его. Мы запускаем поиск, Проводник нашел наш файл, и мы можем его теперь открыть.
    
    Давайте посмотрим, из чего состоит верхняя панель. Она позволяет создавать папки, директории. 
    Ярлык - это ссылка на папку, картинку или просто текстовый документ. Нам достаточно нажать на Создать папку, задать имя новой папки, допустим, “111”, и нажать Ввод. Новая папка создана - мы можем туда перемещать наши файлы. 
    Как перемещать файлы?
    Мы можем взять и зажать ЛКМ файл. Здесь используется технология “бери и тащи”. Перетаскиваем файл на эту папку, и вот он перемещен в папку “111”, которую мы с вами только что создали.
    
    Что еще есть в Проводнике?
    Ножницы. При наведении на любую иконку обязательно будет всплывать подсказка с пунктов Вырезать. 
    Что значит вырезать?
    Если вы не хотите перемещать файлы с помощью “бери и тащи” - допустим, вам это неудобно - вы можете взять и вырезать файл: выделить его ЛКМ, один раз щелкнув по нему, нажать на Вырезать и выбрать какую-то другую папку, которую вы хотите. 
    Папку можно выбрать как из списка папок слева, так и, например, через “хлебные крошки”, чтобы проще было ориентироваться, где именно мы с вами находимся. Я перемещаюсь обратно в папку Видео, и теперь мне нужно вставить файл, который я переместила в буфер обмена. Навожу на иконку Вставить и файл вставляется обратно, аккуратно в папку видео. 
    Рядом с Ножницами у нас есть другая кнопка - Копировать. 
    А в чем же разница?
    Когда мы выбираем режим Вырезать, файл из одной директории (папки) вырезается и переносится в другую папку. 
    Если мы выбираем Копировать, получаем копию файла. 
    
    Ну что ж, с этим разобрались. 
    Четвертая иконка - Переименовать. Я назвала папку 111 и хочу ее переименовать. Каким образом это сделать?
    Я могу нажать на эту кнопку либо ПКМ вызвать контекстное меню. Здесь у нас точно также под рукой есть знакомые иконки, т.е. я могу сделать все и через ПКМ. Более того, контекстное меню позволяет мне совершать еще ряд действий с файлом. Итак, давайте переименуем нашу папку. 
    Выбираем папку - Переименовать - 222 - Ввод. 
    Разобрались, как переименовать.
    
    Теперь мы хотим удалить папку. За это отвечает иконка Корзина.
    Я нажимаю Удалить, но удаление происходит в два этапа: сначала файл или папка перемещается в корзину на рабочем столе. Мы можем 2 раза щелкнуть ЛКМ по корзине и увидеть, что мы туда с вами сбросили. 
    Иногда бывает, что мы ошиблись и нужно восстановить эти файлы обратно, вместо того, чтобы окончательно удалить. 
    Как восстановить файлы из Корзины?
    Мы выбираем директорию, которую только что удалили, нажимаем ПКМ и выбираем Восстановить. Теперь Корзина опустела, а в директории снова появилась знакомая папка. 
    Как же удалить папку окончательно и бесповоротно?
    Снова выбираем папку ПКМ, пользуемся контекстным меню и выбираем Удалить. Директория переместилась в Корзину. Теперь мы можем, не заходя в Корзину, щелкнуть по ней ПКМ и выбрать Очистить корзину.
    Ради безопасности система спросит, точно ли мы хотим удалить эту папку, потому что действие необратимо. Т.е. пока файл в корзине, он подлежит восстановлению, а после очистки корзины так просто его уже не вернуть.
    Мы подтверждаем действия, и корзина пустеет. Если мы ее откроем, увидим, что в ней больше ничего нет. Разобрались с корзиной и с удалением файлов и папок. Точно так же, кстати, мы удаляем и файлы.
    
    Далее - кнопка Сортировать. За что же она отвечает?
    Нам иногда нужно отсортировать папки или файлы по имени. Мы можем нажать Сортировать и выбрать, по какому параметру: по имени, по дате изменения, по типу, по возрастанию или по убыванию. 
    
    Следующий элемент вам уже знаком: мы можем выбирать, как отображать наши папки и файлы. Это могут быть огромные значки, мелкие значки, таблица или список. 
    Вы настраиваете отображение папок и файлов так, как вам удобно. 
    Причем для каждой папки можно настроить свой вид. Здесь также спрятаны дополнительные свойства. Мы можем выделить все наши файлы, можем обратиться к свойствам, к параметрам и так далее. 
    Ну что же, с Проводником мы немножко разобрались. Надеюсь, что вам теперь понятно.
    
- ****************************************Работа с программами****************************************
    
    Давайте двигаться дальше. Теперь, когда мы познакомились с файлами, давайте разберемся, как работать с программами: ставить их удалять и обновлять.
    Все это мы делаем при помощи уже знакомой кнопки Пуск.
    Через ее меню мы находим программу и удаляем. Либо через поиск мы можем найти приложение и удалить. 
    Давайте рассмотрим, каким образом мы можем удалить установленные программы. Потом я расскажу, как поставить новые программы на ваш компьютер.
    
    Чтобы открыть раздел Программы, необходимо кликнуть по иконке Пуск, и мы увидим список закрепленных приложений. Что значит “закрепленное приложение?”
    Мы можем управлять списком, чтобы отображать те программы, которыми пользуемся достаточно часто. Как это сделать?
    Мы можем щелкнуть по иконке программы ПКМ и выбрать Закрепить на начальном экране. Теперь приложение Яндекс.Браузер у нас будет отображаться среди закрепленных программ.
    Если мы хотим какую-то программу удалить из закрепленных, мы нажимаем ПКМ и выбираем пункт Открепить от начального экрана. Эта программа больше в списке отображаться не будет. 
    
    Теперь давайте разберемся, как удалить программу.
    Если программа, которую вы хотите удалить, не закреплена, вы можете перейти к просмотру всех программ, нажав на кнопку Все приложения.
    Далее, найдя программу, кликните ПКМ и выберите пункт Удалить - программа будет удалена с компьютера.
    
    Как еще можно удалить? 
    Самый простой, наверное, метод: в строке поиска при меню Пуск набрать Установка и удаление программ.
    Это раздел, посвященный именно установке и удалению. Здесь перечислены все-все-все программы, которые установлены в ОС.
    Мы выбираем программу для удаления, нажимаем на три точки с правой стороны и выбираем пункт Удалить. 
    Программа удаляется с компьютера. Все достаточно просто. 
    С удалением разобрались - немножко места освободили. Теперь давайте разберемся, как поставить программу.
    
- ************************************Установка программ************************************
    
    Чтобы установка программ была простой и безопасной… Что я подразумеваю под безопасностью?
    Для безопасности в плане вирусов был придуман магазин приложений Майкрософт Стор - там вы можете скачать программы от проверенных разработчиков. Более того, магазин будет отслеживать и загружать обновления к программам.
    Давайте посмотрим, как открыть этот магазин приложений, найти программу и установить ее.
    Для запуска воспользуемся поиском.
    Начнем набирать Стор: это приложение установлено в ОС по умолчанию. Запускаем его, кликнув ЛКМ. Отлично.
    Магазин приложений запущен.
    Кстати, чтобы оставить магазин в линейке меню, мы можем нажать на значок приложения ПКМ и выбрать Закрепить на панели задач.
    Теперь, даже если мы закроем приложение, оно останется у нас под рукой. В любой момент, если мы передумаем, мы щелкнем ПКМ - Открепить от панели задач, и значок магазина исчезнет. А теперь давайте снова запустим его.
    
    В данном магазине есть приложения на любой вкус, любую задачу и тд.
    Есть поиск, при помощи которого можно найти любую программу. Например, какой-нибудь сканер. По запросу Сканер мы увидим множество приложений.
    При выборе приложения можно ориентироваться на отзывы, количество звезд и, например, количество скачиваний, которое тоже указано рядом со звездами.
    Приложения бывают как бесплатные, так и платные.
    Чтобы установить приложение, достаточно щелкнуть, “провалиться” в раздел этого приложения и нажать на кнопочку Гет.
    После этого приложение будет установлено на ваш компьютер.
    Все достаточно просто. Конечно, вы можете устанавливать программы не только из Стора, вы можете загружать их из интернета, но я хотела бы обратить ваше внимание на то, что важно быть внимательными: вместе с программой вы можете скачать вирусы. Поэтому рекомендую обязательно ставить какую-нибудь антивирусную программу.
    
    Переустановка программ.
    Чтобы переустановить программу, нужно сначала удалить ее одним из способов, которые мы разбирали до этого, а затем снова ее установить. Здесь все достаточно просто.
    
    И в завершении давайте поговорим про обновление программ.
    Производители приложений периодически выпускают обновления, чтобы улучшить приложение, обезопасить его, повысить производительность и так далее. Мы можем поручить обновление наших программ Стору.
    Для этого обязательно убедитесь, что у вас установлена опция автоматического обновления. Как это определить?
    Давайте посмотрим. Нам нужно зайти в нашу учетную запись, выбрать апп сеттингс и проверить, что здесь активен флажок апп апдэйтс.
    Тогда приложение, программа, которую вы устанавливаете из Стора, будут автоматически обновляться. Если же вы установили программу, скачав откуда-то из интернета, вам нужно будет переходить обязательно в раздел Справка, Обновления или О программе и выбирать пункт обновления, т.е. вручную отслеживать этот момент. 
    Конечно, установка приложений через Стор гораздо удобнее.
    
- ****************************Подведем итоги****************************
    
    Мы с вами сегодня немного познакомились с Виндоус, рассмотрели Проводник и его возможности, увидели, где находятся файлы и директории, поговорили про установку, удаление и обновление программ.
    Виндоус - достаточно простая программа, ориентированная на то, чтобы сделать вашу работу простой и легкой.
    
    Надеюсь, что у вас все получится, а я с вами прощаюсь. До встречи в эфире.
    

### **************Урок 7. Особенности использования разных ОС. МакОС**************

- ********************План урока********************
    
    Ну что, давайте вернемся к теме. О чем мы с вами будем сегодня разговаривать?
    Мы разберемся с ОС МакОС, ее особенностями. 
    Мы посмотрим, как можно работать в этой ОС, разберем интерфейс, элементы интерфейса, также посмотрим, как устроена иерархия файлов документов, папок, что немаловажно. И также посмотрим, как поставить, удалить, обновить программу. Тоже важная задача. Ну что, вы готовы?
    Вперед.
    
- ********************************Что такое МакОС?********************************
    
    Какие же все-таки у МакОС есть особенности по сравнению с другими системами?
    Прежде чем говорить об особенностях МакОС, давайте разберемся, что такое МакОС - это сокращение от трех слов: Macintosh Operating System. 
    Т.е. это операционная система для компьютеров фирмы Эппл.
    Ведущим разработчиком данной системы был Джеф Раскин. 
    Ходит легенда о том, что Макинтош - это любимый сорт яблок Раскина, и это легло в основу названиия ОС. А дальше название сократили. 
    Современная линейка система МакОС начинается с версии МакОС Х. 
    Все думают, что это икс, а на самом деле это римская цифра 10.
    Т.е. линейка начиналась с 10 версии, а впоследствии приставка Мак отпала, потому что появились ОС Эппл для часов, телевизионной приставки, телефонов айПад, а звучание МакОС Х напоминало все-таки о компьютерах. 
    ОС для гаджетов назывались в зависимости от устройств, для работы с которыми предназначено: watchOS, TVOS и тд
    
    Теперь немножечко истории.
    Эппл использует МакОС с 1984 года, когда и появился первый компьютер этой компании. 
    Что же было внутри этой ОС в 1984 году?
    Вообще она была революционной: имела графический интерфейс, т.е. мы могли управлять ею и совершать какие-то действия внутри этой операционной системы без ввода команд. 
    Управление можно было осуществлять мышкой, что тоже было очень удобно, и тогда впервые появилась многозадачность. Т.е. система была достаточно революционной для того времени.
    В Виндоус все эти функции появились спустя только 6 лет, когда вышла в свет ОС Виндоус 3.0
    А что же сейчас?
    
- ********************************Особенности МакОС********************************
    
    Чем эта ОС такая особенная? Давайте разберемся.
    
    ********************Удобство.******************** 
    Если вы и посмотрите на интерфейс МакОС - на внешний вид, если говорить по-русски, - вы увидите лаконичность элементов, продуманность и удобство их расположения. Не сомневаюсь, что буквально через полчаса вы будете с удовольствием работать в этой ОС
    
    **************************Стабильность.**************************
    Наверняка вы сталкивались с тем, что после установки Виндоус, ее приходится переустанавливать через год, если не раньше. 
    При установке МакОС вы с такой проблемой не столкнетесь точно - я вам скажу на собственном опыте. Вы ее получите установленной при покупке компьютера и дальше забудете, что такое переустановка. Ну только в крайнем каком-нибудь случае она может понадобиться.
    
    ******************Отсутствие вирусов.******************
    
    Не совсем полное, но вирусов под Мак минимум, поэтому переживать за свой компьютер абсолютно не стоит.
    
    **************************************************************************Расширенный набор штатных приложений.************************************************************************** 
    
    Что это значит? Это значит, что при установке ОС у вас будет достаточно приложений для полноценной работы: мессенджер, карты и тд. И вы можете просто брать и приступать к работе, не ставя ничего дополнительно. Это тоже немаловажно. Вы получаете готовую удобную среду для работы.
    
    ********************************************************************************************************Повышенная безопасность, защита персональных данных.********************************************************************************************************
    
    Этот пунктик у Эппл стоит отдельной, очень важной строкой. 
    В чем безопасность?
    Ваши файлы шифруются. Отслеживаются все действия, все установки программ сторонних разработчиков, - чтобы вы не потеряли свои данные. Поэтому, с одной стороны, есть некоторые сложности с установкой приложений не из официального магазина приложений АппСтор, с другой стороны, вы и ваш компьютер полностью защищены и в безопасности.
    
    ******************************************************************************************МакОС поддерживает файлы и программы Виндоус.******************************************************************************************
    
    Тоже немаловажный момент. Что это значит?
    Например, Ворд, Ексель и другие привычные нам программы есть и для этой ОС, и вы абсолютно без каких-либо проблем можете переносить файлы с одной ОС на другую.
    С Виндоус на Мак и обратно.
    
    ********************************************************Простота установки программ.********************************************************
    
    Здесь все практически элементарно: мы с вами об этом поговорим дальше, и вы, конечно, убедитесь в этом сами.
    
    ************************Экосистема.************************ 
    
    Эппл стремилась объединить все свои устройства, такие как часы, телефоны и компьютеры в единую систему. И у вас есть возможность делиться файлами между устройствами, синхронизировать, передавать файлы с помощью ЭйрДроп, что очень удобно. Такой функции в Виндоус пока нет
    
    ************************************************************Инструменты для разработчиков.************************************************************
    
    МакОС буквально заточена под то, чтобы разработчики комфортно могли создавать приложения для разных устройств и разных ОС компаний Эппл.
    
    А теперь, когда мы с вами увидели все особенности и преимущества этой системы, давайте посмотрим, как в ней работать.
    
- ******************************Интерфейс МакОС******************************
    
    Интерфейс МакОС достаточно прост и лаконичен. Я уже об этом говорила. Компания Эппл уделяет большое внимание именно дизайну, его продуманности: чтобы интерфейс был удобен и прост в использовании. Не зря компания является таким флагманом в области дизайна. Достаточно зайти на их сайт. Он всегда является примером для подражания дизайнеров.
    
    Из чего состоит интерфейс рабочего стола?
    Там мы можем увидеть программы, рабочий стол, линейку, информационное меню и тд, но картинки картинками - давайте посмотрим, как выглядит эта ОС вживую, и как эти элементы могут быть использованы.
    
    Итак, перед вами интерфейс МакОС. Давайте разбираться, что тут на экране и из чего этот интерфейс состоит. В нижней части вы увидите панель быстрого запуска или, как еще она называется, Док.
    В этой панели размещаются программы, которые мы можем быстро запускать, их сюда можно добавлять и отсюда удалять. 
    Как удалить программу? Наводим на значок ПКМ, щелкаем Параметры и выбираем пункт Удалить из Док. Все, значок программы исчез. Она нам больше на этой панели не мешает.
    
    Следующий элемент - это файлы. Часто используемые файлы можно также здесь размещать. И здесь постоянно находится папка Загрузки. О ней мы тоже поговорим отдельно, зачем она нужна и как используется.
    
    Следующий элемент - рабочий стол, на котором видны подключенные накопители. Что такое накопители?
    Это, например, наш жесткий диск, который расположен внутри компьютера или ноутбука. Или это флешка, которую мы подключили, или какой-то съемный диск - все это будет отображаться у нас здесь на рабочем столе. 
    Кроме того, мы можем создавать здесь папки и размещать файлы. 
    Вот сейчас я создала папку% нажала ПКМ, выбрала Новая папка. и папка готова.
    
    Немаловажный элемент - это, конечно, корзина. 
    Она всегда располагается в нижней панели быстрого запуска. Чтобы удалить файлы и даже программы, достаточно перетащить объект в корзину, и он будет удален. Чтобы отменить удаление, вы должны нажать на клавиатуре Комманд + Зет
    Наша папка вернулась на рабочий стол. Также мы можем ее удалить при помощи щелчка ПКМ. Щелкаем по директории и выбираем пункт Переместить в корзину. Наша папка оказалась в корзине.
    Вообще корзина - это отдельное пространство, куда складываются ненужные нам файлы, папки, программы. И они хранятся какое-то время, какое именно, вы можете настроить сами. Корзину, конечно, нужно периодически чистить, чтобы она не захламляла ваш жесткий диск, занимая лишнее место.
    
    Следующий элемент, на котором бы я хотела остановиться, - это линейка меню. Она располагается в верхней части слева. И в ней появляются пункты той программы, которая у нас сейчас активна. 
    Посмотреть, какая программа сейчас запущена и активна, мы можем опустив взгляд на панель быстрого запуска, или Док. 
    Мы видим, что горит маленький беленький такой значок под программой, и именно ее пункты управления мы сейчас и видим. В правой части располагается информационное меню: оно нам может показывать часы, уровень зарядки аккумулятора, качество сигнала вай-фай и, например, подключенные устройства. Также здесь могут располагаться значки программ, запускаемых при старте системы.
    
    Очень важный элемент, который существует в МакОС - так называемый Прожектор (если по-русски) или Спотлайт. Это имя поисковой системы вашего Мак, и оно появляется в плавающем окне. 
    Давайте нажмем на элемент Лупа в верхнем меню и увидим поисковую строку. Для чего нам эта утилита? 
    Мы можем ввести здесь какой-то запрос. Например, сконвертировать валюту, искать какие-то файлы, запускать приложения, выполнять какие-то расчеты, получать сайты, определенные записи из Википедии и многое другое. Возможности достаточно широки. Очень полезная функция - рекомендую.
    
    Файндер - это стандартное приложение для управления файлами в ОС. Как и Проводник в Виндоус, Файндер позволяет просматривать содержимое нашего жесткого диска и других подключенных устройств. Мы можем запустить Файндер простым нажатием ЛКМ, и вот у нас уже открылась папка с документами. С этой системой поиска мы разберемся более глубоко чуть позже, а теперь давайте перейдем к системным настройкам.
    
    Вы можете настроить достаточно много функций в МакОС под себя. Где же располагаются системные настройки?
    Кстати, мы можем об этом спросить и наш Прожектор. 
    Также системные настройки всегда можно открыть из панели быстрого запуска: вот такая иконка с шестеренкой. ЛКМ нажимаем на нее и получаем достаточно внушительный список настроек экрана, безопасности и тд.
    С системными настройками немного глубже разберемся: их достаточно много, но я пройдусь по основным. Что нам с вами доступно?
    
    Например, давайте разберемся с жестами. Здесь также существует поиск: если вы какого-то пункта не видите, а он вас интересует, вы можете просто набрать ваш запрос в верхнем правом углу.
    Ноутбуки Эппл оснащены трекпадом, который позволяет более удобно, чем с помощью мышки работать в этой ОС. И давайте посмотрим, какие жесты нам с вами доступны.
    Я только начала набирать запрос Жесты, и в общем-то мне уже выдали несколько вариантов подсказок. Меня интересуют жесты трекпада.
    Выбираю - данный раздел позволяет настроить жесты, которые мы можем использовать на трекпаде. Например “смахивание” страниц. Для этого достаточно подвести сюда мышь, нажать на иконку стрелочки и выбрать, каким образом, нам будет удобно смахивать страницы: двумя пальцами, тремя или обоими способами.
    
    Прокрутка и масштабирование. Мы можем увеличивать масштаб, поворачивать элементы - все это тоже здесь настраивается. Выбор нажатия, прокрутка страницы, имитация ПКМ, если на трекпаде вам необходима эта функция и тд. Как видите, список достаточно большой. Я предлагаю вам спокойно посмотреть, попробовать и настроить трекпад по вашему усмотрению, чтобы вы могли воспользоваться такой удобной функцией, как жесты.
    
- ************iCloud************
    
    Следующий элемент, на который я хотела бы обратить внимание, - приложение айКлауд, которое есть в МакОС. Вы его будете часто встречать, поэтому очень важно, чтобы вы поняли, что вообще это такое.
    айКлауд - это универсальное имя для обозначения облачных сервисов компании Эппл.
    Давайте посмотрим, что нам предлагает айКлауд. Для этого нам нужно перейти в нашу учетную запись.
    Вы увидите вот такую информацию: айКлауд позволяет делать резервные копии данных, которые хранятся на компьютере или телефоне.
    Единственный минус - что стандартно Эппл нам предлагает около 5 Гб, что в принципе достаточно мало, поэтмоу вы всегда можете взять более расширенные пакеты и больше не беспокоиться о том, что ваши данные пропадут, если, допустим, устройство сломается или вы его потеряете. 
    Ваши данные всегда будут надежно сохранены в облаке, и вы всегда сможете к ним обратиться. Более того, это позволяет синхронизировать данные между устройствами. Вы всегда сможете, например, зайти с другого гаджета на свой облачный диск.
    
- ********Сири********
    
    Еще один классный элемент, который есть в МакОС, это Сири.
    На компьютере это наш персональный ассистент, который помогает решать разные задачи. 
    Чтобы запустить ассистента, справа в верхнем меню мы должны нажать на значок Сири. Теперь помощница нас слушает - мы можем давать ей определенные команды. 
    Например, вы можете дать команду “Позвони Виктории по фэйстайм” или “Покажи фотографии за вчерашний день”, “Найди ближайшую кофейню” или запустить любую программу или приложение. Очень удобно.
    
    Мы с вами немножко разобрались в том, как выглядит интерфейс МакОС, из каких элементов состоит и какие полезные приложения существуют.
    
- ****************************************************Работа с файлами и папками****************************************************
    
    А теперь давайте разбираться с файлами, папками и директориями.
    Я уже рассказывала о том, что Файндер - наша с вами исходная точка, с которой мы начинаем вообще работу с файлами и папками.
    Давайте поговорим о том, что такое общее расширение файла и какие расширения существуют только для МакОС.
    Вообще, расширение файла - это набор букв, который идет после точки в имени файла. До точки идет название файла, а после точки - расширение.
    Есть расширение, которое вы встретите только в МакОС. например .арр - это файл программы, не пугайтесь. Также есть расширение .dmg, которое указывает, что данный файл - дистрибутив программы. 
    Что такое дистрибутив? Это набор файлов для установки программы в нашей ОС. Сокращение .dmg расшифровывается как disk image или “образ диска”. 
    И еще вы можете встретить такое специфичное расширение как .pages - это файл, созданные в одноименной программе, которая есть только в МакОС.
    Во всем остальном МакОС хороша тем, что поддерживает файлы, которые вы встречали в Виндоус. И вы спокойно можете перемещать их с одной системы в другую.
    
    Ну а теперь давайте посмотрим на иерархию папок и снова вернемся к нашему Файндер. Хочу отметить, что МакОС заметно строже относится к расположению файла в файловой системе, и практически каждый файл имеет свое заранее определенное место. Для файлов разного типа и назначения определены разные стандартные места, поэтому не рекомендуется сохранять файлы в произвольных местах и без необходимости перемещать или переименовывать. 
    Я запустила Файндер и по умолчанию он показывает недавние файлы, с которыми я работала. Окно Файндер, - а мы сейчас видим именно его - служит для организации и доступа практически ко всем объектам, которые хранятся на вашем компьютере Мак. Слева у нас есть меню быстрого доступа - боковое меню для удобного перехода в папки, которые нам нужно иметь под рукой.
    
    Давайте посмотрим, как настроить это меню, чтобы быстро переходить к необходимым рабочим или личным файлам. 
    Как мы можем вынести сюда папку?
    Давайте зайдем в Загрузки, создадим здесь какую-то новую папку. Я расширю окно, кликну ПКМ, выберу Новая папка, и пусть она у нас будет называться Тест. 
    Я хочу, чтобы при запуске Файндер мне было удобно сразу переходить в эту папку. Я выбираю папку, зажимая ее ЛКМ и перетаскиваю в эту панель. Теперь, когда я буду запускать окно Файндер, у меня папка Тест будет всегда под рукой, т.е. я могу нажать на эту папку и перейти внутрь к тем файлам, которые мы здесь создадим и разместим. Удалить папки отсюда, из меню быстрого доступа, тоже очень просто: щелкаем ПКМ и выбираем Удалить из бокового меню.
    Вы можете хранить здесь самое необходимое, перемещать элементы по вашему усмотрению и организовывать работу с файлами так, чтобы вам было удобно. Самый главный вопрос, который всегда возникает: использовать папки или нет. Вообще папки существуют, чтобы правильно организовать ваши файлы, чтобы они не были разбросаны по всему рабочему столу и тд. Я уже показывала, что создать папку достаточно легко.
    Я сейчас покажу как. Например, в папке Загрузки мы создаем новую папку через ПКМ - Новая папка 2 -  и простым перетаскиванием, зажав ЛКМ файл, мы помещаем его в папку.
    Теперь наше пространство организовано, мы можем нашу папку обозвать Картинки и хранить в ней какие-то изображения по нашему усмотрению. 
    Чем лучше вы организуете структуру ваших папок, тем проще вам будет найти какую-либо информацию. 
    Вот, порядок наведен!
    
    Вообще, для организации файлов мы можем еще использовать и теги.
    Давайте посмотрим, что это такое. 
    Зайдем в папку с картинками, щелкнем правой кнопкой на нашей картинке и увидим здесь несколько цветных кружочков. Это так называемые теги, которые мы можем присваивать каким-то файлам, чтобы группировать их не только по папкам. Особенно это актуально, если они разбросаны в разных папках, но относятся, например, к одному какому-то проекту или какой-то одной теме. Выбрав один тег, например, красный, мы увидим значок слева от названия файла. Чтобы нам было удобнее фильтровать / находить файлы с одним и тем же тегом, мы можем также вывести теги в боковое меню нашего Файндера.
    
    Теперь я хотела бы остановиться еще немножечко на интерфейсе Файндер, чтобы показать, как мы можем менять отображение папок внутри папок и информации. 
    В верхней панели мы всегда видим название папки, в которой находимся, а внизу отображается путь, потому что перед этим мы зашли на жесткий диск, перешли в такую-то папку, в этой папке еще другая папка, куда мы тоже нырнули. Т.е. мы прошли практически 4 уровня. 
    В верхней части мы сейчас видим, что активная иконка, которая состоит из 4 квадратиков…
    Всегда при наведении ОС нам подскажет, что это за иконка - у них же нет подписи. И мы видим, что эта иконка отображает нам объекты в виде значков. Если мы выберем следующий режим, то объекты будут отображаться в виде списка или галереи. Настраивайте внешний вид окна, как вам удобно.
    Также мы можем всегда отредактировать эту панель и расположение элементов. Нам достаточно щелкнуть ПКМ по верхней панели и выбрать пункт меню “Настроить панель инструментов”. Теперь достаточно перетащить ту или иную иконку сюда в панель или, например, иконку, которая здесь есть, убрать простым перетаскиванием в этом поле. Мы также можем настроить нашу панель под запросы. 
    Например, вот у нас есть Править теги. Давайте вынесем эту иконку сюда. У нас появилась новая иконка. Или вынести функцию быстрого просмотра файлов - тоже очень удобная история. Как только мы с вами настроили панель, нажимаем на кнопочку Готово. И все. Мы можем теперь легко и просто воспользоваться, например, быстрым просмотром. Нажимаем и быстро просматриваем содержимое файла.
    
    В начале урока я говорила о том, что Эппл заботится об экосистеме: чтобы все устройства были собраны в одном пространстве и было легко передавать файлами и другую информацию между ними. 
    Для этого есть функция ЭйрДроп. С ее помощью мы можем отправить файл на устройство, которое находится поблизости и работает под управлением той же ОС или на компьютер Мак прямо из нашего Фандер. Как это сделать?
    Давайте попробуем на примере все той же картинки. Нажимаем на ее ПКМ. Допустим, я хочу ее отправить на другое устройство. Выбираем Поделиться - у нас появляется несколько вариантов, в т.ч. ЭйрДроп. Выбираем этот пункт. Сейчас ЭйрДроп должна определить устройство, которое находится поблизости и с которым я могу поделиться. Вот мы уже видим здесь телефон и, выбрав это устройство, тут же отправляем картинку на телефон.
    
    Также хочу отметить, что, конечно же, мы можем переименовывать файлы, папки, диски - все, что угодно. Как это сделать?
    В принципе, самый быстрый способ - один раз щелкнуть на файл, чтобы его выбрать и еще раз щелкнуть по имени файла. Теперь мы можем задать ему то имя, которое захотим. Как только мы закончили ввод нового имени файла, мы щелкаем по любому свободному пространству рядом, и наш файл переименован. 
    То же самое касается папок, но у нас тут есть безымянная какая-то новая папка, давайте мы ее тоже как-то назовем. 
    Еще один способ переименования файлов и папок - это вызвать контекстное меню ПКМ и выбрать пункт Переименовать. Это дает нам точно такие же возможности: мы можем ввести здесь какое-то новое имя. 
    
    Что важно отметить?
    При переименовании вы можете использовать практически любые символы, но нельзя использовать двоеточие или, например, начинать имя с точки. 
    Давайте попробуем провести эксперимент: добавим в начало имени папки точку и попробуем нажать Ввод. Мы получили предупреждение от ОС о том, что имя не должно начинаться с точки, которая стоит после имени файла. 
    Система, чтобы не путаться, где расширение, а где имя, воспринимает точку как разделитель, поэтому мы не можем ставить этот символ в начало имени нашего файла или папки. Еще мы не можем использовать символы двоеточие и косая черта. Эти символы нам недоступны в имени, а все остальное мы можем использовать, например, тире.
    
    Существует ряд объектов, которые мы переименовывать не должны, и которые вообще трогать не следует. Да, это все файлы и объекты, которые входили в комплект папки библиотеки. Здесь находятся служебные файлы, и лучше не заниматься их удалением, переименовыванием и тд - ради стабильной работы системы.
    
    Давайте еще раз обратим внимание на то, как можно удалить объекты и как их можно восстановить после этого. Если мы хотим удалить один объект, мы его выбираем и, например, при помощи сочетания Комманд + Дел мы можем переместить файл в корзину. Также можем сделать это через меню, вызываемое правой кнопкой. Можем просто перетащить объект прям в корзину. Не важно, каким образом вы будете удалять объект, главное - чтобы это было для вас просто и быстро.
    Переместить в корзину - таким образом мы с вами удалили один объект. А если их несколько? 
    Если мы хотим удалить несколько объектов, мы можем, зажав ЛКМ, выделить их и затем отправить в корзину. Кстати, я специально вывела иконку корзины в верхнее меню Файндер, чтобы можно было легко и быстро удалять объекты при необходимости. Если нам нужно для удаления выделить выборочно объекты, мы выбираем какой-то один, зажимаем клавишу Комманд и щелкаем мышкой по другому. Таким образом, мы можем с вами выборочно помечать объекты, над которыми будем работать. Дальше мы можем их удалить, переименовать и так далее.
    
    Теперь давайте посмотрим, а что у нас находится внутри корзины.
    Щелкаем по корзине - у нас открывается еще одно окно Файндер. Мы видим надпись Корзина. Это значит, что мы находимся внутри этой корзины, и внутри этой корзины у нас есть папка, которую мы удаляли ранее. 
    Как работать с корзиной?
    Мы можем объекты здесь как полностью удалять, так и восстанавливать, если эти объекты были удалены ошибочно.
    
    Как восстановить объект из корзины, если вы случайно его туда смахнули?
    Мы выбираем папку ПКМ и нажимаем на Восстановить. 
    Либо мы можем удалить его немедленно и безвозвратно. Чтобы очистить корзину, не заходя в нее, нужно ПКМ щелкнуть по корзине и выбрать Очистить корзину. 
    Вне зависимости от того, сколько там объектов находится: папок, программ и тд - все это будет очищено.
    Система нас спросит обязательно, точно ли нужно очистить корзину. Не ошиблись ли мы клавишей. Мы подтверждаем. И корзина наша с вами пуста.
    
- ****************************************Работа с программами****************************************
    
    Мы с вами поговорили о директориях, папках, файлах и о том, что мы можем найти на нашем жестком диске, где располагаются файлы. А теперь давайте перейдем к программам. Запрос к поисковой системе о том, как поставить программу на Мак, займет гораздо больше времени, чем сама установка программ. Есть целых 3 способа поставить новую программу на Мак.
    
    **********************Первый способ -********************** при помощи файлов с расширением .дмг, которые мы скачиваем с официального сайта разработчика или еще откуда-то. Это образ диска, в котором содержатся все файлы, необходимые для установки нашей программы.
    Также есть **способ ручной установки**. Это более сложный способ для более сложных программ, требующих запуска скриптов, доступа к ядру системы и тд. Пакеты для ручной установки имеют расширение .пкг или .мпкг. 
    И самый ****************************************простой и безболезненный способ -**************************************** это, конечно же, использовать АппСтор, магазин приложений для Мак от компании Эппл.
    
    А как мы можем удалять программы?
    Мы говорили, что можем их ставить, но тогда нам необходимо уметь какие-то программы и удалить. Здесь все достаточно просто. Также, как и в случае с файлами, вы можете перетащить программы в корзину, и - вуаля - программы больше нет. Но я бы не рекомендовала использовать данный способ. Почему?
    За время своей работы программа может создавать какие-то временные файлы в служебных папках, и при удалении они останутся и будут засорять вашу систему. 
    Для удаления программ я бы рекомендовала использовать специальные программы, которых достаточно много. Вы можете выбрать любую удобную для вас, например, АппКлинер. 
    В нее мы просто перетаскиваем файл с программой, она находит все временные файлы. которые относятся к этой программе и вычищает из нашей системы полностью программу без следа. 
    Это, наверное, самый лучший способ удаления программ.
    
    Но что делать, если программу нужно переустановить?
    Мы можем скачать версию программы, которую необходимо переустановить, запустить ее для установки, и система сама определит, что у нас уже установлена эта программа, и спросит нас, нужно ли ее заменить или оставить вторую версию. 
    В основном мы используем именно замену, чтобы старую версию заменить на новую, для чего и занимались переустановкой. Ну и четвертый аспект, касающийся программ - это обновление. 
    Любая программа со временем нуждается в обновлении: выходят какие-то новые фишки для устранения уязвимостей, стабилизации работы и тд.
    Тут тоже есть два метода, при помощи которых мы можем обновлять программы. При помощи магазина АппСтор, зайдя в соответствующую программу, или при помощи ручного управления.
    
- ****************Практика****************
    
    Но картинки картинками, а теперь давайте посмотрим, как это работает вживую.
    Давайте разберемся, каким образом мы можем установить программу. 
    Ну начнем с самого простого способа при помощи приложения АппСтор, которое есть на Маке и изначально устанавливается вместе с ОС.
    Нажимаем значок АппСтор внизу в панели быстрого запуска (Док).
    Далее нам доступны различные тематики. Можем найти какую-то конкретную программу, вбив в поиск, допустим, АппКлинер.
    И мы видим список программ, доступных для установки.
    Теперь достаточно просто нажать на кнопочку, загрузить, установить и программа пошла устанавливаться.
    Конечно же, система обязательно запросит подтверждение того, что мы действительно хотим установить эту программу. Она может попросить ввести пароль администратора или отсканировать отпечаток пальца. Подтверждаем. Программа установилась. Нажимаем Открыть, и вот программа запущена, установлена, видим иконку внизу в Док, и саму программу.
    
    Что мы можем сделать с этой программой?
    Давайте попробуем ее удалить. 
    Заходим в программу. Через АппСтор мы удалить ее не можем. Помните, я говорила о том, что для удаления программы нам достаточно перетащить ее просто в корзину. Если программа не отображается здесь, в панели быстрого запуска, вы ее здесь не оставляли.
    А как ее оставить? - спросите вы.
    Да очень просто: если вы уже запускали эту программу, она у вас здесь отображается, и вы нажмете на нее ПКМ и через Параметры можете выбрать пункт Оставить в Док. Вот эта часть отведена только для программ, которые мы запускали не так давно, и каждая новая программа будет вытеснять предыдущие. 
    Мы можем оставить ее здесь навсегда, если выберем Оставить в Док, и вот она попадет в стройный ряд. Если хотим удалить ее, щелкаем ПКМ и выбираем Удалить из Док. Но мы же хотели ее удалить.
    Где нам теперь искать эту программу? Мы ее установили, как ее найти?
    Если помните, у нас была папка Программы. Перейдем в нее и найдем программу, которую не так давно установили. Если программ много и вы сразу не видите искомую, можно справа в верхнем углу попытаться набрать название программы, и вот уже в поиске мы видим программу.
    Теперь я могу прямо из поиска взять и перетащить ее в корзину, таким образом ее удалив.
    Опять же, система попросит подтвердить наши действия. И программа была удалена, однако, мы говорили о том, что это не совсем правильный способ. 
    А еще программа, которая у меня установлена дополнительно, предупредила, что это не не самый правильный способ. 
    Давайте вернем программу через Комманд + З и удалим ее правильно. 
    Удалять будем при помощи другой специальной программы. 
    Запускаем АппКлинер. Теперь нам нужно просто перетащить программу, которую мы только что установили, в это окошко.
    Видите, как много мусора осталось бы, если просто перетащили это приложение в корзину. Нажимаем Ремонт, вводим наш пароль и программа удалена. Отлично.
    Мы разобрались, как удалять программы и разобрались, как это делать правильно.
    
    Теперь давайте разберемся с установкой и ручной установкой, для этого я сейчас попробую скачать какую-нибудь программу и поставить ее. 
    Найдем программу, которая позволяет удалять правильно программы с нашего компьютера. В поисковой системе набрала АппКлинер для Мак. 
    Переходим на сайт разработчика и скачиваем дистрибутив. Сразу хочу отметить, мы видим в браузере, что файл скачался. Как узнать, где теперь находится этот архив в нашей файловой системе?
    Все, что вы скачиваете через браузер и другие приложения, находится в папке Загрузки. 
    Либо мы можем щелкнуть по вот этой иконке архива ПКМ и выбрать пункт Показать в папке. И нас сразу перебросит в папку Загрузки, файлы всегда скачиваются именно в эту папку.
    Теперь достаточно распаковать архив, и вот уже наша программу установлена. Единственное, - ей совершенно не место в Загрузках, поэтому, чтобы было все правильно организовано на компьютере, я ее перенесу в то место, где она должна жить, т.е. в папку Программы.
    Для этого я просто захвачу ее левой кнопкой мыши и туда ее перенесу. В боковом меню у меня уже есть папка Программы, она закреплена, поэтому под рукой. Все, теперь программа в нужной папке.
    
    А как же нам, допустим, установить что-то, скачав образ диска?
    Мы касались уже расширения .дмг. Как, например, восстановить приложение из образа диска?
    Давайте поставим не менее полезную программу Пунто Свитчер: найдем ее и скачаем. 
    Предварительно убедитесь, что это версия для Мак, потому что ниже у нас есть ссылочка на версию для Виндоус. Файл скачался. ПКМ - Показать в папке - разархивируем. Мы видим файл с расширением .пкг. Берем и двойным щелчком запускаем его. Открылоь диалоговое окно, где мы по шагам пройдем этапы установки приложения. Достаточно нажимать кнопку Продолжить, дождаться установки и, опять же, ввести пароль. Все.
    Не прошло и минуты, как мы установили новую программу.
    Закрыть. Система предлагает нам исходный установочный файл, который мы скачали, переместить в корзину, чтобы он не захламлял нашу систему. Хорошо, отправляем его в корзину. Отлично. Вот мы установили Пунто Свитчер, и он у нас появился в верхнем меню. Это, кстати, программа, которая позволяет быстро переключать раскладку, если вы забыли и начинаете печатать латиницей вместо русского.
    
    Программы мы поставили. Теперь давайте посмотрим, как мы можем их обновлять.
    Все программы рано или поздно требуют обновлений.
    Первый, способ, как я уже рассказывала - через магазин ЭпплСтор. Запускаем и последним пунктом идут все обновления, которые необходимо загрузить для программ. 
    Мы видим, что некоторые программы были недавно обновлены, но одна требует нашего внимания. Здесь все достаточно просто. Нажимаем для программы, которая требует обновления, кнопку Обновить. 
    Все, программа обновлена. И список наш пополнился еще одной корректно работающей программой, которую мы только что обновили с помощью АппСтор.
    
    Но что делать, если вы устанавливали программу не через АппСтор, а как мы до этого делали, когда скачивали с сайта разработчика и устанавливали в ручном режиме?
    Достаточно запустить программу и посмотреть, есть ли к ней обновления. 
    Давайте запустим АппКлинер, который не так давно поставили.
    Программы - АппКлинер. Видим сейчас предупреждение. 
    Не пугайтесь, дело в том, что для безопасности системы и сохранения ваших данных Эппл отслеживает статус разработчика, и, если он не входит в список доверенных разработчиков, одобренных и т.д, у вас всегда будут возникать такие предупреждения. Дальше уже ваша ответственность, открывать это приложение или нет.
    Ничего страшного нет, нажимаем Открыть. И теперь давайте посмотрим, требует ли наша программа каких-либо обновлений. Как это увидеть?
    Нам достаточно перейти в верхнее меню программы. Каждый раз при запуске программы, если я переключусь на Файндер, у нас будет одно меню, а если переключилась на АппКлинер - другое меню. 
    И здесь мы выбираем пункт либо на русском Проверить обновления, либо на английском. Выбираем этот пункт, и он проверяет, нужно ли обновлять эту программу. Нет, выяснилось, что эту программу обновлять не стоит, потому что мы ее не так давно установили и она достаточно свежая. Значит, наша задача решена.
    
- **********Итоги**********
    
    Итак, мы немного погвоорили о МакОС, коснулись разных аспектов. Конечно, об этой ОС можно говорить бесконечно долго: там много полезных фишек и функций. Это был краткий экскурс. Я работают с этой традиционной системой с 2007 года, когда у меня впервые появился собственный Мак, и хочу вам сказать, что за эти годы я не разочаровалась в данной системе. Надеюсь, вам она тоже понравится, и вы будете получать удовольствие от работы с ней. 
    

### **************Урок 8. Архивирование и разархивирование в МакОС и Виндоус**************

- ********************План урока********************
    
    Итак, сегодня на уроке:
    
    1. Узнаем, что такое архив
    2. Выясним, какие бывают архивы
    3. Научимся архивировать и разархивировать файлы.
    
    И для начала разберемся в терминологии, чтобы нам было проще говорить на одном языке.
    
- ********************************Что такое архив?********************************
    
    Наверняка вы сталкивались с ситуацией, когда друзья с отдыха присылают вам фотографии на почту. Вы открываете письмо и вместо кучи фотографий видите один файл в непонятном формате. Как его смотреть, открывать, и где, собственно, фотографии? Скорее всего, вы получили архив. 
    Выясним, что это такое, и разберемся, как с этим работать.
    
    Официально архив - это файл, который содержит в себе один или несколько файлов, папки, а также метаданные: дату изменения, размер, уровень сжатия и прочее. Опишем архив простыми словами.
    
    Представьте такую ситуацию, с которой вы наверняка уже сталкивались, переезд.
    У вас масса вещей. Если переносить каждую вещь по одной, это займет довольно много времени и очень неудобно. При переезде мы берем коробку и складываем туда вещи. Коробку запаковываем и несем в машину.
    Так выглядит и архив. Мы также укладываем туда необходимые файлы, только они еще там и сжимаются, уменьшаются в размере, чтобы спокойно, без каких-либо ограничений, пересылать их по почте, отправлять на сайт и тд.
    
- **********************************************************************Что такое архивирование и архиватор**********************************************************************
    
    Архивирование - это как раз процесс упаковки, сжатия наших файлов, когда мы их собираем в один контейнер и сжимаем, превращая в архив. 
    Разархивирование - обратный процесс - распаковка нашей коробки с вещами, когда открываем ее и начинаем что-то оттуда доставать.
    
    Архиватор - программа, которая помогает нам в этом процессе. Она как раз предназначена для упаковки файлов, их сжатия и прочего. Мы можем запаролить наш файл с архивом и выбрать посредством архиватора уровень сжатия. 
    Архиваторы бывают разные, мы рассмотрим самые популярные, но чуть позже.
    
- ****************************************Какие бывают архивы?****************************************
    
    Узнаем, какие бывают архивы. При переезде коробки бывают разные: бумажные, пластиковые, деревянные ящики или даже металлические контейнеры. Так и архивы бывают разных форматов и разных назначений.
    
    Например, для системы Виндоус используется формат .ехе, это самораспаковывающийся файл. Вы дважды кликаете на него мышкой и в мгновение ока файлы распаковываются.
    
    Есть и многотомные архивы. Когда архив большой, т.е. большой объем, например, мы переезжаем из квартиры или загородного дома, нам надо распределить вещи по коробкам. Получается многотомный архив. Т.е. распределяем архив по файлам определенного размера, который задаем. И далее, запуская один файл, разархивируем весь наш контейнер с файлами.
    
    Для безопасности мы также можем устанавливать пароль на архив. Например, если наш архив попадает в чужие руки, его было бы невозможно открыть и посмотреть. Опять же, о том, как сделать такие архивы, поговорим позже.
    
- **********************************************************************************Как архивировать и разархивировать файлы?**********************************************************************************
    
    Разберемся, как архивировать разархивировать файлы. 
    Для этого есть три способа. 
    Первый способ - воспользоваться встроенной в ОС программой, утилитой, которая там уже есть по умолчанию. 
    Второй вариант - поставить на свой выбор специальную программу-архиватор. Они отличаются по функциям и интерфейсу, поэтому мы можем подобрать любую удобную нам программу. 
    И третий способ - когда мы не привязываемся к установленной у нас системе, а используем онлайн-сервис.
    
    Теперь узнаем, какие архиваторы наиболее популярны для ОС Виндоус.
    В тройку лидеров входят ВинРАР, ВинЗип и 7-Зип. Это программы, которые обладают достаточно широкой функциональностью и удобным интерфейсом, что немаловажно.
    
    А сейчас перейдем от теории к практике. Посмотрим, какие же форматы файлов и архивов вы можете встретить, чтобы знать, как с ними работать.
    
    1. Первый формат, он же самый распространенный и популярный - формат ЗИП. с ним работают практически все архиваторы.
    2. Второй формат - это РАР, тоже очень распространенный.
    3. Третий формат - 7-Зип, с ним работают не все архиваторы, это менее распространенный формат.
    4. Формат ехе - это самораспаковывающийся формат, но только для Виндоус. МакОС его не поддерживает. Для его открытия достаточно двойного щелчка по файлу, и файлы, которые содержатся в этом архиве, самораспакуются. Поэтому он называется самораспаковывающимся файлом.
- **************************************Практика. Способ №1**************************************
    
    Перейдем к первому способу для архивирования и разархивирования файлов.
    Чтобы заархивировать файлы, представьте, что вас попросили заархивировать файлы и прислать их по почте. Или вам надо заархивировать документы и прикрепить их к какому-то заявлению, например, в Госуслугах.
    Первый способ сделать это - воспользоваться встроенной утилитой, программой, которая уже есть в вашей ОС.
    Для этого выделяем все файлы, зажав их ЛКМ, нажимаем ПКМ по выделенным файлам и выбираем пункт Сжать в зип-файл - буквально за секунду появился архив. Зададим ему любое понравившееся название и нажмем Ввод - наш архив готов. Все очень просто.
    
    А теперь разархивируем получившийся архив.
    Чтобы эти файлы не мешали, удалим их. Потому они нам не нужны и находятся внутри файла с архивом. Теперь они упакованы в коробку.
    Можно дважды нажать на этот файл, и он распакуется, либо ПКМ вызвать контекстное меню и выбрать пункт Извлечь все. Нажимаем. Он спрашивает нас, а куда именно нам распаковать содержимое. Не будем менять местоположение, сейчас это нужная нам папка.
    Но если потребуется распаковать папку в определенное место, нажимаем на Обзор и выбираем необходимую папку для распаковки наших файлов. Теперь, когда мы указали путь, где будут лежать распакованные файлы из архива, нажмем на кнопку Извлечь - наши файлы на месте.
    Все, что мы упаковали, разархивировалось. Это первый способ.
    
- **************************************Практика. Способ №2**************************************
    
    Второй способ - воспользоваться программами-архиваторами. 
    Мы говорили о популярной программе, которая называется ВинРАР. 
    Запустим ее. Разберемся, как здесь упаковать свои файлы, что для этого требуется, и каким образом новичку начать быстрее работать с архивами.
    
    Выбираем Меню - Мастер - Создать новый архив, т.к. нам надо заархивировать файлы, папки и создать новый архив.
    Далее система нас спрашивает, где взять собственные файлы. Выбираем папку, где лежат наши файлы. И выбрав первый элемент, папку с файлами, зажимаем Шифт и щелкаем мышкой по последнему файлу. Таким образом, мы покажем программе, что нам нужны все файлы, которые здесь есть.
    
    ********************Внимание! **************************************************************************************Там находятся файлы разных форматов: это и картинки и пдф-файл, а также папка, где лежат файлы. Для архивации абсолютно неважно, что вы упаковываете. В любом случае он сделает из этого архив.****************************************************************************************
    
    Выбрали файлы. Мы можем выбрать все, только один файл или два файла. Вернемся к исходной позиции, выберем все и нажмем Ок. Теперь система сросит, как же назвать наш новый архив. Назовем его Способ №2.
    Нажав на кнопку Обзор, укажем программе-архиватору, куда именно положить архив. Посмотрим - он планирует положить все в папку Архивы и архиваторы. Попросим его положить все в папку Способ №3 и нажмем Сохранить. Путь указали, теперь снова нажмем Далее.
    
    Мастер хорош тем, что проводит нас как бы за ручку по всем этапам. 
    Выбрали файлы, назвали архив, определили путь, куда положить архив. Далее идут дополнительные настройки. Он может удалить файлы, которые у нас были. Их мы архивируем при архивации. Поставим галочку и посмотрим, что произойдет - можем создать самораспаковывающиеся файлы в формате .ехе. Запомним, что этот формат используется только для ОС Виндоус.
    
    **************Важно! ***************************************Не рекомендуется делать самораспаковывающиеся архивы, потому что иногда почтовые клиенты или антивирусы не пропускают такие файлы из-за содержащихся в них угроз.*****************************************
    
    Мы выяснили, что такой формат есть, но лучше использовать наиболее распространенные формате - ЗИП или РАР.
    
    Можно дополнительно защитить наш архив от посторонних глаз.
    Поставим пароль, например, 111 и нажмем Ок. Еще мы можем разбить наш архив на несколько архивов, если он большой и не помещается в один, не принимается почтой, а там есть ограничения до 10 Мб. Его можно “порубить” по кускам, разложить на отдельные коробочки - на отдельные архивы. Эту опцию выбирать не будем, потому что архив у нас малюсенький, но такая возможность здесь тоже есть. Теперь все готово - нажимаем кнопку Готово. Файлы, которые были в этой папке, из-за поставленной нами галочки удалились. Теперь они находятся внутри нашего архива Способ №2.
    
    Архив мы создали. Он весит довольно мало, и теперь его можно смело отправлять по почте, записывать на флешку, в общем, делать с  ним все, что захотим.
    
    А сейчас посмотрим, как его разархивировать. Это обратный процесс. Опять же, выбираем **********мастер.********** Теперь нам надо все распаковать.
    
    Если ранее мы архивировали файл, то сейчас будем его разархивировать. 
    Нажимаем на эту опцию и выбираем, какой именно файл хотим разархивировать. Выбираем Способ №2 и нажимаем Далее. 
    Он говорит, что файл найден, но не знает, куда распаковать содержимое этого файла. Здесь указан путь. Если путь не устраивает, опять же, через кнопку Обзор его можно поменять.
    
    Например, нас предложенный вариант не устраивает. Немного его подкорректируем. Для этого потребуется папка Способ №2. Выбираем папку и нажимаем кнопку Готово. Но все не так просто.
    Ранее мы устанавливали пароль на архив 111. При попытке распаковать этот архив он просит нас ввести пароль. И если ввести пароль неправильно, допустим 1111, и нажать Ок, он выдаст ошибку, что пароль неверный. Т.е. посмотреть содержимое этого архива мы не сможем. Введем правильный пароль, чтобы распаковать его - 111, и вуаля, наши файлы снова свободны от архива. Архив остался, а все, что содержалось внутри него, выгрузилось в папрку Способ №2.
    
    Теперь посмотрим, как работает другая программа, не менее популярная. 
    Она называется ВинЗип. У нее несколько другой интерфейс. Поэтому обычно мы и выбираем программу, которая нам ближе и понятнее. Итак, разберемся, как же с ней работать.
    
    У ВинЗип в меню есть инструменты для быстрого создания файлов. Но сейчас мы не будем усложнять задачу, делая самораспаковывающийся или многотомный файл. Просто возьмем все наши файлы из этой папки и выделим их мышкой. Зажмем ЛКМ, выделим все файлы и перетащим их в серединку, в белое поле. Затем развернем это поле, чтобы все стало понятнее. Перед нами возникли файлы, которые мы перетащили. 
    Теперь можем выбрать опции, удалить файлы после создания архива, чтобы не путаться в архивированных и не архивированных файлах, а также уменьшить их и тд. Достаточно. Нажимаем Сохранить как и выбираем, куда архиватору надо положить созданный архив. Чтобы не возникло путаницы, выберем Способ №2. Нажимаем Сохранить. Наш архив готов.
    
    Однако, он нас не спросил, как его назвать, но файл достаточно просто переименовать ПКМ. Переименуем наш файл и назовем его Архив. 
    Архив готов, мы создали его, воспользовавшись программой ВинЗип.
    
    А теперь посмотрим, как посредством этой программы распаковать наш архив. Итак, возвращаемся к нашей программе и выбираем файл. Выбрать файл можно через Меню - Файл, либо через боковое меню. Выбираем Этот компьютер, созданную нами папку - Способ №2, и опцию Открыть файл зип. Программа предложит выбрать:
    
    1. Распаковать файлы в текущую папку
    2. Распаковать файлы в документы
    3. Распаковать в ту папку, которую выберем
    4. Не распаковывать файлы.
    
    Выберем Распаковать в ту же папку, откуда мы их взяли, а именно в папку Способ №2. Видим, что наш архив распаковался в выбранную папку - Способ №2. Перед нами - наша папка, где лежат три фотографии и пдф-документ. 
    Окей, мы разобрали два способа, посредством которых можем запаковать и распаковать файлы.
    
- **************************************Практика. Способ №3**************************************
    
    Теперь разберем третий, универсальный способ - онлайн-сервис. 
    Чтобы найти онлайн-сервис, который нас устроит, достаточно набрать в поисковой строке в Яндексе “Архиваторы онлайн”. Вам заранее не сказано, каким именно онлайн-архиватором надо пользоваться, потому что эти сервисы то появляются, то снова исчезают. Поэтому всегда лучше иметь под рукой актуальную информацию.
    
    Берем первый в списке онлайн-архиватор, который у нас появился. Здесь достаточно выбрать и перетащить файлы, и файл сохранится на наш компьютер. Далее открываем наши файлы. 
    Единственный минус онлайн-архиваторов - неумение работать с папками. Т.е. они могут упаковать множество файлов, но если среди файлов есть еще папка с файлами, архиватор не справится с этой задачей, поэтому имейте ввиду. В новом списке с файлами папки, как видите, больше нет.
    
    Теперь выделим все файлы, которые хотим заархивировать и, зажав их ЛКМ, перетащим в область, где написано Перетащите или Выберите файлы здесь. 
    Можно нажать на кнопочку Выберите файлы и указать подходящую папку или сделать все быстрым перетаскиванием. Файлы перенеслись, и мы видим, что готовый файл с архивом скачался. Буквально секунда, и архив готов.
    Применяем это, если у нас нет специальных программ, и в нашу ОС не встроена утилита архивирования.
    
- ********************Заключение********************
    
    Подведем итоги.
    Мы поговорили о том, что такое архив, архивирование и разархивирование.
    Узнали, кто такой архиватор, и то, зачем он нужен. Далее разобрались с форматами архивов и даже разобрали три способа, посредством которых можно как создать архив, так и распаковать имеющийся.
    

### **************Урок 9. Организация рабочего пространства**************

- ********************План урока********************
    
    Сегодня на уроке:
    
    1. Узнаем, что такое Notion
    2. Разберемся, какие задачи решаются этой программой
    3. Научимся создавать собственные документы внутри
    4. Выясним, как пользоваться шаблонами, что такое блоки, какими они бывают
- ********************************Что такое Notion********************************
    
    Представьте ситуацию: у вас есть закладки интересных сайтов, непрочитанные книги, список непрочитанных книг, которые вы где-то храните. Есть заметки, списки дел, например. Вас окружает большой объем информации, масса, и вы храните ее в разных приложениях. И эта масса приложений, масса информации создают тревогу и стресс, когда вдруг что-то требуется найти.
    
    Notion - программа, задуманная разработчиками для замены ряда программ, чтобы вы не мучились перескакивать с программы на программу, а хранили все в одном месте. И предполаагалсь она как рабочий инструмент для ведения личных дел и заметок. 
    При необходимости она, конечно, может заменить ту же Еверноут, программу для заметок или, к примеру, Трелло.
    Трелло используется для отслеживания статуса задач. Или, например, программу Гугл Докс, которая позволяет работать с таблицами и документами, хранить там информацию. Все это в себе объединил Notion
    
- ********************************Какие задачи решает Notion********************************
    
    Мы можем хранить в Notion документы, информацию, картинки и видео. 
    Создавать, например, собственную базу данных или базу знаний. 
    Допустим, вы обучаетесь чему-то, собираете материал и можете сохранять все это в Notion. Ввести тот порядок, который вам удобен и понятен, управлять задачами, рабочими и личными, и проектами.
    Можно создавать таблицы различного назначения. И, опять же, что немаловажно, в Notion удобно хранить ссылки из браузера. Все это можно систематизировать и хранить так, как удобно.
    
- ********************************Плюсы и минусы Notion********************************
    
    Конечно же, как у любой многофункциональной программы, у Notion есть свои плюсы и минусы. Разберемся, что в ней есть положительного и не очень.
    
    ************Плюсы:************
    
    1. Первое положительное качество Notion - это, конечно, многофункциональность.
    Когда вы заглянете внутрь, то удивитесь, сколько возможностей предоставляет эта программа. Но это считается и минусом, т.к. иногда кажется, что функций слишком много, и от них просто идет кругом голова.
    2. Еще один плюс - быстрый импорт файлов. Т.е. мы можем подключаться к различным сторонним сервисам и выгружать файлы оттуда прямо в нашу рабочую среду в Notion.
    3. Гибкость этой программы - Notion заточен под решение разных задач. Т.е. вы можете не только работать в нем, но и вести какие-то личные заметки, проекты и так далее. Эта программа очень гибкая в этом плане.
    4. Еще один немаловажный плюс - простой дизайн. Заглянув внутрь, мы увидим, что Notion похож на белый лист, чтобы ничто не отвлекало от решения задач.
    
    Теперь перейдем к ******************минусам.****************** Они, конечно же, тоже есть
    
    1. Слишком много функций, я об этом уже сказала. Но рекомендую не пытаться охватить сразу все, попробуйте разобраться в каком-то одном направлении, например, создать, какой-нибудь список, чек-лист и поработать с ним, или заметки. Постепенно расширяйте список своих возможностей.
    2. Второй момент - нет русскоязычной версии. Но, с другой стороны, это тоже плюс, потому что для нас это прекрасная возможность немного прокачать английский.
    3. Третий минус - программа платная для командной работы. Но в принципе для решения каких-то личных задач она вполне подходит. Вы можете делиться своими отдельными документами по выбору с кем-то без проблем в рамках бесплатной версии.
    
    Теперь разберемся, как же в Notion работать.
    
- ********************************Как начать работать в Notion********************************
    
    Чтобы начать работать в Notion, есть несколько вариантов.
    Мы можем зайти на официальный сайт и скачать программу, установить ее на свой компьютер, программа поддерживает платформы Виндоус и МакОС. 
    Можно скачать мобильное приложение либо ничего не ставить и работать просто через браузер. Чтобы я порекомендовала?
    
    Notion работает по принципу единой учетной записи. Это значит, что вы регистрируетесь и потом работаете с любого устройства под личной записью. Поэтому для удобства можете установить программу на компьютер или поставить приложение на телефон. Если что-то срочное, телефон с приложением всегда под рукой. Не всегда компьютер находится так близко, поэтому идеальный вариант - установленное на телефон приложение. Если работаете не со своего компьютера, где Notion не установлен, можете работать с этой программой через браузер. Как раз третий вариант я вам и покажу.
    
    Первые шаги, чтобы приступить к работе с Notion - это, конечно же, зайти на официальный сайт и зарегистрироваться. Я говорила, что принцип - это единая учетная запись. Далее заполняем информацию о себе и говорим, как будем использовать программу: это будет личное использование или командная работа. Напомню, для командной работы Notion - платный. Посмотрим, каким образом осуществляется регистрация.
    
    Переходим на официальную страницу Notion. 
    Справа в верхнем углу есть кнопка Гет стартед. Чтобы начать работать, нажимаем на эту кнопку и вводим данные. 
    Если у вас есть аккаунт в Гугл, то регистрация довольно простая. Т.е. мы просто кликаем на Зарегистрироваться при помощи Гугл. Таким образом, множество шагов нам проделывать уже не потребуется. Если аккаунта Гугл или Эппл нет, можете просто ввести свой мэйл и нажать на кнопку Продолжит с мэйлом. Далее система попросит ввести код, который придет на вашу почту, указанную при регистрации.
    
    На почту нам пришло письмо с кодом, который находится в серой зоне.
    Копируем этот код и вводим его, чтобы завершить регистрацию. Нажимаем кнопку Создать новый аккаунт. Отлично, код мы ввели. Теперь система просит нас ввести свое имя и пароль - вводим. 
    У Notion есть еще несколько вопросов к нам, ответим и на них.
    
    Первое, о чем спрашивает нас система - для чего мы собираемся ее использовать. Вы можете выбрать произвольную тему. Нас спрашивают, в какой роли мы будем в Notion - выбирайте, если используете для личного использования, последний пункт.
    Еще программа спрашивает, что мы планируем делать в Notion - просто ставим галочку и нажимаем Продолжить. 
    Теперь идет важный момент - мы должны выбрать, каким образом будем использовать Notion: работать в команде или использовать лично. 
    Выбираем Для личного использования, потому что работа команды, как вы помните, платная. 
    Поздравляю, вы зарегистрировались.
    
- ******************Онбординг******************
    
    Теперь разберемся со страницей, которая у нас открылась - это первая страница.
    Стартовая страница в Notion предназначена для более быстрого ознакомления с возможностями этой прекрасной программы.
    Здесь есть список, чек-лист, по которому вы должны пройти, попробовать все функции и поставить галочку, что ознакомились.
    К некоторым пунктам чек-листа прилагается видео, чтобы, опять же, упростить свою задачу. 
    Итак, посмотрим, что же нам предлагает сделать программа. Можете пройтись по всем чек-листам, если будет время, и в спокойном режиме все посмотреть, а я пока познакомлю вас с интерфейсом.
    
    Как я уже говорила, интерфейс Notion похож на белый лист, чтобы ничего не отвлекало вас от важных задач. 
    В левой части есть дерево страниц, которые уже созданы в этой системе. Они здесь для примера. Это разные типы страниц для решения задач. 
    Например, movie-лист. Развернем раздел Персонал хоум и нажмем на муви-лист. Посмотрим, что это за страница.
    Программа показывает нам, как можно хранить список фильмов, которые хотели бы посмотреть. И если мы что-то из списка уже посмотрели, то всегда можем перенести этот фильм в просмотренные. 
    Пусть вас не пугают английские заголовки, вы всегда можете что-то переименовать. О том, как работать с этими блоками, поговорим чуть позже. А сейчас продолжим знакомство с интерфейсом.
    
    Есть также страница с рецептами, ссылками на конкретный файл с рецептом и тд. Например, есть страница с задачами и журнал с записями. Эти страницы сделаны, чтобы помочь вам увидеть все возможности программы Notion.
    Если они мешают, и вы уже готовы создавать собственные страницы, всегда можете их удалить. Для этого достаточно навести курсор в левой части экрана на конкретный пункт, нажать на три точки и выбрать delete - страница окажется в корзине.
    
    Последний пункт в левой части меню - корзина.
    Это очень удобный элемент, потому что удаление страниц происходит в два этапа.
    Сначала страница попадает в корзину. Если мы вдруг по ошибке нажали на удаление, но передумали удалять страницу, то всегда сможем вернуть ее, нажав на стрелочку, и страница вернется на место.
    В этом меню мы можем также менять страницы местами - достаточно зажать ЛКМ страницу и перетащить ее в дереве документов на то место, куда хочется.
    
    В правой верхней части есть Share. Этот пункт позволяет делиться документами с коллегами, друзьями и так далее. Нажимаем на этот пункт, ставим галочку “Поделиться веб” и получаем ссылку, которую планируем отправить, чтобы поделиться именно этой страницей. Как видите, при наведении на пункты всплывают подсказки, т.е. система информирует, что будет если нажать на тот или иной пункт.
    
    В верхнем левом углу как раз находится наш аккаунт. Мы можем изменить наш тарифный план, разлогиниться, т.е. выйти из учетной записи или создать новый аккаунт. Как видите, все достаточно просто.
    
- **********************Работа с шаблонами**********************
    
    Теперь разберемся с шаблонами. Мне кажется, вы уже готовы перейти к этому шагу.
    
    ********************Шаблоны -******************** это страницы, которые специально созданы заранее для решения той или иной задачи. Их можно скопировать к себе, отредактировать на свое усмотрение либо использовать как есть, если все устраивает. 
    Шаблоны делятся на 2 группы: бесплатные и платные.
    Полный список можно посмотреть на сайте разработчика Notion. 
    А теперь посмотрим, где именно шаблоны располагаются внутри интерфейса программы.
    
    В левом меню один из трех предпоследних пунктов так и называется - темплэйтс. Нажмем на него и посмотрим, что будет.
    Открылось окно, где отображаются доступные нам шаблоны, причем шаблоны специально разделены на группы. 
    Например, для дизайнера, студентов или маркетинга. Т.е. чтобы быстрее найти необходимый шаблон, надо просто пройтись по нужной группе. Чтобы посмотреть все шаблоны, надо нажать на последнюю ссылку, находящуюся в правом меню - Browse more templates, и перейти на сайт разработчика Notion
    Так мы увидим весь список шаблонов.
    
    Для удобства пользователей шаблоны разделены на группы, и есть предпросмотры, чтобы посмотреть, что это за шаблон. Шаблоны бывают платными и бесплатными. 
    Если шаблон платный, мы увидим стоимость шаблона.
    Для бесплатных никакой пометки не будет. 
    Посмотрим что-нибудь из раздела Education (обучение), например, доску для студентов.
    
    Чтобы посмотреть, как выглядит шаблон, просто щелкаем по нему ЛКМ. 
    Здесь есть скриншоты для просмотра всей функциональности этого шаблона. И если он подходит под наши задачи, выбираем, куда его продублировать. 
    Он предлагает нам нашу доску. Нажимаем на Duplicated template, чтобы продублировать шаблон на свое рабочее пространство в Notion.
    Таким образом, достаточно легко и быстро, в один клик, мы скопировали понравившийся шаблон к себе в рабочее пространство.
    
    Обратите внимание, что в нашем списке страниц, которые появились после регистрации в Notion, прибавилась еще одна страница, которая так и называется - student dashboard. 
    Здесь есть масса страниц под различные задачи, блоки Музыка и Фильмы.
    Все, что нам не понадобится, мы всегда сможем удалить, вспомните три точки.
    Выбираем и нажимаем delete. Посмотрим, что представляет собой этот шаблон.
    Здесь есть информация по курсам, календарь с основными событиями, проекты и личная информация про музыку, клубы и прочее.
    
    Теперь, если какая-то страница больше не понадобится, можно ее удалить, а саму скопированную страницу переименовать на свое усмотрение. ПКМ, ренейм и вводим название - допустим, “Моя первая страница”.
    
- **********Блоки**********
    
    Мы подошли к редактированию шаблона. И у нас появляется такое понятие, которое присуще Notion - блоки.
    Разберемся в том, что такое блоки и какими они бывают, чтобы довести этот шаблон до ума.
    
    Блок в Notion - это любая часть содержимого, которая стоит на нашей странице. Это может быть текст, ссылка, список, элемент чек-листа, картинка, иконка и все что угодно. По сути, в Notion страница как раз и состоит из таких блоков, которые мы упорядочиваем по своему усмотрению.
    
    Посмотрим, какие блоки нам доступны. Есть несколько типов блоков в Notion. Базовые:
    
    1. Inline
    2. Database - блоки, связанные как раз с формированием базы данных
    3. Media - для подключения видео
    4. Embeds - блок для интеграции сторонних приложений, которые мы можем также прикреплять к Notion и использовать их функции
    
    Разберем на практике, что такое блоки и как отредактировать шаблон, который мы скопировали из библиотеки Notion.
    Первый блок, который вы видите на странице - картинка.
    Можете ее изменить при наведении на картинку курсора - у вас появится всплывающее меню, предлагающее изменить обложку страницы. 
    Нажимаем на него и используем любое изображение из библиотеки, которое предлагает нам Notion. Либо выбираем второй пункт и загружаем какую-то картинку с нашего компьютера или используем бесплатный фотобанк unsplash. 
    В поиске можно ввести, например, что-то связанное с компьютером, и получить выборку фотографий. Выберем соответствующую картинку. На нее достаточно нажать и обложка изменится.
    
    Следующий блок, который всегда есть на каждой странице - иконка самой страницы. Здесь мы тоже можем ее поменять - достаточно кликнуть и выбрать из списка эмодзи либо загрузить какую-то свою иконку.
    
    Далее первым пунктом всегда идет заголовок страницы. 
    Чтобы добавить блоки, надо навести курсор на следующий блок, первый блок с заголовком неизменный, и отредактировать его на свое усмотрение, допустим, поставить большую букву М
    
    Следующий блок - описательный. 
    Если мы хотим добавить какой-то блок после заголовка, надо навести курсор на этот блок, он текстовый и нажать плюсик. Получаем меню с доступными блоками в Notion.
    Либо можем нажать, например, слэш и начать вводить название какого-то блока. Допустим, list - получим пример ту-ду лист. Это список, где можно ставить галочки по выполнению того или иного пункта.
    Добавим еще какой-нибудь блок, нажмем на плюсик и посмотрим на все блоки в выпадающем списке. 
    Итак, первый блок - это базовые блоки, он содержит блок с текстом. Т.е. если хотите разместить какой-то текст, блок со ссылкой на страницу, заголовки, таблицу, нумерованные или маркированные списки, разделители и тд, это базовые блоки, часто используемые в Notion.
    
    Следующий раздел - Inline. 
    Посредством этого блока мы можем встраивать какую-то стороннюю информацию.
    
    Далее идет блок Database. 
    Все, что связано с сохранением информации в определенную базу данных, различные варианты, таблицы, галереи, списки, вы найдете здесь.
    
    Следующий достаточно большой блок - Медиа. 
    Если надо вставить картинку, кликаем на блок Имэйдж и выбираем картинку.
    Либо загружаем ее с компьютера кнопкой choose on image или выбираем из бесплатной фотобиблиотеки любую картинку, которую можем свободно использовать. Выбираем картинку - появилась фотография.
    
    Теперь посмотрим, что еще здесь есть. 
    Мы можем встраивать закладки, видео- и аудиофайлы, вставлять код в специальное обрамление и давать ссылки на загружаемые файлы.
    
    Последний и менее важный блок с блоками - Embeds.
    Это то, что встраивается из сторонних сервисов. Мы можем встроит, например, Гугл Док из Гугл Драйв, Твиттер, карты и даже интегрироваться с фирмой. 
    Здесь довольно большой список приложений. с которыми можем соединить наш Notion.
    
- **********************************Создание страницы**********************************
    
    Теперь создадим нашу первую страницу.
    Я показала, как можно изменить шаблон, допустим, изменив блоки, добавив блоки или удалив какие-то ненужные блоки. Т.е. чтобы удалить блок, наводим курсор на блок, нажимаем на появившиеся 6 точек и выбираем delete - блок удалился.
    Либо можно просто выделить блок, зажав его ЛКМ, нажать на компьютере клавишу Бэкспейс или Делит и удалить лишнюю информацию со страницы. Все довольно просто.
    
    Еще блоки можно перемешать.
    Мы говорили, что страница в Notion - не что иное, как набор блоков, упорядоченных определенным способом. Перенесем эту картинку выше к заголовку.
    Для этого надо навести курсор на блок с картинкой, нажать на 6 точек ЛКМ и, не отпуская, перетащить этот блок выше. Таким образом, мы меняем порядок блоков на странице.
    
    Теперь поэкспериментируем и создадим страницу. Для этого свернем все страницы, чтобы они нас не отвлекали.
    Перед нами - пункт создания новой страницы. Нажимаем на него - появился белый лист. Можем начать творить.
    
    Любая страница начинается с заголовка. 
    Озаглавим ее. Для красоты можно добавить обложку нашей страницы, чтобы не было так много белого места, но это необязательно. Подводим курсор к верхней части и выбираем Добавить обложку. 
    Notion случайным образом добавляет картинку, кликаем на уже знакомый пункт “Изменить обложку” и выбираем что-нибудь из цветов. У нас будет нейтральный фон. Можем добавить иконку или комментарий к этой странице.
    Заголовок есть, теперь набросаем блоки.
    
    Чтобы добавить блок на нашу страницу, щелкаем под заголовком.
    Появился блок, он будет по умолчанию текстовый. Уже можно вводить текст.
    Щелкая после этого блока, автоматически добавляем следующий блок.
    И, опять же, по умолчанию он предназначен для хранения текста до следующего абзаца.
    Если мы не ошиблись, и, например, нужен не просто текст, а подзаголовок, нажимаем на 6 точек слева от блока и вызываем дополнительное меню и выбираем пункт, который позволяет менять тип нашего блока. Пусть это будет заголовок третьего типа. Отлично. Был текст - стал заголовок. Добавим еще какой-нибудь текст.
    Посмотрим, как еще можно работать с текстом. 
    Например, нам надо, чтобы заголовок был цветным. 
    Для этого просто выделим весь текст, после чего появляется всплывающее меню с помощником. Он как раз позволяет быстро изменить тип нашего блока - например, заголовок третьего типа на второй, или сделать из него элемент списка или ссылку на страницу и т.д.
    
    Поменяем на заголовок побольше. Можно сделать заголовок более жирным, наклонным и изменить его цвет. 
    Это меню помогает быстро работать с конкретным блоком. 
    Добавим еще какой-нибудь блок для примера. После блока надо добавить текст, у нас будет таблица.
    Появилась простенькая табличка, состоящая из двух колонок и трех строк, которую мы можем всегда расширить, нажав на плюсик или удалив лишнее. 
    Мы готовы вводить текст в таблицу. 
    Как видите, все просто.
    Вы сами творите свою таблицу, а инструменты по оформлению и изменению типа блока - всегда под рукой.
    
    Вспоминаем, что блоки можно менять местами, если хотите представить информацию по-другому. Просто зажимаем 6 точек от конкретного блока и тащим его выше или ниже в зависимости от задумки. 
    Это был легкий экскурс в Notion.
    
    Я уже говорила, что Notion - многофункциональная программа.
    Рассказывать о ней можно часами. Но я предлагаю вам начать с простого. Подумайте:
    
    - Для каких задач вам может понадобиться Notion
    - Хотите ли вы хранить там статьи, лекции, фотографии или список задач
    
    Опробуйте эту функцию, а дальше - расширяйте свои возможности.
    
- ********************Заключение********************
    
    Подведем черту под тем, какие все-таки задачи решаются в Notion.
    
    Если вы студент, можете хранить конспекты лекций, составлять расписание и ставить дедлайны. Например, когда вам надо сдать ту или иную работу в срок, воспользуйтесь календарем в Notion. Можно также вести личный блок, закрытый от посторонних глаз, или ежедневник.
    
    Если работаете в команде, Notion прекрасно подойдет для составления дорожной карты по движению Проекта с указанием этапов, крайнего срока и прочего. Можете делиться с командой документами, у вас будет единая рабочая среда. В Notion можно прикреплять документы из сторонних сервисов, т.е. интегрировать их, к примеру, из Гугл Докс и так далее.
    
    Если преподаете, можете, опять же, хранить свои лекции в Notion, систематизировать их, хранить информацию о студентах, учениках и составлять свое онлайн-расписание. Notion поможет и в этом.
    
    Теперь подведем итоги:
    
    1. Мы познакомились с Notion
    2. Посмотрели, для каких задач подходит эта программа
    3. Узнали, как зарегистрироваться и работать внутри этой программы
    4. Разобрались с шаблонами и блоками, которые предлагает нам Notion
    
    Надеюсь, это занятие было для вас полезным, и вы будете использовать представленный инструмент в работе. До новых встреч.
    

### ****************Урок 10. Слепая печать****************

- ********************План урока********************
    
    Сегодня на уроке:
    
    1. Поговорим про полезность метода слепой печати, иначе зачем нам вообще его осваивать?
    2. Узнаем, что такое слепая печать, и как этот метод освоить
- ************************************************************************************Полезность обладания навыком слепой печати************************************************************************************
    
    А теперь поговорим про полезность обладания этим навыком. Посмотрим, чем он поможет в реальной жизни.
    
    В современном мире умение быстро печатать - важный навык. 
    Мы, так или иначе связаны с клавиатурой. Она есть на компьютере и на смартфонах. Способ ввода текста, при котором мы не смотрим на клавиатуру и используем все наши 10 пальцев для печати, как раз и называется методом слепой печати.
    Результаты исследования скорости печати показали, если при скорости примерно 40 слов в минуту вы повышаете ее хотя бы до 70 слов в минуту, экономите целых четыре дня за год своей жизни.
    
    Представьте четыре дня. Так зачем же нам осваивать этот метод?
    Конечно же, после усвоения метода увеличится скорость набора текста. Вы сможете быстрее отправлять сообщения, выполнять работу и общаться с друзьями, коллегами и т.д.
    Этот метод позволит вам делать меньше ошибок и опечаток в тексте. Вы будете меньше уставать от работы за компьютером, потому что появится возможность не сосредотачиваться и не смотреть на клавиатуру и монитор. 
    Это требует в 2 раза больше усилий. Еще вы сможете набирать текст даже в плохо освещенной комнате. И, конечно же, метод слепой печати позволяет сохранить здоровье - сберечь зрение и тонус шеи, сохранить осанку при использовании всех 10 пальцев. Это благотворно влияет на суставы.
    Надеюсь, я вас убедила, что метод слепой печати стоит освоить.
    
- ********************************************************************Как научиться методу слепой печати********************************************************************
    
    Разберемся, как научиться этому методу.
    
    Сначала мы должны начать с принятия правильной позы. Для этого надо сесть прямо, ровно держа спину. и согнуть локти под прямым углом. Мы должны расслабиться, эта поза благотворна для всего нашего тела. Такая поза способствует здоровой спине, шее и остальному. Поэтому начинаем с принятия правильно позы.
    
    Шаг второй, который делаем навстречу методу слепой печати - занимаем стартовую позицию наших пальцев.
    Это исходная позиция, с нее начинаем и всегда к ней возвращаемся - такая линия старта и финиша. Называется она основной строкой.
    Кладем 4 пальца левой руки и правой руки на букву, указанные в иллюстрации, и занимаем стартовую позицию. На клавишах А и О можете нащупать некоторую выпуклость. Это некий сигнал, что вы правильно заняли позицию, пальцы располагаются правильно - клавиши находятся под указательными пальцами.
    Большие пальцы, если не знаете, куда их день, лучше расположить на пробеле.
    Если заняли стартовую позицию, тогда двигаемся дальше.
    
    Третий немаловажный шаг заключается в изучении клавиатуры. 
    Согласно методу слепой печати, у каждого пальца левой и правой рук есть своя зона клавиш. На иллюстрации показаны важные правила:
    
    1. Мы должны нажимать на указанные клавиши только теми пальцами, за которым они закреплены.
    2. Мы всегда должны возвращаться в исходную позицию на основную строчку
    
    Пока набираем текст, стараемся не смотреть на клавиатуру, а представлять расположение клавиш. Нам также поможет установленный ритм - не торопитесь, выберите тот ритм, в котором будет удобно работать.
    
    Следующий шаг - скорость печати. Новички почти всегда делают одну и ту же ошибку - пытаются сразу печатать с большой скоростью. Это приводит к ошибкам, использованию не тех пальцев и т.д.
    Не стремитесь ускориться, скорость возрастет сама по себе, поэтому нет смысла наращивать ее вначале. 
    На первом месте стоит качество, а не скорость.
    
    Старайтесь также проглядывать на одно-два слова вперед.
    Если чувствуете, что устали или раздражаетесь, стало появляться много ошибок, сделайте паузу.
    **************************************Самое важное в освоении этого метода - РЕГУЛЯРНАЯ ПРАКТИКА.**************************************
    Если мы хотя бы раз в день будем заниматься по 15-20 минут, возникнет эффект мышечной памяти, и этот навык закрепится и станет срабатывать автоматически.
    
    В США и Англии метод слепой печати преподается как отдельный предмет, поэтому большой процент населения обладает этим навыком. Чтобы немного себе помочь, заклейте клавиши, например, скотчем. Или положите распечатанный вариант этой схемы, к примеру, рядом с цветами, чтобы ориентироваться и вспоминать клавиши, пока не запомните.
    
- **********************************************************Онлайн-сервисы для тренировки**********************************************************
    
    Раз мы заговорили про практику, важно, чтобы она не была однотонной и мучительной. Хотя мы и взрослые, нам всегда интересно поиграть. Для лучшего освоения этого метода предлагают воспользоваться онлайн-сервисами.
    
    Есть программы, которые устанавливаются на компьютер, а можно вообще ничем не пользоваться и просто ежедневно практиковаться. Но интереснее воспользоваться каким-то сервисом, который стимулирует к дальнейшему прохождению, постепенно наращивая сложность. Предлагаю рассмотреть несколько таких сервисов. В любом случае протестируем все и остановимся на более удобном.
    
    Первый сервис - Typerun. 
    Это очень минималистичный и удобный интерфейс, в нем ничего не отвлекает, есть словами для изучения иностранных языков, в том числе языков программирования. Тайпран позволяет тренировать метод слепой печати. Это бесплатный онлайн-сервис.
    
    Еще один сервис - ****************************Typingstudy.**************************** Обучение происходит на 108 языках, и можно проверить скорость печатания. Есть игры, которые позволяют немного разнообразить наше обучение. Обучение идет от простого к сложному, т.е. постепенно наращиваются уровни. 
    Это бесплатный онлайн-сервис, рекомендую попробовать.
    
    Есть отечественный и довольно знаменитый онлайн-тренажер в этой сфере, который называется **********************************************“Соло на клавиатуре”.********************************************** Из плюсов:
    
    - перед глазами - клавиатура с раскрашенными в разные цвета клавишами
    - можно устраивать гонки по клавиатуре и даже получить за это электронный сертификат
    
    У нас есть 5 занятий, которые доступны бесплатно. Думаю, этого достаточно, чтобы оценить, удобно вам или нет работать в этом сервисе. 
    
    Я не могла обойти стороной еще один сервис, который называется “Клавогонки”. Это не совсем онлайн-тренажер слепого метода печати, скорее, тренажер формата онлайн-соревнований. Тренажер подходит, когда вы уже более менее освоили метод слепой печати, и вам надо его отшлифовать. Здесь мы можем посоревноваться с соперниками. Это бесплатный  сервис, но можно оформить премиум-аккаунт, что расширит ваши возможности.
    
    И еще один сервис, довольно своеобразный, потому что разработан специально для программистов - [typing.io](http://typing.io) 
    Это значит, что вы будете набирать код на разных языках программирования, какие выберете. Если вы программист и хотите ускорить набор кода, этот сервис точно для вас. Есть анализ опечаток, реальный код, реальная практика и бесплатная версия. Поэтому, если у вас есть подходящие задачи, рекомендую этот сервис.
    
- ********************************************Что мы получим в итоге********************************************
    
    Мы рассмотрели метод слепой печати. Принцип достаточно простой, как вы уже поняли: главное - соблюдать правила и постоянно тренироваться. 
    Этот метод приведет нас к снижению психической утомляемости, мы перестанем сильно уставать от компьютера, сохраним правильную осанку и зрение, т.к. не будем смотреть на клавиатуру, опустив голову. Делая это постоянно, сохранится здоровье нашей спины, а также увеличится наша производительность, что немаловажно.
    
    Чтобы действительно освоить этот навык, потребуется тренироваться 2-3 раза в день. По времени - на ваше усмотрение, но суммарно - не менее 15-20 минут в день
    
    Попробуйте разные варианты по освоению слепой печати: закрывайте клавиши, распечатайте клавиатуру, используйте онлайн-тренажеры. Подберите тот вариант закрепления навыка, который будет вам удобен. 
    Все, что вам поможет - это практика, и только она.
    
    Онлайн-тренажеры созданы, чтобы ускорить освоение вашего навыка и сделать его более интересным. У всех сервисов есть свои недостатки. Я предлагаю попробовать каждый и выбрать наиболее подходящий. Обратите внимание, насколько вам комфортен тот или иной интерфейс, достаточно ли вам функций и так далее.
    Выбирайте, тренируйтесь и закрепляйте.
    
- ********************Заключение********************
    
    Подведем итого того, о чем сегодня говорили:
    
    1. Мы рассмотрели метод слепой печати
    2. Я убеждала вас, что метод слепой печати принесет вам реальную пользу
    3. Поговорили о том, что собой представляет метод слепой печати
    4. Узнали, как научиться этому методу и закрепить его.

### Модуль: Центр карьеры GeekBrans: как мы помогаем студентам в поиске работы. 09.08.2023

- ****************************************Урок 1. Вводный урок. 09.08.2023****************************************
    
    Важное объявление!
    
    Всем привет! Вы на вводном курсе Центра карьеры.
    
    Мы записали семь коротких видеокурсов, где объясняем, как мы помогаем студентам в поиске работы. 
    
    Этот урок - первый. Здесь руководитель Центра карьеры ГБ Глеб Дрягун расскажет, почему этот курс важно посмотреть каждому студенту.
    
- ****************Урок 2. Что такое гарантия трудоустройства. 09.08.2023****************
    - **************************************Важное объявление!************************************** В этом видео вы узнаете, что такое гарантия трудоустройства. Здесь мы рассказали о том, как распределяются роли в этом процессе:
        - что необходимо сделать студенту, чтобы получить гарантию
        - что со своей стороны делаем мы
    - **********************************************************************************Помощь с поиском работы от Центра карьеры**********************************************************************************
        
        Рассказываем, как получить помощь от [Центра карьеры](https://gb.ru/career/employment) и как мы помогаем студентам искать работу.
        
    - ****************************************Регистрация в карьеру****************************************
        
        Чтобы получить доступ к программе “Карьера”, нужно пройти курс “Регистрация в карьеру”. Вы найдете его в подготовке к основному обучению.
        
        Курс состоит из двух уроков:
        
        1. ************************************************Регистрация в карьеру -************************************************ пройдите его в начале обучения. Вопросы, на которые нужно ответить, помогут вам сформировать свои ожидания от будущего места работы, а нам - понять ваши пожелания и выбрать актуальный для вас план профессионального развития.
        2. ********************************************************************Запись на программу “Карьера” -******************************************************************** пройдите его после того, как выберете специализацию по вашей основной программе обучения.
        
        Когда заполните анкету, вам на почту придет письмо с подтверждением, а в личном кабинете, под основным обучением, появится раздел “Карьера”. Там найдете курс “Подготовка к поиску работы”. Мы сразу запишем вас в ближайший свободный поток.
        
        Внимательно изучайте полезные материалы, выполняйте домашние задания и следуйте рекомендациям карьерных консультантов. Поиск работы - важный процесс. Вместе мы сможем сделать его интересным и результативным.
        
    - ******************************************************************Курс “Подготовка к поиску работы”******************************************************************
        
        Курс “Подготовка к поиску работы” состоит из четырех онлайн-вебинаров с карьерными консультантами. Они расскажут, как сделать поиск работы эффективным и результативным.
        
        После каждого урока есть обязательное домашнее задание, которое поможет закрепить материал и освоить инструменты поиска работы.
        
        На протяжении всего курса вы будете вести рабочую тетрадь, отмечая в ней ваши Цели, Навыки и прогресс поиска работы. На ее основе карьерные консультанты дадут рекомендации.
        
        - ************************************************Урок 1. Стратегия поиска************************************************
            
            Это первый урок, который поможет начать поиск работы. На вебинаре вы узнаете:
            
            - Что такое стратегия поиска работы, как ее построить
            - Как поставить карьерную Цель
            - Как анализировать рынок
            - Какие бывают этапы поиска работы
            - Как работать со сложностями в процессе поиска работы
            
            После занятия вам предстоит определить для себя карьерную Цель и проанализировать рынок. Карьерный консультант даст свои рекомендации и при необходимости задаст вопросы, которые помогут вам определиться с Целью и двигаться дальше.
            
        - ****************************************Урок 2. Карта поиска****************************************
            
            На этом вебинаре мы продолжим работать со стратегией поиска работы. Вы узнаете, как составить карту поиска, а также освоите новые инструменты:
            
            - Анализ своих навыков
            - Составление карьерных траекторий
            - Каналы поиска вакансий, стажировок и проектов для портфолио
            
            Вам предстоит проанализировать весь свой опыт, определить свои сильные стороны и рассмотреть разные пути достижения карьерной Цели через карту поиска.
            
        - ****************************************Урок 3. Подготовка резюме****************************************
            
            Вебинар, посвященный подготовке резюме и сопроводительного письма. В прямом эфире мы вместе составим резюме и обсудим:
            
            - Как отразить в резюме учебный опыт в ГБ
            - Как описать релевантный и нерелевантный опыт работы
            - Что писать в разделе “О себе”
            - Что писать в сопроводительном письме
            
            Во время этого урока вам предстоит составить резюме с нуля или отредактировать уже существующее. Его проверит карьерный консультант и даст рекомендации. Аналогично предстоит проработать и сопроводительное письмо.
            
        - ********************************************************************Урок 4. Подготовка к собеседованию********************************************************************
            
            На этом вебинаре вы сможете потренироваться отвечать на вопросы рекрутера в формате открытого собеседования, а также узнаете:
            
            - Какие вопросы могут ждать вас на интервью и как к ним подготовиться
            - Как и что рассказать о себе
            - Какие вопросы задать рекрутеру
            - Как обсуждать условия работы
            
            Вам предстоит написать текст самопрезентации для интервью и ответы на самые распространенные вопросы от рекрутера. Со своей стороны мы дадим комментарии по выполненному заданию.
            
        - ******************************************************************************************Что вы получите при успешном завершении курса******************************************************************************************
            - Построите свою стратегию поиска работы: поставите карьерную Цель, проанализируете рынок и свой опыт.
            - Составите карту поиска и разработаете несколько вариантов достижения карьерной Цели.
            - Составите резюме и получите по нему обратную связь от карьерного консультанта.
            - Научитесь отвечать на вопросы рекрутера и рассказывать о себе на собеседовании.
    - ****************************Студенческое сообщество “Карьера ГБ”****************************
        
        После первого урока вы сможете вступить в сообщество “Карьера ГБ”.
        
        Его участники - студенты и выпускники ГБ со всех направлений, которые обратились в Центр карьеры за помощью в поиске работы. Кто-то из них уже нашел работу в новой сфере, кому-то это только предстоит. В чате можно обмениваться опытом прохождения собеседований, откликов на вакансии, общения с работодателями и трудоустройства.
        
        По пятницам карьерные консультанты отвечают на вопросы студентов. Мы всегда остаемся на связи и готовы помогать после завершения курса.
        
    - ****************************************************************Полезные материалы для студентов****************************************************************
        - ********************************Видеокурс “Как найти работу: путь от резюме до первого офера”********************************
            
            Внутри [курса](https://gb.ru/chapters/18653) видео, в которых карьерные консультанты рассказывают:
            
            - Как выглядит поиск работы со стороны компании
            - Как составить резюме и сопроводительное письмо
            - Как подготовиться к первому разговору с работодателем
            - Где искать вакансии, какую компанию стоит выбрать
            - Как работать с эмоциональными сложностями в процессе поиска работы.
        - ************Библиотека рекомендаций по поиску работы************
            
            В разделе [Помощь](https://gb.ru/faq) вы найдете Базу знаний от Центра карьеры, а в ней профильные рекомендации и дополнительные материалы по подготовке и самому процессу поиска работы.
            
        - ********************************************************Канал “Как найти работу [gb.ru](http://gb.ru)**
            
            [Канал](https://t.me/career_gb) с советами и рекомендациями на тему карьеры и поиска работы, где карьерные консультанты периодически проводят прямые эфиры: отвечают на вопросы, делятся своим опытом и кейсами из личной практики.
            
        - ******************************************Вакансии от партнеров******************************************
            
            Вакансии, проекты и стажировки размещаем на нескольких ресурсах.
            
            ******************Портал ГБ******************
            
            В разделе [“Поиск работы”](https://gb.ru/career) вы можете найти вакансии, стажировки и проекты от компаний, которые готовы рассматривать студентов и выпускников ГБ.
            
            Мы модерируем этот раздел и убираем неактуальные вакансии. Ваш отклик попадет напрямую к работодателю.
            
            ****************************************************************************************Канал с вакансиями “Работа для студентов ГБ****************************************************************************************
            
            [Здесь](https://t.me/vacancies_gb) мы публикуем предложения от работодателей, которые обратились напрямую в Центр карьеры.
            
            Если откликнетесь на конкретную позицию через нас, мы порекомендуем вас. Мы также можем помочь отредактировать резюме под конкретную вакансию, чтобы повысить шансы на успех.
            
- **************Урок 3. Как Центр карьеры помогает с трудоустройством. 09.08.2023**************
    
    Из этого видео вы узнаете, что команда Центра карьеры делает, чтобы помочь студентам выстроить процесс поиска работы и прийти к желаемому результату - трудоустройству в новой профессиональной области.
    
    - ******************************************************************************************Как Центр карьеры помогает с трудоустройством******************************************************************************************
        
        Чтобы студенты смогли найти новую работы, мы разработали программу “Карьера”, на которой:
        
        - Помогаем составить стратегию и карту поиска, отредактировать резюме, оформить сопроводительные письма, подготовиться к собеседованию
        - Учим студентов расширять воронку поиска и самостоятельно искать вакансии в разных источниках, общаться с рекрутерами и нанимающими менеджерами
        - Постоянно расширяем список компаний-партнеров, чтобы рекомендовать наших студентов напрямую
    - ********************Что входит в программу “Карьера”. Основной блок помощи в трудоустройстве********************
        - ****************Онлайн-курс “Подготовка к поиску работы”****************
        4 практических вебинара, которые посвящены подготовке к поиску работы. На каждом из этапов карьерный консультант даст обратную связь и рекомендации.
        - ******************************************************************Поддержка карьерных консультантов******************************************************************
        Карьерные консультанты остаются на связи после подготовки к поиску работы и готовы ответить на ваши вопросы или помочь скорректировать поиск, если у вас будут сложности.
        - **********Партнерские вакансии в телеграм-канале “Работа для студентов ГБ”**********
        Здесь мы публикуем предложения от работодателей, которые обратились напрямую в Центр карьеры и готовы рассматривать студентов и выпускников ГБ. Если появляется конкретная позиция, на которую вы откликаетесь через нас, мы можем дать дополнительные рекомендации по резюме под конкретный запрос, чтобы ваши шансы на положительный ответ увеличились.
        И если у вас есть вакансия или проект, который вы хотите предложить студентам, можно опубликовать его в канале.
    - **************************************************************************************Как получить доступ к программе “Карьера”**************************************************************************************
        
        Для получения помощи в трудоустройстве и доступа к программе “Карьера” необходимо пройти курс “Регистрация в карьеру”. Он находится в подготовке к обучению и состоит из двух уроков:
        
        - ************Урок 1
        Первый шаг. Регистрация в карьеру************
        Его необходимо пройти в начале обучения.
        Вопросы, которые ждут вас при регистрации, помогут вам сформировать свои ожидания от будущего места работы. А нам - понять ваши пожелания, чтобы лучше сориентироваться по актуальным планам профессионального развития и помочь достичь Цели
        - ************Урок 2
        Второй шаг. Запись на программу “Карьера”************
        Его необходимо пройти после того, как вы завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения. Для программ, которые длятся менее 9 месяцев - после завершения обучения.
        После записи на программу вам на почту придет письмо с подтверждением, а в вашем личном кабинете под основным обучением появится раздел “Карьера”. Там вы сможете найти курс “Подготовка к поиску работы”. Вы будете записаны в ближайший свободный поток.
- ************Урок 4. Что вас ждет на курсе “Подготовка к поиску работы” 09.08.2023************
    
    Этот урок проводит Злата Арефьева - старший карьерный консультант ГБ.
    Вы узнаете, что внутри курса “Подготовка к поиску работы”: программа, практические задания. индивидуальная обратная связь от карьерных консультантов.
    В этом уроке есть презентация. В ней основная информация в текстовом формате.
    
    **********************************************************************Курс “Подготовка к поиску работы”**********************************************************************
    
    Курс состоит из четырех онлайн-вебинаров с карьерным консультантом. На каждом вебинаре есть теоретическая и практическая части. В них карьерные консультанты рассказывают и показывают на конкретных примерах, как сделать поиск работы эффективным и результативным.
    
    После каждого урока у студентов есть обязательное домашнее задание на проработку материала и освоение инструментов.
    
    На протяжении всего курса студент ведет рабочую тетрадь, которую может посмотреть карьерный консультант и дать полезные рекомендации.
    
    ****************************************************************************************Программа курса “Подготовка к поиску работы”****************************************************************************************
    
    - ****************************Урок 1. Стратегия поиска****************************
    На этом уроке вы узнаете, что такое стратегия поиска работы и как она строится, инструменты анализа рынка, как поставить карьерную Цель и этапы поиска работы.
    - ******************************************Урок 2. Карта поиска******************************************
    На этом уроке мы продолжим работать со стратегией поиска работы. Вы узнаете, как составить карту поиска, проанализируете свои навыки, составите разные карьерные траектории и узнаете, какие бывают каналы поиска вакансий, стажировок и проектов для портфолио.
    - ****************************************************Урок 3. Подготовка резюме****************************************************
    Этот урок посвящен подготовке резюме и сопроводительного письма. Вместе с вами мы будем составлять резюме в прямом эфире и обсудим, как описать в резюме учебный и прошлый опыт работы, что писать в разделе “О себе”, а также для чего нужно сопроводительное письмо и как его составить.
    - **********************************************************Урок 4. Подготовка к собеседованию**********************************************************
    На этом уроке вы сможете потренироваться в ответах на вопросы рекрутера в формате открытого собеседования, а также узнаете, какие вопросы могут ждать вас на интервью и как к ним подготовиться, как и что рассказать о себе, своих достижениях и проектах и какие вопросы стоит задать рекрутеру.
- ********Урок 5. Полезные материалы от Центра карьеры. 09.08.2023********
    
    ****************************************Полезные материалы от Центра карьеры****************************************
    
    Помимо практического курса “Подготовка к поиску работы” мы делимся полезными материалами для студентов в разных форматах.
    
    Внимательно изучайте полезные материалы, выполняйте домашние задания практического блока и следуйте рекомендациям карьерных консультантов.
    
    Поиск работы - важный процесс. Вместе мы сможем сделать его эффективным и результативным.
    
    ************************************************************************************************************************Что входит в программу “Карьера”. Дополнительные материалы************************************************************************************************************************
    
    - ******************************************************************************Вебинарный курс “Как найти работу. Путь от резюме до первого офера”******************************************************************************
    8 теоретических вебинаров обо всем, что вам необходимо знать о поиске работы: как выглядит поиск работы со стороны компании, как составить резюме и сопроводительное письмо, как подготовиться к первому разговору с работодателем, где искать вакансии, какую компанию стоит выбрать и как работать с эмоциональными сложностями в процессе поиска работы
    - ********************************************************************************[Библиотека рекомендаций по поиску работы](https://www.notion.so/f759f9d0db884b97ba7b3555309c4976?pvs=21)**
    Статьи и дополнительные материалы для студентов на самые важные темы по поиску работы.
    - ************************************************************[Канал “Как найти работу ГБ”](https://t.me/career_gb)**
    Канал с советами и рекомендациями на тему карьеры и поиска работы, где карьерные консультанты проводят прямые эфиры, отвечают на вопросы и делятся своим опытом.
    - ****************[Партнерские вакансии на портале ГБ](https://gb.ru/career)**
    Вакансии, стажировки и проекты от компаний, которые готовы рассматривать студентов и выпускников ГБ. На платформе отклики идут напрямую к работодателю, и они самостоятельно их отсматривают.
- ************Урок 6. Что необходимо делать студенту для успешного трудоустройства. 09.08.2023************
    
    Для успешного трудоустройства студенту необходимо работать совместно с Центром карьеры.
    
    Чтобы поиск работы принес результаты, вам необходимо пройти практический курс “Подготовка к поиску работы” и сдать все домашние задания в срок. Так, вы сможете получить обратную связь по вашей стратегии и карте поиска в целом, а также по резюме, сопроводительному письму и ответам на вопросы с собеседований. Это поможет скорректировать поиск таким образом, чтобы вы смогли добиться своей карьерной цели и найти работу по новой специальности.
    
    **************************************************************************************************************Следуйте основным рекомендациям карьерных консультантов**************************************************************************************************************
    
    - Отредактируйте резюме в соответствии с обратной связью от карьерного консультанта
    - Оформите портфолио из проектов и заданий, которые могут продемонстрировать ваши навыки
    - Пишите понятные и информативные сопроводительные письма к откликам
    - Откликайтесь на вакансии партнеров Центра карьеры
    - Активно ищите вакансии в разных источниках и делайте не менее 10 откликов каждый день
    - Соблюдайте этические нормы при взаимодействии с потенциальными работодателями и карьерными консультантами
    - Готовьтесь к техническим собеседованиям и к ответам на вопросы HR-специалистов
    - Активно участвуйте в собеседованиях
- ************Урок 7. Ответы на часто задаваемые вопросы к Центру карьеры 09.08.2023************
    
    Это заключительный урок курса. В этом видео Дарья Тельнова, операционный менеджер Центра карьеры ГБ, отвечает на вопросы, которые нам задают чаще всего.
    
    - **************************************************************************************Если я не выполнил условия гарантии, Центр карьеры может мне помочь с трудоустройством?**************************************************************************************
    Если студент длительных программ обучения не попадает под условия гарантии трудоустройства, Центр карьеры все равно может помочь с поиском работы в течение всего периода обучения. Для этого необходимо пройти Первый шаг - Регистрацию в карьеру и второй шаг - Запись на программу “Карьера”.
    - ********************Может ли Центр карьеры помочь мне устроиться в конкретную компанию?********************
    Мы постараемся сделать все, чтобы вы попали в компанию мечты, но обещать, что вы точно попадете в эту компанию после обучения, мы не можем по объективным причинам. Мы не создаем искусственно рабочие места. На момент вашего выпуска в данной конкретной компании может не быть открытой вакансии по вашему направлению. В любом случае, мы поможем с дальнейшим поиском, а также вы можете откликаться на вакансии наших партнеров.
    - ************************************************************************************************************************Можно ли сделать перерыв между обучением и трудоустройством?************************************************************************************************************************
    Мы рекомендуем не затягивать с поиском работы после завершения обучения, т.к. технические знания быстро забываются без постоянной практики и шансы успешно пройти собеседование будут ниже, а также рынок постоянно меняется, и если делать большой перерыв, найти работу будет сложнее.
    - **********************************************************************Какой процент студентов находит работу после обучения?**********************************************************************
    Более 75% студентов, которые успешно проходят обучение, находят работу по новой специальности.
    - **************************************************************************************************************************************************************************************************************************************Если после выбора специализации я еще не готов искать работу, до какого момента я могу к вам обратиться за помощью?**************************************************************************************************************************************************************************************************************************************
    По условиям гарантийного сопровождения вы можете обратиться в Центр карьеры не позднее 3-х месяцев с конца обучения. Например, если вы закончили обучение 1 января, дедлайн, когда вы можете обратиться в Центр карьеры - 1 апреля.
    - ********************************************************************************************************************Если я начал учиться по программе “Карьера”, но понял, что еще не готов к поиску работы, что делать?********************************************************************************************************************
    В этом случае вы можете перезаписаться на курс “Подготовка к поиску работы” тогда, когда это будет для вас актуально. Потоки стартуют каждый месяц.
    Для этого необходимо написать своему куратору или в техническую поддержку. При этом доступ к остальным материалам программы “Карьера” у вас сохранится.

### Модуль: Итоговые документы об обучении - старт учебы. 08.08.2023

- **Урок 1. Введение в курс**
    
    Привет!
    
    Это специальный курс, цель которого - рассказать об итоговых документах об обучении в ГикБрэйнс и условиях, необходимых для их получения. В первом уроке мы расскажем, почему важно посмотреть курс на старте, и что вам нужно сделать в ближайшее время.
    
    **Как устроен курс?**
    
    В начале вы узнаете о видах документов об обучении и условиях их получения, а далее подробно разберем, какие документы и в каком формате вам нужно предоставить для их подготовки.
    
    **Обязательно ли его смотреть?**
    
    Да! Во-первых, чтобы понимать, на какие документы вы можете претендовать об окончании обучения.
    
    Во-вторых, загрузить все необходимые документы, которые потребуются для подготовки документов на вас как студента (приказ о зачислении, итоговый диплом и др.)
    
    **Куда загружать документы?**
    
    **https://gb.ru/b/s29**
    
    Для корректного заполнения используйте информацию, полученную в видео и материалах курса.
    
    **Если у вас возникнут вопросы, напишите в поддержку студентов -**
    
    **https://t.me/geekbrains_studybot**
    
- **Урок 2. Электронные сертификаты и свидетельства**
    
    **Важное объявление!**
    
    В этом уроке мы расскажем о двух видах документов об обучении - свидетельство и электронные сертификаты за курсы.
    
    **Электронный сертификат**
    
    После прохождения курса выдается электронный сертификат
    
    **Условия получения сертификата:**
    
    1. Просмотреть более 75% уроков, если курс не содержит практических заданий
    2. Успешно сдать промежуточную или итоговую аттестации, если они предусмотрены в курсе
    3. Сдать более 75% практических заданий, если в курсе нет промежуточной или итоговой аттестаций
    4. Успешно пройти финальное тестирование, если оно предусмотрено
    
    **Как его получить на портале?**
    
    1. Зайдите на платформу Гикбрэйнс
    2. Перейдите в раздел “Мое обучение”
    3. Выберите курс, который вы прошли
    4. Нажмите на кнопку “Получить сертификат”
    5. Поставьте оценку и отзыв курсу
    
    Если условия для получения не выполнены, вы не сможете получить сертификат, но у вас будет возможность оценить курс - для этого нажмите на кнопку “Оставить отзыв”.
    
    **Важно:** имя и фамилия в сертификатах будут такими же, как и на портале. Данные всегда можно отредактировать в профиле.
    
    **Свидетельство об обучении**
    
    **Свидетельство -** это документ, который подтверждает, что вы прослушали программу дополнительного образования, освоили новые знания и умения. Его можно получить, если вы приобрели обучение после 26.01.2017 и успешно прошли учебную программу.
    
    **Особенности свидетельства:**
    
    - Формируется только на русском языке и в электронном виде
    - Указывается названием программы и список пройденных курсов
    - Нет приложения с баллами и количеством академических часов
    
    **Что нужно для оформления?**
    
    - ФИО
    - Актуальный адрес электронной почты
- **Урок 3. Диплом о профессиональной переподготовке**
    
    **Важное объявление!**
    
    На уроке мы познакомимся с характеристиками диплома о профессиональной переподготовке и условиями, необходимыми для его получения.
    
    **Диплом о профессиональной переподготовке**
    
    Диплом подтверждает, что вы успешно прошли программу профессиональной переподготовки и сдали итоговую аттестацию. Выдается, если вы приобрели обучение после 03.12.2019
    
    **Условия, необходимые для получения диплома:**
    
    1. **Диплом о высшем или среднем профессиональном образовании**
    2. **Прохождение всех курсов программы обучения. Они будут считаться пройденными, если вы сдали по ним промежуточные аттестации. Ей может быть одно из заданий курса или тест.**
    3. **Успешная сдача итоговой аттестации. Она может состоять из одной или нескольких активностей:**
        1. тестирование или контрольная по темам
        2. защита индивидуального проекта, диплома, портфолио
        3. защита командного проекта
        4. собеседование с преподавателем
    
    **Особенности диплома:**
    
    - выдается только на русском языке
    - есть твердая обложка или фирменная папка
    - есть титульный лист с названием программы и присвоенной квалификацией
    - есть приложение со списком курсов и зачетами
    - есть количество академических часов
    - информация о документе передается в “Федеральный реестр документов об образовании” (ФИС ФРДО)
- **Урок 4. Пакет документов: паспорт и СНИЛС**
    
    **Важное объявление!**
    
    В этом уроке вы узнаете, почему для получения документа о дополнительном образовании нужны паспорт и СНИЛС, и в каком формате они необходимы.
    
    **Пакет документов: паспорт и СНИЛС**
    
    **Паспорт**
    
    Паспорт нужен, чтобы мы проверили ФИО и правильно указали его в документе. А еще, чтобы подтвердить - диплом о высшем или среднем профессиональном образовании принадлежит именно вам.
    
    Что нужно прислать?
    
    Скан или фотографию паспорта - главный разворот и страницу с регистрацией.
    
    Если у вас нет российского паспорта и информация в вашем документе не дублируется на русском языке, понадобится нотариально заверенный перевод.
    
    **Страховое свидетельство обязательного пенсионного страхования (СНИЛС)**
    
    СНИЛС нужен, чтобы подать данные в “Федеральный реестр сведений о документах об образовании”.
    
    **Что нужно прислать?**
    
    Фотографию или скан СНИЛС - просто номер или скриншот из Госуслуг не подойдет. Фамилия в документе должна соответствовать фамилии в паспорте.
    
    Если СНИЛС нет, вместо него подойдет АДИ-РЕГ. Получить его можно в формате ПДФ в личном кабинете на сайте Пенсионного Фонда России. Иностранным студентам без СНИЛС можно отправить фото или скан ИД-карты, если она есть.
    
- **Урок 5. Пакет документов: диплом о высшем или среднем профессиональном образовании**
    
    **Важное объявление!**
    
    В этом видео мы расскажем, почему для получения документа о дополнительном образовании нужен диплом о высшем или среднем профессиональном образовании, в каком формате он необходим, а также особенности, связанные с иностранными документами.
    
    **Пакет документов: диплом о высшем или среднем профессиональном образовании**
    
    Документы о дополнительном образовании можно получить, если у вас уже есть диплом о высшем или среднем профессиональном образовании.
    
    **Что нужно прислать?**
    
    Скан или фотографию разворота титульного листа и всех приложений к диплому.
    
    В дипломах старого образца часто нет приложения - в этом случае важно, чтобы была читабельная печать. Иногда блок приложений может называться “Выписка”.
    
    **Что делать с дипломом иностранного государства?**
    
    Если вы получали образование не в России, может потребоваться процедура признания - оценка диплома на соответствие одному из уровней российского образования: среднему профессиональному или высшему.
    
    **Процедура признания не нужна, если:**
    
    - между странами есть соглашение на основе [международного договора](https://nic.gov.ru/ru/docs/foreign/confirmation).
    - образовательная организация есть в [перечне иностранных научных и образовательных организаций](https://nic.gov.ru/ru/docs/russian/government/557), которые выдают документы об ученых степенях и ученых званиях, признаваемых в РФ.
    
    Чтобы понять, нужно признание документа или нет, можно провести [экспресс-анализ](https://nic.gov.ru/ru/help/analyze).
    
    Любой диплом, который признается в России, должен быть легализован и переведен на русский язык. Процедура поможет подтвердить его подлинность и позволит использовать его для трудоустройства или обучения.
    
    Проверьте, нужна ли вам [легализация документов](https://nic.gov.ru/ru/proc/lega) - для дипломов разных стран действуют разные условия.
    
    Если диплом не на русском языке, нужно отправить фото или сканы нотариально заверенного перевода. Перевод диплома не равен процедуре признания.
    
- **Урок 6. Пакет документов: контактные данные**
    
    **Важное объявление!**
    
    В этом уроке вы узнаете, какие контактные данные необходимы для получения документа об обучении в ГикБрэйнс
    
    **Контактные данные**
    
    Если ФИО в паспорте отличаются от данных в дипломе, нужна копия документа о смене ФИО: например, свидетельство о заключении брака или справка о смене имени.
    
    Из документа должно быть понятно: фамилия из диплома изменилась на фамилию из паспорта. Иногда фамилия меняется несколько раз - в этом случае понадобится несколько документов.
    
    Если такого свидетельства у вас нет, его нужно запросить в отделе ЗАГС.
    
    **Что еще нужно для отправки документов?**
    
    - корректные адрес и индекс
    - контактный номер мобильного телефона
    
    После отправки вы получите трек-номер для отслеживания
    
    Если вместо вас документ будет получать кто-то другой, потребуется доверенность. Ее можно составить в свободной форме и не заверять у нотариуса.
    
- **Урок 7. FAQ: частые вопросы**
    
    **Бонус-урок!**
    
    Отвечаем на часто задаваемые вопросы, связанные с форматом, сроками и доставкой итоговых документов.
    
    1. **Вы оформляете документы на английском?**
    Нет, документы выдаются только на русском языке
    2. **Котируются ли дипломы в других странах?**
    За рубежом тоже есть особенности признания иностранных образовательных документов. Точнее узнать о них можно на официальном сайте Министерства образования нужной страны.
    3. **У документов будет электронная версия?**
    В электронном виде выдаем свидетельство об обучении. Сканы дипломов и удостоверений доступны после того, как их подпишут.
    4. **Вы выдаете удостоверения государственного образца?**
    Нет, наши удостоверения установленного образца.
    Дипломы государственного образца выдают образовательные организации, которые прошли аккредитацию. Обычно - это высшие учебные заведения, присваивающие степени и квалификации.
    Учебные заведения дополнительного профессионального образования могут не аккредитовываться. Поэтому наши дипломы установленного образца. Но такие документы выдаются на основе соответствующей образовательной лицензии. Она подтверждает, что программы соответствуют образовательным стандартам.
    5. **Я еще не получил диплом о высшем или среднем профессиональном образовании. Могу получить документ диплом у вас позднее?**
    Да, когда вы получите диплом о высшем или среднем профессиональном образовании, мы выдадим документ о дополнительном образовании - просто обратитесь в поддержку студентов. До тех пор мы можем подготовить свидетельство об обучении.
    6. **Как долго готовятся документы?**
    Подготовка свидетельства занимает до 10 рабочих дней. Диплом будет отправлен в течение 30 дней после проведения итоговой аттестации.
    7. **Можно ли доставить документы в другую страну?**
    Да, документы об образовании отправляем по России и в другие страны.
    8. **За доставку нужно платить?**
    Нет, она бесплатная.
- **Урок 8. Хочу получить диплом**
    
    **Чек-лист для получения диплома о профессиональной переподготовке**
    
    **Как получить?**
    
    - Предъявить диплом о высшем или среднем профессиональном образовании
    - Пройти все курсы программы и сдать промежуточные аттестации
    - Успешно сдать итоговую аттестацию
    
    **Какие документы понадобятся для оформления?**
    
    - Паспорт: главный разворот и страница с регистрацией
    - Диплом о высшем или среднем профессиональном образовании: разворот титульного листа и всех приложений к нему
    - СНИЛС
    - Свидетельство о заключении брака или о смене имени, если в паспорте и дипломе разные ФИО
    - Почтовый адрес с индексом
    - Контактный номер телефона

### Модуль: Регистрация в карьеру. 06.08.2023

- **Урок 1. Первый шаг. Регистрация в карьеру**
    
    **Важное объявление!**
    
    Привет!
    
    Регистрация в карьеру - это обязательный первый шаг для каждого студента, который хочет найти работу вместе с нами.
    
    Чтобы пройти регистрацию, переходите по **[ссылке](https://gb.ru/b/s30)**.
    
    Мы рекомендуем проходить регистрацию на старте обучения. Но вы можете вернуться сюда в любое время.
    
    Регистрация поможет вам сформировать ожидания от будущего места работы. Нам - узнать вашу карьерную Цель. Так мы сможем вместе двигаться к достижению вашей Цели.
    
    Важно, что после регистрации вам не нужно ждать обратной связи. Мы получим ваши ответы и проанализируем их.
    
    Вы можете получить помощь в поиске работы от Центра карьеры после того, как завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения.
    
    Для программ, которые длятся менее 9 месяцев - после завершения обучения.
    
    Для доступа к программе “Карьера”, переходите ко второму шагу в следующем уроке.
    
    Если вы пока не готовы заняться подготовкой к поиску работы - проходите первый шаг, а ко второму вернитесь, когда для вас помощь в поиске работы от Центра карьеры будет актуальна.
    
- **Урок 2. Второй шаг. Запись на программу Карьера**
    
    **Важное объявление!**
    
    Привет!
    
    Вы можете получить доступ к программе “Карьера” после того, как завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения.
    
    Для программ, которые длятся менее 9 месяцев - после завершения обучения.
    
    Чтобы получить доступ к программе “Карьера”, пройдите [анкету](https://gb.ru/b/s32) и ответьте всего на один вопрос - нужна ли вам помощь в поиске работы от Центра карьеры.
    
    Если вам нужна помощь и вы готовы к поиску работы, мы откроем доступ к программе и запишем вас на ближайший свободный поток практического курса “Подготовка к поиску работы”.
    
    Если вам нужна помощь в поиске работы, но не сейчас, вернитесь к этому шагу позднее, когда это будет актуально.
    
    Если вы уверены, что вам не нужна помощь, мы поделимся полезными материалами для поиска работы. Вы всегда можете вернуться к этому шагу, если ваше решение изменится. Обратиться в Центр карьеры за помощью можно не позднее трех месяцев с конца обучения.
    
    После записи на программу у вас на почте будет письмо с подтверждением, а в вашем личном кабинете под основным обучением появится раздел “Карьера”. Там вы сможете найти курс “Подготовка к поиску работы”. Вы будете записаны в ближайший свободный поток.
    

### Модуль: Полезные советы для старта обучения 04.08 - 05.08.2023

- **Студенческая инструкция. Как учиться в ГикБрэйнс**
    - **Введение**
        
        Поздравляем, вы стали студентом ГикБрэйнс! Решение освоить новую профессию ответственное и непростое. Мы уважаем его и поможем дойти до Цели.
        
        В этой инструкции мы собрали базовую информацию про учебный процесс и другие возможности, которые перед вами открыты.
        
        Если у вас останутся вопросы или вы захотите поделиться обратной связью, напишите куратору в [телеграм-бот для студентов](https://t.me/geekbrains_studybot).
        
        А теперь давайте начинать.
        
    - **Учебный процесс**
        
        **Мы используем разные форматы обучения.** Вас ждут лекции и практикумы, групповые занятия и индивидуальные консультации, вебинары и записанные уроки, интервью с предпринимателями и учеными. Программы регулярно обновляются - мы следим за новостями в индустрии, чтобы вы получали актуальные знания.
        
        **Обучение длится от 2,5 до 60 месяцев -** все зависит от выбранной программы. В процессе формируется ваша образовательная траектория: после основного блока вы сами выбираете специализацию и инструменты, которые пригодятся в работе.
        
        **Залог успешного обучения - ваша внутренняя Дисциплина.** Следите за расписанием и посещайте занятия вовремя. Выполняйте практические задания, чтобы закреплять теорию. Участвуйте в групповых проектах, чтобы учиться работать в команде.
        
        **Итог обучения - документ об образовании и трудоустройство.** Чтобы их получить, нужно приложить усилия: посещать занятия, вовремя сдавать домашние задания, промежуточные и итоговые аттестации.
        
        **Форматы уроков**
        
        Сейчас в ГикБрэйнс около 40 форматов занятий. Самые популярные: лекции, семинары, практикумы и консультации. Вы можете встретить не все - форматы зависят от программы курса.
        
        **Лекции -** теоретический блок. Преподаватель рассказывает теорию и показывает примеры. Занятия проходят по расписанию, в формате вебинара или в записи.
        
        **Семинары -** практический блок. Преподаватель делает упор на прикладные знания, помогает закрепить теорию практикой, отвечает на вопросы студентов. Занятия проходят по расписанию в формате вебинара, но их можно пересмотреть в записи. Советуем заниматься очно, чтобы не копить вопросы.
        
        **Практикумы -** занятия для ответов на вопросы. Обычно их проводят после сложных тем. Например, на Разработчике практикумы есть после курсов Введение в контроль версий и Знакомство с языками программирования. Занятия идут по расписанию в формате вебинара.
        
        **Консультации -** индивидуальные занятия преподавателя со студентом. Студент может попросить о консультации, если у него набралось много вопросов, он хочет подтянуть или углубить знания в какой-то теме. Это дополнительная возможность за рамками основной программы. Она оплачивается отдельно.
        
        **Форматы практических заданий**
        
        Практические задания помогают закрепить знания, учат искать информацию самостоятельно и решать задачи, которые будут встречаться в работе.
        
        В ГикБрэйнс около 60 форматов домашних заданий: от написания кода и ревью до эссе и исследований. В рамках обучения вы можете встретить не все, но точно не заскучаете с однотипными ДЗ.
        
        Практические задания группируются в три основных типа:
        
        **Регулярные домашние задания -** практика после урока. Помогает поэтапно осваивать материал курса.
        
        **Промежуточные аттестации -** тесты или проекты после крупных блоков программы. Позволяют проверить знания, понять, что стоит повторить и на чем сделать акцент в дальнейшем обучении.
        
        **Итоговые аттестации -** защита проекта перед комиссией. Главный результат обучения и основа портфолио студента.
        
        - **Правила сдачи домашних заданий**
            
            Чтобы получить положительную оценку и обратную связь от преподавателя, нужно соблюдать несколько условий.
            
            - **У домашних заданий есть дедлайны. Их можно продлить, если вы не успеваете сдать работу. *Изначально у вас есть 7 дней, чтобы сдать практическое задание. Затем появится кнопка “Продлить дедлайн” - если ее нажать, срок сдачи увеличится на 14 дней с момента первого дедлайна. Получается максимальный срок сдачи ДЗ после урока - 21 день.* Исключение - промежуточные аттестации. Их можно сдать на проверку в любое время.**
            - **Сдавайте ДЗ по теме урока. Не прикладывайте к уроку старые задания, которые не успели сдать вовремя. Их не проверят, а выполнение не зачтется в ваш прогресс.**
            - **Сдавать ДЗ лучше сразу после урока или на следующий день. Свежие знания легче закрепить практиков.**
            - **ДЗ можно пересдать, если преподаватель поставил оценку “не сдано”. Вам откроется автоматическая пересдача - в рамках дедлайна можно будет прикрепить обновленную работу.**
            - **Задавайте вопросы. Если вам что-то непонятно, спросите одногруппников или преподавателя. Правильно задавать вопросы - ценный навык, который точно пригодится в работе.**
        - **Перепрохождение курсов**
            
            В ГикБрэйнс можно перезаписаться на курс и пройти его заново, если при первом прохождении вы сдали **меньше 50% домашних заданий.**
            
            Это полезно, если у вас не было времени на учебу, а затем оно появилось. Напишите в поддержку, чтобы перепройти тот же курс в онлайне с другим потоком.
            
            Если вы прошли курс и сдали больше 50% домашних заданий, перезаписаться в другой поток нельзя. Но вы сможете пересматривать записи ваших занятий, если что-то захочется повторить.
            
        - **Сложности в обучении**
            
            Учиться сложно и это нормально. В школе и университете вы регулярно тренировали навык обучения: приходили на занятия, слушали учителя, вели конспекты, а дома закрепляли знания на практике. Обучение было привычкой.
            
            Сейчас большинство наших студентов - люди, которые решили сменить профессию. Многим заново приходится учиться учиться. Мы понимаем и учитываем это, когда разрабатываем образовательные программы. И просим вас нам доверять.
            
            - Если у задания есть дедлайн, выполняйте его вовремя - вы получите обратную связь, увидите свои ошибки и не будете допускать их в будущем.
            - Если вы получаете дополнительный контент, найдите время и изучите его. Невозможно разобрать все нюансы на уроке. Профессиональная литература и интервью с экспертами - тоже важная часть обучения.
        - **Обучение в видеоформате**
            
            Если через несколько месяцев после старта обучения вы понимаете, что не успеваете учиться в темпе программы, можно перевести обучение в видеоформат и смотреть записи уроков в комфортное время.
            
            Вернуться к онлайн-обучению тоже можно, но раз в 3 месяца.
            
            Чтобы перейти из одного формата в другой, напишите в студенческую поддержку.
            
        - **Команда обучения**
            
            В ГикБрэйнс вы будете общаться с преподавателями, кураторами и специалистами поддержки. Здесь расскажем, кто есть кто, и к кому с какими вопросами лучше обращаться.
            
        - **Преподаватели**
            
            Преподаватели ГикБрэйнс - это специалисты-практики из разных сфер: владельцы бизнеса, руководители, менеджеры, ученые и сотрудники университетов. Они ведут лекции и семинары, отвечают на вопросы студентов, помогают с домашними заданиями и консультируют индивидуально.
            
            Вопросы по теме урока лучше задавать во время онлайн-вебинара - преподаватель ответит либо сразу, либо в конце занятия. Написать в личные сообщения тоже можно, но вам могут ответить не сразу или не ответить вообще.
            
            - Самый надежный способ получить ответ на вопрос - задать его во время онлайн-занятия.
            
            Не перебивайте преподавателя. Выключайте микрофон, чтобы посторонний шум не мешал вести занятие.
            
        - **Вам может не понравиться преподаватель**
            
            Может случиться, что преподаватель, который ведет курс, вам не понравится по каким-либо причинам: возможно, вас не устроит темп речи или манера подачи информации. Это решаемо - напишите куратору, и мы постараемся вам помочь.
            
            Но перевести студента получается не всегда, и это нормально. Например, курс ведет только один преподаватель. Или группы других преподавателей уже заполнились, а старта нового потока придется долго ждать. В этом случае выбор за вами: вы можете подождать старта новой группы или продолжить учиться у текущего преподавателя. Подумайте, что важнее для вашей образовательной Цели.
            
        - **Кураторы**
            
            Куратор поможет решить сложности с расписанием, изменить формат обучения или взять перерыв, если времени не хватает. А если времени с избытком, расскажет, как увеличить скорость обучения.
            
        - **Поддержка**
            
            Поддержка помогает студентам решать технические и организационные вопросы. Пишите им, если есть вопросы по платформе: например, если вы не понимаете, как зайти в урок или куда сдавать домашнее задание. Или если неверно отображается время или дата начала занятия.
            
        - **Почему вам может никто не отвечать?**
            
            Каждый день кураторы и служба поддержки получают сотни сообщений. Иногда этот объем кратно возрастает. В такой ситуации может показаться, что ваше обращение пропало, про вас забыли или просто решили не помогать. Это не так.
            
            - Порой нам нужно больше времени, чтобы разобраться с вопросами от студентов. Но вы обязательно получите ответ.
        - **Одногруппники**
            
            Одногруппники - ваши единомышленники и будущие коллеги. Они помогут сохранить мотивацию, поделятся полезными материалами по теме, ответят на вопросы и помогут разобраться с непонятными моментами.
            
            Общение с одногруппниками - еще один способ закрепить знания. Такой формат называется Р2Р или равный равному. Отвечая на вопросы в чате, вы помогаете другому человеку и структурируете то, что знаете сами.
            
        - **Телеграм-чат с группой**
            
            Когда начнется основное обучение, вы сможете присоединиться к учебному чату в телеграме. В нем можно обсуждать интересные и сложные моменты обученияи или просто общаться с одногруппниками.
            
        - **Правила общения**
            
            Обучение - сложный и долгий процесс. Чтобы добиться образовательной цели и завести полезные знакомства, уважительно относитесь ко всем его участникам.
            
        - **Мы приветствуем:**
            - Здоровое общение, шутки и мемы.
            - Обмен знаниями, идеями и кейсами.
            - Нетворкинг и объединение в команды.
            - Вдохновляющие истории коллег.
        - **Мы запрещаем:**
            - Ненормативную лексику
            - Рекламу в учебных чатах
            - Споры с переходом на личности
            - Некорректные высказывания, которые могут задеть преподавателя или одногруппников.
            - Распространение любых ссылок на неофициальные источники, каналы или чаты.
            
            За правилами общения в студенческих чатах следят кураторы. Они могут удалить участника чата, если он нарушает правила или на него жалуются другие участники.
            
        - **Образовательная Цель**
            
            Во время регистрации на платформе мы спрашиваем об образовательной цели. Нам важно знать, чего хочет добиться каждый студент, и чего он ждет от обучения.
            
            Не все добиваются образовательных целей. Есть разные причины.
            
        - **Цель может измениться.**
            
            Например, вы переехали в другую страну и обучение перешло на второй план, потому что важнее с нуля строить жизнь в другом месте.
            
        - **Программа может оказаться слишком сложной.**
            
            Это поправимо - нужно обратиться к куратору и вместе решить, как двигаться дальше.
            
        - **Вы можете отказаться от обучения,** потому что оно вам не нравится.
            
            Но нужно помнить, что вы потеряете потраченное время, а в будущем можете пожалеть, что не дошли до конца.
            
            Важно регулярно возвращаться к Цели, оценивать пройденный путь и двигаться дальше. Поэтому на протяжении обучения мы проводим анкетирование. И вам, и нам оно помогает понять:
            
            - Изменилась ли образовательная Цель?
            - Удалось ли ее достичь?
            - Как ее достичь в будущем?
        - **Обязательные анкеты**
            
            Чтобы у нас были актуальные данные, и мы могли помогать вам на протяжении образовательного пути, мы проводим опросы. Некоторые можно заполнить по желанию, но есть и обязательные:
            
            - **Опрос во время регистрации на платформе. Поможет определиться со стартовой целью.**
            - **Анкета для сбора документов. Нужна для оформления и получения документов об образовании. Проходится на старте, во время зачисления.**
            - **Ежемесячный опрос после старта обучения. Позволит отслеживать динамику изменений и улучшать процесс вашего обучения.**
            - **Опрос для регистрации в центре карьеры. Нужен, чтобы карьерные консультанты смогли помочь вам с поиском работы.**
            
            Образовательная Цель меняется от возраста, региона проживания, предыдущего образования, уровня компьютерной грамотности, готовности учиться самостоятельно, свободного времени, занятости на работе. Поэтому мы рекомендуем регулярно проходить наши опросы и держать в голове вашу Цель. А со своей стороны мы поможем сделать так, чтобы вы ее достигли.
            
        - **Трудоустройство**
            
            Добиться карьерных Целей и найти работу по новой специальности поможет центр карьеры ГикБрэйнс. Здесь работают менеджеры с экспертизой в HR и карьерном консультировании. Они знают, как устроены процессы найма изнутри, и помогут пройти через них успешно.
            
        - **Гарантия трудоустройства**
            
            Наша гарантия трудоустройства - это содействие, т.е. помощь в поиске работы. Совместный процесс, в котором нельзя добиться успеха без мотивации, дисциплины, ответственности и инициативы студента.
            
            Карьерный консультант даст полезные рекомендации, поможет освоить инструменты поиска работы и поделиться развивающей обратной связью. Ко всему этому нужно прислушаться и учесть при трудоустройстве.
            
        - **Программа “Карьера”**
            
            Чтобы студенты смогли найти новую работу, мы разработали программу “Карьера”, на которой:
            
            - Помогаем составить стратегию и карту поиска, отредактировать резюме, оформить сопроводительные письма, подготовиться к собеседованию.
            - Учим студентов расширять воронку поиска и самостоятельно искать вакансии в разных источниках, общаться с рекрутерами и нанимающими менеджерами.
            - Постоянно расширяем список компаний-партнеров, чтобы рекомендовать наших студентов напрямую.
            
            Подробнее о работе центра карьеры - в курсе [“Центр карьеры ГикБрэйнс: как мы помогает студентам в поиске работы”](https://gb.ru/chapters/26778).
            
        - **Чтобы начать работать с центром карьеры,** вам нужно:
            1. Пройти опрос для регистрации в карьеру
            2. Записаться на программу “Карьера”.
            
            Подробнее об этих шагах - в курсе [“Регистрация в карьеру”](https://gb.ru/chapters/22267).
            
        - **Вас могут не взять на работу**
            
            Вас могут не взять на работу после 10, 100 или даже 1000 откликов. Так бывает. Можно застропориться на этапе собеседования с HR или техническим лидом. Работодатель может решить, что вы ему не подходите просто так, без объективных причин. Найти работу сложно, а по новой специальности - еще сложнее.
            
            Чтобы ваши шансы выросли, работайте вместе с центром карьеры. Прислушивайтесь ко всем рекомендациям, которые вам дают. Если вам говорят, что нужно с нуля пересобрать портфолио, значит нужно это сделать. Доверьтесь нам, как доверились во время обучения.
            
            Поиск работы требует включенности с двух сторон. Ответственность не только на центре карьеры, но и на вас.
            
        - **Документы об образовании**
            
            В ГикБрэйнс есть несколько видов документов об образовании.
            
            **Электронный сертификат** выдается после прохождения курса. Скачать его можно с сайта в любой момент: после прохождения курса нажмите кнопку “Получить сертификат”.
            
            **Свидетельство -** физический документ. Выдается тем, кто не может претендовать на диплом о переподготовке: например, если нет диплома о высшем или среднем специальном образовании. Чтобы получить свидетельство, нужно успешно сдать все аттестации - промежуточную и итоговую.
            
            **Диплом о профессиональной переподготовке** подтверждает, что вы успешно прошли программу профессиональной переподготовки. Чтобы его получить, нужны:
            
            - Диплом о высшем или среднем профессиональном образовании
            - Прохождение всех курсов программы.
            - Успешная сдача всех аттестаций - промежуточных и итоговой.
            
            **Важно!** Успешная сдача - сдача на “удовлетворительно”, “хорошо” или “отлично”.
            
        - **Расторжение договора**
            
            Если обучение в ГикБрэйнс вам не подошло, изменилась образовательная Цель или времени перестало хватать, вы можете расторгнуть договор. Мы вернем деньги полностью или частично - зависит от времени, которое вы провели на курсе. Подробнее об этом в приложении 1 к [публичному договору](https://gbcdn.mrgcdn.ru/uploads/staticpage/433/asset/8fbb901448467da351508b7a45493be7.pdf).
            
        - **Заключение**
            
            Мы рады, что вы с нами - впереди много интересного. Чтобы взять максимум от процесса:
            
            - **Настройтесь на учебу. В следующие месяцы ваше расписание будет очень плотным. Не пропускайте вебинары и вовремя сдавайте домашние задания. Чем больше внимания уделите учебе, тем круче будет ваш результат.**
            - **Будьте общительными. Не бойтесь задавать вопросы и принимать участие в дискуссиях, помогайте одногруппникам и просите помощь, если она вам нужна. В ИТ-компаниях никто не работает в одиночку, сейчас самое время научиться быть командным игроком.**
            - **Отслеживайте свою динамику. Заполняйте анкеты, чтобы увидеть прогресс и зарядиться мотивацией.**
            - **Подготовьтесь к трудоустройству. Соберите портфолио из проектов, которые сделали в рамках обучения. Отшлифуйте резюме вместе с карьерным консультантом и подготовьтесь к собеседованию.**
            
            Удачи!!!
            
- **Урок 2. Изучите английский и откройте новые возможности в ИТ**
    
    *Интересный факт про разработку:*
    
    *НАСА до сих пор использует программы 70-х годов в своих космических кораблях. Потому что внедрение новых требует времени и денег, а*
    
    *старые уже доказали свою надежность.*
    
    **Английский для айтишники: сколько нужно для счастья?**
    
    ***Разбираемся, почему английский важен для разработки, хватит ли В1, чтобы получить работу в США, и как учить язык, когда совсем не до этого.***
    
    Вы знали, что, согласно исследованию CEMS, эмпатия и способность вести эффективный диалог онлайн стали ключевыми навыками в 2021 году? А что треть команд в период пандемии начала активно общаться с иностранными коллегами?
    
    - **80% заказов в ИТ приходится на западные страны**
        
        Благодаря международным проектам большинство разработчиков, тестировщиков и дизайнеров владеет английским языком не ниже уровня Intermediate. А к тем, кто общается с клиентами непосредственно, требования еще выше - у большинства менеджеров и бизнес-аналитиков уровень upper-intermediate. В 2021 году для успешной коммуникации важно не просто понимать собеседника, но и проявлять эмпатию, гибкость, уметь работать с мелочами и идти на компромиссы.
        
        Теперь, даже живя в Нижнем Новгороде или Тольятти, вы имеете возможность присоединиться к международному проекту и общаться со своей командой на английском. Как следствие, работодатели не исключают привлечение распределенных команд и ждут, что вы сможете понимать друг друга: согласно исследованию Работа.юа треть соискателей минимум раз получали отказ на собеседовании из-за незнания иностранного языка. А статистика Доу.юа показывает, что специалисты без знания английского зарабатывают в среднем вдвое меньше своих англоговорящих коллег.
        
    - **Я - не менеджер. Зачем мне английский?**
        1. **Английский позволяет ориентироваться в среде разработки**
        Сейчас единичные компании используют русскоязычные интерфейсы. В большинстве случае меню, справочники и даже сообщения об ошибках будут на английском. Далеко не все локализовано, а в том, что успели перевести, не всегда легко сориентироваться - форумы и гайды вероятнее всего тоже будут на английском. А если программируете, знаете: все базовые языки основываются на английских словах и конструкциях.Кстати, у многих айтишников даже интерфейсы их смартфонов, мессенджеров, соцсетей англоязычные - отличное погружение в среду.
        2. **Техническая документация в 90% случаев написана на английском**
        Даже для ПО, созданного в России или Азии, в первую очередь готовят документацию на английском языке - это язык, который понятен абсолютному большинству. И будет ошибкой полагать, что вам не придется читать документацию, или что ее легко закинуть в Гугл Переводчик. Кстати, это хорошая возможность начать погружаться в язык без необходимости с кем-то разговаривать, важно лишь хорошо понимать написанное. Да и мотивации для изучения достаточно: хочешь облегчить себе работу - читай документацию.
        3. **Обсуждения на форумах по нужной теме будут на английском**
        По достаточно популярным вопросами вы найдете ответы даже на русском языке. Но такие вопросы быстро закончатся. Как показывает практика, чтение оригинальных ответов помогает найти более полное и актуальное решение, большая часть из которых никогда не будет переведена на русский язык.
        4. **Вам будут рекомендовать англоязычную литературу**
        Профессиональная литература и научные труды ориентированы на англоязычную аудиторию. Кстати, лучшие книги по программированию в России являются переводами, и, что ожидаемо, публикуются после выхода оригинала с задержкой в несколько лет. поэтому высока вероятность, что книги, которые вам порекомендуют, еще никто не успеет перевести. Да и перевод может не учитывать всех тонкостей: многие термины переводятся неоднозначно, смысл информации искажается. Покупая книгу, адаптированную на русский язык, вы всецело доверяете профессионализму исполнителей, которые могут не иметь технического образования.
        5. **На конференциях с вами заговорят по-английски**
        В профессиональное комьюнити входят специалисты разных национальностей, которые находят общий язык благодаря английскому. Он позволяет за счет одного труда, темы или лекции дотянуться до многих локальных сообществ вместо того, чтобы локализовать свои доклады под ключевые страны и языки.Кроме этого английский - это шанс на работу в международной компании, поскольку ведущие ИТ-гиганты, такие как Гугл, Эппл, Фэйсбук и Амазон, базируются в США. Даже в краткосрочные командировки в Америку, Европу и Китай охотнее берут тех, чья поездка не потребует дополнительных костов на переводчика.
    - **Какого уровня языка достаточно?**
        
        Для того, чтобы понимать несложные статьи, читать техническую документацию и отвечать на письма иностранных коллег, достаточно иметь Intermediate. Но важно, чтобы это был навык, который вы не забываете практиковать. Курсы, сданные успешно 2 - 3 года назад, забываются очень быстро.
        
        Уровень upper Intermediate требуется менеджерам и тимлидам, чтобы понимать и поддерживать иностранных коллег в команде, за которую они отвечают. Взаимоотношения, адаптация новичков и другие тонкости коммуникации требуют более свободного общения на английском языке.
        
    - **Что делать, если английский почти нулевой?**
        
        Возможность попасть в разработку без знания английского есть. Часть на вакансии Джуниор-программистов такой навык не требуется, либо работодатель готов оплатить обучение своим сотрудникам.
        
    - **Хорошо знаю язык, но боюсь на нем говорить**
        
        У многих русскоязычных айтишников есть страх перед собеседованиями на английском языке. Это во многом связано с тем, что мы редко заканчиваем школу или университет с уверенным разговорным английским. Поэтому существует много тренингов для собеседований, которые включают самые разные сценарии: от нескольких типовых вопросов на английском языке до развернутых бесед.
        
    - **Как подтянуть английский?**
        
        Не всегда есть возможность ходить на платные курсы или заниматься с репетитором. Вот вам несколько советов, как естественным образом улучшить свои знания:
        
        1. Поменяйте язык ваших приложений, соцсетей и мессенджеров на английский язык. Привычные детали и мышечная память позволят вам с первого использования сориентироваться в происходящем.
        2. Поставьте себе план по прочтению статей и прослушиванию аудиокниг на английском. Полчаса разговорной речи в ваших наушниках по дороге в офис и одна статья в день будут погружать вас в контекст позволяя мозгу привыкнуть и почувствовать себя в своей тарелке.
        3. Пересмотрите знакомые фильмы на Нетфликс в оригинальной озвучке. Если сложно, подключите английские субтитры. Кстати, даже в прокате идет много фильмов на языке оригинала.
        4. Подпишитесь на англоязычные порталы и блоги в Фэйсбуке, заодно узнаете много нового. Здесь же удобно наблюдать за англоязычными дискуссиями, неочевидными сокращениями и сленгом.
        5. Подберите удобный онлайн-словарик и приложение для изучения английского каждый день.
        6. А еще на английском языке выходит много интересных подкастов. К некоторым даже есть расшифровки или хотя бы текстовое сопровождение.
        
        Не стоит стараться успеть всё и перечитать все статьи. Не забывайте открывать все это хотя бы три раза в неделю, и через несколько месяцев вы сами удивитесь, как быстро и много информации вы стали понимать.
        
        Стабильность - залог успеха.
        
        Кстати, английский может пригодиться и в основной работе. Конструкции и термины всех базовых языков программирования берут свои истоки в английском. Почему так, читайте в уроке №3.
        
- **Урок 3. Разберите код с точки зрения английского языка**
    - **Как английские слова в коде делают нашу жизнь проще?
    Что, если знание английского помогает дебажить быстрее?**
        
        Полезно разбираться в английском, если ты собираешься работать в ИТ. Как минимум потому, что большинство языков программирования написаны с использованием слов и конструкций английского языка, а большая часть библиотек и фреймворков разрабатывается на английском. Да и практически вся документация пишется на английском языке.
        
        Но как знание английского поможет разобраться в коде? И насколько глубоко удастся понять суть программы? Давайте разбираться.
        
    - **Немного истории**
        
        В первых компьютерах языки высокого уровня, смысл которых может быть частично или полностью понят человеком на визуальном уровне, не использовались вовсе. Программисты вводили заранее закодированные строки - конкретные инструкции, понятные только машине. При этом стороннему зрителю прочитать и понять, что делает этот код, было невозможно.
        
        Одним из первых высокоуровневых языков стали Шорткод и так называемый Автокод, написанные более “человеческим языком”. Но программирование на них все равно требовало глубокой инженерной подготовки и времени на отладку. Только в 1957 году появился Фортран, программы на котором выглядели доступными для понимания человеком. Фортран имел синтаксис, который позволял разобраться в том, какие структуры данных использует программа и какие операции над ними может совершать. Теперь читать код стало гораздо проще.
        
    - **Как разобраться в несложных конструкциях популярных языков на примере С++**
        
        Начнем с типов переменных, которые можно использовать для работы.
        
        - **Основные типы переменных в С++**
            - **int - целочисленный тип данных (от integer - целое число)**
            - **float - тип данных с плавающей запятой = дробное число (от float - плавать)**
            - **double - тип данных с плавающей запятой двойной точности (double - удвоение - повышает вдвое количество знаков после запятой)**
            - **char - символьный тип данных (от char - символ)**
            - **bool - логический тип данных (от boolean - логический, где подразумевается соответствие значения параметрам TRUE или FALSE)**
            
            Теперь несложно понять, что строка с операцией { float b = 7,9: } указывает на создание дробного числа. С другой стороны, если бы b имела тип int, то значение бы автоматически округлилось.
            
        - **Простые структуры в С++**
            
            Логические структуры тоже написаны на относительно понятном языке в логичной, пусть и более схематичной форме. Рассмотрим классические конструкции с условиями и счетчиками. Условный оператор дает программе выполнить определенное действие, только если выполняется указанное условие. Счетчик же предназначен для того, чтобы операция выполнялась несколько раз - в нем дополнительно указывается требуемое количество шагов.
            
            В виде кода обе конструкции выглядят следующим образом (на примере цикла while):
            
            **whle (Условие) { Тело цикла (какие действия будем совершать, пока идет цикл) }**
            
            While  в данном случае говорит программе: “пока условие Х выполняется, делай следующие действия”. У цикла есть и другой тип вида:
            
            **do { Тело цикла; } while (Условие);**
            
            Смысл здесь изменится так же, как изменился бы в родном языке: “делай следующие действия, пока не наступит Х”. Теперь программа будет проверять условие на НЕвыполняемость, и остановится, как только оно будет достигнуто.
            
            Если же нам известно точное количество итераций, стоит использовать цикл FOR (для).
            
            **for (действие до начала цикла; условие продолжения цикла; действия со счетчиком цикла на каждом шаге) { тело цикла; }**
            
            Интерпретация простая и тоже понятная путем прямого перевода: для каждого Х из перечня чисел в скобках выполняй действие У.
            
        - **Более сложные конструкции и методы**
            
            Тот же С++ имеет и ряд стандартных функций, названных так, чтобы можно было уже видя предложенный список доступных функций, выбрать подходящую. Поработаем с динамическими массивами. Ничего страшного, если этот термин вам пока не знаком. Название дано им неслучайно, а сами они во многом похожи на объекты из реального мира.
            
            Динамический массив - набор данных, которые могут перемещаться внутри ячеек своей матрицы. Разновидностью динамического массива является очередь - процесс, когда некие данные занимают “места” в ячейках и по мере освобождения предыдущего места, переходят на него.
            
            Для работы с такими массивами есть большой список функций. Облегчает задачу то, что зная английский, в них легко разобраться.
            
            Например, метод clear () - очищает очередь; IsEmpty() - проверяет, не является ли очередь пустой; print() - выводит очередь на экран.
            
            Кстати, в объектно-ориентированном программировании (ООП) есть концепции, которые позволяют описать с помощью английских терминов еще более сложные конструкции, например, паттерны.
            
            Паттерны ООП (от английского слова “шаблон, образец”) являются шаблонами для написания когда определенного узкого функционала. Многие из них были созданы исходя из частых запросов на одну и ту же логику в коде. Вот некоторые:
            
            **REGISTRY (англ - журнал записей)**
            
            Паттерн предназначен для хранения записей и предоставления информации по ним в том случае, если к записи обратились по имени. Например, список номеров медицинских карт или телефонных номеров. Очевидно, что всегда проще использовать готовый шаблон, чем заново изобретать велосипед, точнее, список данных.
            
            **FACTORY (англ - фабрика)**
            
            Паттерн хранит информацию о том, как создаются определенные объекты и данные. Например, для создания новой анкеты обратной связи нам не нужно каждый раз писать процесс, описывающий множество необходимых полей. Имея паттерн Фэктори, мы можем обратиться к нему и сказать “создай новую анкету”. В том случае, если анкета поменяла свою форму, изменения вносятся сразу на уровень Фабрики.
            
            **DECORATOR (англ - декоратор, оформитель)**
            
            Паттерн чаще всего используется для расширения исходного объекта до требуемого вида. Применяется для работы с интерфейсами и другими деталями, которые нужно “дотюнить”.
            
            По этой же логике появились Mediator (Посредник), Blackboard (Доска объявлений), Proxy (Заместитель) и т.д.
            
        - **Как назвать свои данные**
            
            Переменные и классы, которые вы задаете сами, тоже стоит называть понятным языком, иначе есть риск уже через 1-2 недели забыть их смысл.
            
            Пара хороших примеров: totalScore - итоговый счет в игре, maxWidth - максимальная ширина.
            
            Если это уместно и соответствует сути, принято добавлять к названиям значения:
            
            - количество (count), если идет подсчет
            - размер (size, length), если мы вычисляем длину и т.п.
            - номер (number), если возвращаем значение чего-то.
            
            Кстати, массивы часто называют словами во множественном числе. Таким образом становится понятно уже из названия, что внутри лежит целый набор данных. А в функциях на первое место часто ставят глагол, кратко объясняющий, что она делает, например, find, create.
            
            Зная эту деталь, уверены, вам будет несложно разобраться в задачке, которую мы подготовили для вас. Это простая игра, где компьютер загадывает число. Постарайтесь разобраться, какие правила у этой игры, и что вы можете делать, чтобы угадать число.
            
            1. secretNumber = generateNumber( )
            2. isCorrect = false;
            3. while (isCorrect ==false )
            4. {
            5. playersNumber = requestPlayerNumber( )
            6. isCorrect = validatePlayerNumberAndPrintResult(playersNumber)
            7. }
            8. congratulatePlayer( )
            
            ОТВЕТ: на самом деле у вас не так много возможностей угадать число, загаданное компьютером. Вы видите, что переменной “секретное число” было присвоено случайное значение. А дальше вы методом подбора пытаетесь его угадать. Как только введенное число совпадет с загаданным, компьютер поздравит вас.
            
            Надеемся, вам стало проще “читать” код визуально и не так страшно его изучать. Если что-то забудете, сориентируетесь по ходу дела, если у вас большой словарный запас.
            
- **Урок 4. Можно постоянно кодить и оставаться здоровым? 05.08.2023**
    
    *Все про туннелльный синдром и другие специфичные проблемы со здоровьем у разработчиков.*
    
    Если вы работаете в ИТ, вероятно, много времени проводите за компьютером в одной позе. В этом есть определенная ирония: комфортный офис, здоровая еда и спортзал напротив кабинета не избавляют вас от рисков сидячей работы.
    
    У большой части айтишников наблюдается нехватка физической активности. Вы и сами могли замечать за собой, что стали реже гулять и встречаться с друзьями, в выходные вам хочется остаться дома и посмотреть пару фильмов. К сожалению, именно ИТ-сфера и обуславливает проблемы, с которыми есть риск столкнуться каждому из нас: гиподинамия, аллергия на пыль, туннельный синдром. Рассказываем, что это за проблемы, как их распознать и что делать, чтобы снизить риски их появления.
    
    - **Туннельный синдром. Что это такое?**
        
        Туннельный синдром - сдавливание срединного нерва кисти - причина постоянной однообразной нагрузки на запястье: чем больше времени мы работаем с компьютерной мышкой в руках, тем опаснее для нас.
        
        **Почему это происходит?**
        
        В результате перегиба нерва происходит снижение кровообращения и частичное отсутствие кровообращения тканей. Мышцы не получают достаточного питания и кислорода, не происходит нужного обмена веществ. В результате двигательные функции ухудшаются, чувствительность снижается, а иногда пропадает вовсе.
        
        Дело не только в мышке. То, как мы набираем текст и пользуемся тачпадом, тоже вредно для наших рук. А представьте, каково им, когда мы свешиваем локти со стола или работаем лежа, подпирая ноутбук коленями. Особенно если это происходит в течение длительного времени.
        
        Спровоцировать появление туннельного синдрома могут избыточные спортивные нагрузки, травмы, такие заболевания, как сахарный диабет и некоторые другие причины. Поэтому в каждом из перечисленных случаев стоит еще внимательнее относиться к своему здоровью.
        
    - **Проверить себя на наличие туннельного синдрома**
        
        Соедините запястья и опустите руки под прямым углом от себя. Если вы в течение минуты почувствуете боль или другие неприятные ощущения, это повод пройти обследование.
        
    - **Как лечить туннельный синдром или снизить вероятность его появления**
        
        Прежде всего речь пойдет об изменении образа жизни:
        
        1. Ограничивайте нагрузку на руки. Если вы много работаете за компьютером, используйте голосовой ввод, где это возможно, или переходите на бумагу и ручку.
        2. Добавьте в рацион достаточно нужных витаминов и микроэлементов, в частности В6. Много витамина В6 содержится в зерновых проростках, орехах, в неочищенном рисе, шпинате, картофеле, моркови, цветной и белокочанной капусте, помидорах, клубнике, черешне, цитрусовых.
        3. Пользуйтесь эргономической клавиатурой и ковриком для мыши с силиконовыми вставками. Руки при такой работе устают меньше, их можно развести в стороны или изменить положение частей клавиатуры, поставив на разный уровень на столе.
        4. Проверьте, правильно ли вы держите руки на клавиатуре. Попробуйте печатать вслепую и задействуйте все пальцы, чтобы подключить мышечную память и снизить суммарную нагрузку на руки. Первое время методика может казаться неудобной. Но она эффективно работает уже много лет и доказала свою пользу. Для тренировки слепой печати есть специальные сервисы.
        5. Выполняйте физические упражнения, улучшающие кровообращение кисти: сжимайте и разжимайте пальцы, вращайте кистями, соедините ладони вместе и поочередно надавливайте ладонью на пальцы соседней руки так, чтобы кисть выгибалась наружу.
        
        Если все перечисленное уже не помогает, не бойтесь обратиться к неврологу. Иногда требуется медикаментозное вмешательство и физиотерапия. Туннельный синдром можно полностью излечить, если вовремя заметить проблему.
        
    - **Аллергия на пыль**
        
        Даже если у вас с детства ни на что нет аллергии, помните, что долгое пребывание возле пыльного монитора может вызвать аллергическую реакцию. Пыль скапливается не только на поверхности, но и между мелкими деталями, поэтому необходимо не реже раза в месяц тщательно чистить рабочий компьютер.
        
        Симптомы аллергии очень похожи на раннюю стадию простуды: заложенный нос, чихание, иногда сопровождается раздраженным горлом и слезящимися глазами. Если вы склонны к аллергии или сильно восприимчивы к пыли, не забудьте, что пыль скапливается также в коврах, шторах и мягких игрушках.
        
    - **Гиподинамия**
        
        Гиподинамия - это нарушение функций организма на фоне пониженной физической активности. Риск гиподинамии сильно увеличился в пандемию, когда мы даже выходные проводили дома. Мы с головой окунулись в то, что врачи называют недостаточными физическими нагрузками, малоподвижным образом жизни и плохими привычками.
        
        Симптомы гиподинамии:
        
        - быстрая утомляемость
        - бессонница
        - регулярные головные боли
        - нервозность и раздражительность
        - дряблость мышц
        - боли в спине
        
        Если же запустить свое состояние, то последствия могут быть хуже: проблемы с сердцем и сосудами, ожирение и снижение интеллектуальных возможностей. Поэтому настоятельно рекомендуем почаще ходить в зал, а в выходные видеться с друзьями не только за игровой приставкой. Лучше встретиться, например, в парке или за городом.
        
        Да, 2019 и 2020 год не давали достаточной возможности для активного отдыха и смены мест. Но рано или поздно пандемия закончится, главное не выйти из нее человеком, привыкшим сидеть дома 24/7 и видеться с друзьями только онлайн.
        
    - **Ухудшение зрения**
        
        Пока мы проводим целый рабочий день в мониторе, наше зрение неуклонно падает. В процессе работы мы фокусируемся на одной точке, наши глазные мышцы не отдыхают, а мы получаем осложнения в виде сухих глаз, близорукости и тому подобных вещей.
        
        О том, чем это чревато, и как с минимальными усилиями поддержать свое зрение, мы пишем в уроке №5. Надеемся, наши советы помогут вам. Не забывайте, что самое негативное воздействие компьютер оказывает именно на зрение.
        
    - **Выгорание**
        
        Многие не признают выгорание не только как симптом ухудшения здоровья, но и вовсе как предмет, заслуживающий внимания. В некоторых компаниях оно до сих пор считается последствием недостаточной вовлеченности и старательности сотрудника.
        
        Тем не менее в мае 2019 года ВОЗ признала выгорание, как фактор, влияющий на состояние здоровья. Оно было признано синдромом, вызванным хроническим стрессом на рабочем месте, который оказывает негативное влияние на здоровье и требует медицинской помощи.
        
        Само по себе выгорание говорим о сильном эмоциональном истощении. Это нежелание работать, развиваться или даже развлекаться. Это состояние снижает продуктивность, повышает тревожность и нервозность. Им часто подвержены руководители и другие ключевые работники компаний из-за того, что на них возлагается повышенная ответственность, для реализации которой часто не хватает ресурсов. В результате у человека опускаются руки.
        
        Кстати, эмоциональное истощение сказывается на реальных заболеваниях: с 2013 уровень заболеваемости среди 25 - 29-летних сотрудников вырос в 1,5 раза. Не стоит думать, что ночная работа и 10 часов подряд за компьютером не вредят вашему здоровью. Такой режим в сочетании с периодическим давлением со стороны менеджера, например, в преддверии релизов, может стать причиной эмоционального истощения.
        
        Активность в ночное время, сон посреди дня, отсутствие оффлайн-развлечений - все это снижает продуктивность, повышает тревожность и нервозность. Когда работа становится центром жизни, то ошибки и сложности проекта становятся фатальными сложностями для сотрудника. Даже при высокой зарплате и комфортных условиях качество жизни снижается.
        
    - **В каких условиях есть высокий риск выгорания**
        1. Требований и давления со стороны начальства больше, чем одобрения и поддержки.
        2. Команда не оправдывает завышенных ожиданий сотрудника, например, каждый из них тратит на работу меньше времени и привносит меньший вклад в общий результат.
        3. Нельзя заранее спланировать нагрузку, свободные дни чередуются с длительными спринтами непрерывного кодинга.
        4. Личная жизнь сильно смешивается с рабочей, чаты всегда активны, и коллеги ждут оперативных ответов в любое время.
        
        Советы, как этого избежать, не оригинальны. Самое главное, что нужно помнить: тяжелее всего вовремя идентифицировать выгорание и сразу начать работать над собственным эмоциональным равновесием. Только в этом случае вы не рискуете потерять продуктивность и доверие команды. Будьте внимательны к себе и своим друзьям, нас могут раздражать советы в духе “не работай на выходных”, но иногда они очень своевременны.
        
    - **Что делать, чтобы избежать выгорания?**
        1. ***Определяйте четкие границы своего рабочего времени. Не бойтесь сообщить команде о том, что не всегда может быть на связи. Не самые важные вопросы переносите на первый рабочий день, даже если решить их можно в течение 15 минут.***
        2. ***Разрешайте себе отдыхать. Часто мы не расслабляемся по-хорошему, поскольку думаем. что слабо поработали. Это как снежный ком: мало отдыхаем - плохо работаем - виним себя за слабый результат - и вновь не можем по-хорошему отдохнуть.***
        3. ***Сфокусируйтесь на своем теле и мыслях. Во время напряженных моментов постарайтесь выделить несколько минут, чтобы “прочувствовать стресс”: обратите внимание, какие эмоции вы испытываете, какие части тела напряжены, как вы начинаете мыслить. Фокус на нестабильном состоянии при определенной практике помогает вернуть себя в состояние баланса.***
        4. ***Цените свой труд. Именно обесценивание проделанной работы прежде всего повергает нас в апатию. А делая небольшие детали абстрактных проектов, сроки которых затягиваются, мы часто не видим, какую значимую работу проделали. Уметь вовремя себя похвалить - важный талант.***
        5. ***Ведите учет своих достижений. Не забывайте хвалить себя, особенно в сложные моменты.***
        6. ***Не делайте чужую работу. Помогайте и учите, если это будет оправдано, например, коллега не справится без вас или у вас есть нужный опыт. В остальных случаях вы берете на себя лишнюю ответственность, которая, при высокой загрузке, может снизить качество вашей работы.***
        
        У Льюиса Кэрролла есть хорошая цитата: “Нужно бежать со всех ног, чтобы оставаться на месте, а чтобы куда-то попасть, надо бежать, как минимум, вдвое быстрее!”. Эта цитата отлично подходит к тому режиму, по которому сейчас живут многие айтишники. Тем не менее не стоит загонять себя. Только двигаясь размеренно, сохраняя состояние работоспособности и разделяя гордость за успехи своего проекта, можно продвинуться достаточно далеко.
        
    - **Как сидеть за компьютером 24/7 и сохранить здоровье?**
        
        Обустраиваем рабочее место, подбираем технику и соблюдаем несложные правила, чтобы оставаться здоровыми, проводя много времени за компьютером.
        
        Длительная сидячая работа является неестественной для анатомии человека - страдают суставы, ослабевают мышцы ног, шея и спина испытывают постоянную нагрузку. Ситуацию осложняет то, что мы привыкаем сидеть неправильно, усугубляя наши ошибки.
        
        Надеемся что на данный момент никто из вас не сталкивался ни с чем серьезным. Тем не менее многие замечают, что с годами зрение ослабевает, задерживать дыхание надолго, как в детстве, уже не удается, а если резко встать - в глазах темнеет. Причины всех неудобств в неудачном рабочем месте. Все-таки это не самая простая система, требующая правильно эксплуатации.
        
        Но есть и хорошая новость: если можно привыкнуть к плохой позе, то можно привыкнуть и к хорошей. Давайте разберемся, какие несложные правила позволят избежать осложнений.
        
    - **Проверяем стол и стул**
        
        Высота стула должна позволять полностью поставить стопы на пол. При этом важно, чтобы колени были согнуты под прямым углом. Идеальная высота стола при этом - если локти удобно ложатся на стол. Они не должны свисать, но при этом плечи должны быть расслаблены, другими словами, полностью опущены.
        
        Чтобы было проще убедиться, что высота стола и стула настроена правильно, проверьте свое солнечное сплетение, оно должно располагаться чуть выше поверхности стола.
        
    - **Ставим правильно компьютер**
        
        Компьютер устанавливается чуть ниже линии взгляда. При этом расстояние до глаз должно составлять около 50 см. Если же у вас рабочим компьютером является ноутбук, обеспечить это расстояние не так просто. В таком случае советуем иметь на рабочем месте подставку и отдельную клавиатуру, которые позволят добиться нужного положения техники.
        
    - **Работаем с освещением**
        
        Несмотря на то, что экран монитора достаточно яркий и его освещенность можно регулировать, работать с ним без дополнительного источника света не рекомендуется. В этом случае глаза напрягаются ощутимо сильнее, и после вечерней работы в таком режиме сложнее заснуть.
        
        Позаботьтесь о светильнике на вашем столе и постарайтесь зафиксировать его сверху над монитором и клавиатурой. Так блики не будут отражаться в экране, создавать дополнительное напряжение для вашего зрения и раздражать слизистую оболочку глаза. Включайте светильник как только за окном начинает темнеть. Хорошим решением будет установить светильник таким образом, чтобы он освещал стену ЗА компьютером, снижая контрастный перепад от яркого экрана к затемненной комнате.
        
    - **Делаем перерывы**
        
        Часто хочется доделать неприятную работу за один подход и больше к ней не возвращаться. Но глазам (да и вашему мозгу) важно переключаться с экрана на что-то еще, отдыхая и восстанавливаясь для будущей работы.
        
        Мы знаем, как сложно заставить себя делать разминку для глаз и зарядку. Поэтому советуем для начала почаще выходить заварить чай (телефон оставьте на рабочем столе), изучайте происходящее за окном, фокусируя взгляд на мелких деталях, и пару раз в день выделите 10-15 минут, чтобы полежать на диване с закрытыми глазами. Может быть у вас есть домашний питомец, который будет только рад прогуляться с вами.
        
    - **Пользуемся надстройками**
        
        Сейчас появилось много дополнений для рабочих мест: конвертеры, стенды, кронштейны, которые позволяют регулировать высоту и наклон мебели. Не менее полезно приобретать ортопедическое кресло. Согласно исследованиям, использование компьютерного кресла с раздвоенной спинкой снижает давление на позвоночник до 50%.
        
        Не забывайте, что ваше здоровье и самочувствие в первую очередь зависит от вас самих.
        
    - **Чек-лист: проверяем себя на вредные привычки**
        1. Обратите внимание на свои запястья. Ощутите, как ваши руки лежат на мышке и клавиатуре. Если чувствуете напряжение, их ломит или хочется размять, то положение рук неправильно и может привести к защемлению мышц.
        2. Поднимите взгляд в окно и посмотрите вдаль. Как быстро ваш взгляд смог сфокусироваться на дальней точке и рассмотреть ее? Если понадобилось время, ваше глаза утомлены.
        3. Резко встаньте. Если в глазах темнеет, вы засиделись, и ваше давление снизилось. Частые повторения этого симптома могут говорить о гиподинамии - пониженной активности.
        4. Сядьте в привычной позе и протяните руку к клавиатуре. Если, выпрямив руку, вы касаетесь ладонью кнопок - отлично. Иначе клавиатура располагается слишком близко или далеко, что вынуждает лишний раз напрягать спину.
        
        Кстати, есть еще одна привычка, которой грешим мы все. Просматривая фотографии, видео или ленту в соцсетях, мы непроизвольно задерживаем дыхание, что мешает нормальной вентиляции легких. Многим этот эффект знаком как легкое “апноэ”.
        
    - **Вместо заключения**
        
        Все мы привыкли работать по-разному. Кто-то постоянно отвлекается, а кто-то пропадает в работе часами не глядя на время. В любом случае ваше рабочее место должно быть комфортным для вас и оставаться вашей личной территорией, свободной от детей, животных и лишнего хлама. А будет ли оно с колонкой, подушкой или вентилятором - решать вам.
        
        Главное, что посоветуем напоследок: никогда не работайте в кровати. Вы не только испортите себе осанку, но и перестанете воспринимать ее местом для отдыха. А без отдыха нет ни продуктивности, ни удовольствия от жизни. Работайте с удовольствием и посвящайте больше времени приятным вещам.
        
    
    **[Устаревшая версия урока](https://gbcdn.mrgcdn.ru/uploads/asset/3869507/attachment/402d9a2332c4c87c4a546be8ba5a94aa.pdf)**
    
- **Урок 5. Как беречь глаза при работе за компьютером. 05.08.2023**
    - **Как закрыть все таски и не испортить зрение?**
        
        Поговорим о том, что вреднее для глаз - рабочие чаты или Инстаграм, а также, как, сохранив привычный ритм жизни, не потерять здоровье.
        
        Многие из нас носят очки. У кого-то близорукость, у кого-то - синдром “сухого глаза”. Правда в том, что пока мы проводим целый рабочий день в мониторе и при этом неправильно сидим, не разминаемся и не следим за здоровьем, наше зрение неуклонно падает. А если мы делаем это ночью, после работы переключаемся на смартфон и совсем не выходим из дома, то компьютерный зрительный синдром нам обеспечен.
        
        Обратите внимание на свое зрение: посмотрите на дальний объект (например, на предмет за окном); если зрение фокусируется долго или вы вовсе не можете его рассмотреть, ощущается сухость и хочется потереть глаза - у вас синдром компьютерного зрения.
        
        Причина простая: в процессе работы годами мы фокусируемся на одной точке, в итоге глазные мышцы не отдыхают, мы начинаем реже моргать и сами снижаем количество увлажнений наших глазных яблок. При работе в темноте негативное воздействие увеличивается.
        
        Согласно медицинским исследованиям основная опасность мониторов как раз не в излучении, а в опасности для зрения. И это не только компьютеры, смартфоны не менее опасны для нашего зрения.
        
    - **Как избежать таких последствий?**
        - **Расположение экрана**
            
            Рекомендуется расположить экран на такой высоте, чтобы взгляд падал сверху вниз под углом 15-30 градусов. Это оптимальное положение, чтобы не напрягать шею, при этом оставлять глаза в полуприкрытом состоянии, чтобы они меньше пересыхали.
            
            Соблюдайте оптимальное расстояние до экрана. Для его оценки существует метод Хармона: сложите пальцы в щепотку и коснитесь брови. Отметьте на каком расстоянии находится ваш локоть. Расстояние до экрана смартфона или ноутбука должно быть не меньше.
            
            Стационарный монитор должен находиться еще дальше, на расстоянии вытянутой руки.
            
        - **Хороший монитор**
            
            Позаботьтесь о наличии антибликового покрытия и хорошего разрешения. Вашим глазам будет легче, если у устройства будет хорошая матрица, система подсветки дисплея и частота. Чем ниже частота мерцания, тем быстрее вы утомляетесь.
            
            Уменьшайте яркость, если работаете в темноте, и следите за уровнем контраста. Размытые или, наоборот, резаные контуры объектов вынуждают глазные мышцы прикладывать избыточные усилия. При длительном использовании вы можете даже чувствовать перманентную головную боль.
            
            То же самое происходит, когда вы читаете с экрана слишком мелкий шрифт.
            
        - **Освещение рабочего места**
            
            Хорошо, если пространство у компьютера освещено также хорошо, как его экран. Крайне не рекомендуется работать в темноте - это вызывает дополнительное напряжение и усталость глаз.
            
            Ради эксперимента можно снизить наличие вредной синей части спектра экрана. Для этого на Мак и Виндоус 10 есть встроенный инструмент Найт Шифт. Для более ранних поколений устройств есть сторонние решения. Уменьшение влияния синего спектра помогает восстановить циркадные ритмы, т.е. не дать яркому свету перевозбудить мозг. Первое время изображение будет казаться непривычно желтым, однако, к этому быстро привыкаешь и даже удивляешься, как некоторые коллеги работают со странным цветом экрана.
            
        - **Регулярные перерывы**
            
            Очевидный, но крайне важный факт. Старайтесь расслабить глаз раз в 20-30 минут, отвлекаясь на сторонние предметы. Идеально, если они будут находиться на заднем плане и являться естественными, например, это может быть вид за окном.
            
        - **То, как мы моргаем**
            
            Сидя перед экраном мы моргаем в два раза реже из-за того, что глаза не нуждаются в движении. При этом роговице глаза не хватает влаги (так называемой слезной пленки), и она пересыхает. По этой же причине вредно смотреть на экран снизу вверх - мы раскрываем глаза полностью, не давая им экономно расходовать влагу.
            
        - **Гимнастика для глаз**
            
            Важно заботиться не только об увлажненности роговицы, но и о тонусе зрительной мышцы, которая спазмируется от постоянного напряжения, фокусируя взгляд на одном расстоянии.
            
            Выделяйте 2-3 небольших перерыва, чтобы размять глаза (как минимум повороты и круговые движения) и выполнять упражнение доктора Аветисова. Сфокусируйтесь на близком объекте, не более, чем в полуметре от вас. Переведите взгляд на далекий объект, например, автомобиль или человека за окном. Дождитесь, пока ваш взгляд сфокусируется на новом объекте. Повторяйте гимнастику в течение 3-5 минут.
            
        - **Полезные продукты**
            
            Лютеин - пигмент, который защищает глаза от повреждений и блокирует ультрафиолет, в большом количестве содержится в шпинате, фисташках, морковке, петрушке, зеленом горошке. Зеаксантин является его изомером и встречается, например, в хурме и кукурузе. Когда этих элементов не хватает, сетчатка становится более уязвимой.
            
        - **Как избежать таких последствий?**
            1. Периодически вставайте и прогуливайтесь по офису, переводите взгляд в окно на удаленные предметы, меняйте фокус, заставляя глаза переключаться.
            2. Размышляя над чем-то, переводите взгляд на сторонние предметы и двигайте глазами, мысленно обводя их контуры.
            3. Периодически отвлекайтесь от работы и массируйте закрытые веки кончиками пальцев в течение минуты.
            4. Пару раз в день ложитесь на диван, закрывайте глаза и расслабляйтесь, 10 - 15 минут достаточно, чтобы ваши глаза отдохнули.
            5. Во время длительных поездок старайтесь найти глазами горизонт и наблюдать за ним.
            
            Кстати, здоровью роговицы способствует повышенная влажность в квартире и комфортная температура - 18-22 градуса.
            
            В остальном важно внимательно относиться к своему зрению и не полениться дойти до окулиста, если почувствуете, что зрение уже не такое острое, как раньше. Фисташки и работа в холоде - еще не решение всех проблем. Поэтому если вы нашли в ИТ свое призвание, то не поленитесь и потратьте немного времени на профилактику здоровья. В длительной перспективе это поможет избежать проблем и продолжать получать кайф от своей работы.
            
- **Урок 6 Как разработчику избежать профессиональных болезней 05.08.2023**
    
    Интересный факт про разработку: Первая компьютерная игра называлась Спейсвар. И разработчики просто поделились ей со всеми желающими. Таким образом, ничего не заработав.
    
- **Урок 7. Почему программисты работают ночью 05.08.2023**
    - **Стоит ли работать по ночам и спать до 12 ?**
        
        Как выбрать комфортный режим работы при гибком графике, успеть к релизу и выспаться?
        
        Практика показывает, что увлеченные программисты работают не менее 10 - 12 часов в сутки. Они поздно встают, решают рабочие вопросы в течение дня, под вечер немного отдыхают и начинают кодить. Писать код “в ночь” для многих из них совершенно нормально. Более того, им это нравится гораздо больше, чем рабочий график с 9 до 18.
        
    - **Хочу сам устанавливать свой график**
        
        Для программистов возможность самим планировать свое рабочее расписание и количество часов, выделяемых на работу, очень важна. Гибкий график и удаленная работа становятся определяющими при выборе компании. Со временем каждый из них вырабатывает свое комфортное время и может вставать в 12:00, а основную часть кода писать ночью.
        
    - **Я работаю 12 часов в день потому, что сам так захотел**
        
        Увлеченный программист может работать 10 - 12 часов в сутки без ущерба для качества кода. Возможность погрузиться в проект по-хорошему, не отвлекаясь на сторонние факторы, дает дополнительный буст к исполнительности.
        
        Это на руку и компании, которая официально имеет право только на 40 часов своих сотрудников в неделю. поэтому офисы большинства ИТ-компаний обустроены так, чтобы из них не хотелось уходить: диваны, игровые приставки, автоматы с едой, спортзал и бесплатные напитки. Кстати, в некоторых офисах уже появляются комнаты с диванами, где можно поспать несколько часов после ночной работы. Для тех, кто не знаком с кухней ИТ-компаний, это может кззаться дикостью: как люди, которые зарабатывают сотни тысяч, выбирают возможность поспать на офисном диване, вместо своих квартир?
        
    - **Я предпочитаю кодить ночью**
        
        Необходимость работы с 9 до 18 многим мешается сосредоточиться и по-хорошему погрузиться в задачу. Как следствие, айтишники чаще всего встают ближе к 12:00, работают со средней вовлеченностью в течение дня, а потом усиленно кодят ночью. Программист, которые работает до рассвета и только потом ложится спать - уже не редкость.
        
        У этого есть простая причина: разработчики работают по ночам потому, что это не требует прекратить работу к фиксированному времени, например, к 18:00. Таким образом мозг более расслаблен, а рабочие часы проходят эффективнее.
        
        Но иногда айтишники сами заставляют себя работать больше, поскольку не замечают прогресса. По статистике только 10-20% рабочего времени тратится на написание кода, который потом пойдет в релиз. Все остальное будет удалено, заменено и отрефакторено. В итоге это всего 10-20 строк кода в день. И несмотря на то, что такая картина нормальна для многих айтишников, кажется, что в течение дня сделано очень много.
        
    - **Ненавижу тайм-трекеры и тайминги**
        
        Становится понятно, почему разработчики не хотят, чтобы менеджеры сами устанавливали свои сроки. Более того, задачи, связанные с исправлением ошибок или часто просто невозможно оценить заранее. От этого попытка соблюсти гипотетические сроки вызывает негативные эмоции.
        
    - **Почему такой график стал нормой?**
        
        Ненормированные и ночной форма работы ни для кого не является догмой. Это выбор каждого человека, который пришел в ИТ, и если он погружен в проект, то будет делать все, чтобы запуск прошел успешно. Кто-то в привычное рабочее время, а кто-то в удобные ему часы. Такой формат может отнимать много времени и сил, но приносит ни с чем не сравнимое чувство удовлетворения и гордости за свой проект.
        
        Это одна из причин, почему руководителям, слабо погруженным в ИТ-процессы, сложно воспринимать программистов наряду с остальными сотрудниками. Отсюда рождается много мифов:
        
        - программисты ничего не делают, только требуют высокую зарплату;
        - они не могут дать точных сроков, и ничего не сдают вовремя;
        - они работают два часа в день, а остальное время сидят в соцсетях.
        
        Тем не менее за последние три года культура распределенных удаленных команд сильно развилась, и уже гораздо чаще можно встретить компании, которые предоставляют сотрудникам комфортные условия.для работы, даже если это рабочие часы в ночное время. На первый план вышло не количество отработанных часов, а результативность и значимость сотрудника для проекта.
        
    - **Заботимся о качестве своей жизни**
        
        Лишая себя сна, мы стараемся выиграть побольше времени, но только теряем его. Мы получаем больше стресса и меньше времени. Причина - циркадные ритмы, которые отвечают за регуляцию сна. Они влияют на нашу бодрость, иммунитет и даже скорость старения.
        
        Циркадный ритм регулируется мелатонином, который вырабатывается в темноте. Большинство не знает об этом и проводит вечер в окружении искусственного освещения в обнимку с гаджетами. В итоге мозг потом больше не может расслабиться и момент засыпания откладывается за полночь.
        
    - **Но что делать, если вам приходится работать ночью, а спать после рассвета? Вот несколько советов:**
        1. **Мелатонин боится света. Не сидите в смартфоне лежа в кровати, либо отключайте синюю часть спектра. И, разумеется, не засыпайте под ролики Ютуб.**
        2. **Как только вы просыпаетесь, наоборот, наполняйте комнату солнечным светом, чтобы “зарядить” организм и скорректировать свои циркадные ритмы.**
        3. **Спите не менее 7 часов в сутки с закрытыми шторами. Хорошо, если в вашей квартире есть блэк-аут шторы, которые не пропускают солнечные лучи и имитируют темное время суток.**
        4. **Не работайте в кровати, чтобы дать мозгу время отдыха от времени работы и по-настоящему расслабиться. Если в вашей квартире больше одной комнаты, старайтесь не работать там, где спите.**
        5. **Пройдите обследование на наличие полезных микроэлементов в организме. Помогите восстановиться тому, чего не хватает конкретно сейчас по разным причинам: от стресса до холодной погоды.**
        6. **Введите привычки, которые будут держать ваш организм в тонусе: прохладный душ по утрам, “разгрузочные дни” без жирного по вторникам и пятницам, исключите сладкие фрукты и фастфуд.**
        
        Если вы решили последовать нашим советам, то важно понимать, что главное - не интенсивность. Нет необходимости с первого же дня вставать с восходом солнца, а после 22:00 отключать телефон. Будьте системными, воспитайте в себе такой образ жизни, как привычку, и сами удивитесь, как много сил и желания жить вы будете иметь по сравнению с вашими коллегами и друзьями.
        
- **Урок 8. Какие навыки нужны программисту? 05.08.2023**
    - **Интересный факт про разработку:**
        
        Первый компьютерный вирус был разработан в 1986 году в Пакистане. Этот вирус под названием Brain создали работники компьютерного магазина, чтобы помешать своим клиентам создавать копии их программного обеспечения без разрешения. В отличие от обычных вирусов, Брэйн не повреждал и не удалял какие-либо файлы, а просто отправлял сообщение об авторских правах.
        
    - **7 качеств хорошего программиста**
        
        Чему учиться, чтобы повысить свою ценность для руководителя и команды?
        
        Создатель языка программирования Перл Ларри Уолл считает, что три главных навыка хорошего программиста это лень, нетерпеливость и гордыня. Ленивый человек найдет самый быстрый и эффективный способ сделать что-либо. Нетерпеливый сотрудник быстро проверит то, что кажется ему правильным. А гордый - будет самосовершенствоваться, ведь страстное желание гордиться собой станет огромной мотивирующей силой.
        
        Какие еще качества и навыки покажут вас как хорошего специалиста?
        
        Другими словами, над чем работать, чтобы увеличивать свою ценность для руководителя и команды?
        
        - **Умение планировать**
            
            Под планированием имеется в виду и способность адекватно оценить сроки и способность отделить важное от неважного. Такой навык автоматически подразумевает, что во-первых, вы хорошо погружены в детали продукта и знаете, где могут быть узкие места, а во-вторых, воспринимаете продукт целостно, зная его основную ценность и целевую аудиторию.В умении планировать скрыт талант мыслить и как программист, и как менеджер. Т.е. знать, когда стоит отрефакторить код и заняться техническим долгом, а когда - быстро пилить фичи и выпускать их на рынок, чтобы успеть собрать сливки с аудитории, у которой есть на нее спрос. Чтобы добиться хороших результатов в планировании, заведите несколько полезных привычек:
            
            1. Планируйте Цели письменно - на бумаге, в заметках или на доске в Трелло.
            2. Назначайте своим задачам разный приоритет и выполняйте их в нужном порядке.
            3. Дробите сложные цели на мелкие подзадачи, которым можно назначить конкретный срок.
            4. Всегда оставляйте временной запас, не старайтесь распланировать все 8 часов. Так вы не будете отставать от графика и перерабатывать из-за форс-мажоров.
        - **Умение работать в любой обстановке**
            
            Пандемия диктует нам свои условия. Иногда вам придется работать в доме в окружении детей, питомцев и сладостей на кухне. Иногда это будет шумный офис или кафе по дороге на работу.Умение работать, как в тишине, так и в хаосе очень важно. Кроме обстановки на результат может влиять этап работы над продуктом - это первые относительно спокойные спринты или месяц до релиза.
            
        - **Стрессоустойчивость**
            
            Многие интроверты выбирают путь айтишника, чтобы не сталкиваться с переговорами с клиентами, не выступать и вообще поменьше видеть людей. Тем не менее пусть программиста нельзя назвать легким. Так или иначе каждый сталкивается с жесткими сроками и неконкретными требованиями. Есть и более частая беда: код почему-то не работает. И здесь важно спокойно отнестись к текущей неудаче и продолжить работать. Справиться с невольным стрессом помогают, как ни странно, коллеги. Будьте честны о своих переживаниях и спросите о паре-тройке схожих случаев в их практике. У них явно будет, чем поделиться с вами, ведь в таких ситуациях оказываются все айтишники. Чем больше знаний о схожем опыте вы получите, тем проще вам будет справляться с ним самому.
            
        - **Умение презентовать**
            
            **РезультатНе всегда объекм проделанной вами работы очевиден для остальных. Вам придется рассказывать о том, что именно было сделано и с каким результатом на разных уровнях - своему руководителю, менеджеру, команде проекта. При этом презентации часто гораздо нагляднее отчетов и позволяют быстро донести информацию. Навык доступно и интересно рассказать о результатах помогает не только в отчетности. Он пригодится в том случае, если нужно научить чему-то менее опытных коллег или передать свой опыт. Если вы боитесь публичных выступлений даже на уровне команды, то стоит начать с небольшой подготовки перед защитой:**
            
            1. Составьте план или текст выступления.
            2. Проговорите его пару раз, чтобы убедиться, что текст звучит логично.
            3. Если впереди большое выступление, попробуйте выступить на встречах помельче, или среди знакомых.
            4. Не переживайте, если выступление будет не идеальным. Самое главное - быть конкретным и донести ключевые мысли. Тем более никто лучше вас не знает о том, какую работу вы проделали.
            5. В крайнем случае на онлайн-встрече вы можете выступить с отключенной камерой, глядя на подготовленные тезисы, если такой формат принят в вашей компании.
        - **Менторинг**
            
            **Менторинг позволяет обмениваться знаниями с коллегами и помогать новичкам. Кроме этого процесс менторинга помогает самому глубже разобраться в теме. Ведь мы сами хорошо понимаем то, что объясняем другому человеку. Есть ряд дополнительных навыков, которые улучшаются благодаря прокачке менторинга:**
            
            1. ораторское искусство
            2. навык презентации
            3. навык переговоров
            4. руководящий опыт
            5. решение конфликтных ситуаций
            
            Если хотите попробовать себя в роли ментора, но у вас нет руководящего опыта, узнайте о возможности приглашать стажеров в компанию. Предложите менторство одного из них. Не бойтесь, что не сможете быть полезным или интересным. Если вам сложно самому разработать план стажировки, попросите у эйчара пару планов адаптации на схожих должностях и используйте их как пример.
            
        - **Умение быстро осваивать новые технологии и инструменты**
            
            **Когда мир меняется так быстро, как сейчас, умение быстро осваивать новое становится залогом успеха. И речь не только про готовность осваивать новые навыки, которые пригодятся в работе. Переходить на другой график, перестраивать устоявшиеся процессы, менять текущие рабочие привычки очень важно. Совсем недавно нам пришлось быстро осваивать новые онлайн-инструменты, учиться работать с коллегами, которых иногда не видели вживую, и делать акцент на диджитал-инструментах вместо привычных оффлайн-решений.	Как быстро вы перестраиваетесь сейчас?Вспомните, какие значимые изменения произошли с вами в этом году.Может быть это новый формат отчетности или новый фреймворк для работыОтветьте для себя на следующие вопросы:**
            
            1. Насколько позитивно вы восприняли новость о переходе на новый инструмент?
            2. Как быстро вы относительно остальной команды перешли на него: одним из первых, в общей массе или сопротивлялись до последнего?
            3. Увидели ли вы эффективность нового решения?
            4. Знаете ли вы аналогичные решения в других областях, которые могли бы порекомендовать своей команде?
            5. Рекомендовали ли вы такие решения в этом году?
            
            Если вы в основном пассивны, то не исключено, что много нового вы изучаете только благодаря драйвовой команде. Не бойтесь почувствовать себя не в своей тарелке из-за новых инструментов, перемены - одна из возможностей непрерывно развивать свой мозг.
            
        - **Дисциплинированность**
            
            **Дисциплинированному человеку хочется доверять. Он выдержан, внутренне организован и способен организовать других. Дисциплина повышает работоспособность и воспитывает ответственность. Уже поэтому такому человеку руководство часто доверяет ключевые проекты. С другой стороны, если человек постоянно опаздывает, не сдает вовремя задачи и не может вылезти из соцсетей, его могут счесть легкомысленным и необязательным. Дисциплина помогает не только в работе, но и в обучении, занятиях спортом и заботе о собственном здоровье.**
            
            **Как стать более дисциплинированным:**
            
            1. Не отвлекаться на соцсети слишком часто. Установите себе специальное приложение или попросите ваших коллег обращать внимание на то, как часто вы отвлекаетесь.
            2. Составить расписание и стараться придерживаться его в течение дня.
            3. Записывать свои расходы и доходы и стараться составлять план по ним.
            4. Давать публичные обещания и также публично отчитываться за их выполнение.
            5. Тренироваться говорить “нет”
            6. Определить ресурсные и нересурсные активности, стараться исключать бесполезные события и действия.
        
        Чем-то из перечисленного вы обладаете уже, чему-то получится научиться только через какое-то время. Тем не менее работа над каждым из перечисленных качеств поможет вам быстрее наращивать свои скиллы, подняться по карьерной лестнице и заслужить доверие коллег.
        
        Удачи!
        
- **Наставничество 05.08.2023**
    - **Встаньте на путь Наставника**
        
        Наши исследования показали, что эффективность обучения увеличивается, если у студента есть Наставник. Мы стремимся, чтобы каждый ученик ГикБрэйнс получил от обучения максимум благодаря помощи сообщества.
        
    - **Чем занимается Наставник?**
        
        Помогает студенту осваивать программу обучения, выполнять практические задания и учебные проекты. Мы предусмотрели инструменты на сайте, которые позволят вам общаться со своими подопечными. Вам будут задавать вопросы, а вы отвечать на них.
        
    - **Как стать Наставником?**
        
        Наставником может стать выпускник ГикБрэйнс старше 18 лет. Вы должны пройти хотя бы один курс и сдать тест по нему, если он есть в программе. Как минимум 6 практических заданий должны быть сданы на “хорошо” или “отлично”. После успешного прохождения курса вы получите доступ к новым функциям, а на сайте у вас появится бэйдж “Наставник”. Вы сможете выбирать потоки, которые хотите курировать, и вам автоматически будут назначены студенты.
        
    - **Что получает Наставник?**
        
        **Скачок в развитии**, **Особый статус**
        
        Став Наставником, вы повышаете свой экспертный статус не только в ГБ, но и любом профессиональном комьюнити. Это привлекательно и для работодателей.
        
        **Плюс в карму**
        
        Многим интересно и приятно помогать новичкам и видеть их благодарность. На этом принципе строится наше сообщество.
        
        **Полезные связи**
        
        Если вы фрилансер или задумываетесь над собственным проектом, наставничество поможет вам отобрать в свою команду талантливых и активных соратников. Но даже если вы не ищете коллег, наставничество для вас будет способом познакомиться с единомышленниками и расширить круг общения.
        

**05.08.2023 Подготовка. Наставничество**

**05.08.2023 Подготовка. Наставничество**

### Модуль: Вопрос - Ответ по программе. 02.08 - 03.08.2023

- **Урок 1. Вводное видео с директором образовательных проектов Анной Ковбас**
    
    **Основные тезисы:**
    
    1. В этом видеокурсе 5 уроков, в них есть ответы на вопросы, которые могут возникнуть в процессе обучения.
    2. Нам важно, чтобы с каждым студентом был контакт на протяжении всего обучения.
    3. Наша команда рада видеть вас среди студентов ГикБрэйнс. Мы уверены, что за время обучения вы достигнете поставленных целей и сформируете правильную траекторию для смены профессии!
- **Урок 2. Вопрос - Ответ с Александром Волчеком. Траектория Программы**
    
    Александр Волчек, ИТ-предприниматель и СЕО ГикБрэйнс, расскажет о линейке ИТ-направлений “Разработчик”.
    
    Из видео вы узнаете, чем различаются программы разной длительности, как получить документ об образовании и трудоустроитсья по новой профессии. А еще поймете, как будет проходить обучение в разных форматах, из каких блоков состоит программа, какие дополнительные активности помогут углубить знания. Бонус - море мотивации и вдохновения перед стартом.
    
    - **Основные тезисы:**
        1. Название программ ИТ-обучения в ГикБрэйнс - “Разработчик”. Мы выбрали его для описания современных айтишников: программистов, тестировщиков, аналитиков, проджект- и продакт-менеджеров.
        2. ИТ-программы различаются по длительности. Чем дольше длится программа, тем выше профессиональный уровень закончивших ее студентов. За 6 месяцев можно получить уровень Интерн, за 12 - Джуниор, за 24 - Миддл, за 36 - Миддл+, за 60 - Сеньор.
        3. Чтобы освоить профессию на уровне Интерн и Джуниор, достаточно обучения на программе. Чтобы стать мидлом, параллельно нужно начинать работать.
        4. Трудоустройство - важный блок в программе обучения. Если вы выполняете все домашние задания и посещаете занятия, мы гарантируем трудоустройство через 6 месяцев для полугодовой программы и через 9 месяцев для более длительных.
        5. Вы можете получить диплом или удостоверение (в зависимости от уровня вашего образования) после завершения программы на 6 месяцев и 1 год. На более длительных программах документ об образовании получают ежегодно - он пригодится, чтобы начать работать, не дожидаясь окончания обучения.
        6. На протяжении обучения вы проходите промежуточную оценку знаний. Мы смотрим на ваш уровень знаний и, если нужно, даем рекомендации: что подтянуть, на что обратить внимание, нужно ли заново пройти неусвоенный материал.
        7. Обучаться можно индивидуально или в группе. В первом случае вы смотрите уроки в записи, когда вам удобно. Во втором - посещаете онлайн-занятия. Здесь больше общения с одногруппниками и преподавателями, а еще есть групповая динамика: вы видите ошибки и успехи других, изучаете чужой опыт, который помогает вам расти.
        8. Группы миксуются по уровню подготовки, часовым поясам и регионам, возрасту, образовательным целям и другим критериям. В процессе люди могут переходить из одной группы в другую - это зависит от образовательной траектории.
        9. Формат обучения можно менять. Например, если вы выбрали обучение в записи, можете перейти в группу, но раз в определенный период. Часто перескакивать между форматами нельзя - это ломает процесс обучения и мешает студентам планировать время.
        10. Обучение можно ускорить. Например, если вы готовы уделять учебе 30-40 часов в неделю, можете закончить годовую программу за 6 месяцев (ускоренный режим - дополнительная платная опция).
        11. Замедленный режим тоже возможен. Например, можно пройти годовую программу за 2 года, если времени не хватает или нагрузка слишком большая. Но чем меньше вы учитесь, тем меньше возможностей получить новую профессию.
        12. В ГикБрэйнс много методологов, преподавателей, кураторов и экспертов, которые заботятся о вашем образовательном процессе. Но важно не переставать учиться самостоятельно. Доверьтесь нам и идите по своей образовательной траектории.
        13. Задача ГикБрэйнс - не просто обучить вас, а показать жизнь современного ИТ-мира через образовательный опыт.
        14. Настоящий айтишник должен изучать книги, комментарии к коду, материалы в интернете, в том числе на иностранных языках. Поэтому мы начали вести некоторые занятия на английском, но с русскими субтитрами. Это нужно, чтобы проживать и легкость и сложность в обучении.
        15. Каждая программа системна - состоит из нескольких блоков. Например, в годовом обучении есть блок достартовой подготовки, общей инженерной базы, специализации и технологической специализации.
        16. Достартовая подготовка - это вводные блоки. Они помогут освоить платформу ГикБрэйнс и расскажут, как учиться продуктивно. Можно проходить параллельно с основным обучением.
        17. Общая инженерная база - блок основных ИТ-предметов, с которыми вы столкнетесь на работе вне зависимости от выбранной профессии. Поможет осознанно выбрать специализацию. Длится 2 - 4 месяца и может видоизменяться в зависимости от группы.
        18. Специализация - блок, в котором остаются общие предметы, но добавляется более углубленное изучение выбранной области. Обычно проходит со 2-го по 9-й месяц обучения.
        19. Технологическая специализация - время сузить и углубить область интересов. Например, выбрать язык программирования или научиться кодить под определенную платформу, освоить ручное или автоматическое тестирование, углубиться в финансовую аналитику или в Дата Сайенс
        20. Внутри обучения есть несколько дополнительных форматов. Например, буткемпы - формат ежедневного интенсивного обучения. А также Гик Спик и Команда ИТ - онлайн-встречи с приглашенными экспертами и предпринимателями, которые рассказывают про мир ИТ через свои истории.
    - **Вводный урок с Анной Ковбас**
        
        ***Почему мне стоит посмотреть этот видеокурс перед стартом обучения?***
        
        Этот видеокурс состоит из пяти уроков. В каждом уроке представлены ответы на вопросы, которые могут возникнуть в процессе обучения. На эти вопросы ответят ведущие специалисты команды ГикБрэйнс.
        
        ***Кто выступает спикерами в этом видеокурсе?***
        
        1. Александр Волчек. Это ИТ-предприниматель и генеральный директор ГикБрэйнс, а также создатель программы обучения по ИТ-направлению “Разработчик”. Поэтому он будет принимать прямое участие в вашем обучении. За его плечами большой опыт управления бизнесом, сложными техническими процессами и командами, а также создания ИТ-продуктов и вывода их на рынок. Карьерный путь Александра начался с позиции программиста в небольшой ИТ-компании, поэтому он понимает, что необходимо новичку для старта и профессионального роста. На нашей платформе можно познакомиться с профилем А.Волчека, а также посмотреть актуальные видео и интервью с его участием.
        2. Ильнар Шафигуллин. Это эксперт, идеолог и главный методолог программы обучения “Разработчик”. Ильнар обладает сильнейшей экспертизой в области преподавания в области программирования.
        3. Мария Максимова. Она представляет команду заботы о студентах. Эта команда будет взаимодействовать со всеми студентами и поддерживать вас на протяжении всего обучения.
        
        ***О чем расскажут представленные специалисты?***
        
        1. В своих видео А.Волчек расскажет о траектории программы обучения “Разработчик”, форматах и опциях, доступных нашим студентам, а также ответит на другие актуальные вопросы.
        2. Ильнар Шафигуллин расскажет в своих видео о технических вопросах, о том, как правильно подойти к выбору “железа” и программного обеспечения для обучения.
        3. Мария Максимова расскажет, как происходит взаимодействие с куратором, преподавателем и одногруппниками, а также о том, как пользоваться платформой для обучения, как устроен раздел “Мое обучение”, где посмотреть актуальное расписание занятий, как написать преподавателю или сдать практическое задание.
        
        ***Упоминается ли программа обучения “Разработчик” в соцсетях и где найти на них ссылки?***
        
        Да. Под видео будет размещена ссылка на телеграм-канал “Разработчик”, доступный для всех студентов ИТ-направления. Подписывайтесь на этот канал, чтобы быть в курсе происходящего на своей программе обучения.
        
    - **Подготовка на Разработчике. Траектория программы с Александром Волчеком. Вопросы и Ответы от А.Волчека**
        - ***Почему программа обучения по ИТ-направлениям называется “Разработчик”?***
            1. Разработчик - это брендовое понятие для всей линейки программ ИТ-направления. Поэтому, если вы учитесь на ИТ-направлении, значит, находитесь на программе обучения “Разработчик”.
            2. Слово “разработчик” близко к слову “программист”. Поэтому современных айтишников и тех, кто учится на наших ИТ-направлениях, мы приравниваем к разработчикам. Даже занимаясь созданием продукта или руководством проектов, связанных с ИТ, вы находитесь на дисциплине “Разработчик” и, соответственно, считаетесь разработчиком.
        - ***Какова длительность обучения на ИТ-программах линейки “Разработчик”?***
            
            В рамках ИТ-программы “Разработчик” есть курсы длительностью 6, 12, 24, 36 и 60 месяцев
            
        - ***Какова траектория программ ИТ-линейки “Разработчик”?***
            
            В зависимости от программы у вас будет формироваться собственная траектория обучения. Однако в процессе обучения могут возникать дополнительные траектории. Поэтому вы часто будете пересекаться с людьми, учащимися на программах разной длительности и разных специализаций.
            
        - ***Какие есть уровни на ИТ-программах линейки “Разработчик”?***
            
            В зависимости от длительности курса выделяются реперные точки. Каждая реперная точка связана с вашим уровнем знаний или навыком. Программа обучения, рассчитанная на 6 месяцев, соответствует уровню Интерн, на 12 месяцев - Джун, на 24 месяца - Мидл, на 36 месяцев - Мидл+, на 60 месяцев - Сеньор. Названия этих уровней приняты в мире ИТ для обозначения уровней знаний и навыков.
            
        - ***Как достичь уровня Мидл?***
            
            Чтобы достичь уровня Мидл, важно учиться по выбранной программе, параллельно применяя полученные знания в работе.
            
        - ***Как достичь уровня Интерн или Джун?***
            
            Уровень Интерн или Джун достигается в рамках обучения. Имея эту базу, вы сможете устроиться на работу в ИТ-сфере.
            
        - ***Помогут ли мне устроиться на работу после прохождения обучения?***
            
            Вопрос трудоустройства наших студентов является одним из важнейших блоков программ обучения. в процессе вашего обучения будут запущены специальные карьерные траектории, программы и курсы, направленные как на трудоустройство, так и на развитие вас как профессионала внутри компании.
            
        - ***Как строится карьерная траектория студентов ГикБрэйнс?***
            
            В рамках карьерной траектории есть некоторые фиксации, когда можно устроиться на работу. Эти фиксации включают два фактора: гарантию трудоустройства с нашей стороны и желание - с вашей. В процессе обучения вы будете проходить опросы и указывать, когда именно хотели бы трудоустроиться. Главное - учиться и выполнять все задания, т.к. это основа появления реперных точек, гарантирующих трудоустройство. Реперная точка в шестимесячной программе обучения появляется через 6 месяцев, а в годовой, двухлетней, трехлетней и пятилетней - через 9 месяцев.
            
        - ***Можно ли начать поиск работы до появления этих реперных точек?***
            
            Да, можно. Все зависит от вашего желания, уровня знаний, навыков, потребности в заработке, интересов, рынка и другого.
            
        - ***Получу ли я документ, подтверждающий прохождение мной выбранного курса?***
            
            Да. По окончании шестимесячной программы обучения в зависимости от вашего текущего уровня образования вы получите диплом или удостоверение через 6 месяцев, по окончании годовой программы - через 1 год, во время прохождения остальных программ получение документов, подтверждающих уровень образования, будет осуществляться ежегодно. Получив такой документ о прохождении годовой программы, вы сможете применить его на более длительных программах обучения.
            
        - ***Как происходит оценка усвоенных студентом знаний?***
            
            В процессе обучения каждый квартал вы будете проходить аттестацию. Цель проведения аттестаций - определить ваш уровень знаний, понять, на что вы можете претендовать, и дать вам некоторую рекомендацию. По результатам аттестации мы рекомендуем либо продолжить обучение, либо пройти материал снова, переместившись в младшую группу.
            
        - ***Какие есть форматы прохождения обучения?***
            1. Обучение в формате записи. Вы получаете учебные материалы в записи, а затем выполняете практические задания в удобном режиме, находясь не в группе. Такой формат подходит тем, кто не хочет заниматься в группе и чей график не позволяет учиться в определенное время.
            2. Обучение в группе. Вы попадаете в поток, где есть группы. Эти группы формируются по определенным критериям: по уровню знаний и навыков, по возрасту, целям, по регионам и т.д. Вы начинаете и заканчиваете обучение со своей группой. Однако траектория обучения в процессе прохождения выбранной программы может несколько раз переместить вас из одной группы в другую. Такой формат позволяет развиваться вам как профессионалу на опыте своих одногруппников.
            3. Групповое обучение в формате записи. В течение определенного времени вы занимаетесь самостоятельно - просматриваете видеолекции, читаете специальную литературу, пишете код - после чего встречаетесь с группой для подведения итогов.
            4. Групповое обучение не в формате записи. Это посещение в реальном времени лекций, практикумов и встреч, а также совместное прохождение дополнительный занятий по формированию софтскилс.
        - ***Могу ли я перейти из одного формата обучения в другой?***
            1. Если вы учитесь в формате записи, у вас есть возможность перейти в формат группы. Это можно сделать один раз в определенное время.
            2. Если вы учитесь в группе, но по каким-то причинам перестаете посещать занятия, система переводит вас в формат записи. Однако в зависимости от выбранной программы у вас есть возможность вернуться в группу через какое-то время.
        - ***Есть ли возможность ускорить или замедлить процесс обучения?***
            
            Да, такая возможность есть. На платформе ГикБрэйнс есть ускоренный тариф, где за дополнительную плату годовую программу вы можете пройти за 6 месяцев. Вы также можете замедлить процесс обучения и пройти ту же годовую программу за 2 года. Однако, чем меньше вы учитесь, тем меньше у вас шансов получить профессию, и наоборот.
            
        - ***В каком формате будет подаваться образовательный контент и проводиться проверка знаний?***
            
            Формат образовательного контента и проверка знаний студентов зависит от образовательной траектории, которую для вас подберут специалисты ГикБрэйнс. К образовательному контенту относятся видео разной длительности и учебные материалы в текстовом виде, а к форматам проверки знаний - ответы на вопросы, аттестации, тестирование и дипломные работы.
            
        - ***Какова система базовой ИТ-программы линейки “Разработчик”?***
            1. Базовая ИТ-программа линейки “Разработчик” рассчитана на 12 месяцев.
            2. Сначала идет блок достартовой подготовки, где вас определяют в группу, вы знакомитесь с куратором и разбираете несколько базовых тем - например, “Как правильно учиться”, “Как работает платформа ГикБрэйнс” и т.д.
            3. В следующем блоке, длящемся обычно 2 - 4 месяца, вы будете проходить общие инженерные специализации и изучать разные аспекты, т.к. в будущем столкнетесь с ними в работе. Во второй блок включены специальные подкурсы, проводимые в разных форматах и разными преподавателями. Построение и количество этих подкурсов зависит от вашей траектории обучения.
            4. Параллельно будет идти дополнительный образовательный контент: “ГикСпик Разработчик”, “ГикСпик Ученые”, “Команда ИТ”. Из этого блока вы узнаете, как начинали и проходили свой ИТ-путь различные ученые, предприниматели и другие специалисты.
            5. После выбора специализации, а именно, со второго по девятый месяц обучения, идет блок, где вы продолжаете обучение по основным специализациям и начинаете углубленно изучать выбранную специализацию.
            6. Далее идет блок технологической специализации, где выбирается отрасль - например, бэкенд-программист. Этот этап длится последние 2 - 3 месяца обучения.
        - ***Почему мне стоит пройти эту базовую ИТ-программу?***
            
            Пройдя базовую ИТ-программу, вы осознанно сможете выбрать ИТ-специализацию, по которой получите желаемую профессию.
            
        - ***А если я уже знаю, на какой специализации хочу учиться?***
            
            Хорошо. Тогда вы учитесь по выбранной траектории, осваивая, например, программирование на С++, проходите блоки специализации и технологической специализации и изучаете дополнительные языки, чтобы знать все технологические аспекты.
            
        - ***Почему я должен изучать программирование, если у меня другая специальность?***
            
            Базовые навыки программирования важны, так как без них вы не сможете работать в ИТ-сфере.
            
        - ***Предусмотрены ли каникулы в рамках этой базовой ИТ-программы?***
            
            Да, в рамках годовой программы линейки “Разработчик” предусмотрены каникулы. Они идут в качестве дополнения к основной программе обучения и зависят от того, когда вы начали учиться. Каникулы проходят раз в квартал и отображены в специальном графике.
            
        - ***Проходят ли на ИТ-программах линейки “Разработчик” интенсивы?***
            1. Да. В рамках наших ИТ-программ предусмотрен формат интенсивного обучения, который на мировом рынке называется “буткемп”. Буткемп может входить в вашу программу обучения или нет. В основном буткемп идет после блока общих инженерных специализаций и длится от двух недель до двух месяцев.
            2. В годовой программе обучения предусмотрено объединение двух блоков: “Специализация” и “Техническая специализация”.
        - ***Могу ли я осваивать дополнительные курсы во время прохождения основной программы обучения?***
            1. Да, в процессе прохождения основной программы вам будут предложены дополнительные курсы. Например, если вы учитесь на ИТ-линейке, вам могут предложить курс по маркетингу. Дополнительные курсы позволят вам расширить возможности получаемой профессии.
            2. В процессе обучения вам также будет предложено прочитать дополнительную литературу или посмотреть видео по вашей специальности. от чего вы можете отказаться.
        - ***В чем преимущества двухлетней и трехлетней программ обучения?***
            1. Те, кто пришел на двухлетнюю и трехлетнюю программы обучения, на первом году получают больше дополнительного контента, видов занятий, знаний, опыта, аттестаций и форматов обучения.
            2. Обучаясь на таких программах, у вас появляется больше возможностей достичь уровня Мидл, Мидл+, Сеньор и трудоустроиться во время обучения.
        - ***Почему важно начать работать во время прохождения обучения?***
            
            Полученные знания еще не делают вас профессионалом. Главное - применять их в работе, решая конкретные задачи.
            
        - ***Как оставаться в тренде информационных технологий?***
            
            Если в мире появится какая-то новая информационная технология, мы обязательно включим ее в арсенал наших ИТ-программ.
            
    - **Про анкеты с Александром Волчеком**
        - ***Как достичь своей Цели в процессе учебы?***
            
            Прежде чем достичь какой-либо Цели в процессе учебы, надо эту Цель сформировать. Поэтому одна из основных задач команды ГикБрэйнс - помочь вам сформировать собственную Цель во время обучения.
            
        - ***Как в ГикБрэйнс мне помогут сформировать собственную Цель в процессе обучения?***
            
            Чтобы помочь студенту сформировать собственную Цель в процессе обучения, в первую очередь нам важно понять, какой перед нами человек. Для этого мы проводим опросы, опираясь на следующие параметры: место жительства, возраст, наличие опыта, сложности в обучении, условия обучения, потребности, идеи и прочее. Эти данные позволяют нам подобрать наиболее подходящую для вас траекторию и усовершенствовать процесс образования.
            
        - ***В каком формате вы собираете данные о студентах?***
            
            Мы собираем данные о студентах как в формате анкетирования, так и в формате тестирования
            
        - ***Информацию какого характера вы собираете о студенте?***
            
            Эта информация разного характера. Например:
            
            - на каком компьютере работаете;
            - сколько компьютеров в семье;
            - вы женаты / замужем;
            - в какой стране и городе живете;
            - хотите ли переехать;
            - учатся ли на нашей платформе ваши друзья и знакомые;
            - нравится ли тот или иной преподаватель;
            - что устраивает или не устраивает в проверке практических заданий;
            - прочее.
        - ***Что нужно для успешного прохождения обучения на платформе ГикБрэйнс?***
            1. Довериться команде ГикБрэйнс
            2. Выделить время на учебу
            3. Посещать занятия
            4. Выполнять все задания
            5. Корректно сообщать обязательную информацию.
        - ***Как часто проходит сбор данных?***
            1. Первичный сбор данных происходит во время регистрации на сайте ГикБрэйнс
            2. В процессе обучения анкетирование и тестирование осуществляется, как правило, больше одного раза в месяц. Все зависит от того, на какую программу приходит студент.
            - ***Какие задачи решает анкетирование студентов?***
            1. Вы четче формулируете свою Цель: выбор профессии и специальности - выявление трудностей - планирование действий.
            2. Компания максимально совмещается с вами.
        - ***Проводится ли анкетирование на определение в карьере?***
            
            Да, компания ГикБрэйнс проводит анкетирование на определение в карьере. В этой анкете вы сообщаете нам:
            
            - в какую компанию хотите попасть:
                - в большую
                - в маленькую
                - в маленькую, состоящую из 10 человек
                - в маленькую, состоящую из 100 человек
            - в каком формате хотите работать:
                - только в офисе
                - только удаленно
                - удаленно с возможностью работать в офисе
                - в офисе с возможностью работать удаленно
            - в каком населенном пункте хотите работать
            - в каком коллективе хотите работать - там, где больше мужчин или женщин
            - в компании какого типа хотите работать: государственного, частного или смешанного
            - с каким руководителем хотите работать - мужского или женского пола
            - сколько дней в неделю хотите работать
            - сколько часов в день хотите работать
            - стажировку какого типа хотите проходить - платную или бесплатную
            - сколько раз готовы прийти на собеседование в одну компанию
            - когда хотите выйти на работу
            - какую зарплату хотите получать
            
            По результатам такого анкетирования вы формируете собственное видение освоения профессии, а мы, подстраиваясь под ваше видение, формируем подходящую траекторию обучения.
            
        - ***Могу ли я заранее узнать, в каком формате буду учиться?***
            
            Нет. Форматы обучения подбираются в зависимости от траектории, которая формируется на основе вашей учебной деятельности и результатов анкетирования. Поэтому траектория изменчива и заранее определить формат невозможно.
            
        - ***Что произойдет, если я сообщу некорректную информацию о себе?***
            
            Если вы сообщите о себе некорректную информацию, траектория обучения, основанная на этой информации, направит вас в неподходящий вектор. Вам станет сложнее учиться и осваивать профессию.
            
        - ***Помогут ли мне после прохождения обучения трудоустроиться в другой стране?***
            
            Если вы сконцентрированы на какой-то стране, мы постараемся организовать сотрудничество с местными компаниями. Чтобы это сделать, нам важно получить от вас корректную информацию.
            
        - ***Что делать, если я уже учусь, но еще не знаю, какая у меня Цель?***
            
            Если вы уже учитесь, но еще не сформировали Цель, подумайте, что, возможно, вы недостаточно сконцентрировались, отнеслись к вопросу обучения эгоистически или не критически.
            
        - ***Нужно ли учить все? Может, есть что-то лишнее?***
            
            В рамках образовательного процесса лишнего нет, а есть обязательное и дополнительное. Но это все нужно для успешного прохождения обучения. Есть то, что делать в рамках учебы вы обязаны, даже если окружение твердит обратное. Поэтому не сопротивляйтесь и доверьтесь нам, ведь в компании ГикБрэйнс трудятся специалисты высокого уровня.
            
    - **Про техническое оснащение с Ильнаром Шафигуллиным**
        - ***Какое “железо” нужно для обучения?***
            1. Для основного блока обучения, который длится 2 месяца подойдет любой компьютер, который у вас есть. Главное, чтобы вы могли создавать на нем документы, смотреть видео из интернета и выполнять бытовые задачи.
            2. Если вы выбрали направление “Программирование”, желательно, чтобы компьютер поддерживал более 8 Гб оперативной памяти.
        - ***Какая операционная система у меня должна быть?***
            1. До старта обучения подойдет любая ОС: Виндоус, Мак ОС и Линукс. Однако, выбрав направление программирования или тестирования, полезно освоить ОС Линукс.
            2. Важно, чтобы ОС компьютера не была старой. Оптимальна Виндоус 10 или более современные версии.
        - ***Какой мощностью должен обладать интернет?***
            
            Для прохождения обучения достаточно той мощности интернета, которая позволяет вам смотреть ролики на Ютуб в хорошем качестве.
            
        - ***Что дополнительно может понадобиться для занятий?***
            1. Так как занятия будут прохоить в Зум, через ВК-звонки и на подобных платформах, могут понадобиться микрофон и камера, которые часто уже встроены во многие компьютеры.
            2. Можно избежать покупки доп оборудования. Например, если занятия проходят в Зум, вы можете говорить, используя свой смартфон, а выполнять какие-то действия с компьютера.
        - ***Какое программное обеспечение потребуется?***
            
            Заранее никакого дополнительного программного обеспечения устанавливать не надо. Чаще всего в комментария к первой лекции уже есть ссылки на необходимые программы и инструкции, как эти программы установить и настроить.
            
        - ***Какие есть форматы обучения?***
            1. Есть 2 основных формата обучения - лекции и семинары.
            2. Лекции выходят по расписанию - сначала в прямом эфире, затем в виде видеозаписи. Прямая трансляция позволяет в реальном времени задать в комментариях интересующий вопрос и получить на него ответ от специального преподавателя, следящего за комментариями. В формате видеозаписи можно смотреть лекции в удобное время, делать это в ускоренном режиме, а также пересматривать отдельные фрагменты.
            3. Семинарские занятия проходят в режиме реального времени с живым преподавателем, который дает задание, проверяет, что вы делаете, и комментирует какие-то ваши вопросы. Под семинарские занятия выделяются три слота времени:
                1. выходные
                2. будни: дневное время
                3. будни: вечернее время
            4. Обязательно посещайте семинарские занятия. Люди, выполняющие задания на практических занятиях, как правило, лучше усваивают материал. На семинарских занятиях вы можете не только пообщаться с преподавателем вживую, задав интересующие вопросы, но и порешать вместе с одногруппниками заданные задачи.
        - ***Какие курсы входят в программу обучения?***
            1. На платформе ГикБрэйнс есть как обязательные курсы, так и необязательные. К первому типу относятся курсы, которые уже включены в ваше расписание. Вторые будут появляться в процессе вашего обучения, и вы сможете на них записаться.
            2. Если у вас мало свободного времени и вам сложно дается обучение, можете сконцентрироваться только на основных курсах. А если вы легко выполняете все задания, скорее всего, вам будут полезны и дополнительные курсы.
    - **Действия после регистрации с Марией Максимовой**
        - ***Что меня ждет после покупки курса?***
            1. Сразу после покупки курса вам придет письмо на электронную почту. Как правило, это почта, с которой вы зарегистрировались на платформе. В письме будет сказано, как зайти в личный кабинет, и указана ссылка на страницу “Мое обучение”.
            2. Далее в течение нескольких дней вам позвонит менеджер по адаптации. Это специальная команда менеджеров, которая занимается погружением студента в учебный процесс. Во время звонка менеджер по адаптации расскажет, как зайти на учебный сайт, поможет с подключением к обучению, предложит разные группы обучения, например, в будни утром или в будни вечером, и ответит на вопросы по программе.
            3. После того, как вы подключитесь к платформе и зайдете на нее, перед вами появится анкета студента. Заполнение этой анкеты обязательно. По результатам опроса анкеты мы узнаем Цель обучения студента, его предпочтения в программе, уровень знаний, и выстраиваем на основе этого подходящую траекторию обучения.
            4. Далее вы проходите подготовку. Подготовка - обязательная часть перед основным обучением. В части подготовки есть дополнительные курсы: по центру карьеры и по получению документов об окончании обучения.
        - ***Кто такой куратор? Какие функции он выполняет?***
            1. Куратор - это сотрудник ГикБрэйнс
            2. Технически он будет находиться в телеграм-чате с вами и другими одногруппниками
            3. Куратор может позвонить вам, если у вас возникли вопросы по обучению или вы перестали ходить на уроки и выполнять практические задания.
            4. Куратор помогает и по организационным вопросама, касающимся расписания или программы обучения.
            5. Куратор служит мостиком между студентом и продуктом. Часть вопросов куратор будет решать сам, а часть - приносить в продуктовую команду и искать решение вашего вопроса вместе с ней.
            6. Куратор также помогает студенту достичь образовательной Цели. Он (куратор) будет звонить вам, если вы перестанете сдавать практические задания.
        - ***Где мне общаться с одногруппниками?***
            1. Телеграм-чат. Это основная площадка для общения с одногруппниками. В нем также будет наш куратор.
            2. Платформа. На ней вы не будете общаться группой, но сможете видеть список своих одногруппников с аватарками и описанием и писать в личные сообщения каждому.
            3. Семинары. Они проходят онлайн. Во время семинаров открывается чат. В этом чате будут находиться и писать свои сообщения ваши одногруппники и куратор.
        - ***Если у меня что-то не работает? Кому писать?***
            1. Вы можете обратиться в поддержку. Это можно сделать через нашу платформу - иконка находится в правом нижнем углу.
            2. Вы также можете обратиться к куратору через телеграм-бот.
            3. Вы можете позвонить на нашу горячую линию, где сотрудники помогут вам либо передадут ваш запрос куратору. После этого куратор в скором времени перезвонит вам и решит проблему.
        - ***Кто такой Наставник? Какие функции он выполняет?***
            1. Наставник - это студент ГикБрэйнс, который успешно окончил один или несколько курсов.
            2. Наставники помогают с вопросами по обучению и с практическими заданиями.
            3. Если вы будете хорошо учиться, то тоже сможете стать Наставником. Однако наставничество - добровольное дело, поэтому наставники могут встречаться не во всех курсах. И если увидели наставника на своем курсе, то смело пишите ему.
        - ***Если мне не хватает занятий? Я могу получить больше дополнительной информации?***
            
            Конечно. Есть несколько вариантов:
            
            1. Можно перейти на более интенсивное обучение. Так, вы будете получать знания в 2 раза быстрее.
            2. Вы можете приобрести дополнительные консультации с преподавателем. Это консультации Р2Р. Можно приобрести как одну консультацию, так и несколько.
            
            Однако перед тем, как выбрать один из способов получения дополнительной информации, проконсультируйтесь с куратором.
            
    - **Навигация по платформе с Марией Максимовой**
        - ***Как войти на платформу ГикБрэйнс?***
            1. Сначала зайдите на платформу ГикБрэйнс. Можно через адресную строку или поисковик
            2. Далее авторизуйтесь. Для этого введите свою почту, с которой регистрировались на платформе и нажмите “Войти”.
        - ***Как заполнить свой профиль?***
            1. После авторизации вы попадаете на главную страницу сайта.
            2. Заполните свой профиль. Для этого наведите курсор на иконку, стоящую в правом верхнем углу, и нажмите “Профиль”. После перехода в профиль кликните на “Редактировать профиль”.
            3. Корректно укажите ФИО, чтобы мы подготовили для вас документы, а студенты и преподаватели правильно к вам обращались.
            4. Обязательно укажите свой населенный пункт. Во-первых, эта информация поможет связываться с вами и понимать, в каком часовом поясе вы находитесь. Во-вторых, мы часто организовываем мероприятия и зовем поучаствовать в них студентов, поэтому информация о вашем местонахождении пригодится и здесь.
            5. Рекомендуем указать свои данные в разделе “О себе”. Здесь вы можете написать о своих навыках и опыте. Этот раздел видят другие студенты, а также преподаватели, которым будет проще взаимодействовать с вами.
            6. Добавьте информацию о своих интересах.
            7. Обязательно добавьте свою аватарку, чтобы общение с одногруппниками и преподавателем было комфортным.
            8. После заполнения всех полей нажмите “Сохранить”.
        - ***Куда зайти, чтобы начать учиться?***
            1. Для начала перейдите на главную страницу и кликните на раздел “Мое обучение”. Этим разделом вы будете пользоваться чаще всего. Чтобы перейти в этот раздел, нажмите на иконку “Мое обучение” рядом с аватаркой справа или перейдите в меню слева и выберите этот раздел там.
            2. В разделе “Мое обучение” вы найдете 3 вкладки: Активные, Подготовка и 1 четверть.
                1. В первой вкладке, “Активные”, находятся те предметы, которые вы можете проходить уже сейчас.
                2. Во вкладке “Подготовка” - информация, с которой обязательно надо ознакомиться перед основным обучением. Важно пройти курсы “Регистрация в карьеру. Первый шаг” и “Итоговые документы об обучении - старт учебы”. На этих курсах вы узнаете, как получить документы об образовании, вступить в центр карьеры, а также о навигации по сайту.
                3. Во вкладке “1 четверть” - все курсы первого блока обучения. Перейдя в один из курсов, вы увидите:
                    1. по центру - через сколько начнется урок
                    2. слева - навигацию по урокам и их даты
                    3. справа - материалы к урокам, преподавателей, которым можно написать, и одногруппников.
        - ***Какие есть форматы курсов?***
            
            Есть 3 формата курсов: лекция, семинар, практикум. Название формата указано в названии курса.
            
        - ***Из чего состоит страница урока?***
            1. По центру, если курс уже начат, и вы опоздали на онлайн-лекцию, перед вами откроется ее запись.
            2. Справа - материалы, преподаватель, иногда даже наставник.
            3. Слева - навигация по урокам и практическое задание.
        - ***Куда загружать выполненное практическое задание?***
            
            Чтобы загрузить выполненное практическое задание, надо зайти в урок и слева выбрать “Практическое задание”. Перейдя по этой ссылке, в центре вы увидите описание практического задания и поле для его загрузки, ниже можно оставить комментарий. У каждого практического задания есть свой срок сдачи, который указывается над полем “Загрузить практическое задание”.
            
        - ***Что делать, если я не успеваю сдать практическое задание?***
            1. Если вы не успели сдать практическое задание в указанный срок, появится кнопка “Продлить дедлайн сдачи практического задания”. Такой возможностью можно воспользоваться только один раз.
            2. Если по каким-то причинам вы пропустили все сроки сдачи практического задания - пишите куратору. Куратор поможет вам решить этот вопрос.
        - ***Где найти расписание занятий?***
            
            Чтобы найти расписание занятий, перейдите на главную страницу и кликните на иконку календаря, находящуюся в правом верхнем углу. Зайдя в этот календарь, вы увидите:
            
            - по центру - расписание будущих занятий
            - слева - курсы, которые можно отобразить в расписании или убрать
            - справа - навигация по урокам, кликнув по которым, можно перейти в раздел “Мое обучение” внутри выбранного урока.
        - ***На сколько месяцев планируется расписание?***
            
            Расписание, как правило, планируется на 2 месяца вперед.
            
        - ***Куда обращаться, если возникнут вопросы по платформе, обучению и прочему?***
            
            Если у вас возникнут вопросы, например, по платформе или обучению, обратитесь в поддержку. Для этого перейдите на главную страницу, кликните на специальную иконку в правом нижнем углу, и перед вами появится чат поддержки.
            
- **Урок 3. Вопрос - Ответ. Анкетирование в учебном процессе**
    
    **Основные тезисы:**
    
    1. Чтобы достичь учебной Цели, сперва эту Цель нужно сформулировать. Помочь с этим - одна из основных задач команды ГикБрэйнс.
    2. Чтобы помочь сформировать учебную Цель, нужно лучше узнать студента. Для этого мы проводим опросы и тестированияи.
    3. В опросах мы спрашиваем о месте жительства, возрасте, семейном положении и образовательном опыте: как вам преподаватели, практические задания и платформа, с какими сложностями вы столкнулись, а что было легко. Все это помогает выстроить или скорректировать траектрорию обучения.
    4. Первый раз мы проводим анкету во время регистрации на платформе ГикБрэйнс. Затем анкетирование, как правило, проводится чаще раза в месяц.
    5. Если вы сообщите некорректную информацию о себе, траектория обучения направит вас в неподходящий вектор. Учиться и осваивать профессию станет сложнее, поэтому на вопросы анкеты нужно отвечать честно.
    6. На этапе определения в карьеру тоже есть анкетирование. Мы узнаем, в какой компании и в каком формате вы хотите работать, какую зарплату хотите получать. По результатам вы сформируете свое видение профессии и процесса ее освоения, а мы - траекторию обучения.
    7. Если вы хотите переехать и устроиться на работу в конкретной стране, мы постараемся организовать сотрудничество с местными компаниями. Чтобы это сделать, нам важно получить от вас корректную информацию.
    8. Чтобы обучение было успешным, доверьтесь нам и сделайте его частью своей рутины. Выделите время, посещайте все занятия и выполняйте все задания.
    9. В образовательном процессе нет ничего лишнего, только обязательное и дополнительное. Есть то, что в рамках учебы вы обязаны делать, даже если окружение твердит, что это сложно или не потребуется. На самом деле потребуется.
- **Урок 4. Ильнар Шафигуллин. Техническое оснащение**
    
    **Основные тезисы**
    
    1. Для прохождения основного блока обучения, который длится 2 месяца, подойдет любой компьютер, позволяющий смотреть ролики на Ютуб, создавать какие-то документы в Офисе, работать в базовых программах и выполнять бытовые задачи.
    2. Выбрав в дальнейшем направление “Программирование”, желательно, чтобы компьютер поддерживал более 8 Гб оперативной памяти, потому что современные среды разработки достаточно требовательны, с этой точки зрения. Однако заранее модернизировать свой компьютер не надо.
    3. До старта обучения подойдет любая ОС, будь то Виндоус, Мак ОС или Линукс. Однако, выбрав направление программирования или тестирования, полезно освоить операционную систему Линукс.
    4. Некоторые сложности могут возникнуть, если ОС устарела. Например, оптимальна Виндоус 10 или более современные версии, в этом случае все будет работать, как у преподавателя.
    5. Для прохождения обучения достаточно той мощности интернета, которая позволяет смотреть ролики на Ютуб в хорошем качестве.
    6. Т.к. занятия будут проходить в Зум, через ВК-звонки и на подобных платформах, может понадобиться микрофон и камера, которые часто уже встроены во многие девайсы. С этим оборудованием вы сможете общаться с одногруппниками или задавать голосом вопросы преподавателю. Однако, если желания общаться и задавать вопросы нет, такие платформы, как Зум, позволяют вести беседу без видео и звука.
    7. Заранее никакого дополнительного ПО устанавливать не надо - чаще всего в комментариях к первой лекции уже есть ссылки на необходимые программы и инструкции, как это установить или настроить.
    8. Есть 2 основных формата обучения - лекции и семинары.
    9. Лекции выходят по расписанию - сначала в прямом эфире, затем в виде готовой видеозаписи. Прямая трансляция позволяет в реальном времени задать в комментариях интересующий вопрос и получить на него ответ от специального преподавателя, следящего за комментариями. В формате видеозаписи можно смотреть лекции в удобное время, делать это в ускоренном режиме, а также пересматривать отдельные фрагменты.
    10. Семинарские занятия проходят в режиме реального времени с живым преподавателем, который дает задание, проверяет, что вы делаете, и комментирует какие-то ваши вопросы. Под семинарские занятия выделяются три слота времени: выходные, в будни вечером или будни днем.
    11. Обязательно посещайте семинарские занятия. Люди, выполняющие задания на практических занятиях, как правило, лучше понимают материал. На семинарских занятиях вы можете не только пообщаться с преподавателем вживую, задав интересующие вопросы, но и прорешать вместе с одногруппниками заданные задачи.
- **Урок 5. Мария Максимова. Действия после регистрации**
    
    **Основные тезисы и рекомендации**
    
    1. Первые шаги после покупки курса: получение письма с инструкциями, общение с менеджером, заполнение анкеты, прохождение подготовки к обучению.
    2. Обратите внимание на дополнительные курсы: один от центра карьеры, другой посвящен получению документов о завершении обучения. Их лучше пройти перед стартом основной программы.
    3. Куратор - сотрудник ГикБрэйнс, который помогает решать организационные вопросы и помогает вам в достижении образовательной цели.
    4. Вы можете связаться с куратором в Телеграм-чате группы или через личные сообщения. Если вы пропускаете занятия или не сдаете домашние задания. куратор может позвонить вам, чтобы узнать, все ли в порядке и нужна ли помощь.
    5. Телеграм - основная площадка общения с одногруппниками и куратором.
    6. Во время онлайн-семинаров вы можете общаться с другими студентами и преподавателем в чате трансляции.
    7. Для решения любых вопросов по обучению вы можете:
        1. Написать в поддержку через всплывающий чат в правом нижнем углу сайта
        2. Обратиться к куратору
        3. Позвонить на горячую линию, где ваш вопрос примут и передадут вашему куратору.
    8. Наставник - студент ГикБрэйнс, успешно окончивший курс на платформе. Наставниками становятся добровольно, поэтому они встречаются не на всех курсах. Однако, если нашли такого, - можете смело писать ему и обращаться за помощью.
    9. Вы можете перейти на более интенсивное обучение, чтобы получать знания в 2 раза быстрее. Также можно приобрести персональные консультации с преподавателем.
- **Урок 6. Навигация по платформе с Марией Максимовой**
    
    **Основные тезисы и рекомендации**
    
    1. Заполните профиль пользователя, чтобы сотрудники ГикБрэйнс могли готовить для вас документы, приглашать вас на мероприятия и в целом быстрее понимать ситуацию при решении ваших вопросов. Кроме того, заполненные профили способствуют знакомству одногруппников.
    2. Для заполнения профиля наведите курсор мыши на иконку - аватар пользователя в правом верхнем углу, - в меню выберите Профиль и на странице, которая после этого откроется, нажмите кнопку Редактировать профиль. После заполнения формы нажмите Сохранить.
    3. В разделе “Мое обучение” отображаются приобретенные вами продукты. На панели каждого продукта можно видеть вкладки с курсами: “Активные”, “Подготовка”, а также курсы основной программы с разбивкой по четвертям.
    4. Перед стартом основного обучения обязательно пройдите Подготовку. Начните с курсов Регистрация в карьеру. Первый шаг. и Итоговые документы об обучении - старт учебы.
    5. Можно и нужно писать преподавателям на платформе. Для этого щелкните на иконке с фото преподавателя, после чего откроется окно обмена сообщениями.
    6. Курсы бывают разных форматов: лекции, семинары, практикумы. Формат курса можно видеть рядом с названием курса в вашей программе обучения.
    7. Если вы не успели на урок онлайн, вы всегда можете посмотреть его в записи. Для этого нужно внутри курса выбрать необходимый урок.
    8. Практические задания к урокам можно найти в оглавлении курса справа. Если вы не сдадите ДЗ вовремя, в форме отправки задания появится кнопка для продления срока сдачи. Воспользоваться ею можно только один раз. Если снова не успеете, - напишите своему куратору.
    9. Календарь с расписанием предстоящих занятий доступен по нажатию соответствующей иконки в правой верхней части экрана (если вы уже авторизованы на сайте под своей учетной записью).
    10. Все возникающие вопросы по платформе и обучению вы можете задавать специалистам поддержки в чате прямо на платформе. Для этого нажмите на цветную иконку в правом нижнем углу любой страницы сайта.
- 

### Приветственное обращение А. Волчека к студентам Geek. 02.08.2023

- **Урок 1. Приветственное обращение А. Волчека к студентам Geek**
    
    Всем привет! Меня зовут Александр Волчек. Поздравляю вас со стартом программы обучения Гик. Эта программа - наше ядро. Это наверное самая крутая программа, которая сейчас есть на рынке по ИТ. Мы вместе с вами будем 36 месяцев и на протяжении их мы будем наблюдать как вы из новичка или человека, у которого абсолютно отсутствуют знания в ИТ станете профессионалом. Получите невероятные компетенцию, знания для того, чтобы на рынке вы были настоящим профессионалом. Не просто вышли на работу, потому что мы уверены, что каждый человек, который у нас учится, не просто уверены, а, мы гарантируем, что он будет работать по ИТ-профессиям. А чтобы вы не просто работаете по ИТ-профессиям, а вы еще получили фундаментальную базу, которая позволяет в жизни адаптироваться под разные страны, компании, специализации, отрасли, технологии, под ваши запросы и под запросы рынка.
    
    Мы видим, как рынок ИТ невероятно меняется. Появляется много различных вакансий, специализаций. Он будет меняться следующее десятилетие
    
    Программа Гик состоит из трех основных блоков: 1 - Разработчик (12 мес), 2 - Диджитал мастер (12 мес), 3 год - программа Гик.
    
    Что важно, что с самого начала уже обучаясь на первой программе вы будете получать спец материалы для программы Гик, как будто вы на ней находитесь.
    
    В целом, специально программа сделана так, чтобы человек лучше разобрался кто такой программист, кто такой разработчик. Для себя самого совместил насколько это его тематика, больше вошел в эти основы ИТ, программирования, аналитики, тестирования и тд. Поэтому параллельно основным темам, мы будем рассказывать об этих специализациях. По истечении 9 месяцев человек уже проходит углубленное изучение по этой специализации. Там есть много общих тем, порядка 60-70% которые пересекаются для всех специализаций. И есть темы, углубленные для конкретных специализаций. Это позволяет человеку через год сделать миграцию в любую специализацию…
    
    - **Специализации**
        - **Программист. Кто такой программист**
            
            Программист - это представитель цифровой профессии, связанной с разработкой программ и использованием компьютерной техники. Он пишет код и занимается отладкой программ на определенном языке программирования.
            
            Вы получите фундаментальные знания в программировании, погрузитесь в выбранную технологию, изучите конкретные стеки и разберетесь на практике, как они работают.
            
            **Кем вы сможете работать после обучения**
            
            Программистом. Программист применяет принципы программной инженерии для проектирования, разработки, обслуживания, тестирования и оценки компьютерного программного обеспечения.
            
            **С какими понятиями связана работа программиста**
            
            - Алгоритмы
            - Паттерны
            - Фреймворк
            - Структуры данных
            - Потоки данных
            - Виртуализация
            - Протоколы передачи данных
            - Архитектура приложений и сервисов
            - и другие
            
            **Какие бывают виды и типы программирования**
            
            - Frontend
            - Backend
            - Fullstack
            - Низкоуровневое
            - Высокоуровневое
            - Для мобильных приложений
            - Для оборудования
            - Для десктоп-приложений
            - Для веб-приложений
            - Для умных устройств
            
            **Какие технологии и инструменты программист использует в работе**
            
            - Java
            - Python
            - JavaScript
            - PHP
            - C++
            - C
            - TCP/IP
            - SQL
            - NoSQL
            - Linux
            - Git
            - HTML/CSS
            - Docker
            - Allure
            - Selenium
            - JUnit
            - ANNs
            - GAN
            - и другие
        - **Тестировщик. Кто такой тестировщик?**
            
            Тестировщик ищет ошибки и уязвимости в программах, проверяет их качество и моделирует ситуации, которые могут возникнуть во время их использования.
            
            Вы получите фундаментальные знания в тестировании, поймете тонкости тестирования в выбранной технологии, изучите необходимый инструментарий и разберетесь на практике, как с ним работать.
            
            **Кем вы сможете работать после обучения?**
            
            Тестировщик. Проверяет приложения на ошибки с помощью моделирования ситуаций, которые могут возникнуть у пользователя во время работы
            
            **Какие задачи решает тестировщик?**
            
            - Проверяет работу сайтов и приложений
            - Ищет и воспроизводит баги
            - Заводит заявки на исправление ошибок
            - Составляет отчеты о проделанной работе
            - Придумывает тест-планы
            
            **С какими понятиями связана работа тестировщика?**
            
            - Тестовая документация
            - Unit-тесты
            - Чек-листы
            - Локализация дефектов
            - Тест-аналитика
            - Тест-менеджмент
            - Отчеты по тестированию
            - Тест-кейсы
            - Тестирование веб-приложений
            - Тест-планы
            
            **Какие бывают виды и уровни тестирования?**
            
            - Ручное тестирование
            - Функциональные тесты
            - Автоматизированное тестирование
            - Приемочное тестирование
            - Сквозные тесты
            - Интеграционное тестирование
            - Нагрузочное тестирование
            - Модульные тесты
        - **Аналитик. Кто такой аналитик?**
            
            Аналитик собирает, изучает и интерпретирует данные. Он знает, как превратить информацию в понятные отчеты и графики, и может сделать выводы на ее основе. Помогает бизнесу принимать решения и планировать развитие.
            
            Вы научитесь применять разные способы и методы аналитики в рамках выбранной технологии, поймете, какие инструменты в какой момент времени использовать, как правильно работать с отчетностью в пользу для бизнеса.
            
            **Кем вы сможете работать после обучения?**
            
            Аналитик. В разработке сайта, приложения или другого ИТ-продукта участвуют две стороны: директор и технические специалисты. Бизнес-аналитик - это посредник между ними. Его задача - выяснить потребности директора, обсудить их с программистами и предложить решение, которое удовлетворит потребности рынка, а также всех участников разработки.
            
            **Какие проекты делает аналитик?**
            
            - Анализирует данные
            - Ищет закономерности и ошибки в данных
            - Предлагает улучшения на основе данных
            - Визуализирует данные
            - и многое другое
            
            **Какие бывают аналитики?**
            
            Профессия аналитика бывает очень разной. В зависимости от отрасли задачи меняются.
            
            - Игровой аналитик
            - Продуктовый аналитик
            - Финансовый аналитик
            - Бизнес-аналитик
            - HR-аналитик
            - Маркетинговый аналитик
            - BI-аналитик
            
            **Какие технологии и инструменты программист использует в работе?**
            
            - Excel
            - Google Analytics
            - AppMetrica
            - Power BI
            - Tableau
            - Яндекс-Метрика
            - и многие другие
        - **Проджект-менеджер. Кто такой проджект-менеджер?**
            
            Проджект-менеджер превращает идеи заказчика в задачи для команды разработки. Он организует рабочие процессы, распределяет обязанности, ведет переговоры с клиентами и принимает решения для оптимизации процесса создания продукта.
            
            Вы научитесь управлять проектами в выбранном направлении, поймете, какие методы использовать, чтобы проекты выполнялись в срок, качественно и без нагрузки на команду.
            
            **Кем вы сможете работать после обучения?**
            
            Проджект-менеджер раскладывает цели компании на задачи и работает над тем, чтобы они выполнялись в срок. Для этого он следит за дедлайнами, готовит отчеты, может формировать бюджет
            
            **Какие задачи решает проджект-менеджер?**
            
            - Составляет план проектов
            - Распределяет задачи по командам
            - Контролирует исполнение задач
            - Ищет подрядчиков
            - Управляет финансовыми потоками
            - Составляет отчеты о проделанной работе
            
            **С какими понятиями связана работа проджект-менеджера?**
            
            - Основы программирования
            - Контроль версий
            - Управление командой
            - Веб-программирование
            - Стандарты менеджмента
            - Составление проектной документации
            - Жизненный цикл проекта
            - Scrum
            - Kanban
            - Agile
            
            **Какие технологии и инструменты проджект-менеджер использует в работе?**
            
            - HTML
            - CSS
            - Tilda
            - Jira
            - Confluence
            - Notion
            - Trello
            - Miro
            - Figma
            - и многие другие
        - **Продакт-менеджер. Кто такой продакт менеджер?**
            
            Опытный продакт-менеджер отвечает за развитие целого приложения или его части, например, гео-карты внутри него
            
            Типичные задачи продакта - расставить приоритеты задач для разработки, найти точки роста продукта и исследовать рынок.
            
            Вы поймете весь цикл разработки продукта и научитесь запускать свои собственные в выбранной технологии. Поймете, как правильно выстроить работу разных специалистов, чтобы пользователи получали новые продукты вовремя и в хорошем качестве.
            
            **Кем вы сможете работать после обучения?**
            
            Продакт-менеджер отвечает за создание новых продуктов, анализ рынка, ассортиментную политику, ценообразование, продвижение продукта, планирование KPI и формирование требований к продукту.
            
            **Какие задачи решает продакт-менеджер?**
            
            - Анализирует рынок и ЦА
            - Придумывает новый продукт
            - Управляет финансовыми ресурсами
            - Управляет командой
            - Развивает каналы продаж
            - Тестирует маркетинговые гипотезы
            - Управляет жизненным циклом продукта
            - Выстраивает стратегии продвижения продукта
            
            **С какими понятиями связана работа продакт-менеджера?**
            
            - Просчет бизнес-моделей
            - Аналитика
            - Бизнес-кейсы
            - Привлечение инвестиций
            - MVP
            - Жизненный цикл продукта
            - Финансы
            - Тестирование гипотез
            - Управление командой
            - Основы программирования
            - Unit-экономика
            - Scrum
            - Kanban
            - Agile
            
            **Какие технологии и инструменты продакт-менеджер использует в работе?**
            
            - Tilda
            - Figma
            - Miro
            - Jira
            - Notion
            - Confluence
            - Trello
            - и многие другие

### Факультативы

### Git. 31.08.23 -

[**[Git. Базовый курс](https://gb.ru/chapters/7843#) 31.08.23 - 16.09.23**](https://www.notion.so/Git-31-08-23-16-09-23-ebb1b90dd8254bb3a8197742f3ff206e?pvs=21)

[**[Руководство по Git на русском](https://git-scm.com/book/ru/v2)**](https://www.notion.so/Git-1c5cc01d92e9413f8dd66a00c046415b?pvs=21)

[************************************************************************************************************************************Книга. Git для профессионального программиста. С. Чакон, Б. Штрауб 18.09.23 -************************************************************************************************************************************ ](https://www.notion.so/Git-18-09-23-4428a62997304e04a4482ead7c83ec65?pvs=21)

- **[Ссылки](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)**

### Алгоритмы и Структуры данных

- **************************Общие вопросы**************************
    - ******Зачем изучать алгоритмы?******
        - Алгоритмизация превращает мысли и рассуждения в последовательность действий.
        К одному и тому же результату могут приводить разные действия - поэтому составление алгоритма это еще и поиск наиболее эффективного (в данный момент) набора действий.
        - Зная фундаментальные алгоритмы, я смогу виртуозно использовать стандартные библиотеки языков программирования, уверенно оценивать ожидаемое время работы программы, читать и понимать код, написанный другими программистами
        - Алгоритмизация важна и для “общего развития”: она помогает планировать свои действия в реальной жизни. 
        Почти все, что нас окружает, можно описать алгоритмически.
    - **************************************Что такое алгоритм?**************************************
        
        **********************************************************************************************************************************************************************************************************************************Алгоритм - это последовательность указаний, которые нужно исполнить, чтобы решить четко сформулированную задачу.********************************************************************************************************************************************************************************************************************************** Мы описываем задачи, исходя из ввода и вывода, и алгоритм становится способом превращения ввода в вывод. 
        При этом формулировка задачи должна быть точной и недвусмысленной - это помогает избежать неверной интерпретации.
        
- **********Видео**********
- **********Книги**********
    
    [**Книга. Адитья Бхаргава. “Грокаем алгоритмы”**](https://www.notion.so/0d7694e113aa41418f6b7fb8950929f0?pvs=21)
    
    [************************************************************Книга. Томас Кормен. “Вводный курс. Алгоритмы”************************************************************](https://www.notion.so/a24cfd7e26bb4d4b81692888e8c90ed8?pvs=21)
    
- **********Курсы**********
    - **[Основы алгоритмов](https://academy.yandex.ru/handbook/algorithms) - Хендбук от Академии Яндекса**
        
        *Начало 07.11.2023 - 1% в день. Закончим 17.02.2024*
        
        - ******Зачем изучать алгоритмы?******
            - Алгоритмизация превращает мысли и рассуждения в последовательность действий.
            К одному и тому же результату могут приводить разные действия - поэтому составление алгоритма это еще и поиск наиболее эффективного (в данный момент) набора действий.
            - Зная фундаментальные алгоритмы, я смогу виртуозно использовать стандартные библиотеки языков программирования, уверенно оценивать ожидаемое время работы программы, читать и понимать код, написанный другими программистами
            - Алгоритмизация важна и для “общего развития”: она помогает планировать свои действия в реальной жизни. 
            Почти все, что нас окружает, можно описать алгоритмически.
        - **************************************Что такое алгоритм?**************************************
            
            **********************************************************************************************************************************************************************************************************************************Алгоритм - это последовательность указаний, которые нужно исполнить, чтобы решить четко сформулированную задачу.********************************************************************************************************************************************************************************************************************************** Мы описываем задачи, исходя из ввода и вывода, и алгоритм становится способом превращения ввода в вывод. 
            При этом формулировка задачи должна быть точной и недвусмысленной - это помогает избежать неверной интерпретации.
            
            Кассиру необходимо сдать сдачу 77 центов монетами номиналом 25, 10, 5 и 1 цент
            
            - Входные данные: Целое число money и массив из d номиналов 
            c = (c1,c2, … , cd) в порядке убывания (c1 > c2 > … > cd)
            - Выходные данные: Список из d целых чисел i1, i2, … id, в котором 
            c1*i1 + c2*i2 + … + cd*id = money и i1 + i2 + … + id как можно меньше.
            
            Кассиры по всему миру решают эту проблему с помощью простого алгоритма:
            
            ```csharp
             Change(money, c, d):
            	**while** money > 0:
            		coin = ... // монета с самым большим номиналом, который не превышает money дать монету с номиналом coin клиенту
            		money = money - coin
            **************Change:**************
            Change(mone, c, d):
            	**for** k in **range**(1, d + 1)
            		i_k = floor(money / c[k]) // наибольшее количество монет номинала c[k]
            		// дать i_k монет с номиналом c[k] клиенту
            		money = money - c[k] * i_k
            ```
            
            ```csharp
            BruteForceChange(money, c, d):
            	smallestNumberOfCoins = ∞
            	for each combinations of coins (i_1, ... i_d) // (money/c[1], ... , money/c[d])
            		valueOfCoins = ∑ i_k * c_k // k d
            		if valueOfCoins = money:
            			numberOfCoins = ∑ i_k // 
            			if numberOfCoins < smallestNumberOfCoins:
            				smallestNumberOfCoins = numberOfCoins
            				change = (1_1, i_2, ... , i_d)
            	return change
            ```
            
            ```csharp
             
            ```
            
            ```csharp
             
            ```
            
    - **[Анализ данных в социальных науках](https://academy.yandex.ru/handbook/data-analysis) - Хендбук от Академии Яндекса**
        - **[Командная строка](https://academy.yandex.ru/handbook/data-analysis/article/pandan-instrumenty-analitika-dannyh-komandnaya-stroka)**
            
            Командная строка - очень простой, но очень мощный инструмент, которым пользуются аналитики данных, программисты и многие другие ИТ-специалисты.
            
            - **********************************************************Цепочки преобразований данных**********************************************************
                
                У нас есть огромное количество “строительных блоков” - готовых компонентов, программ, команд, на основе которых можно писать сценарии. Мы можем настроить их совместную работу таким образом, чтобы выстраивался конвейер.
                Представим такую задачу: нам нужно распознать тексты, которые написаны на мемах в интернете, чтобы подсчитать среднее число слов в них.
                Конечно, можно посчитать их вручную - но это нереально, тут так и просится автоматизация.
                Для этого нужно:
                
                1. Создать папку для работы
                2. Скачать мемы, которые мы хотим распознать (поскольку задача учебная, ограничимся только одним)
                3. Конвертировать изображение в подходящий для распознавания формат
                4. Извлечь текст со страницы
                5. Посчитать количество слов
                
                Для каждого из этих пунктов есть готовая программа с интерфейсом командной строки
                
                1. ************************************************Создать папку для работы************************************************
                Создадим папку, чтобы потом быстро удалить результаты наших опытов. Сделать это очень просто:
                **************mkdir Data - cd Data (**************сразу перейдем в нее).
                2. ******Скачать мемы, которые мы хотим распознать.******
                Нам потребуется программа **wget**, которая в самом простом случае принимает 1 параметр - ссылку на файл. Она уже установлена 
                `wget -O 01.webp https://img-9gag-fun.9cache.com/photo/aVbxpod_460swp.webp`
                3. **********************Извлечь изображение со страницы**********************
                Преобразуем картинку в более привычный нам формат. Программа называется **[ImageMagik](https://imagemagick.org/script/download.php#windows)**. 
                Указываем два параметра: имя исходного файла и имя нового файла, куда сохранять изображения:
                `magick 01.webp 01.png`
                4. **Распознать текст на картинке**
                Здесь нам поможет система распознавания текстов [Tesseract](https://ru.wikipedia.org/wiki/Tesseract) - **********************************************tesseract 01.png 01 -********************************************** Указываем исходный файл и текстовый файл, куда сохраним все содержимое. В данном случае - 01.txt. Расширение txt не пишется в параметре команды.
                Откроем этот файл в блокноте - ************************************notepad.exe 01.txt************************************
                5. ******************************Посчитать слова******************************
                Это тоже очень просто. Тут мы сначала открываем файл, а потом считаем слова в нем:
                ******************************************************Get-Content 01.txt | Measure-Object -Word******************************************************
                6. ****************************Удаление папки****************************
                Вернемся в исходную папку и удалим папку с результатами нашего эксперимента:
                **************************Remove-Item -path Data -recurse**************************
                7. **********************Итоговый сценарий для одного изображения**********************
                ********************************wget -0 01.webp******************************** https://img-9gag-fun.9cache.com/photo/aVbxpod_460swp.webp
                **magick 01.web 01.png
                tesseract 01.png 01
                Get-Content 01.txt | Measure-Object -Word**
                Мы практически один в один воплотили изначальную идею:
                1. Скачать картинку
                2. Распознать текст на картинке
                3. Посчитать число слов
            - **************************Что мы узнали**************************
                - Сценарии автоматизации не сильно больше объяснения на русском языке
                - Мы оперируем высокоуровневыми программами, например Tesseract
                - Результаты действия одной программы передаются следующей - так и получается цепочка преобразований.
                - Все приведенные программы бесплатны и свободны, что дополнительно приятно.
                
                Конечно, это только первый шаг - чтобы выполнить первоначальную задачу, нам потребовалось бы повторить эти действия для всех мемов, которые мы можем найти в интернете.
                
        - **[О данных и информации](https://academy.yandex.ru/handbook/data-analysis/article/o-dannyh-i-informacii)**
    - **[Учебник по машинному обучению](https://academy.yandex.ru/handbook/ml) - Хендбук от Академии Яндекса**
        - **********************************Машинное обучение**********************************
            
            **********************Машинное обучение********************** - это наука, изучающая алгоритмы, автоматически улучшающиеся благодаря опыту.
            
            ****************************************************************************************************************************************Задачи, которые крайне трудно запрограммировать и алгоритмизировать:****************************************************************************************************************************************
            
            - Перевести текст с одного языка на другой
            - Диагностировать болезнь по симптомам
            - Сравнить, какой из двух документов в интернете лучше подходит под данный поисковый запрос
            - Сказать, что изображено на картинке
            - Оценить, по какой цене удастся продать квартиру.
            
            У всех этих задач есть много общего.
            Во-первых, их решение можно записать как функцию, которая отображает **объекты** или **примеры (samples) в предсказания (targets)**.
            Во-вторых, вряд ли у этих зада есть единственно верное, идеальное решение. 
            В-третьих, у нас есть много примеров правильных ответов, а примеры неправильных ответов, как правило, не составляет труда сконструировать.
            Мы назовем функцию, отображающую объекты в предсказания,  - **моделью**, а имеющийся у нас набор примеров - **обучающей выборкой** или **датасетом**. Обучающая выборка состоит из:
            
            - **объектов** (к примеру, скачанные из интернета картинки, истории больных, активность пользователей сервиса и тд)
            - и **ответов** (подписи к картинкам, диагнозы, информация об уходе пользователей с сервиса), которые мы также будем иногда называть **таргетами**.
            
            **********************************Постановка задачи**********************************
            
            Описанные выше задачи являются примерами задач **обучения с учителем (supervised learning)**, т.к. правильные ответы для каждого объекта обучающей выборки заранее известны. Задачи обучения с учителем делятся на следующие виды в зависимости от того, каким может быть множество У всех возможных ответов (таргетов): 
            
            1. Y = R Y = R^M - **регрессия**. Примерами задач регрессии является предсказание продолжительности поездки на каршеринге, спрос на конкретный товар в конкретный день или погода в вашем городе на завтра (температура, влажность и давление - это несколько вещественных чисел, которые формируют вектор нашего предсказания).
            2. Y = {0, 1} - **бинарная классификация**. Например, мы можем предсказывать, кликнет ли пользователь по рекламному объявлению, вернет ли клиент кредит в установленный срок, сдаст ли студент сессию, случится ли определенное заболевание у пациента, есть ли на картинке банан.
            3. Y = {1, … , K} - **многоклассовая (multiclass) классификация**. Например, определение предметной области для научной статьи (математика, биология, психология и т.д.)
            4. Y = {0, 1}^K - **многоклассовая классификация с пересекающимися классами (multiabel classification)**. Например, задача автоматического проставления тегов для ресторанов (логично, что ресторан может одновременно иметь несколько тегов).
            5. Y - конечное упорядоченное множество - **ранжирование**. 
            Основным примером является задача ранжирования поисковой выдачи, где для любого запроса нужно отсортировать все возможные документы по релевантности этому запросу; при этом оценка релевантности имеет смысл только в контексте сравнения двух документов между собой, ее абсолютное значение информации не несет.
            
            Интерес представляют и задачи **порождения новых объектов** то есть генерации правдоподобных объектов, из ничего или на основе уже существующих.
            С помощью такой модели также можно научиться увеличивать разрешение изображения и применять любимые всеми маски в Snapchat, Instagram. 
            
            Есть и относительно небольшой класс задач, относящихся к **обучению без учителя (unsupervised learning)**, - это задачи, для которых нам известны только данные, а ответы неизвестны или вообще не существуют. 
            Более того, часто поиск “правильных” ответов не является самоцелью. 
            Классическим примером обучения без учителя является кластеризация - задача разделения объектов на группы, обладающие некоторыми неизвестными нам, но, как мы в глубине души надеемся, интерпретируемыми свойствами.
            Примером может служить кластеризация документов из электронной библиотеки по темам или кластеризация новостей с целью выявления крупных сюжетов.
            
            Бывают и другие виды (и даже парадигмы) машинного обучения, так что если вы встретите задачу, которую никак не получается отнести к одному из перечисленных выше типов, не расстраивайтесь.
            
            **Вопрос на подумать**. Определите тип следующих задач. По возможности попробуйте отнести их к более узким видам задач:
            
            - 1. Предсказание курса евро к доллару на следующий день
                
                Это задача регрессии. 
                Модель предсказывает вещественное число, пусть и с небольшим количеством знаков после запятой.
                
            - 2. Стилизация текста.
            Например, перевод на бюрократический язык: “Пиппина и Мерри похитили!” → “Граждане Тук, Перегрин Паладинович, 2990 года рождения, и Брендибак, Мериадок Сарадокович, 2982 года рождения, были похищены неустановленными лицами”.
                
                Это задача генерации новых объектов на основе уже существующих
                
            - 3. Детектирование котиков на изображении
                
                В зависимости от того, для чего мы детектируем котиков, это может быть задача регрессии (предсказание координат вершин прямоугольника, в котором находится котик) или классификации (если нас просто интересует, есть котик или нет).
                
            - 4. Обучение робокота запрыгивать на стол из произвольной позы.
                
                Эту задачу можно решать по-разному. Например, создав физическую модель движения робокота и рассчитав оптимальную последовательность движений. 
                Если мы все-таки хотим решать ее с помощью машинного обучения, то можно поступить следующим образом. 
                Создадим компьютерную симуляцию (чтобы не ломать настоящего робота) и модель, которая будет в каждый момент на основе конфигурации сочленений, высоты от пола, расстояния до стола, фазы Луны и других важных параметров предсказывать, как нужно дальше поворачивать лапы, изгибать спину кота и тд. 
                Эту модель будем прогонять в симуляции, так или иначе меняя ее в зависимости от того, насколько удчано робот справляется со своей задачей. Такая парадигма называется **обучением с подкреплением (reinforcement learning)**, и о ней мы будем говорить дальше. 
                
            - 5.  Поиск наборов товаров, которые посетители супермаркета часто покупают вместе.
                
                Это задача обучения без учителя.
                
            - **Вопрос на подумать**. Ранжирование - это задача с таргетом из конечного упорядоченного множества (1, … К). Казалось бы, ее запросто можно было бы рассматривать как задачу классификации на К классов или задачу регрессии. В чем же проблема? Почему так не делают?
                
                Для решения зада ранжирования обычно строят модель, предсказывающую некоторое вещественное число, по которому затем сортируют объекты, - так почему бы не считать ее регрессией?
                Дело в том, что функции потерь и метрики в этой задаче совсем другие. Нам неважно, какие именно вещественные числа мы предсказываем. Мы просто хотим, чтобы более релевантным объектам сопоставлялись числа побольше
                
                Задача “предскажите 10 самых релевантных объектов” непохожа на задачу классификации. Мир меняется, появляются новые объекты, и если к нам в руки попадет объект более релевантный, чем текущий топ-1, все номера позиций поедут, и выученное нами соответствие объектов и номеров можно будет выкидывать на помойку.
                
            - **********************************Критерии качества**********************************
                
                По обучающей выборке мы хотим построить модель предсказания которой достаточно хороши. Что вообще значит “достаточно хороши”?
                Не понимая, чего мы хотим добиться, мы не предложим хорошего решения, поэтому нужно внимательно отнестись к выбору **метрик качества.**
                Например, мы хотим:
                
                - Решить, сколько коробок с бананами нужно завтра привезти в конкретный магазин, чтобы минимизировать количество товара, который не будет выкуплен, и минимизировать вероятность того, что покупатель к концу дня не найдет желаемый продукт на полке
                - Увеличить счастье пользователей от работы с нашим сервисом, чтобы пользователи стали лояльнее, а сервис мог получать стабильный и прогнозируемый доход
                - Решить, нужно ли направить пациента на дополнительное медицинское обследование.
                
                В каждом конкретном случае может возникать целая иерархия метрик.
                
                1. Самый верхний уровень - это **бизнес-метрики**, например, будущий доход сервиса. Их трудно измерить в моменте, они сложным образом зависят от совокупности всех наших усилий, не только связанных с машинным обучением.
                2. **Онлайн метрики** - это характеристики работающей системы, с помощью которых мы надеемся оценить, что будет с бизнес-метриками. например, это может быть:
                    1. Медианная длина сессии в онлайн-игре. Можно предположить, что пользователь, который долго сидит в игре - это довольный пользователь.
                    2. Среднее количество бананов на полках во всех магазинах торговой сети в конце дня.
                3. Не всегда плоды наших трудов оцениваются числами. Многое может зависеть от субъективного восприятия людей, и для того, чтобы оценить их реакцию до выпуска в продакшн, применяется оценка специально нанятыми людьми - асессорами. Например, так можно оценивать, получилось ли у нас улучшить качество машинного перевода или релевантность выдачи в поисковой системе.
                4. **Офлайн метрики** могут быть измерены до введения модели в эксплуатацию, например, по историческим данным. В задачах, в которых нужно предсказывать какой-то конкретный таргет, офлайн метрики обычно оценивают отклонение предсказаний модели от истинных значений таргета. Например, это может быть точность предсказания, т.е. число верно угаданных значений, или среднеквадратичное отклонение.
                
                Асессорскую оценку тоже можно считать офлайн-метрикой.
                
                В этой книге речь в основном пойдет об офлайновых метриках и о функциях потерь. И прежде, чем вы начнете знакомиться с методами решения задач обучения с учителем, полезно посмотреть, какими бывают метрики качества. Вот несколько примеров:
                
                - Для задачи постановки диагноза хорошими метриками могут быть, например, доля правильно поставленных диагнозов или доля больных, которым удалось поставить правильный диагноз.
                - Для задачи предсказания цены квартиры метрикой качества может быть доля квартир, для которых разница между предсказанным и истинным значением цены не превысила какого-то порога, или средний модуль разницы между предсказанным и истинным значением.
                - Для задачи ранжирования поисковых документов по запросу - доля пар документов, которые мы упорядочили неправильно.
                
                Цель обычно в том, чтобы найти модель для которой значение метрики будет оптимальным.
                
                **Вопрос на подумать**. Важно помнить, что разные нужды заказчика могут диктовать самые разные метрики. Вернемся к задаче постановки диагноза пациентам больницы. Какие метрики вы предложили бы использовать в каждом из следующих случаев:
                
                - Обычный год в обычном терапевтическом отделении обычной больницы
                - Определение очень неприятной болезни, которая жутким клеймом падет на каждого, кому поставили такой диагноз
                - Определение опасной и очень заразной болезни
                - **********Ответ**********
                    
                    Конечно, даже в каждом из этих довольно частных случаев могут быть разные ситуации и разные метрики, но вот как, например, можно было бы ответить:
                    
                    - Обычный год в обычном терапевтическом отделении обычной больницы - тогда главного врача вполне устроит, если доля правильно поставленных диагнозов будет высокой (эта метрика называется **accuracy**)
                    - Определение очень неприятной болезни, которая жутким клеймом падет на каждого, кому поставили такой диагноз - тогда нам важно максимизировать долю действительно больных среди тех, кому мы имели несчастье поставить этот диагноз (эта метрика называется точностью, или **precision**)
                    - Определение опасной и очень заразной болезни - тогда нам важно не пропустить ни одного зараженного, и метрика будет иметь вид доли правильно определенных носителей (эта метрика называется полнотой или **recall**).
                    
                    Разумеется, это самые простые метрики, и в реальной жизни вам придется работать с более сложной иерархией метрик.
                    
    - [**Алгоритмы и структуры данных на JavaScript](https://www.youtube.com/watch?v=NErrGZ64OdE) (Ulbi TV)**
- **[Алгоритмы сортировок](https://academy.yandex.ru/journal/osnovnye-vidy-sortirovok-i-primery-ikh-realizatsii)**
    
    **Пузырьковая сортировка и ее улучшения**
    
    Один из самых известных алгоритмов сортировки.
    Последовательно сравниваем значения соседних элементов и меняем числа местами, если предыдущее оказывается больше последнего. 
    Алгоритм считается учебным и почти не применяется на практике из-за низкой эффективности: он медленно работает на тестах, в которых маленькие элементы (”черепахи”) стоят в конце массива. 
    Однако на нем основаны многие другие методы, например, шейкерная сортировка и сортировка расческой
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$ 
    Лучшее время: O(n)
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void BubbleSort(vector<int>& values) 
    {
      for (size_t idx_i = 0; idx_i + 1 < values.size(); ++idx_i) 
    	{
        for (size_t idx_j = 0; idx_j + 1 < values.size() - idx_i; ++idx_j) 
    		{
          if (values[idx_j + 1] < values[idx_j]) 
    			{
            swap(values[idx_j], values[idx_j + 1]);
          }
        }
      }
    }
    ```
    
    ************************************************************************************************Сортировка перемешиванием (шейкерная сортировка)************************************************************************************************
    
    Отличается от пузырьковой тем, что она двунапраленная: алгоритм перемещается не строго слева направо, а сначала слева направо, а затем справа налево
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$ 
    Лучшее время: O(n)
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void ShakerSort(vector<int>& values) {
      if (values.empty()) 
    	{
        return;
      }
      int left = 0;
      int right = values.size() - 1;
      while (left <= right) 
    		{
        for (int i = right; i > left; --i) 
    			{
          if (values[i - 1] > values[i]) {
            swap(values[i - 1], values[i]);
          }
        }
        ++left;
        for (int i = left; i < right; ++i) 
    		{
          if (values[i] > values[i + 1]) 
    			{
            swap(values[i], values[i + 1]);
          }
        }
        --right;
      }
    }
    ```
    
    ****************************************Сортировка расческой****************************************
    
    Улучшение сортировки пузырьком. Ее идея состоит в том, чтобы “устранить” элементы с небольшими значениями в конце массива, которые замедляют работу алгоритма.
    Если при пузырьковой и шейкерной сортировках при переборе массива сравниваются соседние элементы, то при “расчесывании” сначала берется достаточно большое расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального
    Первоначальный разрыв нужно выбирать не случайным образом, а с учетом специальной величины - фактора уменьшения, оптимальное значение которого равно 1,247. Сначала расстояние между элементами будет равняться размеру массива, поделенному на 1,247; на каждом последующем шаге расстояние будет снова делиться на фактор уменьшения - и так до окончания работы алгоритма
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2/2^p)$, где р - количество инкрементов 
    Лучшее время: $O(n log n)$
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void CombSort(vector<int>& values) 
    {
      const double factor = 1.247; // Фактор уменьшения
      double step = values.size() - 1;
    
      while (step >= 1) 
    	{
        for (int i = 0; i + step < values.size(); ++i) 
    		{
          if (values[i] > values[i + step]) 
    			{
            swap(values[i], values[i + step]);
          }
        }
        step /= factor;
      }
      // сортировка пузырьком
      for (size_t idx_i = 0; idx_i + 1 < values.size(); ++idx_i) 
    	{
        for (size_t idx_j = 0; idx_j + 1 < values.size() - idx_i; ++idx_j) 
    		{
          if (values[idx_j + 1] < values[idx_j]) 
    			{
            swap(values[idx_j], values[idx_j + 1]);
          }
        }
      }
    }
    ```
    
    ************************************Простые сортировки************************************
    
    ****************************************Сортировка вставками****************************************
    
    При сортировке вставками массив постепенно перебирается слева направо. При этом каждый последующий элемент размещается так, чтобы он оказался между ближайшими элементами с минимальным и максимальным значением
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$ для сравнений и перестановок
    Среднее время: $O(n^2/2^p)$для сравнений и перестановок 
    Лучшее время: $O(n)$ для сравнений и $О(1)$ перестановок
    
    Затраты памяти: O(n) основной, $О(1)$ дополнительной**
    
    </aside>
    
    ```csharp
    void InsertionSort(vector<int>& values) 
    {
      for (size_t i = 1; i < values.size(); ++i) 
    	{
        int x = values[i];
        size_t j = i;
        while (j > 0 && values[j - 1] > x) 
    		{
          values[j] = values[j - 1];
          --j;
        }
        values[j] = x;
      }
    }
    ```
    
    ************************************Сортировка выбором************************************
    
    Сначала нужно рассмотреть подмножество массива и найти в нем максимум (или минимум). 
    Затем выбранное значение меняют местами со значением первого неотсортированного элемента. 
    Этот шаг нужно повторять до тех пор, пока в массиве не закончатся неотсортированные подмассивы
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$, где р - количество инкрементов 
    Лучшее время: $О(n^2)$
    
    Затраты памяти: $О(n)$, $О(1)$ вспомогательной**
    
    </aside>
    
    ```csharp
    void SelectionSort(vector<int>& values) 
    {
      for (auto i = values.begin(); i != values.end(); ++i) 
    	{
        auto j = std::min_element(i, values.end());
        swap(*i, *j);
      }
    }
    ```
    
    ********************************************Эффективные сортировки********************************************
    
    ************************************Быстрая сортировка************************************
    
    Этот алгоритм состоит из трех шагов.
    Сначала из массива нужно выбрать один элемент - его обычно называют опорным. 
    Затем другие элементы в массиве перераспределяют так, чтобы элементы меньше опорного оказались до него, а большие или равные - после.
    А дальше рекурсивно применяют первые два шага к подмассивам справа и слева от опорного значения.
         Быструю сортировку изобрели в 1960 году для машинного перевода: тогда словари хранились на магнитных лентах, а сортировка слов обрабатываемого текста позволяла получить переводы за один перегон ленты, без перемотки назад
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n log n)$
    Лучшее время: $O(n)$
    
    Затраты памяти: $O(n)$**
    
    </aside>
    
    ```csharp
    int Partition(vector<int>& values, int l, int r) 
    {
      int x = values[r];
      int less = l;
    
      for (int i = l; i < r; ++i) 
    	{
        if (values[i] <= x) 
    		{
          swap(values[i], values[less]);
          ++less;
        }
      }
      swap(values[less], values[r]);
      return less;
    }
    
    void QuickSortImpl(vector<int>& values, int l, int r) 
    {
      if (l < r) 
    	{
        int q = Partition(values, l, r);
        QuickSortImpl(values, l, q - 1);
        QuickSortImpl(values, q + 1, r);
      }
    }
    
    void QuickSort(vector<int>& values) 
    {
      if (!values.empty()) 
    	{
        QuickSortImpl(values, 0, values.size() - 1);
      }
    }
    ```
    
    **************************************Сортировка слиянием**************************************
    
    Сортировка слиянием пригодится для таких структур данных, в которых доступ к элементам осуществляется последовательно (например, для потоков). Здесь массив разбивается на две примерно равные части и каждая из них сортируется по отдельности. Затем два отсортированных подмассива сливаются в один
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $O(n log n)$
    Среднее время: $O(n log n)$ 
    Лучшее время: $O(n log n)$
    
    Затраты памяти: $O(n)$ вспомогательной**
    
    </aside>
    
    ```csharp
    void MergeSortImpl(vector<int>& values, vector<int>& buffer, int l, int r) 
    {
      if (l < r) 
    	{
        int m = (l + r) / 2;
        MergeSortImpl(values, buffer, l, m);
        MergeSortImpl(values, buffer, m + 1, r);
    
        int k = l;
        for (int i = l, j = m + 1; i <= m || j <= r; ) 
    		{
          if (j > r || (i <= m && values[i] < values[j])) 
    			{
            buffer[k] = values[i];
            ++i;
          } else {
            buffer[k] = values[j];
            ++j;
          }
          ++k;
        }
        for (int i = l; i <= r; ++i) 
    		{
          values[i] = buffer[i];
        }
      }
    }
    
    void MergeSort(vector<int>& values) 
    {
      if (!values.empty()) 
    	{
        vector<int> buffer(values.size());
        MergeSortImpl(values, buffer, 0, values.size() - 1);
      }
    }
    ```
    
    ******Пирамидальная сортировка******
    
    При этой сортировке сначала строится пирамида из элементов исходного массива. 
    Пирамида (или двоичная куча) - это способ представления элементов, при котором от каждого узла может отходить не больше двух ответвлений. 
    А значение в родительском узле должно быть больше значений в его двух дочерних узлах
       Пирамидальная сортировка похожа на сортировку выбором, где мы сначала ищем максимальный элемент, а затем помещаем его в конец. 
    Дальше нужно рекурсивно повторять ту же операцию для оставшихся элементов
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $O(n log n)$
    Среднее время: $O(n log n)$ 
    Лучшее время: $O(n log n)$ или $O(n)$ при одинаковых ключах
    
    Затраты памяти: $O(n)$**
    
    </aside>
    
    ```csharp
    void HeapSort(vector<int>& values) 
    {
    std::make_heap(values.begin(), values.end());
    for (auto i = values.end(); i != values.begin(); --i) 
    	{
    std::pop_heap(values.begin(), i);
      }
    }
    ```
    
- **********************Базы данных**********************

### Архитектура компьютера и операционные системы

- ********Unix********

### Основы и методология программирования

- ********************************************Языки программирования********************************************
    - ********************************Скриптовые языки********************************
    - **C#**
        - **********Видео**********
            - ******************Видеокурс Степана Берегового******************
                - 001
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        class Program
                        {
                            static void Main(string[] args)
                            {
                                Console.WriteLine("Привет, Граждане! Я начинаю осваивать C# !!!");
                            }
                        }
                    }
                    ```
                    
                
                ```csharp
                
                ```
                
            - ******************Видеокурс “Весь C# с нуля до профи”******************
                - **001_Самая первая программа**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                Console.WriteLine("Hello, Dude!");
                                Console.ReadKey();
                            }
                        }
                    }
                    ```
                    
                - **002_Типы переменных**
                    
                    ```csharp
                    using System;
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Основные типы int | float | 
                                // Целочисленные типы
                                byte b; // 0 до 255
                                sbyte sb; // -128 до 127
                                short s; // -32768 до 32767
                                ushort us; // 0 до 65535
                                int i; // -2 млрд до 2 млрд
                                uint ui; // 0 до 4 млрд
                                long l; // 
                                ulong ul; // 
                                // Числа с плавающей точкой
                                float f = 5.7f; // до 7 знаков после запятой и обязательна f
                                double d = 5.7; // до 15 знаков после запятой
                                // Символный тип
                                char c = 'd' ;
                                // Строковый тип
                                string str = "string";
                                // Логический тип
                                bool bl;
                    
                                int age;
                                age = 27;
                                age = 10;
                            }
                        }
                    }
                    ```
                    
                - **003_Арифметические операторы +, -, *, /, %**
                    
                    ```csharp
                    using System;
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Арифметические операторы + - * / % 
                                int timeInMinutes = 130;
                                int hour;
                                int minute;
                    
                                hour = timeInMinutes / 60;
                                minute = timeInMinutes % 60;
                                
                                Console.WriteLine("hours: " + hour);
                                Console.WriteLine("minutes: " + minute);
                    
                                int age = 18;
                                age = age + 1;
                                age++;
                                age += 1;
                                age -= 1;
                                age *= 2;
                                age /= 2;
                    
                                int result = 5 + (12 - 5) * 3 - 1 + 2;
                                Console.WriteLine(result);
                            }
                        }
                    }
                    ```
                    
                - **004_Логические операторы**
                    
                    ```csharp
                    static void Main(string[] args)
                            {
                                // Логические операторы == != >= <= < >
                                int age = 17;
                                bool accesIsAlowed = age >= 18;
                                Console.WriteLine(accesIsAlowed);
                            }
                    ```
                    
                - **005_Конкатенация (суммирование строк)**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                string greeting = "Привет";
                                string name = "Валентин";
                                string message = greeting + " мазафака " + name;
                    
                                Console.WriteLine(message + ", бон жур, йопта!");
                                // Суммируем строки и числа
                                int age = 41;
                                Console.WriteLine("Завтра тебе стукнет: " + (age + 1));
                    
                                string concatination = "age" + "age" + age * 2 + name;
                                Console.WriteLine(concatination);
                            }
                        }
                    }
                    ```
                    
                - **006_Интерполяция**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        int age = 27;
                        string name = "Valentin";
                    
                        Console.WriteLine("Ваше имя: " + name + " вам " + age + " лет!");
                        // Также мы можем выводить эти строчки методом интерполяции:
                        Console.WriteLine($"Ваше имя: {name} вам {age} лет!");
                    }
                    ```
                    
                - **007_Типы конвертации**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        int age;
                        string input = "15";
                        age = Convert.ToInt32(input);
                        Console.WriteLine(age);
                    
                        float result;
                        int x = 5, y = 2;
                        result = Convert.ToSingle(x) / y;
                        Console.WriteLine(result);
                    
                        int trigger = 1;
                        bool triggerInBoolean = Convert.ToBoolean(trigger);
                        Console.WriteLine(triggerInBoolean);
                        int reconvert = Convert.ToInt32(triggerInBoolean);
                        Console.WriteLine(reconvert);
                    }
                    ```
                    
                - **008_Ввод и вывод в консоль**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        string name;
                        Console.WriteLine("Введите ваше имя: ");
                        name = Console.ReadLine();
                        Console.Write($"Ваше имя: {name}");
                        int age;
                        Console.WriteLine("Введите ваш возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine($"Вам {age} лет!");
                    }
                    ```
                    
                - **009_Инкремент и Декремент**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Инкремент и Декремент имеют наивысший приоритет в последовательности действий
                        int i = 0;
                        i++;
                        Console.WriteLine(i);
                        Console.WriteLine(i++ + ++i);
                    
                        int j = 0;
                        j--;
                        Console.WriteLine(j);
                    
                        int k = 0;
                        ++k;
                        Console.WriteLine(k);
                    
                        int l = 0;
                        --l;
                        Console.WriteLine(l);
                    
                        int A = 0;
                        Console.WriteLine(++A + 2 + 1 + A++ + "1" + ++A * 2);
                    }
                    ```
                    
                - **010_Программа рассчитывает урок, наносимый игроку**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Программа расчитывает урон, наносимый игроку
                                float health;
                                int armor;
                                int damage;
                                int percentConverter = 100;
                    
                                Console.WriteLine("Введите количество здоровья: ");
                                health = Convert.ToInt32(Console.ReadLine());            
                                Console.WriteLine("Введите количество брони: ");
                                armor = Convert.ToInt32(Console.ReadLine());            
                                Console.WriteLine("Введите количество урона: ");
                                damage = Convert.ToInt32(Console.ReadLine());
                    
                                health -= Convert.ToSingle(damage) / percentConverter * armor;
                    
                                Console.WriteLine($"Вам нанесли {damage} урона. " +
                                    $"У вас осталось {health} здоровья. " +
                                    $"Вам нанесли {damage} урона. ");
                            }
                        }
                    }
                    ```
                    
                - **011_Добавляем невозможность ухода в отрицательный баланс через bool-переменную**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Прописываем невозможность ухода в отрицательный баланс
                        int money;
                        int food;
                        int foodUnitPrice = 10;
                        // Заводим булеву пер-ю, для того, чтобы не уйти в минус по показателям
                        bool isAbleToPay;
                    
                        Console.WriteLine("Добро пожаловать в пекарню! Сегодня еда по " + foodUnitPrice + " монет.");
                        Console.WriteLine("Сколько у вас золота?");
                        money = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine("Сколько еды вам нужно?");
                        food = Convert.ToInt32(Console.ReadLine());
                    
                        isAbleToPay = money >= food * foodUnitPrice;
                        food *= Convert.ToInt32(isAbleToPay); // конвертация
                        money -= food * foodUnitPrice;
                        Console.WriteLine($"У вас в сумке {food} единиц еды, а также {money} золота");
                    }
                    ```
                    
                - **012_If_Else**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Операторы цикла: if else
                        int age;
                        Console.Write("Введите свой возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        if (age >= 18)
                        {
                            Console.WriteLine("Добро пожаловать в наш бар!");
                            Console.WriteLine("Что будете пить?");
                        }
                        else
                        {
                            Console.WriteLine("Вы слишком юны для бухла!");
                            Console.WriteLine("Приходи, когда вырастешь, сынок!");
                        }
                        Console.WriteLine("За условным оператором.");
                    }
                    ```
                    
                - **013_If & Else If**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Операторы цикла: if else
                        string dayOfWeek;
                        Console.Write("Введите день недели: ");
                        dayOfWeek = Console.ReadLine();
                    
                        if (dayOfWeek == "понедельник")
                        {
                            Console.WriteLine("Стало быть проходим курсы!");
                        }
                        // Однако, что делать, если понедельник уже введен, и нам не нужно
                        // гонять программу дальше и расходовать память? Применим else - if
                        else if (dayOfWeek == "вторник")
                        {
                            Console.WriteLine("Стало быть делаем домашку");
                        }    
                    }
                    ```
                    
                - **014_Таблица логических операторов**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Логическое И && (умножение)
                        // x | y | x && y true -> 1 false -> 0
                        // 1 | 1 |   1
                        // 1 | 0 |   0
                        // 0 | 1 |   0
                        // 0 | 0 |   0
                        // Логическое ИЛИ && (сложение)
                        // x | y | x || y true -> 1 false -> 0
                        // 1 | 1 |   1
                        // 1 | 0 |   1
                        // 0 | 1 |   1
                        // 0 | 0 |   0
                    
                        int money = 500;
                        int level = 4;
                    
                        if (money >= 500 || level > 9)
                        {
                            Console.WriteLine("Проходи! Добро пожаловать в нашу Гильдию!");
                        }
                        else
                        {
                            Console.WriteLine("Вас выпнули за дверь!");
                        }
                    }
                    ```
                    
                - **015_Switch_Case**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Условный оператор switch case
                        Console.WriteLine("Введите день недели строчными буквами: ");
                        string dayOfWeek;
                        dayOfWeek = Console.ReadLine();
                    
                        switch (dayOfWeek)
                        {
                            case "понедельник":
                            case "апрель":
                            case "суббота":
                                Console.WriteLine("Идем в киношку!");
                                Console.WriteLine("Едим попкорн.");
                                break;
                            case "вторник":
                                Console.WriteLine("Делаем домашку");
                                break;
                            case "среда":
                                Console.WriteLine("Смотрим лекцию");
                                Console.WriteLine("Идем на тренировку");
                                break;
                            case "четверг":
                                Console.WriteLine("Проходим семинар");
                                break;
                            case "пятница":
                                Console.WriteLine("Сдаем домашку");
                                break;
                            case "воскресенье":
                                Console.WriteLine("Нихуа не делаем, пузом кверху!");
                                break;
                        }
                    }
                    ```
                    
                - **016_Switch_Case_Default**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Условный оператор switch case
                        Console.WriteLine("Введите день недели строчными буквами: ");
                        string dayOfWeek;
                        dayOfWeek = Console.ReadLine();
                    
                        switch (dayOfWeek)
                        {
                            case "понедельник":
                            case "апрель":
                            case "суббота":
                                Console.WriteLine("Идем в киношку!");
                                Console.WriteLine("Едим попкорн.");
                                break;
                            case "вторник":
                                Console.WriteLine("Делаем домашку");
                                break;
                            case "среда":
                                Console.WriteLine("Смотрим лекцию");
                                Console.WriteLine("Идем на тренировку");
                                break;
                            case "четверг":
                                Console.WriteLine("Проходим семинар");
                                break;
                            case "пятница":
                                Console.WriteLine("Сдаем домашку");
                                break;
                            case "воскресенье":
                                Console.WriteLine("Нихуа не делаем, пузом кверху!");
                                break;
                            default: Console.WriteLine("Слющий, зачем обманываещь, да?");
                                break;
                        }
                    }
                    ```
                    
                - **017_Проверка пароля**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Проверка пароля
                        string password = "12345";
                        string userInput;
                    
                        Console.Write("Введите пароль: ");
                        userInput = Console.ReadLine();
                    
                        if (userInput == password)
                        {
                            Console.WriteLine("Пароль принят, Вацок! Заходи да!");
                        }
                        else
                        {
                            Console.WriteLine("Вэу! Пшель вон отсюда эээ!");
                        }
                    }
                    ```
                    
                - **018_Конвертер валют**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Конвертер валют с потенциалом на много разных операций
                        float rublesInWallet;
                        float dollarsInWallet;
                    
                        int rubToUsd = 96, usdToRub = 92;
                    
                        float exchangeCurrensyCount;
                    
                        string desiredOperation;
                    
                        Console.WriteLine("Привет, Вацок. Ты пришел в самый лючщий абменник да!");
                        Console.WriteLine("Введи баланс рублей, слющий: ");
                        rublesInWallet = Convert.ToSingle(Console.ReadLine());
                        Console.WriteLine("Введи баланс долларов, вэу: ");
                        dollarsInWallet = Convert.ToSingle(Console.ReadLine());
                    
                        Console.WriteLine("Брат, давай выбери аперация нужный да: ");
                        Console.WriteLine("1 - рубли на доллары хочу поменять ");
                        Console.WriteLine("2 - Доллары на рубли хочу, деньги очень нужны слющий.");
                        Console.WriteLine("Какой выбираещь нипасредственно?: ");
                        desiredOperation = Console.ReadLine();
                    
                        switch (desiredOperation)
                        {
                            case "1":
                                Console.WriteLine("Обмен рублей на доллары...");
                                Console.WriteLine("Сколько хочищь обменять, да? ");
                                exchangeCurrensyCount = Convert.ToSingle(Console.ReadLine());
                                if (rublesInWallet >= exchangeCurrensyCount)
                                {
                                    rublesInWallet -= exchangeCurrensyCount;
                                    dollarsInWallet += exchangeCurrensyCount / rubToUsd;
                                }
                                else
                                {
                                    Console.WriteLine("Вэу, брат, нэ хуатает чутка да, ц-ц-ц");
                                }
                                break;
                            case "2":
                                Console.WriteLine("Обмен долларов на рубли...");
                                Console.WriteLine("Сколько хочищь абмэнять слющий? ");
                                exchangeCurrensyCount = Convert.ToSingle(Console.ReadLine());
                                if (dollarsInWallet >= exchangeCurrensyCount)
                                {
                                    dollarsInWallet -= exchangeCurrensyCount;
                                    rublesInWallet += exchangeCurrensyCount * usdToRub;
                                }
                                else
                                {
                                    Console.WriteLine("Вэу, брат, нэ хуатает чутка да, ц-ц-ц");
                                }
                                break; 
                            default:
                                Console.WriteLine("Брат, зачем мазги дэлаешь слющий?!");
                                break;
                        }
                        Console.WriteLine($"Твой баланс, брат: {rublesInWallet} рублей и {dollarsInWallet} долларов. ");
                    }
                    ```
                    
                - **019_Цикл while + break & continue**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Цикл while + break & continue
                        int age;
                        Console.WriteLine("Введите ваш возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        while (age-- > 0)
                        {
                            if (age == 5)
                            {
                                continue;
                            }
                            Console.WriteLine($"С днем рождения Мазафака! {age}");
                    
                            //if (age == 5)
                            //{
                            //    break;
                            //}
                        }
                    }
                    ```
                    
                - **020_Цикл for & continue**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Цикл for & continue
                        int age;
                        Console.WriteLine("Сколько тебе лет слющий: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        for (int i = 0; i <= age; i += 2)
                        {
                            if (i == 4) continue; // исключаем из цикла 4
                            Console.WriteLine($"Ваааа, и было тебе {i} лет");
                        }
                    }
                    ```
                    
                - **021_Checking Password**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // checking password
                        int triesCount = 5;
                        string password = "123456";
                        string userInput;
                    
                        for (int i = 0; i < triesCount; i++)
                        {
                            Console.WriteLine("Введите пароль: ");
                            userInput = Console.ReadLine();
                            if (userInput == password)
                            {
                                Console.WriteLine("Держи охапку секретов!");
                                break;
                            }
                            else
                            {
                                Console.WriteLine("Ваааа, ипана делаешь!");
                                Console.WriteLine($"Давай, брат, попытайся еще {triesCount - i - 1} раз");
                            }
                        }
                    }
                    ```
                    
                - **022_Программа считает, как увеличивается вклад по %**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Программа считает, как увеличивается вклад по %
                        float money;
                        int years;
                        int percent;
                    
                        Console.Write("Введите количество денег, внесенных на вклад: ");
                        money = Convert.ToSingle(Console.ReadLine());
                        Console.Write("На сколько лет открыт вклад?: ");
                        years = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Под какой процент?: ");
                        percent = Convert.ToInt32(Console.ReadLine());
                    
                        for (int i = 0; i < years; i++)
                        {
                            money += money / 100 * percent;
                            Console.WriteLine("В этом году у вас " + money);
                            Console.ReadKey();
                        }
                    }
                    ```
                    
                - **023_Бой игрока с противником**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Бой игрока с противником
                        int playerHealth = 100;
                        int playerDamage = 15;
                        int enemyHealth = 100;
                        int enemyDamage = 10;
                    
                        while (playerHealth > 0 && enemyHealth > 0)
                        {
                            playerHealth -= enemyDamage;
                            enemyHealth -= playerDamage;
                    
                            Console.WriteLine(playerHealth + " игрок. ");
                            Console.WriteLine(enemyHealth + " враг. ");
                        }
                        if (playerHealth <= 0 && enemyHealth <= 0)
                        {
                            Console.WriteLine("Ничья!");
                        }
                        else if (enemyHealth <= 0)
                        {
                            Console.WriteLine("Победа игрока");
                        }
                        else if (playerHealth <= 0)
                        {
                            Console.WriteLine("Победа врага");
                        }
                    }
                    ```
                    
                - **024_Random**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Random
                        Random rand = new Random();
                        int value = rand.Next(0, 10);
                        Console.WriteLine("Программа выдает случайные числа от 1 до 9");
                    
                        while (true)
                        {
                            value = rand.Next(0, 10);
                            Console.WriteLine(value);
                            Console.ReadKey();
                        }
                    }
                    ```
                    
                - **025_Игра Угадай число. Метод Random + Цикл**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра "Угадай число"
                        int number;
                        int lower, higher;
                        int triesCount = 5;
                        int userInput;
                        Random rand = new Random();
                    
                        number = rand.Next(0, 101);
                        lower = rand.Next(number - 10, number);
                        higher = rand.Next(number + 1, number + 10);
                    
                        Console.WriteLine($"Мы загадали число от 0 до 100, оно больше чем {lower}, " +
                            $"но меньше чем {higher}");
                        Console.WriteLine($"Что это за число? У вас {triesCount} попыток отгадать");
                    
                        while (triesCount-- > 0)
                        {
                            Console.WriteLine("Ваш ответ: ");
                            userInput = Convert.ToInt32(Console.ReadLine());
                            if (userInput == number)
                            {
                                Console.WriteLine("Вы правы, это было число " + number + ".");
                                break;
                            }
                            else
                            {
                                Console.WriteLine("Нихуа не верно. Давай заново!");
                            }
                        }
                        if (triesCount < 0)
                        {
                            Console.WriteLine("Ты проипал, друг! Это было число " + number + "!");
                        }
                    }
                    ```
                    
                - **026_Игра Бой гладиаторов**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра "Бой гладиаторов", основанная на Random
                        Random rand = new Random();
                        float health1 = rand.Next(90, 110);
                        int damage1 = rand.Next(7, 35);
                        int armor1 = rand.Next(45, 100);
                    
                        float health2 = rand.Next(80, 120);
                        int damage2 = rand.Next(5, 40);
                        int armor2 = rand.Next(65, 100);
                    
                        Console.WriteLine($"Гладиатор 1 - {health1} здоровья, {damage1} наносимый урон, {armor1} броня.");
                        Console.WriteLine($"Гладиатор 2 - {health2} здоровья, {damage2} наносимый урон, {armor2} броня.");
                    
                        while (health1 > 0 && health2 > 0)
                        {
                            health1 -= Convert.ToSingle(rand.Next(0, damage2 + 1)) / 100 * armor1;
                            health2 -= Convert.ToSingle(rand.Next(0, damage1 + 1)) / 100 * armor2;
                    
                            Console.WriteLine("Здоровье гладиатора 1: " + health1);
                            Console.WriteLine("Здоровье гладиатора 2: " + health2);
                        }
                        if (health1 <= 0 && health2 <= 0)
                        {
                            Console.WriteLine("Ничья. Оба гладиатора погибли.");
                        }
                        else if (health1 <= 0)
                        {
                            Console.WriteLine("Гладиатор 1 пал.");
                        }
                        else if (health2 <= 0)
                        {
                            Console.WriteLine("Гладиатор 2 пал.");
                        }
                    }
                    ```
                    
                - **027_Параметры и цвета консоли**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Console parameters
                        Console.Clear();
                        Console.SetCursorPosition(5, 10);
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.BackgroundColor = ConsoleColor.DarkGray;
                        Console.Clear();
                        Console.WindowHeight = 10;
                        Console.WindowWidth = 50;
                        Console.WriteLine("Привет, Дядя Женя!\nКуда ты вчера делся?\nЯ убежал в ...]\b \b");
                        Console.ReadKey();
                    }
                    ```
                    
                - **028_Инициализация массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Massive initialisation
                        int[] cucumbers = new int[10];
                        // Console.WriteLine(cucumbers[0]);
                        Console.WriteLine($"{cucumbers.Length} - размер массива");
                    
                        Random rand = new Random();
                    
                        for (int i = 0; i < cucumbers.Length; i++)
                        {
                            cucumbers[i] = rand.Next(0, 101);
                            Console.Write(cucumbers[i] + " ");
                        }
                        Console.WriteLine();
                        cucumbers[7] = 13;
                        cucumbers[3] = 3;
                        Console.WriteLine($"{cucumbers[7]} and {cucumbers[3]} - after cycle");
                    }
                    ```
                    
                - **029_Математические операции над элементами массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Mathematic operations with massive elements
                        int[] array = { 24, 25, 17, 66, 38, 84, 7, 8, 3, 7 };
                        int sum = 0;
                        for (int i = 0; i < array.Length; i++)
                        {
                            sum += array[i];
                            Console.Write(array[i] + " ");
                        }
                        int multiplication = 1;
                    
                        for (int i = 0;i < array.Length; i++)
                        {
                            multiplication *= array[i];
                        }
                        Console.WriteLine();
                        Console.WriteLine($"Сумма всех элементов массива = {sum}");
                        Console.WriteLine($"Произведение всех элементов массива = {multiplication}");
                    }
                    ```
                    
                - **030_Находим максимальный элемент в массиве**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Find MaxElement in massive
                        int[] array = { 24, 25, 17, 66, -38, 84, 7, 8, 3, 7 };
                        int maxElement = int.MinValue;
                        for (int i = 0; i < array.Length; i++)
                        {
                            if (maxElement < array[i])
                            {
                                maxElement = array[i];
                            }
                            Console.Write(array[i] + " ");
                        }
                        Console.WriteLine();
                        Console.WriteLine($"Максимальный элемент массива = {maxElement}");
                        //Console.WriteLine($"Произведение всех элементов массива = {multiplication}");
                    }
                    ```
                    
                - **031_Регистрация пассажиров на рейс самолета**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Регистрация пассажиров на рейс самолета
                        int[] sectors = { 6, 28, 15, 15, 17 };
                        bool isOpen = true;
                        while (isOpen)
                        {
                            Console.SetCursorPosition(0, 18);
                            for (int i = 0; i < sectors.Length; i++)
                            {
                                Console.WriteLine($"В секторе {i+1} свободно {sectors[i]} мест");
                            }
                    
                            Console.SetCursorPosition(0, 0);
                            Console.WriteLine("Регистрация рейса");
                            Console.WriteLine("\n\n1 - забронировать место\n\n2 - выход из программы.\n\n");
                            Console.WriteLine("Введите номер команды: ");
                            switch (Convert.ToInt32(Console.ReadLine()))
                            {
                                case 1:
                                    int userSector, userPlaceAmount;
                                    Console.Write("В каком секторе вы хотите лететь? ");
                                    userSector = Convert.ToInt32(Console.ReadLine()) - 1;
                                    if (sectors.Length <= userSector || userSector < 0)
                                    {
                                        Console.WriteLine("Такого сектора не существует!");
                                        break;
                                    }
                                    Console.Write("Сколько мест вы хотите забронировать? ");
                                    userPlaceAmount = Convert.ToInt32(Console.ReadLine());
                                    if (userPlaceAmount < 0)
                                    {
                                        Console.WriteLine("Неверное количество мест!");
                                        break;
                                    }
                                    if (sectors[userSector] < userPlaceAmount)
                                    {
                                        Console.WriteLine($"В секторе {userSector} недостаточно мест. " +
                                            $"Остаток {sectors[userSector]}");
                                        break;
                                    }
                    
                                    sectors[userSector] -= userPlaceAmount;
                                    Console.WriteLine("Бронирование успешно!");
                                    break;
                                case 2:
                                    isOpen = false;
                                    break;
                            }
                    
                            Console.ReadKey();
                            Console.Clear();
                        }
                    }
                    ```
                    
                - **032_Инициализация двумерного массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Инициализация и вывод в консоль двумерного массива
                        int[,] array;
                        int[,] array2 = new int[2, 3];
                    
                        int[,] array3 = {
                            { 2, 3, 4 },
                            { 4, 5, 1 },
                            { 7, 8, 9 }
                        };
                        int[,] array4 = new int[2, 3] {
                            { 9, 8, 7 },
                            { 6, 5, 4 }
                        };
                    
                        Console.WriteLine(array4[1, 1]);
                        Console.WriteLine(array3.Length);
                    
                        int[,] array5 = new int[4, 4];
                        Random rand = new Random();
                    
                        for (int i = 0; i < array5.GetLength(0); i++)
                        {
                            for (int j = 0; j < array5.GetLength(1); j++)
                            {
                                array5[i, j] = rand.Next(0, 10); 
                                Console.Write(array5[i, j] + " ");
                            }
                            Console.WriteLine();
                        }
                    }
                    ```
                    
                - **033_Программа управления библиотекой**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Система управления библиотекой
                        bool isOpen = true;
                        string[,] books =
                        {
                            { "Александр Пушкин", "Михаил Лермонтов", "Сергей Есенин" },
                            { "Роберт Мартин", "Джесси Шилд", "Сергей Тепляков" },
                            { "Стивен Кинг", "Говард Лавкрафт", "Брэм Стокер" }
                        };
                    
                        while (true)
                        {
                            Console.SetCursorPosition(0, 20);
                            Console.WriteLine("\nВесь список авторов:\n");
                            for (int i = 0; i < books.GetLength(0); i++)
                            {
                                for (int j = 0; j < books.GetLength(1); j++)
                                {
                                    Console.Write(books[i,j] + " | ");
                                }
                                Console.WriteLine();
                            }
                            Console.SetCursorPosition(0, 0);
                            Console.WriteLine("Библиотека");
                            Console.WriteLine("\n1 - узнать имя автора по индексу книги." +
                                "\n2 - найти книгу по автору." +
                                "\n3 - выход.");
                            Console.WriteLine("Выберите пункт меню: ");
                    
                            switch(Convert.ToInt32(Console.ReadLine()))
                            {
                                case 1:
                                    int line, column;
                                    Console.Write("Введите номер полки: ");
                                    line = Convert.ToInt32(Console.ReadLine()) - 1;
                                    Console.Write("Введите номер столбца: ");
                                    column = Convert.ToInt32(Console.ReadLine()) - 1;
                                    Console.WriteLine("Это автор: " + books[line, column]);
                                    break;
                                case 2:
                                    string author;
                                    bool authorIsFound = false;
                                    Console.Write("Введите автора: ");
                                    author = Console.ReadLine();
                                    for (int i = 0; i < books.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < books.GetLength(1); j++)
                                        {
                                            if (author.ToLower() == books[i,j].ToLower())
                                            {
                                                Console.Write($"Автор {books[i, j]} " +
                                                    $"находится по адресу: полка { i + 1 }, место { j + 1 }");
                                                authorIsFound = true;
                                            }
                                        }
                                    }
                                    if (authorIsFound == false)
                                    {
                                        Console.WriteLine("Автор отсутствует!");
                                    }
                                    break;
                                case 3:
                                    isOpen = false;
                                    break;
                                default:
                                    Console.WriteLine("Введена неверная команда!");
                                    break;
                            }
                            if (isOpen)
                            {
                                Console.WriteLine("\nНажмите любую клавишу для продолжения...");
                            }
                            Console.ReadKey();
                            Console.Clear();
                        }
                    ```
                    
                - **034_Ссылочные типы на примере гаражей**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Ссылочные типы
                        int[] petrovich = new int[3]; // Гараж Петровича
                        int[] ivanovich = new int[5]; // Гараж Иваныча
                        int[] sidorovich;
                    
                        petrovich = ivanovich; // Петрович пришел к Иванычу и все барахло ему принес
                    
                        petrovich[0] = 5;
                        petrovich[1] = 3;
                    
                        sidorovich = petrovich;
                        sidorovich[2] = 7;
                        sidorovich[0] = 10;
                    
                        Console.WriteLine(ivanovich[0]);
                        Console.WriteLine(ivanovich[1]);
                    
                        petrovich = new int[10];
                    }
                    ```
                    
                - **035_Расширение массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Расширение массива
                        int[] bag = new int[1];
                        bag[0] = 12;
                        int[] tempbag = new int[bag.Length + 1];
                        for (int i = 0; i < bag.Length; i++)
                        {
                            tempbag[i] = bag[i];
                            Console.WriteLine(bag[i] + " Первый");
                        }
                        Console.WriteLine();
                        tempbag[tempbag.Length - 1] = 56;
                        bag = tempbag;
                        for (int i = 0;i < bag.Length;i++)
                        {
                            Console.WriteLine(bag[i] + " Второй");
                        }
                    }
                    ```
                    
                - **036_Моя первая бродилка**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра-бродилка (в ней будем ходить, собирать сокровища, и они должны отображаться)
                        // Понадобится перво-наперво карта - определенная область с размерами и разметкой
                        Console.CursorVisible = false; // Делаем курсор невидимым, дабы не мешал
                        char[,] map =
                        {
                            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                            { '#', 'x', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', 'x', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', 'x', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', 'x', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', 'x', ' ', '#', 'x', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', 'x', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                        };
                    
                        int userX = 6, userY = 6;
                        char[] bag = new char[1]; // Сумка для сбора сокровищ (Х)
                    
                        while (true)
                        {
                            Console.SetCursorPosition(0, 25);
                            Console.Write("Сумка: ");
                            for (int i = 0; i < bag.Length; i++)
                            {
                                Console.Write(bag[i] + " ");
                            }
                    
                            Console.SetCursorPosition(0, 0);
                            for (int i = 0; i < map.GetLength(0); i++)
                            {
                                for (int j = 0; j < map.GetLength(1); j++)
                                {
                                    Console.Write(map[i, j]);
                                }
                                Console.WriteLine();
                            }
                            Console.SetCursorPosition(userY, userX);
                            Console.Write("@"); // Игрок
                            ConsoleKeyInfo charkey = Console.ReadKey();
                            switch (charkey.Key)
                            { // Прописываем движения, согласно клавишам
                                case ConsoleKey.UpArrow:
                                    if (map[userX - 1, userY] != '#')
                                    {
                                        userX--;
                                    }
                                    break;
                                case ConsoleKey.DownArrow:
                                    if (map[userX + 1, userY] != '#')
                                    {
                                        userX++;
                                    }
                                    break;
                                case ConsoleKey.LeftArrow:
                                    if (map[userX, userY - 1] != '#')
                                    {
                                        userY--;
                                    }
                                    break;
                                case ConsoleKey.RightArrow:
                                    if (map[userX, userY + 1] != '#')
                                    {
                                        userY++;
                                    }
                                    break;
                            }
                            // Логика сбора сокровищ
                            if (map[userX, userY] == 'x')
                            {
                                map[userX, userY] = 'O';
                                char[] tempbag = new char[bag.Length + 1];
                                for (int i = 0; i < bag.Length; i++)
                                {
                                    tempbag[i] = bag[i];
                                }
                                tempbag[tempbag.Length - 1] = 'X';
                                bag = tempbag;
                            }
                    
                            Console.Clear();
                        }
                    }
                    ```
                    
                - **037_foreach**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с символьными массивами
                        string line = "Привет!";
                        Console.WriteLine(line[1]);
                    
                        // Теперь переберем массив (другой)
                        int[] numbers = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
                        for (int i = 0; i < numbers.Length; i++)
                        {
                            Console.Write(" " + numbers[i] + " |");
                        }
                        Console.WriteLine();
                    
                        // А чтобы не обращаться по индексу, используем foreach
                        foreach (int number in numbers) // Читаем: каждый элемент во всей коллекции
                        {
                            Console.Write(" " + number + " |");
                        }
                    }
                    ```
                    
                - **038_Меняем цвет текста в консоли через метод**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с функциями и как их писать
                        // Напишем маленькую программу, которая будет выводить ошибку красным цветом
                        Console.WriteLine("Привет!");
                        Console.WriteLine("Ты здесь?");
                        WriteError("Нет соединения с интернетом"); // А здесь в скобках аргумент
                        Console.WriteLine("Странно...");
                        WriteError("Интернет не оплачен, идиот!");
                    }
                    
                    static void WriteError(string text) // static - обязателен; в скобках параметр функции
                    {
                        ConsoleColor defaultColor = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine(text);
                        Console.ForegroundColor = defaultColor;
                    }
                    ```
                    
                - **039_Пример простейшего метода Sum**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с функциями и как их писать
                        int j = 3, y = 8, sum;
                        sum = Sum(j, y) + j + y; // Как видим, переменные вовсе не должны совпадать с теми, что указаны в методе
                        Console.WriteLine(Sum(2,3));
                        Console.WriteLine(sum);
                    }
                    
                    static int Sum(int x, int y)
                    {
                        int sum;
                        sum = x + y;
                        return sum;
                    }
                    ```
                    
                - **040_Параметры текста в консоли + Необязательные параметры**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Работа с функциями и как их писать
                                Console.WriteLine("Привет!");
                                Console.WriteLine("Ты здесь?");
                                WriteError("Нет соединения с интернетом."/*Здесь работает параметр по умолчанию из метода*/);
                                Console.WriteLine("Странно...");
                                WriteError("Интернет не оплачен.", symbol: '@' /*ConsoleColor.Magenta*/);
                            }
                    
                            static void WriteError(string text, ConsoleColor color = ConsoleColor.Red, 
                                char symbol = '!')
                            {
                                ConsoleColor defaultColor = Console.ForegroundColor;
                                Console.ForegroundColor = color;
                                Console.WriteLine(symbol + text);
                                Console.ForegroundColor = defaultColor;
                            }
                        }
                    }
                    /* А если я не хочу указывать цвет?
                     * Например, если по умолчанию был красный
                     * Есть такая вещь, как НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР
                     * ConsoleColor color = ConsoleColor.Red и теперь, если я не укажу в основном блоке 
                     * в аргументах цвет, то по умолчанию он будет взят из метода и останется красным
                     */
                    ```
                    
                - **041_Меняем значения массива с помощью метода**
                    
                    ```csharp
                    internal class Program
                    {
                        static void Main(string[] args)
                        { // Меняем массив с помощью метода
                            int[] array = new int[5];
                            EditArray(array, 2, 5);
                            Console.WriteLine(array[2]);
                        }
                    
                        static void EditArray(int[] array, int index, int value)
                        {
                            array[index] = value;
                        }
                    }
                    ```
                    
                - **042_Перегрузки**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Перегрузки
                                int[] array1 = new int[5];
                                int[,] array2 = new int[5, 5];
                                array1 = ReSize(array1, 6);
                                array2 = ReSize(array2, 10, 10);
                                Console.WriteLine(array1.Length);
                                Console.WriteLine(array2.Length);
                            }
                    
                            static int[] ReSize(int[] array, int size)
                            {
                                int[] tempArray = new int[size];
                    
                                for (int i = 0; i < array.Length; i++)
                                {
                                    tempArray[i] = array[i];
                                }
                                array = tempArray;
                                return array;
                            }
                    
                            static int[,] ReSize(int[,] array, int x, int y)
                            {
                                int[,] tempArray = new int[x, y];
                    
                                for (int i = 0; i < array.GetLength(0); i++)
                                {
                                    for (int j = 0; j < array.GetLength(1); j++)
                                    {
                                        tempArray[i, j] = array[i, j];
                                    }
                                }
                                array = tempArray;
                                return array;
                            }
                        }
                    }
                    ```
                    
                - **043_Игровые бары**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Игровые бары
                                int health = 5, maxHealth = 10;
                                int mana = 7, maxMana = 10;
                    
                                while (true)
                                {
                                DrawBar(health, maxHealth, ConsoleColor.Green, 0);
                                DrawBar(mana, maxMana, ConsoleColor.Blue, 1);
                    
                                    Console.SetCursorPosition(0, 5);
                                    Console.Write("Введите число, на которое изменится жизнь:");
                                    health += Convert.ToInt32(Console.ReadLine());
                                    Console.Write("Введите число, на которое изменится мана:");
                                    mana += Convert.ToInt32(Console.ReadLine());
                                    Console.ReadKey();
                                    Console.Clear();
                                }
                            }
                    
                            static void DrawBar(int value, int maxValue, ConsoleColor color, int position, char symbol = '_')
                            {
                                ConsoleColor defaultColor = Console.BackgroundColor;
                    
                                string bar = "";
                    
                                for (int i = 0; i < value; i++)
                                {
                                    bar += symbol;
                                }
                    
                                Console.SetCursorPosition(0, position);
                                Console.Write('[');
                                Console.BackgroundColor = color;
                                Console.Write(bar);
                                Console.BackgroundColor = defaultColor;
                    
                                bar = "";
                    
                                for (int i = value; i < maxValue; i++)
                                {
                                    bar += " ";
                                }
                    
                                Console.Write(bar + "]");
                                Console.WriteLine();
                            }
                        }
                    }
                    ```
                    
                - **044_Pacman Game**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Игровые бары
                                int health = 5, maxHealth = 10;
                                int mana = 7, maxMana = 10;
                    
                                while (true)
                                {
                                DrawBar(health, maxHealth, ConsoleColor.Green, 0);
                                DrawBar(mana, maxMana, ConsoleColor.Blue, 1);
                    
                                    Console.SetCursorPosition(0, 5);
                                    Console.Write("Введите число, на которое изменится жизнь:");
                                    health += Convert.ToInt32(Console.ReadLine());
                                    Console.Write("Введите число, на которое изменится мана:");
                                    mana += Convert.ToInt32(Console.ReadLine());
                                    Console.ReadKey();
                                    Console.Clear();
                                }
                            }
                    
                            static void DrawBar(int value, int maxValue, ConsoleColor color, int position, char symbol = '_')
                            {
                                ConsoleColor defaultColor = Console.BackgroundColor;
                    
                                string bar = "";
                    
                                for (int i = 0; i < value; i++)
                                {
                                    bar += symbol;
                                }
                    
                                Console.SetCursorPosition(0, position);
                                Console.Write('[');
                                Console.BackgroundColor = color;
                                Console.Write(bar);
                                Console.BackgroundColor = defaultColor;
                    
                                bar = "";
                    
                                for (int i = value; i < maxValue; i++)
                                {
                                    bar += " ";
                                }
                    
                                Console.Write(bar + "]");
                                Console.WriteLine();
                            }
                        }
                    }
                    ```
                    
                - **045_Коллекции**
                    
                    ```csharp
                    static void Main()
                         { // Коллекции
                             List<int> numbers = new List<int>(5); // в круглых скобках размер коллекции
                             numbers[0] = 1; // Присвоение значения элементу коллекции
                         }
                    ```
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpList
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Коллекции
                                List<int> numbers = new List<int>();
                    
                                numbers.Add(12); // Add добавляет значение в конец листа (коллекции)
                                numbers.Add(5);
                                numbers.Add(8);
                                numbers.Add(14);
                                numbers.Add(22);
                    
                                numbers.AddRange(new int[] { 3, 4, 8, 5 }); // Добавляем диапазон
                    
                                numbers.RemoveAt(3); // Удаление элемента под индексом 3
                                numbers.Remove(5); // Удаление повторящихся элементов
                    
                                // numbers.Clear(); - очистка списка
                    
                                for (int i = 0; i < numbers.Count; i++)
                                { // Count - длина коллекции, аналог Length у массивов
                                    Console.WriteLine(numbers[i]); // Выводим в консоль
                                }
                    
                                Console.WriteLine("Число 22 находится на позиции: " + numbers.IndexOf(22));
                    
                                numbers.Insert(1, 123); // Вставляем на позицию 1 число 12
                                Console.WriteLine("Вставленное число " + numbers[1] + " находится в " +
                                    "позиции: " + numbers.IndexOf(123));
                            }
                        }
                    }
                    ```
                    
                - ******************046_Очередь******************
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpLight
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Очередь
                                Queue<string> patients = new Queue<string>();
                    
                                patients.Enqueue("Василий");
                                patients.Enqueue("Алексей");
                                patients.Enqueue("Роман");
                                patients.Enqueue("Владимир");
                    
                                // Убираем пациента из очереди. Выводится первый, он же удаляется
                                Console.WriteLine("Сейчас на прием идет: " + patients.Dequeue());
                    
                                // Но что если я хочу просто узнать кто следующий в очереди, но не удалять его
                                Console.WriteLine("Следующий в очереди: " + patients.Peek());
                    
                                foreach (var patient in patients)
                                { // Перечисляем очередь
                                    Console.WriteLine(patient);
                                }
                            }
                        }
                    }
                    ```
                    
                - 047_Стек
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpLight
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Стек
                                Stack<int> numbers = new Stack<int>();
                    
                                numbers.Push(1); // Push добавляет элемент в стек
                                numbers.Push(2);
                                numbers.Push(3);
                                numbers.Push(4);
                                numbers.Push(5);
                    
                                Console.WriteLine("Сверху в стеке лежит: " + numbers.Peek()); // Смотрим, что лежит наверху Peek
                    
                                numbers.Pop(); // Pop извлекает элемент из стека
                    
                                while (numbers.Count > 0)
                                { // Перебираем элементы в стеке
                                    Console.WriteLine("Следующее число в стеке: " + numbers.Pop());
                                }
                    
                                foreach (var number in numbers)
                                { // Убедимся, что стек пуст
                                    Console.WriteLine(number);
                                }
                            }
                        }
                    }
                    ```
                    
                - 048_
                - 049_
                - 050_
                
                ```csharp
                
                ```
                
                ```csharp
                
                ```
                
                ```csharp
                
                ```
                
        - ********************************Основные моменты********************************
            - ******ООП******
                - ООП - это способ организации программы через взаимодействие отдельных объектов, содержащих данные и методы для работы с этими данными. Обычно в ООП выделяют три базовых принципа:
                    - Инкапсуляция
                    Данные объединяются в одно целое с программным кодом, предназначенным для их обработки.
                    Фактически организация программы через взаимодействие объектов является реализацией принципа инкапсуляции.
                    На программном уровне инкапсуляция реализуется путем использования **классов и объектов** (объекты создаются на основе классов).
                    - Полиморфизм
                    Подразумевает использование единого интерфейса для решения однотипных задач.
                    Проявлением полиморфизма является тот факт, что нередко в программе один и тот же метод можно вызывать с разными аргументами. Это удобно.
                    Проявлением полиморфизма является перегрузка и переопределение методов
                    - Наследование
                    Позволяет создавать объекты не на пустом месте, а использованием ранее разработанных утилит. 
                    В языке C# наследование позволяет создавать классы на основе уже существующих классов. 
                    Эти классы используются для создания объектов.
                    Вообще, название этого механизма очень точно отображает его сущность и занимает важное место в концепции языка.
        - **********Книги**********
            - «[Разработка обслуживаемых программ на языке C#](https://drive.google.com/file/d/1OSyEwvwIodTLNlq6qOvXJApK_NlX3bUA/view?usp=drive_link)», Джуст В.
                
                Международный стандарт ISO25010 различает восемь характеристик программного обеспечения:
                
                - **Обслуживаемость**
                - **Функциональная пригодность**
                - **Эффективность работы**
                - **Совместимость**
                - **Удобство использования**
                - **Надежность**
                - **Безопасность**
                - **Переносимость**
                
                Можно выделить следующие четыре вида обслуживания программного обеспечения:
                
                - Устранение выявленных ошибок (так называемое **корректирующее обслуживание**)
                - Адаптация системы к изменениям в окружающей среде, где она функционирует, например, при обновлении ОС или смене технологий (называется **адаптивным обслуживанием**)
                - Обеспечение изменения требований пользователей системы и/или других заинтересованных сторон (это **улучшающее обслуживание**)
                - Повышение качества или предотвращение будущих ошибок (**профилактическое обслуживание**).
                
                Почему так важна обслуживаемость?
                
                - Обслуживаемость или отсутствие таковой оказывает существенное влияние на деловую сторону вопроса
                - Обслуживаемость обеспечивает улучшение других характеристик качества.
            - ******************Васильев А. “Программирование на C# для начинающих”. Выжимки******************
                - ********************************************************************Задания для самостоятельной работы********************************************************************
                    - **************Часть 1**************
                        1. Напишите программу, в которой пользователь вводит сначала имя, а затем фамилию. Программа выводит сообщение с информацией об имени и фамилии пользователя. Предложите версию программы, в которой ввод и вывод текста осуществляется с помощью диалоговых окон. 
                        Также используйте консольную версию программы.
                        2. Напишите программу, в которой пользователь вводит имя и возраст. 
                        Программа отображает сообщение об имени и возрасте пользователя. 
                        Предложите консольную версию программы и версию, в которй данные выводятся с помощью диалоговых окон
                        3. Напишите программу, в которой пользователь последовательно вводит название текущего дня недели, название месяца и дату (номер дня в месяце). Программа выводит сообщение о сегодняшней дате (день недели, дата, месяц). Используйте консольный ввод и вывод данных. 
                        Предложите версию программы, в которой для ввода и вывода данных используются диалоговые окна.
                        4. Напишите программу, в которой пользователю предлагается ввести название месяца и количество дней в этом месяце.
                        Программа выводит сообщение о том, что соответствующий месяц содержит указанное количество дней. 
                        Предложите версии программы для ввода / вывода данных через консоль и с помощью диалоговых окон.
                        5. Напишите программу, в которой по году рождения определяется возраст пользователя. 
                        Используйте консольный ввод и вывод данных.
                        6. Напишите программу, в которой пользователь вводит имя и год рождения, а программа отображает сообщение, содержащее имя пользователя и его возраст. Предложите консольную и версию с диалоговыми окнами
                        7. Напишите программу, в которой по возрасту определяется год рождения. Возраст пользователь вводит в окно с полем, а вычисленный год рождения отображается в другом диалоговом окне. Предложите вариант программы, в которой используется консольный ввод и вывод данных.
                        8. Напишите программу для вычисления суммы двух чисел. Оба числа вводятся пользователем. Для вычисления суммы используйте оператор +. Предложите два варианта программы: программу, в которой данные вводятся и выводятся с помощью диалоговых окон, и программу, в которой используется консольный ввод и вывод данных.
                        9. Напишите программу, в которой пользователь вводит число, а программой отображается последовательность из трех чисел: число, на единицу меньше введенного, введенное число и число на единицу больше введенного. 
                        Предложите версию программы с консольным вводом и выводом данных, а также версию программы, в которой ввод и вывод выполняется с помощью диалоговых окон.
                        10. Напишите программу, в которой пользователь вводит два числа, а программой вычисляется и отображается сумма и разность этих чисел. Предложите варианты программы с использованием консольного ввода / вывода данных и ввода и вывода с помощью диалоговых окон.
                    - **************Часть 2**************
                        1. Напишите программу, которая проверяет, делится ли введенное пользователем число на 3
                        2. Программа проверяет, удовлетворяет ли введенное число следующим критериям: при делении на 5 в остатке получается 2, а при делении на 7 в остатке получается 1.
                        3. Программа проверяет, удовлетворяет ли введенное пользователем число следующим критериям: число делится на 4, и при этом оно не меньше 10
                        4. Программа проверяет, попадает ли введенное пользователем число в диапазон от 5 до 10 включительно
                        5. Программа проверяет, сколько тысяч во введенном пользователем числе (определяется четвертая цифра справа в десятеричном представлении числа).
                        6. Программа проверяет вторую справа цифру в восьмеричном представлении числа, введенного пользователем. Число вводится в десятеричном представлении.
                        7. Программа вычисляет третий бит справа в двоичном представлении числа, введенного пользователем. Число вводится в десятеричном представлении. В программе используйте оператор побитового сдвига.
                        8. Программа, в которой для введенного пользователем числа в бинарном представлении третий бит устанавливается равным единице.
                        9. Программа, в которой для введенного пользователем числа в бинарном представлении четвертый бит устанавливается равным нулю.
                        10. Программа, в которой для введенного пользователем числа в бинарном представлении значение второго бита меняется на противоположное (исходное нулевое значение бита меняется на единичное, а исходное единичное значение бита меняется на нулевое).
                    - **************Часть 3**************
                        1. Напишите программу. Пользователь вводит число, а программа проверяет, делится ли это число на 3 и на 7. 
                        Результаты в диалоговое окно. 
                        Использовать обработку исключений
                        2. Пользователь последовательно вводит два целых числа. 
                        Программа определяет, какое из чисел больше или они равны и выводит сообщение в диалоговом окне.
                        Использовать обработку исключений
                        3. Программа вычисляет сумму чисел, которые вводит пользователь.
                        Выводится запрос на ввод числа, считываем введенное, прибавляем его к сумме и снова запрос на ввод числа.
                        Процесс продолжается до тех пор, пока пользователь не введет нулевое значение.
                        Использовать обработку исключений
                        4. Пользователь вводит целое число в диапазоне от 1 до 7.
                        Программа определяет по числу день недели. 
                        Если число выходит за допустимый диапазон, выводится сообщение о том, что введено некорректное значение.
                        Использовать оператор выбора switch. 
                        Предложить механизм обработки ошибки, связанной с вводом нечислового значения.
                        5. Пользователю предлагается ввести название дня недели.
                        По введенному названию программа определяет порядковый номер дня в неделе.
                        Если пользователь вводит неправильное название дня, программа выводит сообщение о том, что такого дня нет.
                        Предложить версию на основе вложенных условных операторов и на основе switch case
                        6. Программа вычисляет сумму нечетных чисел. Для проверки результата воспользуйтесь тем, что 2 + 4 + 6 + … + 2х = х ( х + 1). Предложить версии, использующие разные операторы цикла.
                        7. Программа для вычисления суммы квадратов натуральных чисел. 
                        Для проверки результата: 1(2) + 2(2) + … + х(2) = ( х ( х + 1) ( 2х + 1)) / 6. 
                        Предложить версии программы, использующие разные операторы цикла.
                        8. Программа выводит последовательность чисел Фибоначчи.(каждое следующее число равно сумме двух предыдущих).
                        Количество чисел в последовательности вводится пользователем. 
                        Предложить версии программы, использующие разные операторы цикла.
                        9. Пользователь вводит два целых числа. 
                        Программа выводит все целые числа, начиная с наименьшего и заканчивая наибольшим. 
                        Предложить версии программы, использующие разные операторы цикла, а также механизм обработки исключений для этой программы
                        10. Программа вычисляет сумму чисел, удовлетворяющих таким критериям: при делении числа на 5 в остатке получается 2, или при делении на 3 в остатке 1.
                        Количество чисел в сумме вводится пользователем.
                        Программа отображает числа, которые суммируются, и значение суммы.
                        Предложить версии программы, использующие разные операторы цикла.
                        Использовать обработку исключений
                    - ******************Часть 4. Массивы******************
                        - ******************Что будет******************
                            - Одномерные массивы - способы их объявления и использования
                            - Особенности работы с двумерными массивами
                            - Способы инициализации массивов
                            - Выполнение основных операций с массивами - в частности, речь будет идти о копировании и присваивании массивов
                            - Создание зубчатых массивов - т.е. массивов со строками разной длины
                            - Особенности массива из объектных ссылок
                            
                            Также познакомимся со способами обработки аргументов командной строки. Еще в главе есть различные примеры использования массивов. Начнем же с азов - с создания одномерных массивов.
                            
                        - ************************************Одномерные массивы************************************
                            
                            **тип[] переменная = new тип[размер]**
                            `int[] nums = new int[10];`
                            
                            ****************************************************************************************************Задача по созданию массива состоит из двух этапов:****************************************************************************************************
                            
                            - Объявление переменной массива
                            - Создание массива и присваивание ссылки на массив переменной массива.
                        - **************Задания**************
                            1. Напишите программу, в которой создается одномерный числовой массив и заполняется числами, которые при делении на 5 дают в остатке 2 (числа 2, 7, 12, 17 и тд).
                            Размер массива вводится пользователем. 
                            Предусмотреть обработку ошибки, связанной с вводом некорректного значения.
                            2. Напишите программу, в которой создается массив из 11 целочисленных элементов. 
                            Массив заполняется степенями двойки с 1 до 1024.
                            При заполнении массива учесть, что начальный элемент равен 1, а каждый следующий больше предыдущего в 2 раза.
                            Отобразить массив в консольном окне в прямом и обратном порядке.
                            Размер массива задается переменной.
                            3. Напишите программу, в которой создается одномерный символьный массив из 10 элементов. Массив заполняется буквами “через одну”, начиная с буквы ‘a’, 
                            Отобразите массив в консольном окне в прямо и обратном порядке. 
                            Размер массива задается переменной.
                            4. Напишите программу, в которой создается символьный массив из 10 элементов.
                            Массив заполнить большими (прописными) буквами английского алфавита. Буквы берутся подряд, но только согласные. Отобразите содержимое созданного массива в консольном окне.
                            5. Напишите программу, в которой создается массив и заполняется случайными числами.
                            Массив отображается в консольном окне.
                            В этом массиве необходимо определить элемент с минимальным значением.
                            В частности, программа должна вывести значение элемента с минимальным значением и индекс этого элемента.
                            Если элементов с минимальным значением несколько, должны быть выведены индексы всех этих элементов.
                            6. Напишите программу, в которой создается целочисленный массив, заполняется случайными числами и после этого значения элементов в массиве сортируются в порядке убывания значений.
                            7. Напишите программу, в которой создается символьный массив, а затем порядок элементов в массиве меняется на обратный.
                            8. Напишите программу, в которой создается двумерный целочисленный массив.
                            Он заполняется случайными числами. 
                            Затем в этом массиве строки и столбцы меняются местами: первая строка становится первым столбцом, вторая строка становится вторым столбцом и тд
                            Например, если исходный массив состоял из 3 строк и 5 столбцов, то в итоге получаем массив из 5 строк и 3 столбцов
                            9. Напишите программу, в которой создается и инициализируется двумерный числовой массив
                            Затем из этого массива удаляется строка и столбец (создается новый массив, в котором по сравнению с исходным удалена одна строка и один столбец). Индекс удаляемой строки и индекс удаляемого столбца определяется с помощью генератора случайных чисел.
                            10. Напишите программу, в которой создается двумерный числовой массив и этот массив заполняется “змейкой”: сначала первая строка (слева направо), затем последний столбец (сверху вниз), последняя строка (справа налево). первый столбец (снизу вверх), вторая строка (слева направо) и тд.
                    - ******************************************************Часть 5. Статические методы******************************************************
                        1. Напишите программу со статическим методом, которым описано вычисление двойного факториала числа, переданного аргументом методу. 
                        По определению, двойной факториал числа обозначается как п!! - это произведение через одно всех чисел, не больших п. Например, 6! = 6 х 4 х 2 = 48 и 5!! = 5 х 3 х 1 = 15
                        Предложите версию метода без рекурсии и с рекурсией.
                        2. Напишите программу со статическим методом, которым вычисляется сумма квадратом натуральных чисел. Число п передается аргументом методу.
                        Предложите версию метода без рекурсии и с рекурсией.
                        3. Напишите программу со статическим методом, которому аргументом передается целочисленный массив и целое число. Результатом метод возвращает ссылку на новый массив, который получается из исходного массива (переданного первым аргументом методу), если в нем взять несколько начальных элементов. 
                        Количество элементов, которые нужно взять из исходного массива, передаются вторым аргументом методу.
                        Если второй аргумент метода больше длины массива, переданного первым аргументом, то методом создается копия исходного массива и возвращается ссылка на эту копию.
                        4. Напишите программу со статическим методом, аргументом которому передается символьный массив, а результатом возвращается ссылка на целочисленный массив, состоящий из кодов символов из массива-аргумента
                        5. Напишите программу со статическим методом, аргументом которому передается целочисленный массив, а результатом возвращается среднее значение для элементов массива (сумма значений элементов, деленная на количество элементов в массиве).
                        6. Напишите программу со статическим методом, аргументом которому передается двумерный целочисленный массив. 
                        У метода, кроме аргумента-массива, есть два неинициализированных аргумента.
                        Результатом метод возвращает значение наибольшего элемента в массиве. 
                        Неинициализированным аргументам присваиваются значения индексов этого элемента.
                        7. Напишите программу со статическим методом, аргументом которому передается одномерный символьный массив. 
                        В результате вызова метода элементы массива попарно меняются местами: первый - с последним, второй - с предпоследним и тд
                        8. Напишите программу с перегруженным статическим методом. Если аргументом методу передается два целых числа, то результатом возвращается ссылка на целочисленный массив, состоящий из натуральных чисел, а первое и последнее число в массиве определяется аргументами метода.
                        Например, если передать аргументами числа 2 и 4, то результатом будет массив из чисел 2, 3 и 4.
                        Если аргументами методу передаются два символьных значения, то результатом возвращается ссылка на массив, состоящий из последовательности символов, а первый и последний символы определяются аргументами метода.
                        9. Напишите программу со статическим методом, аргументом которому передается произвольное количество целочисленных аргументов. Результатом метод возвращает массив из двух элементов: это значения наибольшего и наименьшего значений среди аргументов, переданных методу
                        10. Напишите программу со статическим методом, аргументом которому передается текст и произвольное количество символьных аргументов. 
                        Результатом возвращается текст, который получается добавлением в конец исходного текста (первый аргумент метода) символьных значений, переданных аргументами методу.
                    - ****************Часть 6. Знакомство с классами и объектами****************
                        1. Напишите программу с классом, в котором есть закрытое символьное поле и три открытых метода. 
                        Один из методов позволяет присвоить значение полю.
                        Еще один метод при вызове возвращает результатом код символа.
                        Третий метод позволяет вывести в консольное поле символ (значение поля) и его код
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_1
                                { /* Напишите программу с классом, в котором есть закрытое символьное поле и три открытых метода. 
                                Один из методов позволяет присвоить значение полю.
                                Еще один метод при вызове возвращает результатом код символа.
                                Третий метод позволяет вывести в консольное поле символ (значение поля) и его код
                                   */
                                    class MyClass
                                    {
                                        private char symbol; // Закрытое символьное поле
                                        public void set(char s)
                                        { // Открытый метод позволяет присвоить значение полю
                                            symbol = s; // Значение символьного поля
                                        }
                                        public void show()
                                        { // Открытый метод при вызове возвращает результатом код символа
                                            Console.WriteLine("Код символа: " + (int)symbol); // Возвращаем код символа
                                        }
                                        public void showSymbol()
                                        { // Открытый метод позволяет вывести в консольное поле символ (значение поля) и его код
                                            Console.WriteLine("Символ: " + symbol);
                                            Console.WriteLine("Код символа: " + (int)symbol);
                                        }
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                            MyClass A = new MyClass();
                                            A.set('G');
                                            A.show();
                                            A.showSymbol();
                                        }
                                    }
                                }
                                ```
                                
                        2. Напишите программу с классом, у которого есть два символьных поля и метод. Он не возвращает результат и у него нет аргументов.
                        При вызове метод выводит в консольное окно все символы из кодовой таблицы, которые находятся “между” символами, являющимися значениями полей объекта (из которого вызывается метод).
                        Например, если полям объекта присвоены значения ‘A’ , ‘D’, то при вызове метода в консольное окно должны выводиться все символы от ‘A’ до ‘D’ включительно.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        3. Напишите программу с классом,  у которого есть два целочисленных поля. 
                        В классе должны быть описаны конструкторы, позволяющие создавать объекты без передачи аргументов, с передачей одного аргумента и с передачей двух аргументов.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        4. Напишите программу с классом,  у которого есть символьное и целочисленное поле. 
                        В классе должны быть описаны версии конструктора с двумя аргументами (целое число и символ - определяют значения полей), а также с одним аргументом типа double. В последнем случае действительная часть аргумента определяет код символа (значение символьного поля), а дробная часть (с учетом десятых и сотых) определяет значение целочисленного поля. 
                        Например, если аргументом передается число 65.1267, то значением символьного поля будет символ ‘A’ с кодом 65, а целочисленное поле получить значение 12 (в дробной части учитываются только десятые и сотые).
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        5. Напишите программу с классом,  у которого есть закрытое целочисленное поле. 
                        Значение полю присваивается с помощью открытого метода. 
                        Методу аргументом может передаваться целое число, а также метод может вызываться без аргументов. 
                        Если метод вызывается без аргументов, то поле получает нулевое значение. 
                        Если метод вызывается с целочисленным аргументом, то это значение присваивается полю. Однако, если переданное аргументом методу значение превышает 100, то значением полю присваивается число 100. 
                        Предусмотрите в классе конструктор, который работает по тому же принципу, что и метод для присваивания значения полю. Также в классе должен быть метод. позволяющий проверить значение поля.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        6. Напишите программу с классом,  в котором есть два закрытых целочисленных поля (назовем их макс и мин). Значение поля макс не может быть меньше значения мин. Значения полям присваиваются с помощью открытого метода. Метод может вызываться с одним или двумя целочисленными аргументами.
                        При вызове метода значения полям присваиваются так: сравниваются текущие значения полей и значения аргумента или аргументов, переданных методу. 
                        Самое большое из значений присваивается полю макс, а самое маленькое - мин.
                        Предусмотрите конструктор, который работает по тому же принципу, что и метод для присваивания значений полям. 
                        В классе также должен быть метод, отображающий в консольном окне значения полей объекта.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        7. Напишите программу с классом,  в котором есть два поля: символьное и текстовое.
                        В классе должен быть перегруженный метод для присваивания значений полям. Если метод вызывается с символьным аргументом, то соответствующее значение присваивается символьному полю.
                        Если метод вызывается с текстовым аргументом, то он определяет значение текстового поля. Методу аргументом также может передаваться символьный массив. 
                        Если массив состоит из одного элемента, то он определяет значение символьного поля. В противном случае (если в массиве больше одного элемента) из символов массива формируется текстовая строка и присваивается значением текстовому полю.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        8. Напишите программу с классом,  в котором есть закрытое статическое целочисленное поле с начальным нулевым значением. 
                        В классе должен быть описан статический метод, при вызове которого отображается текущее значение статического поля, после чего значение поля увеличивается на единицу.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        9. Напишите программу с классом,  в котором есть статические методы, которым можно передавать произвольное количество целочисленных аргументов (или целочисленный массив). Методы, на основании переданных аргументов или массива, позволяют вычислить: наибольшее значение, наименьшее значение, а также среднее значение из набора чисел. 
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        10. Напишите программу со статическим методом для вычисления косинуса. 
                        Используйте формулу $cos(x) = 1 - x^2/2! + x^4/4! + ... + ((-1)^n*x^2n)/(2n)!$
                        В классе также должны быть статические методы для вычисления гиперболического синуса $sh(x) = x + x^3/3! + x^5/5! + ... + x^(2n+1)/(2n+1)!$  и гиперболического косинуса $ch(x) = 1 + x^2/2! + x^4/4! + ... + x^(2n)/(2n)!$
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                    - **************************************************Часть 7. Работа с текстом**************************************************
                        1. Напишите программу, в которой есть статический метод. Аргументом методу передается текстовое значение. 
                        Результатом метод возвращает текст, в котором, по сравнению с текстом-аргументом, между символами вставлены пробелы.
                        2. Напишите программу, в которой есть статический метод. 
                        Результатом метод возвращает текстовое значение и получающий аргументом текст.
                        Результат метода - это переданный аргументом текст, в котором слова следуют в обратном порядке.
                        Словами считать блоки текста, разделенные пробелами.
                        3. Напишите программу, в которой есть статический метод, который сравнивает текстовые строки.
                        Строки на предмет совпадения сравниваются посимвольно.
                        Правило сравнения такое: два символа считаются одинаковыми, если их коды отличаются не больше, чем на единицу.
                        Текстовые строки совпадают, если у них совпадают символы (в указанном выше смысле).
                        4. Напишите программу, в которой есть статический метод выполняющий сравнение текстовых строк.
                        Текстовые строки сравниваются следующим образом: для каждого текстового значения определяется набор разных букв, входящих в текст (при этом количество вхождений буквы в текст значения не имеют). 
                        Текстовые строки считаются равными, если они содержат одинаковые наборы букв.
                        5. Напишите программу, в которой есть статический метод, определяющий позиции, на которых в тексте находится определенный символ.
                        Аргументами методу передаются текст и символ. 
                        Результатом метод возвращает целочисленный массив, значения элементов которого - это индексы позиций, на которых символ (второй аргумент) находится в тексте (первый аргумент). 
                        Если символ в тексте не встречается, то метод результатом возвращает массив из одного элемента, значение которого равно -1
                        6. Напишите программу, в которой есть статический метод, аргументом которому передается текст, а результатом возвращается символьный массив, состоящий из букв (без учета пробелов и знаков препинания), из которых состоит текст. Если буква несколько раз встречается в тексте, в массиве она представлена одним элементом. 
                        Буквы в массиве-результате должны быть отсортированы в алфавитном порядке.
                        7. Напишите программу, в которой есть статический метод, эмулирующий работу метода Substring(). 
                        Аргументами статическому методу передается текст и два целочисленных аргумента. 
                        Результатом метод возвращает текстовую строку, которая состоит из символов текста (первый аргумент), начиная с позиции с индексом, определяемым вторым аргументом метода. 
                        Третий аргумент статического метода определяет количество символов, которые включаются в подстроку.
                        8. Напишите программу с классом, у которого есть текстовое поле. 
                        Значение текстовому полю присваивается при создании объекта класса.
                        Также в классе должен быть метод, позволяющий вставить подстроку в текст из текстового поля. 
                        Аргументами методу передается подстрока для вставки в текст, а также индекс позиции, начиная с которой выполняется вставка.
                        Переопределить в классе метод ToString() так, чтобы он возвращал значением текст из текстового поля. 
                        9. Напишите программу с классом, в котором есть текстовое поле и символьное поле. 
                        Значение полям присваивается при создании объекта класса. В классе должен быть метод, возвращающий результатом массив из текстовых строк. Такие строки получаются разбиением на подстроки значения текстового поля. 
                        Символ, являющийся индикатором для разбивки на подстроки, определяется значением символьного поля. 
                        Переопределить в классе метод ToString() так, чтобы он возвращал текст со значениями полей объекта и подстроки, на которые разбивается текст из текстового поля.
                        10. Напишите программу с классом, у которого есть поле, являющееся ссылкой на целочисленный массив.
                        При создании объекта массив заполняется случайными числами. Переопределите в классе метод ToString() так, чтобы метод возвращал текстовую строку со значениями элементов массива.
                        Также строка должна содержать информацию о количестве элементов массива и среднем значении для элементов массива (сумма значений элементов, деленная на количество элементов).
                    - ************************************************************Часть 8. Перегрузка операторов************************************************************
                        1. Напишите программу, в которой есть класс с символьным полем и следующими перегруженными операторами: оператором инкремента ++ и декремента —, бинарным оператором “плюс” + и “минус” -.
                        Правила перегрузки операторов такие: применение оператора инкремента к объекту приводит к тому, что поле значением получает следующий (по отношению к текущему значению) символ в кодовой таблице. 
                        Применение оператора декремента приводит к тому, что поле получает значением предыдущий (по отношению к текущему значению) символ в кодовой таблице.
                        Значением выражения на основе оператора инкремента / декремента является ссылка на объект-операнд. 
                        Бинарный оператор “плюс” можно применять для вычисления суммы объекта и целого числа, а аткже суммы целого числа и объекта.
                        В обоих случаях результатотм возвращается новый объект, значение символьного поля которого определяется прибавлением целого числа (один из операндов) к коду символа из объекта-операнда. 
                        С помощью бинарного оператора “минус” можно вычислять разность двух объектов. 
                        Результатом является целое число - разность кодов символов из объектов-операндов.
                        2. Напишите программу, в которой есть класс с полем, являющимся ссылкой на одномерный целочисленный массив.
                        У класса есть конструктор с одним целочисленным аргументом, определяющим размер массива. При создании объекта все элементы массива получают нулевые значения.
                        В классе перегружаются следующие операторы: 
                         - Унарный ~ перегружен таким образом, что результатом возвращается текстовая строка со значениями элементов массива (на который ссылается поле объекта, к которому применяется оператор).
                         - Унарный оператор инкремента ++ перегружен так, что его применение к объекту приводит к добавлению в массив нового элемента с нулевым значением. Результатом возвращается ссылка на объект-операнд.
                         - При применении к объекту оператора декремента — из массива удаляется один элемент (например, последний), а результатом возвращается ссылка на объект-операнд. 
                         - Бинарный оператор сложения + должен быть определен так, чтобы можно было вычислять сумму двух объектов, объекта и числа, а также числа и объекта. Во всех случаях возвращается новый объект.
                        Если в операции участвуют два объекта-операнда, то в объекте-результате массив формируется объединением массивов складываемых объектов. Если вычисляется сумма объекта и числа, то в объекте-результате массив получается добавлением нового элемента к массиву из объекта-перанда. 
                        Значение добавляемого элемента определяется значением числа-операнда. 
                        Если к числу прибавляется объект, то новый элемент добавляется в начало массива. 
                        Если к объект прибавляется число, то новый элемент добавляется в конец массива. 
                        3. Напишите программу, в которой есть класс с двумя целочисленными полями.
                        Опишите для этого класса операторные методы, которые позволяют сравнивать объекты класса на предмет “меньше” или “больше”.
                        Исходите из того, что один объект меньше / больше другого, если сумма квадратов значений его полей меньше / больше суммы квадратов значений полей другого объекта.
                        4. Напишите программу, в которой есть класс с целочисленным полем и текстовым полем. 
                        Выполните перегрузку всех операторов сравнения.
                        Сравнение на предмет “больше” или “меньше” выполняется на основе сравнения длины текстовых значений (имеются ввиду текстовые поля сравниваемых объектов). 
                        При сравнении на предмет “больше или равно” или “меньше или равно” сравниваются значения целочисленных полей объектов. 
                        При сравнении на предмет “равно” или “не равно” сравниваются и целочисленные, и текстовые поля объектов. 
                        Также предложите способ переопределения методов Equals() и GetHashCode().
                        5. Напишите программу, в которой есть класс с целочисленным полем и символьным полем. 
                        Перегрузите операторы true и false так, чтобы “истинным” считался объект, у которого разность значения целочисленного поля и кода символа из символьного поля не превышает величину 10.
                        Используйте объект данного класса  (в качестве условия в условном операторе) для того, чтобы отобразить последовательность символов в консольном окне.
                        6. Напишите программу, в которой есть класс с целочисленным полем.
                        Перегрузите операторы &, |, true и false так, чтобы с объектами класса можно было использовать операторы && и ||.
                        Перегрузку следует реализовать так, чтобы объект считался “истинным”, если значение его числового поля равно 2, 3, 5 или 7.
                        Объект должен рассматриваться как “ложный”, если значение его числового поля меньше 1 или больше 10.
                        7. Напишите программу, в которой есть класс с текстовым полем.
                        Опишите в классе операторные методы для выполнения приведения типов.
                        Необходимо определить следующие способы преобразований. При преобразовании объекта в целое число результатом возвращается количество символов в значении текстового поля.
                        При преобразовании объекта в символ результатом является первый символ в тексте.
                        При преобразовании числа в объект создается (и возвращается результатом соответствующего операторного метода) объект, текстовое поле которого содержит текстовую строку из символов ‘A’.
                        Количество символов в тексте определяется преобразуемым числом.
                        8. Напишите программу, в которой есть класс с полем, являющимся ссылкой на целочисленный массив.
                        Опишите в классе операторные методы для выполнения приведений типов. 
                        Необходимо реализовать следующие правила приведения типов.
                        При преобразовании объекта в текст возвращается текстовая строка со значениями элементов массива.
                        При преобразовании объекта в число возвращается сумма элементов массива.
                        При преобразовании числа в объект результатом является новый объект, размер массива в котором определяется преобразуемым числом.
                        Массив в объекте должен быть заполнен нулями.
                        9. Напишите программу, в которой есть класс с целочисленным полем и перегрузкой операторов +, - и *.
                        Предложите такой способ перегрузки этих операторов, чтобы с объектами класса можно было использовать операторы +=, -= и *=.
                        10. Напишите программу, в которой есть класс с символьным полем и перегрузкой операторов + и -.
                        11. Операторы должны быть перегружены так, чтобы применение оператора + к объектам класса давало результатом текст, получающийся объединением значений символьных полей суммируемых объектов. При применении оператора - к объектам класса результатом должно возвращаться целое число (разность кодов символов из вычитаемых объектов).
                        Предложите такие способы перегрузки операторов приведения типа, чтобы с объектами класса можно было использовать операторы += и -=.
                    - ********************************************************Часть 9. Свойства и индексаторы********************************************************
                        1. Напишите программу, в которой есть класс с символьным свойством.
                        Опишите аксессоры для свойства так, чтобы значение свойства попадало в диапазон символов от ‘A’ до  ‘Z’ включительно
                        2. Напишите программу, в которой есть класс с целочисленным массивом и целочисленным свойством.
                        При считывании значения свойства оно последовательно и циклически возвращает значения элементов массива. 
                        При присваивании значения свойству изменяется значение того элемента, который в данный момент интерпретируется как значение свойства.
                        3. Напишите программу, в которой есть класс с целочисленным массивом. 
                        Опишите в классе свойство, доступное только для считывания значения.
                        Значением свойства является сумма элементов массива.
                        4. Напишите программу, в которой есть класс с закрытым неотрицательным целочисленным полем.
                        Также в классе должно быть закрытое текстовое поле, содержащее значением восьмеричный код числа из целочисленного поля.
                        Опишите в классе свойство, доступное только для присваивания значения.
                        При присваивании неотрицательного целочисленного значения свойству соответствующее число записывается в целочисленное поле, а в текстовое поле заносится восьмеричный код числа.
                        Опишите еще одно свойство, доступное только для чтения, которое результатом возвращает текст из текстового поля (восьмеричный код числа).
                        5. Напишите программу, в которой есть класс со статическим свойством.
                        При считывании значения свойства возвращается нечетное число, каждый раз новое: при первом считывании свойства получаем значение 1, затем 3, затем 5 и так далее.
                        При присваивании значения свойству определяется порядковый номер числа в последовательности нечетных чисел, начиная с которого будут возвращаться числа. 
                        Например, если присвоить свойству значение 5, то при считывании значения свойства получаем число 9 (пятое по порядку нечетное число), затем число 11, затем 13 и так далее.
                        6. Напишите программу, в которой есть класс с целочисленным массивом и с индексатором.
                        При считывании значения выражения с проиндексированным объектом результатом возвращается значение элемента массива.
                        При присваивании значения выражению с проиндексированным объектом значение присваивается элементу массива.
                        Необходимо описать индексатор так, чтобы при индексировании объекта первый индекс отличался от нуля.
                        Числовые значения, определяющие диапазон изменения индекса (и, соответственно, размер целочисленного массива) при индексировании объекта, передаются аргументами конструктору класса.
                        7. Напишите программу с классом, в котором есть неотрицательное целочисленное поле.
                        Опишите для класса индексатор (с одним get-аксессором) такой, что при индексировании объекта с целочисленным индексом результатом возвращается значение бита в бинарном представлении числа (значение целочисленного поля).
                        8. Напишите программу, с классом, у которого есть неотрицательное целочисленное поле. 
                        В классе нужно описать индексатор с целочисленным индексом и set-аксессором.
                        Присваивание значения проиндексированному объекту обрабатывается следующим образом. 
                        В фактически присваиваемом значении берется только последняя цифра (остаток от деления числа на 10). Индекс определяет разряд в числовом значении поля, в который записывается цифра.
                        Нулевой разряд соответствует единицам, единичный - десяткам и тд. 
                        Например, если объект проиндексирован числом 1 и присваивается значение, заканчивающееся на 5, то это означает, что в числе, которое является значением поля, в разряд десятков (разряд 1) нужно записать цифру 5.
                        9. Напишите программу с классом, в котором есть двумерный числовой массив. 
                        Опишите два индексатора для класса. 
                        Двумерный индексатор с двумя целочисленными индексами позволяет прочитать и изменить значение элемента в двумерном массиве, а индексатор с одним целочисленным индексом возвращает результатом значение наибольшего элемента в строке двумерного массива.
                        Присваивание значения выражению на основе объекта с одним индексом означает присваивание значения тому элементу в строке, который на данный момент имеет наибольшее значение.
                        Строка определяется индексом, указанным при индексировании объекта. 
                        Если в строке несколько элементов с наибольшим значением, то используется первый такой элемент
                        10. Напишите программу с классом, в котором есть текстовый массив.
                        Опишите в классе одномерный и двумерный индексаторы. 
                        Одномерный индексатор позволяет прочитать элемент текстового массива и присвоить новое значение элементу текстового массива. 
                        Двумерный индексатор позволяет прочитать символ в элементе текстового массива (первый индекс определяет элемент в текстовом массиве, а второй индекс определяет символ в тексте). 
                        Предусмотрите циклическую перестановку индексов в случае, если они выходят за верхнюю допустимую границу.
                    - **************Часть 10. Наследование**************
                        1. Напишите программу, в которой есть базовый класс с защищенным текстовым полем, конструктором с текстовым аргументом и где переопределен метод ToString(). На основе базового класса путем наследования создается производный класс. 
                        У него появляется еще одно защищенное текстовое поле.
                        Также производный класс должен иметь версии конструктора с одним и двумя текстовыми аргументами, а еще в нем должен быть переопределен метод ToString(). 
                        В обоих классах метод ToString() переопределяется так, что он возвращает строку с названием класса и значение текстового поля или текстовых полей. 
                        2. Напишите программу, в которой есть базовый класс с защищенным текстовым полем. В базовом классе должен быть метод для присваивания значения полю: без аргументов и с одним текстовым аргументом. Объект базового класса создается передачей одного текстового аргумента конструктору. Доступное только для чтения свойство результатом возвращает длину текстовой строки. Доступный только для чтения индексатор возвращает значением символ из текстовой строки. На основе базового класса создается производный класс. В производном классе появляется дополнительное открытое целочисленное поле. В классе должны быть такие версии метода для присваивания значения полям (используется переопределение и перегрузка метода из базового класса): без аргументов, с текстовым аргументом, с целочисленным аргументом, с текстовым и целочисленным аргументом. У конструктора производного класса два аргумента (целочисленный и текстовый).
                        3. Напишите программу, в которой есть базовый класс с открытым полем, являющимся ссылкой на целочисленный массив. Конструктору класса при создании передается ссылка на массив, в результате чего создается копия этого массива и ссылка на него записывается в поле объекта. Метод ToString() переопределен так, что возвращает текстовую строку со значениями элементов массива. На основе базового класса создается производный класс. В производном классе появляется еще одно открытое поле, являющееся ссылкой на символьный массив. Конструктору производного класса передаются две ссылки: на целочисленный массив и на символьный массив. В результате должны создаваться копии этих массивов, а ссылки на созданные массивы записываются в поля объекта. Метод ToString() должен возвращать текстовую строку с содержимым обоих массивов.
                        4. Напишите программу, в которой на основе базового класса создается производный класс, а на основе этого производного класса создается еще один производный класс (цепочка наследования из трех классов). В первом базовом классе есть открытое целочисленное поле, метод с одним аргументом для присваивания значения полю и конструктор с одним аргументом. 
                        Во втором классе появляется открытое символьное поле, метод с двумя аргументами для присваивания значения полям (перегрузка метода из базового класса) и конструктор с двумя аргументами.
                        В третьем классе появляется открытое текстовое поле, метод с тремя аргументами для присваивания значений полям (перегрузка метода из базового класса) и конструктор с тремя аргументами.
                        Для каждого класса определите метод ToString() так, чтобы он возвращал строку с названием класса и значениями всех полей объекта.
                        5. Напишите программу, в которой использована цепочка наследования из трех классов.
                        В первом классе есть открытое символьное поле. Во втором классе появляется открытое текстовое поле. В третьем классе появляется открытое целочисленное поле. В каждом из классов должен быть конструктор, позволяющий создавать объект на основе значений полей, переданных аргументами конструктору, а также конструктор создания копии.
                        6. Напишите программу, в которой есть базовый класс с защищенным текстовым полем, конструктор с текстовым аргументом и метод, при вызове которого в консольном окне отображается название класса и значение поля. На основе базового класса создаются два производных класса (оба на основе одного и того же базового). В одном из классов появляется защищенное целочисленное поле, так есть конструктор с двумя аргументами и переопределен метод для отображения значений полей объекта и названия класса. Во втором производном классе появляется защищенное символьное поле, конструктор с двумя аргументами и переопределен метод, отображающий в консоли название класса и значения полей. 
                        В главном методе создайте объекты каждого из классов. 
                        Проверьте работу метода, отображающего значения полей объектов, для каждого из объектов. 
                        Вызовите этот же метод через объектную переменную базового класса, которая ссылается на объект производного класса.
                        7. Напишите программу, в которой есть базовый класс с открытым текстовым полем. 
                        На его основе создается производный класс с дополнительным открытым символьным полем. Опишите в базовом классе виртуальный метод, который при вызове создает и возвращает результатом объект производного класса. Переопределите в производном классе этот метод так, чтобы он создавал и возвращал копию объекта, из которого вызывается.
                        8. Напишите программу, в которой есть базовый класс с открытым целочисленным полем.
                        В классе описан виртуальный индексатор, позволяющий считывать цифры в десятичном представлении числа (значение поля). 
                        На основе базового класса создается производный класс, в котором появляется еще одно открытое целочисленное поле.
                        В производном классе описывается версия индексатора с двумя индексами: первый индекс определяет поле, значение которого используется, а второй индекс определяет разряд, для которого считывается цифра. Индексатор с одним индексом переопределяется так, что вычисления (считывание цифры в десятичном представлении числа) производятся на основе значения, равного сумме значений полей индексируемого объекта.
                        9. Напишите программу, в которой есть базовый класс с защищенным текстовым полем. В классе имеется виртуальное текстовое свойство, возвращающее значением текст из текстового поля.
                        При присваивании значения свойству значение присваивается текстовому полю. 
                        В классе переопределен метод ToString(): он возвращает текстовую строку с названием класса и значением текстового поля. 
                        На основе базового класса создается производный класс, у которого появляется еще одно текстовое поле. Свойство переопределяется так, что значением возвращается текст, получающийся объединением (через пробел) значений текстовых полей объекта.
                        При присваивании значения свойству присваиваемая текстовая строка разбивается на две, которые присваиваются полям объекта. Разделителем для разбивки строки на две подстроки является пробел (первый с начала строки). Если пробела нет, то первая подстрока совпадает с исходной строкой, а вторая подстрока пустая. Метод ToString() для производного класса нужно переопределить таким образом, чтобы он возвращал название класса и значения полей объекта.
                        10. Напишите программу, в которой есть базовый класс с защищенным целочисленным массивом, индексатором (с целочисленным индексом), позволяющим считывать и присваивать значения элементам массива, а также свойство, возвращающее результатом размер массива. На основе базового класса создается производный класс, у которого появляется защищенный символьный массив. 
                        Опишите в производном классе версию индексатора с символьным индексом, который возвращает значение элемента символьного массива и позволяет присвоить значение элементу символьного массива. 
                        Для свойства из базового класса необходимо выполнить замещение так, чтобы результатом возвращался целочисленный массив из двух элементов: первый элемент определяет размер целочисленного массива объекта, а второй элемент определяет размер символьного массива объекта.
                - ********************************************Примеры кодов из книги********************************************
                    - **************************************************************************Листинг 2.2. Количество сотен в числе**************************************************************************
                        
                        ```csharp
                        using System;
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class HundredsDemo
                        {
                            static void Main()
                            {
                                int number, hundreds; // Целочисленные переменные, считывание целого числа
                                number = Int32.Parse(
                                    Interaction.InputBox( // Надпись над полем ввода:
                                        "Введите целое число: ", "Количество сотен")); // Заголовок окна
                                hundreds = number / 100 % 10; // Формула для вычисления количества сотен
                                string txt = "В этом числе " + hundreds + " сотен!";
                                MessageBox.Show(txt, "Сотни"); // Отображение окна с сообщением
                            }
                        }
                        ```
                        
                    - **********************Знакомство через диалоговое окошко**********************
                        
                        ```csharp
                        Вариант 1
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class UsingIfDemo
                        {
                            static void Main()
                            {
                                // Переменная для определения типа пиктограммы:
                                MessageBoxIcon icon;
                                // Переменные для определения текста сообщения, заголовка окна и имени пользователя
                                string msg, title, name; // Считывание имени пользователя
                                name = Interaction.InputBox("Как вас зовут?", "Знакомимся");
                                // Текст над полем ввода, Название окна. Проверка введенного пользователем текста
                                if (name == "")
                                {
                                    // Пиктограмма ошибки
                                    icon = MessageBoxIcon.Error;
                                    // Текст сообщения
                                    msg = "Очень жаль, что мы не познакомились!";
                                    title = "Знакомство не состоялось"; // Заголовок окна
                                }
                                else
                                {
                                    // Если текст введен, информационная пиктограмма, текст сообщения и заголовок окна
                                    icon = MessageBoxIcon.Information;
                                    msg = "Очень приятно, мазафака " + name + "!";
                                    title = "Знакомство состоялось";
                                }
                                // Отображение сообщения (аргументы - текст сообщения, заголовок, кнопки и пиктограмма)
                                MessageBox.Show(msg, title, MessageBoxButtons.OK, icon);
                            }
                        }
                        ```
                        
                        ```csharp
                        Вариант 2
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class AnotherIfDemo
                        {
                            static void Main()
                            {
                                // Пиктограмма (сначала это пиктограмма ошибки)
                                MessageBoxIcon icon = MessageBoxIcon.Error;
                                string msg = "Очень жаль, что мы не познакомились!",
                                title = "Знакомство не состоялось", name; // Заголовок окна
                                // Переменные для записи имени пользователя
                                name = Interaction.InputBox("Как вас зовут?", "Знакомимся");
                                // Текст над полем ввода, Название окна. Проверка введенного пользователем текста
                                if (name != "")
                                { // Новый тип пиктограммы и новый текст сообщения
                                    icon = MessageBoxIcon.Information;
                                    msg = "Очень приятно, мазафака " + name + "!";
                                    title = "Знакомство состоялось";
                                }
                                // Отображение сообщения (аргументы - текст сообщения, заголовок, кнопки и пиктограмма)
                                MessageBox.Show(msg, title, MessageBoxButtons.OK, icon);
                            }
                        }
                        ```
                        
                    - ******************if - else******************
                        
                        ```csharp
                        using System;
                        class NestedIfDemo
                        {
                            static void Main()
                            {
                                string txt;
                                Console.WriteLine("Введите текст: ");
                                txt = Console.ReadLine();
                        
                                if (txt != "")
                                {
                                    Console.WriteLine("Спасибо, что ввели текст!");
                                    if (txt.Length > 10)
                                    {
                                        Console.WriteLine("Ого, как много букаф ипать!");
                                    }
                                    else
                                    {
                                        Console.WriteLine("А че как мало, йопт!?");
                                    }
                                }
                                else
                                {
                                    Console.WriteLine("Че, глухой шоле?");
                                }
                            }
                        }
                        ```
                        
                    - **********************************Определение введенного пользователем числа**********************************
                        - **********************************Консольная версия**********************************
                            
                            ```csharp
                            using System;
                            using System.Collections.Generic;
                            using System.Linq;
                            using System.Text;
                            using System.Threading.Tasks;
                            
                            namespace Определение_Числа_3_4
                            {
                                class AnotherNestedIfDemo
                                {
                                    static void Main()
                                    {
                                        int number;
                                        Console.Write("Введите целое число: ");
                                        number = Int32.Parse(Console.ReadLine());
                            
                                        if (number == 1) Console.WriteLine("Ты ввел единицу!");
                                        else if (number == 2) Console.WriteLine("Ты ввел двойку!");
                                        else if (number == 3) Console.WriteLine("Ты ввел тройку!");
                                        else if (number == 4) Console.WriteLine("Ты ввел четыре!");
                                        else Console.WriteLine("А вот это непонятно че ты навводил!..");
                                    }
                                }
                            }
                            ```
                            
                        - ************************************Версия с диалоговыми окнами************************************
                            
                            ```csharp
                            using System;
                            using System.Windows.Forms;
                            using Microsoft.VisualBasic;
                            using System.Collections.Generic;
                            using System.Linq;
                            using System.Text;
                            using System.Threading.Tasks;
                            
                            namespace _3_5_Знакомство_с_оператором_выбора
                            {
                                class SwitchDemo
                                {
                                    static void Main()
                                    {
                                        int number;
                                        string name;
                                        number = Int32.Parse(Interaction.InputBox("Введите число: ", "Число"));
                            
                                        switch (number)
                                        {
                                            case 1: name = "Единица";
                                                break;
                                            case 2: name = "Двойка";
                                                break;
                                            case 3:
                                                name = "Тройка";
                                                break;
                                            case 4:
                                                name = "Четверка";
                                                break;
                                                default;
                                                name = "Неизвестное число";
                                                break;
                                        }
                                        MessageBox.Show(name, "Число");
                                    }
                                }
                            }
                            ```
                            
                        - ****************************************************************************Оператор выбора с пустыми case-блоками****************************************************************************
                            
                            ```csharp
                            using System;
                            using System.Windows.Forms;
                            using Microsoft.VisualBasic;
                            namespace _3_6_Оператор_выбора_с_пустыми_case_блоками
                            {
                                class AnotherSwitchDemo
                                {
                                    /// <summary>
                                    ///  The main entry point for the application.
                                    /// </summary>
                                    [STAThread]
                                    static void Main()
                                    {
                                        int number; // Переменная для запоминания введенного числа
                                        string txt = ""; // Переменная для текста сообщения, далее считывание числа
                                        number = Int32.Parse(Interaction.InputBox("Введите целое число от 1 до 9: ", "Число"));
                                        switch (number) // Оператор выбора
                                        {
                                            case 1: // Если 1 или 9
                                            case 9:
                                                txt = "Вы ввели нечетное,\n но не простое число!";
                                                break;
                                            case 2: // Если значения 2, 3, 5 или 7
                                            case 3:
                                            case 5:
                                            case 7:
                                                txt = "Вы ввели простое число.";
                                                break;
                                            case 4: // Если 4 или 8
                                            case 8:
                                                txt = "Вы ввели число - степень двойки!";
                                                break;
                                            case 6:
                                                txt = "Вы ввели 6 - совершенное число!";
                                                break;
                                        }
                                        MessageBox.Show(txt, "Число"); // Отображение диалогового окна с сообщением
                                    }
                                }
                            }
                            ```
                            
                    - **********************************************************************Использование оператора цикла while**********************************************************************
                        - ************************************************Еще пример использования************************************************
                            
                            ```csharp
                            namespace _3_8_Еще_пример_использования_while
                            {
                                internal class AnotherWhileDemo
                                {
                                    static void Main(string[] args)
                                    {// Количество слагаемых в сумме и значение суммы
                                        int n = 10, s = 0;
                                        Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                        while (n > 0)
                                        {
                                            s += 2 * n - 1; // Добавляем слагаемое в сумму
                                            n--; // Новое значение переменной
                                        }
                                        Console.WriteLine(s);
                                    }
                                }
                            }
                            ```
                            
                        
                        ```csharp
                        namespace _3_7_Использование_оператора_цикла_while
                        {
                            internal class WhileDemo
                            {
                                static void Main(string[] args)
                                {
                                    int n = 10, k = 1, s = 0;
                                    Console.WriteLine("Сумма 1 + 3 + 5 + ... + {0} = ", 2*n-1);
                                    while(k<=n)
                                    {
                                        s += 2 * k - 1;
                                        k++;
                                    }
                                    Console.WriteLine(s);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Оператор цикла do-while**********************************************
                        
                        ```csharp
                        internal class DoWhileDemo
                            {
                                static void Main(string[] args)
                                {
                                    int n = 10, k = 1, s = 0;
                                    Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                        
                                    do
                                    {
                                        s += 2 * k - 1;
                                        k++;
                                    }
                                    while (k <= n);
                                    Console.WriteLine(s);
                                }
                            }
                        ```
                        
                    - ****************Цикл for****************
                        - ******************************************************Первый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                for (k = 1; k <= n; k++)
                                {
                                    s += 2 * k - 1;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Второй пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                for (int k = 1; k <= n; k++)
                                {
                                    s += 2 * k - 1;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Третий пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k, s;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 *  n - 1);
                                for (k = 1, s = 0; k <= n; s += 2 * k - 1, k++) ;
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Четвертый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k = 1, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                                for (; k <= n; )
                                {
                                    s += 2 * k - 1;
                                    k++;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Пятый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k = 1, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... {0} = ", 2 * n - 1);
                                for (; ;)
                                {
                                    s += 2 * k - 1;
                                    k++;
                                    if (k > n) break;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                    - ********Инструкция безусловного перехода goto********
                        
                        ```csharp
                        static void Main(string[] args)
                        {
                            int n = 10, k = 1, s = 0;
                            Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                        mylabel: //Использование метки
                            s += 2 * k - 1; // Добавляем слагаемое в сумму
                            k++; // Изменение значения индексной переменной
                            if (k <= n) goto mylabel; // Использование инструкции и переход к помеченному коду
                            Console.WriteLine(s);
                        }
                        ```
                        
                    - **************************************Перехват исключений**************************************
                        
                        ```csharp
                        **************try
                        {
                        	// Контролируемый код
                        }
                        catch
                        {
                        	// Код для обработки исключений
                        }**************
                        ```
                        
                        ```csharp
                        using System;
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        
                        namespace _3_16_Знакомство_с_Перехватом_Исключений_try_catch
                        {
                            internal static class TryCatchDemo
                            {
                                /// <summary>
                                ///  The main entry point for the application.
                                /// </summary>
                                [STAThread]
                                static void Main()
                                { // Сообщение о начале выполнения программы
                                    MessageBox.Show("Выполняется программа!", "Начало");
                                    // Перехват и обработка исключений
                                    try     // Контролируемый код
                                    {       // Попытка преобразовать текст в число
                                        Double.Parse(Interaction.InputBox("Введите действительное число", 
                                            "Число"));  // Отображение сообщения
                                        MessageBox.Show("Да, это было число!", "Число");
                                    }
                                    catch   // Блок обработки исключений
                                    {       // Отображение сообщения
                                        MessageBox.Show("Надо было ввести число!", "Эррор йопт!", 
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    }
                                    // Завершение блока обработки исключений и сообщ-е о зав-ии программы
                                    MessageBox.Show("Программа завершена", "Давай, некогда!");
                                }
                            }
                        }
                        ```
                        
                    - **************Массивы**************
                        - ****************************************4_1_Создание_одномерного_числового_массива****************************************
                            
                            ```csharp
                            internal class CharArrayDemo
                            {
                                static void Main(string[] args)
                                { // Массив заполняем числами, которые при делении на 3 дают остаток 1
                                    int[] nums = new int[12];
                                    for (int i = 0; i < nums.Length; i++)
                                    {
                                        nums[i] = 3 * i + 1;
                                        Console.Write("| " + nums[i] + " ");
                                    }
                                    Console.WriteLine("|");
                                }
                            }
                            ```
                            
                        - ******************************************4_2_Символьный_массив******************************************
                            
                            ```csharp
                            internal class CharArrayDemo
                                {
                                    static void Main(string[] args)
                                    {
                                        Random rnd = new Random(); // Генерируем случайные числа
                                        int size = 10, k;           // Размер массива и индексная переменная
                                        char[] symbs = new char[size]; // Создание символьного массива
                                        Console.WriteLine("Массив случайных символов: ");
                            
                                        for (k = 0; k < symbs.Length; k++)
                                        { // Заполняем массив случайными элементами
                                            symbs[k] = (char)('A' + rnd.Next(26));
                                            Console.Write("| " + symbs[k] + " ");
                                        }
                                        Console.WriteLine("|");
                                        Console.WriteLine("Массив в обратном порядке: ");
                            
                                        for(k = symbs.Length - 1; k >= 0; k--)
                                        {
                                            Console.Write("| " + symbs[k] + " ");
                                        }
                                        Console.WriteLine("|");
                                    }
                                }
                            ```
                            
                        - ********4_3_Инициализация_Одномерного_Массива********
                            
                            ```csharp
                            using System;
                            
                            namespace _4_3_Инициализация_Одномерного_Массива
                            {
                                internal class IntArrayDemo
                                {
                                    static void Main()
                                    { // Создание и инициализация массивов
                                        int[] nums = { 1, 3, 5, 7, 6, 5, 4 };
                                        char[] symbs = new char[] { 'A', 'Z', 'Z', 'B', 'Y' };
                                        string[] txts = new string[3] { "one", "two", "three" };
                            
                                        Console.WriteLine("Array nums: "); // Отображение содержимого массивов
                                        for (int k = 0; k < nums.Length; k++)
                                        {
                                            Console.Write(nums[k] + " ");
                                        }
                            
                                        Console.WriteLine("\nArray symbs: ");
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                            
                                        Console.WriteLine("\nArray txts: ");
                                        for (int k = 0; k < txts.Length; k++)
                                        {
                                            Console.Write(txts[k] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **********************************4_4_Копирование_и_Присваивание_Массивов**********************************
                            
                            ```csharp
                            using System;
                            
                            namespace _4_4_Копирование_Присваивание_Массивов
                            {
                                internal class CopyArrayDemo
                                {
                                    static void Main()
                                    {
                                        int[] A = { 1, 3, 5, 7, 9 };    // Целочисленный массив
                                        int[] B, C;                     // Переменные массива
                                        B = A;                          // Присваивание массивов
                                        C = new int[A.Length];          // Создание нового массива
                            
                                        for (int k = 0; k < A.Length; k++)
                                        { // Поэлементное копирование массива:
                                            C[k] = A[k];
                                        }
                                        A[0] = 0;                       // Изменение значения первого элемента в массиве A
                                        B[B.Length - 1] = 0;            // Изменение значения последнего элемента в массиве B
                                        Console.WriteLine("A:\tB:\tC:"); // Сообщение в консольном окне
                            
                                        for (int k = 0; k < A.Length; k++)
                                        { // Отображение содержимого массивов
                                            Console.WriteLine("{0}\t{1}\t{2}", A[k], B[k], C[k]); // Отобожение зн-й эл-в массивов
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_5_Поиск_Наибольшего_Значения_в_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_5_Поиск_Наибольшего_Значения_в_Массиве
                            {
                                internal class MaxElementDemo
                                {
                                    static void Main()
                                    {
                                        int value, index; // Переменные для записи значения элемента и индекса
                                        int size = 100_500_000; // Размер массива
                                        Random rnd = new Random(); // Объект для генерации случайных чисел
                                        int[] nums = new int[size]; // Создание массива
                            
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Заполнение и отображение массива
                                            nums[k] = rnd.Next(1, 1_000_000_001); // Значение элемента массива
                                            //Console.Write(nums[k] + " "); // Отобраение значения элемента
                                        }
                                        Console.WriteLine();
                            
                                        index = 0; // Поиск наибольшего элемента. Начальное значение для индекса
                                        value = nums[index]; // Значение элемента с индексом
                                        for (int k = 1; k < nums.Length; k++)
                                        { // Перебор элементов
                                            if (nums[k] > value)
                                            { // Если значение проверяемого элемента больше текущего наибольшего значения:
                                                value = nums[k]; // Новое наибольшее значение
                                                index = k; // Новое значение для индекса
                                            }
                                        }
                                        // Отображение результата
                                        Console.WriteLine("Наибольшее значение: " + value);
                                        Console.WriteLine("Индекс элемента: " + index);
                                    }
                                }
                            }
                            ```
                            
                        - **4_6_Сортировка_Массива_Методом_Пузырька**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_6_Сортировка_Массива_Методом_Пузырька
                            {
                                internal class SortArrayDemo
                                {
                                    static void Main()
                                    {
                                        char s; // Символьная переменная и исходный символьный массив
                                        char[] symbs = { 'Q', 'S', 'a', 'B', 'R', 'G', 'q', 'b', 'j', 'y', 'h' };
                                        Console.WriteLine("Массив до сортировки: "); // Отображение содержимого массива
                            
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                                        Console.WriteLine();
                            
                                        for (int i = 1; i < symbs.Length; i++)
                                        { // Сортировка элементов в массиве
                                            for (int j = 0; j < symbs.Length - i; j++)
                                            { // Перебор элементов
                                                if (symbs[j] > symbs[j + 1])
                                                { // Если значение элемента слева больше элемента справа
                                                    s = symbs[j + 1];
                                                    symbs[j + 1] = symbs[j];
                                                    symbs[j] = s;
                                                }
                                            }
                                        }
                                        Console.WriteLine(""); // Отображение содержимогомассиве
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **4_7_Использование_Цикла_по_Коллекции**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_7_Использование_Цикла_по_Коллекции
                            {
                                internal class ForeachDemo
                                {
                                    static void Main()
                                    {
                                        int[] nums = { 1, 3, 4, 8, 9 }; // Целочисленный массив
                                        char[] symbs = { 'a', 'b', 'A', 'B', 'Ы' }; // Символьный массив
                                        string[] txts = { "красный", "желтый", "синий" }; // Текстовый массив
                                        Console.WriteLine("Целочисленный массив");
                            
                                        foreach (int s in nums)
                                        { // Циклы по целочисленному массиву
                                            Console.WriteLine("Число {0} - {1}", s, s % 2 == 0 ? "четное" : "нечетное");
                                        }
                            
                                        Console.WriteLine("Символьный массив");
                                        foreach (char s in symbs)
                                        { // Цикл по символьному масссиву
                                            Console.WriteLine("Код символа {0} - {1}", s, (int)s);
                                        }
                            
                                        Console.WriteLine("Текстовый массив");
                                        foreach (string s in txts)
                                        { // Цикл по текстовому массиву
                                            Console.WriteLine("В слове \"{0}\" {1} букв", s, s.Length);
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_8_Двумерный_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_8_Двумерный_Массив
                            {
                                class TwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        int rows = 3, cols = 5; // Количество строк и столбцов в массиве
                                        int[,] nums = new int[rows, cols]; // Создание двумерного массива
                                        int value = 1; // Значение первого элемента в массиве
                            
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Заполнение и отображение массива, перебор строк
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            { // Перебор столбцов в строке
                                                nums[i, j] = value; // Присваивание значения элементу массива
                                                value++; // Это будет значение следующего элемента
                                                Console.Write(nums[i, j] + "\t"); // Отображение элемента в строке
                                            }
                                            Console.WriteLine(); // Переход к новой строке
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_9_Добавление_Строки_и_Столбца_в_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_9_Добавление_Строки_и_Столбца_в_Массив
                            {
                                class InitTwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[,] symbs = { { 'A', 'B', 'C' }, { 'D', 'E', 'F' } };
                                        Console.WriteLine("Исходный массив: "); // Создание, инициализация и отображение двумерного массива
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        {
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            {
                                                Console.Write(symbs[i, j] + " ");
                                            }
                                            Console.WriteLine();
                                        }
                            
                                        Random rnd = new Random(); // Объект для нерерации случайных чисел
                                        int row = rnd.Next(symbs.GetLength(0) + 1); // Строка и столбец
                                        int col = rnd.Next(symbs.GetLength(1) + 1); 
                                        Console.WriteLine("Добавляется {0}-я строка и {1}-й столбец", row, col);
                            
                                        char[,] tmp = new char[symbs.GetLength(0) + 1, symbs.GetLength(1) + 1]; // Создание нового массива
                                        int a, b; // Целочисленные переменные
                                        char s = 'a'; // Символьная переменная
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Заполнение массива. Копирование значений из исходного массива
                                            if (i < row) a = i; // Первый индекс для элемента нового массива
                                            else a = i + 1;
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            { // Второй индекс для элемента нового массива
                                                if (j < col) b = j;
                                                else b = j + 1; 
                                                tmp[a, b] = symbs[i, j]; // Присваивание значения элементу массива
                                            }
                                        }
                            
                                        for (int j = 0; j < tmp.GetLength(1); j++)
                                        { // Заполнение добавленной строки в новом массиве
                                            tmp[row, j] = s; // Значение элемента в строке
                                            s++; // Новое значение для следующего элемента
                                        }
                            
                                        for (int i = 0; i < tmp.GetLength(0); i++)
                                        { // Если элемент не в добавленной строке
                                            if (i != row) 
                                            { // Значение элемента в столбце
                                                tmp[i, col] = s;
                                                s++; // Новое значение для следующего элемента
                                            }
                                        }
                                        symbs = tmp; // Присваивание массивов
                                        Console.WriteLine("Новый массив: "); // Отображение массива
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Отображение массива
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            {
                                                Console.Write(symbs[i, j] + " ");
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_10_Знакомство_с_Многомерными_Массивами**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_10_Знакомство_с_Многомерными_Массивами
                            {
                                class MultiDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[,,] symbs = new char[4, 3, 5]; // Трехмерный символьный массив
                                        char[] s = { 'б', 'Б', 'b', 'B' }; // Одномерный символьный массив
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Заполнение трехмерного массива и отображение значений его элементов. Цикл по первому индексу
                                            Console.WriteLine(" Слой № {0}:", i + 1); // Отображение сообщения
                                            for (int j = 0; j < symbs.GetLength(1); j++) 
                                            { // Цикл по второму индексу
                                                for (int k = 0; k < symbs.GetLength(2); k++)
                                                { // Цикл по третьему индексу
                                                    symbs[i, j, k] = s[i]; // Присваивание значения элементу массива
                                                    s[i]++; // Изменение элемента в одномерном массиве
                                                    Console.Write(symbs[i, j, k] + " "); // Отображение значения элемента массива
                                                }
                                                Console.WriteLine(); // Переход к новой строке
                                            }
                                            Console.WriteLine("----------------"); // Отображение линии
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_11_Массив_из_Переменных_Массива**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_11_Массив_из_Переменных_Массива
                            {
                                class AnotherTwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[][] symbs = new char[16][]; // Символьный массив из переменных массива и Целочисленный массив из переменных массива
                                        int[][] nums = { new int[] { 1, 2, 3 }, new int[] { 4, 5 }, new int[] { 6, 7, 8, 9 } };
                                        char s = 'A'; // Символьная переменная
                            
                                        for (int i = 0; i < symbs.Length; i++)
                                        { // Заполнение символьного массива и перебор элементов во внешнем массиве
                                            symbs[i] = new char[i + 3]; // Создание внутреннего массива
                                            for (int j = 0; j < symbs[i].Length; j++)
                                            { // Перебор элементов во внутреннем массиве
                                                symbs[i][j] = s; // Значение элемента внутреннего массива
                                                s++; // Значение для следующего элемента
                                            }
                                        }
                                        Console.WriteLine("Целочисленный массив: "); // Отобржаение целочисленного массива
                                        for (int i = 0; i < nums.Length; i++)
                                        {
                                            for (int j = 0; j < nums[i].Length; j++)
                                            {
                                                Console.Write("{0, 3}", nums[i][j]);
                                            }
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine("Символьный массив"); // Отображение символьного массива
                                        foreach (char[] q in symbs)
                                        { // Перебор элементов внешнего массива
                                            foreach (char p in q)
                                            { // Перебор элементов во внутреннем массиве
                                                Console.Write("{0, 2}", p); // Отображение элемента массива
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_12_Массив_из_Переменных_Типа_Object**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_12_Массив_из_Переменных_Типа_Object
                            {
                                class ObjectArrayDemo
                                {
                                    static void Main()
                                    {
                                        Object[] objs = new object[3]; // Массив из трех переменных типа Object
                                        objs[0] = 123; // Элементам массива присваиваются значения разных типов
                                        objs[1] = 'A'; // Символ
                                        objs[2] = "trese elemento"; // Текст
                                        Console.WriteLine("Look at this strange Array: ");
                            
                                        for (int k = 0; k < objs.Length; k++)
                                        { // Проверка содержимого массива
                                            Console.WriteLine(k + ": " + objs[k]);
                                        }
                            
                                        objs[0] = (int)objs[0] + 111; // Новые значения элементов
                                        objs[1] = "Dos elemento puto!"; // Текст
                                        objs[2] = 3.141592; // Действительное число
                                        Console.WriteLine("После присваивания значений: ");
                            
                                        for (int k = 0; k < objs.Length; k++)
                                        { // Проверка содержимого массива
                                            Console.WriteLine(k + ": " + objs[k]);
                                        }
                            
                                        int[] nums = { 10, 20, 30 }; // Целочисленный массив.
                                        objs[2] = nums; // Переменная массива присваивается как значение элементу массива
                                        Console.WriteLine("Целочисленный массив");
                            
                                        for (int i = 0; i < ((int[])objs[2]).Length; i++)
                                        { // Отображение элементов целочисленного массива
                                            Console.Write("{0, 3}", ((int[])objs[2])[i]);
                                        }
                                        Console.WriteLine();
                            
                                        ((int[])objs[2])[1] = 0; // Новое значение элемента в целочисленном массиве
                                        Console.WriteLine("Еще раз тот же массив: "); // Отображение элементов целочисленного массива 
                                        for (int i = 0; i < nums.Length; i++)
                                        {
                                            Console.Write("{0, 3}", nums[i]);
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **4_13_Параметры_Командной_Строки**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_13_Параметры_Командной_Строки
                            {
                                class ProgArgsDemo
                                {
                                    static void Main(string[] args) // Главный метод с аргументом - массивом
                                    {
                                        Console.WriteLine("Передано {0} параметров", args.Length); // Определение количества переданных параметров
                            
                                        for (int k = 0; k < args.Length; k++)
                                        { // Отображение значений параметров
                                            Console.WriteLine("{0}-й параметр: {1}", (k + 1), args[k]); // Отображение значения параметра
                                        }
                                        Console.WriteLine("Выполнение программы завершено!");
                                    }
                                }
                            }
                            ```
                            
                    - ************************************Статические методы************************************
                        - **5_1_Знакомство_со_Статическими_Методами**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_1_Знакомство_со_Статическими_Методами
                            {
                                class StatMethDemo
                                {
                                    static void show(string txt)
                                    { // Статический метод для отображения текста, переданного аргументом методу
                                        Console.WriteLine(txt);
                                    }
                            
                                    static int factorial(int n)
                                    { // Статический метод для вычисления факториала числа, переданного аргументом методу
                                        int s = 1; // Локальная переменная
                                        for (int k = 1; k <= n; k++)
                                        { // Вычисление произведения
                                            s *= k; // Умножение произведения на число
                                        }
                                        return s; // Результат метода
                                    }
                            
                                    static double power(double x, int n)
                                    { // Статический метод для возведения числа в степень. Число и степень передаются аргументами методу
                                        double s = 1; // Локальная переменная
                                        for (int k = 1; k <= n; k++)
                                        { // Вычисление результата (число в степени)
                                            s *= x; // Текущее значение умножается на число
                                        }
                                        return s; //  Результат метода
                                    }
                            
                                    static void Main()
                                    { // Главный метод программы
                                        show("Начинаем вычисления");
                                        int m = 5; // Целочисленные переменные
                                        double z = 3, num; // Действительные переменные
                                        show(m + "!=" + factorial(m)); // Вычисление факториала числа
                                        num = power(z, m); // Число в степени
                                        show(z + " в степени " + m + ": " + num); // Отображение сообщения вызовом статического метода
                                    }
                                }
                            }
                            ```
                            
                        - **5_2_Перегрузка_Статических_Методов**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_2_Перегрузка_Статических_Методов
                            {
                                class OverloadMethDemo
                                {
                                    static void show(string txt)
                                    { // Версия статического метода для отображения текста с одним текстовым аргументом
                                        Console.WriteLine("Текст: " + txt);
                                    }
                                    static void show(int num)
                                    { // Версия статического метода для отображения целого числа (аргумент метода)
                                        Console.WriteLine("Целое число: " + num);
                                    }
                                    static void show(double num)
                                    { // Версия статического метода для отображения действительного числа
                                        Console.WriteLine("Действительное число: " + num);
                                    }
                                    static void show(char s)
                                    { // Версия статического метода для отображения символа
                                        Console.WriteLine("Символ: " + s);
                                    }
                                    static void show(int num, char s)
                                    { // Версия статического метода для отображения числа и символа
                                        Console.WriteLine("Аргументы {0} и {1}", num, s);
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int num = 6; // Целочисленная переменная
                                        double z = 12.5; // Действительная числовая переменная
                                        char symb = 'W'; // Символьная переменная
                                        show(symb); // Вызываем метод с символьным аргументом
                                        show("Знакомимся с перегрузкой методов!"); // Вызываем метод с текстовым аргументом
                                        show(num); // Вызываем метод с целочисленным аргументом
                                        show(z); // Вызываем метод с действительным аргументом
                                        show(num, 'Q'); // Вызываем метод с двумя аргументами
                                    }
                                }
                            }
                            ```
                            
                        - **5_3_Передача_Массива_Аргументом_Методу**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_3_Передача_Массива_Аргументом_Методу
                            {
                                class ArrayToMethDemo
                                {
                                    static void fillRand(int[] nums)
                                    { // Метод для заполнения массива случайными числами
                                        Random rnd = new Random(); // Объект для генерирования случайных чисел
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Заполнение массива случайными числами
                                            nums[k] = rnd.Next(1, 101);
                                        }
                                        Console.WriteLine("|");
                                    }
                                    static void showArray(int[] nums)
                                    { // Метод для отображения одномерного целочисленного массива
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Перебор элементов массива и отображение значения элемента
                                            Console.Write("| {0}", nums[k]);
                                        }
                                        Console.WriteLine();
                                    }
                                    static void showArray(int[,] nums)
                                    { // Метод для отображения двумерного целочисленного массива
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Перебор строк и элементов массива и отображение значения элемента
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            {
                                                Console.Write("{0,3}", nums[i, j]);
                                            }
                                            Console.WriteLine();
                                        }    
                                    }
                                    static int findMin(int[] nums)
                                    { // Метод для вычисления наименьшего элемента в массиве
                                        int s = nums[0]; // Локальная переменная
                                        for (int k = 1; k < nums.Length; k++)
                                        { // Поиск наименьшего значения. Если проверяемый элемент имеет значение меньшее
                                            if (nums[k] < s) s = nums[k]; // текущего значения переменной s
                                        }
                                        return s;
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A = { 1, 3, 5, 7, 9, 11, 13, 15 }; // Одномерные массивы
                                        int[] B = new int[5];
                                        int[,] C = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 } }; // Двумерный массив
                                        fillRand(B); // Массив В заполняется случайными числами
                                        Console.WriteLine("Одномерный массив A: ");
                                        showArray(A); // Отображается массив А
                                        Console.WriteLine("Одномерный массив B: ");
                                        showArray(B); // Отображается массив В
                                        int m = findMin(B); // Поиск наименьшего элемента
                                        Console.WriteLine("Наименьшее значение: {0}", m);
                                        Console.WriteLine("Двумерный массив C: ");
                                        showArray(C); // Отображается массив С
                                    }
                                }
                            }
                            ```
                            
                        - **5_4_Массив_как_Результат_Метода**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_4_Массив_как_Результат_Метода
                            {
                                class ArrayFromMethDemo
                                {
                                    static int[] fibs(int n)
                                    { // Метод для создания массива с числами Фибоначчи
                                        int[] nums = new int[n]; // Создается массив
                                        nums[0] = 1; // Первый элемент массива
                                        if (nums.Length == 1) return nums; // Если массив из одного элемента
                                        nums[1] = 1; // Второй элемент массива
                            
                                        for (int k = 2; k < nums.Length; k++)
                                        { // Заполнение элементов массива
                                            nums[k] = nums[k - 1] + nums[k - 2]; // Значение элемента массива равно сумме 
                                        } // значений двух предыдущих элементов
                                        return nums; // Результат метода - ссылка на массив
                                    }
                                    static char[] rands(int n)
                                    { // Метод для создания массива со случайными символами
                                        Random rnd = new Random(); // Объект для генерирования случайных чисел
                                        char[] symbs = new char[n]; // Создание массива
                            
                                        for (int k = 0; k < symbs.Length; k++)
                                        { // Заполнение массива
                                            symbs[k] = (char)('A' + rnd.Next(26)); // Значение элемента - случайный символ
                                        }
                                        return symbs; // Результат метода - ссылка на массив
                                    }
                                    static int[,] odds(int m, int n)
                                    { // Метод для создания двумерного массива с нечетными числами
                                        int[,] nums = new int[m, n]; // Создание массива
                                        int val = 1; // Локальная переменная
                            
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Перебор строк массива
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            { // Перебор элементов в строке
                                                nums[i, j] = val; // Значение элемента
                                                val += 2; // Значение следующего элемента
                                            }
                                        }
                                        return nums; // Результат метода - ссылка на массив
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A; // Переменная для целочисленного массива
                                        char[] B; // Переменная для символьного массива
                                        int[,] C; // Переменная для двумерного массива
                                        A = fibs(10); // Создается массив с числами Фибоначчи
                                        Console.WriteLine("Числа Фибоначчи: ");
                                        foreach (int s in A)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", s);
                                        }
                                        Console.WriteLine("|");
                            
                                        B = rands(8); // Создается массив со случайными символами
                                        Console.WriteLine("Случайные символы: ");
                                        foreach (char s in B)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", s);
                                        }
                                        Console.WriteLine("|");
                            
                                        C = odds(4, 6); // Создается двумерный массив с нечетными числами
                                        Console.WriteLine("Двумерный массив: ");
                                        for (int i = 0; i < C.GetLength(0); i++)
                                        { // Отображение содержимого двумерного массива
                                            for (int j = 0; j < C.GetLength(1); j++)
                                            { // 
                                                Console.Write("{0, 4}", C[i, j]);
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **5_5_Механизм_Передачи_Аргументов_Методу**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_5_Механизм_Передачи_Аргументов_Методу
                            {
                                class ArgsDemo
                                {
                                    static void alpha(int n)
                                    {
                                        Console.WriteLine("В методе alpha(). На входе :" + n); // Первый метод. Аргумент - целое число
                                        n++; // Попытка изменить значение аргумента
                                        Console.WriteLine("В методе alpha(). На выходе :" + n); // Проверка значения аргумента
                                    }
                                    static void bravo(int[] n)
                                    { // Второй метод. Аргумент - ссылка на массив
                                        Console.WriteLine("В методе bravo(). На входе :" + ArrayToText(n));
                                        for (int k = 0; k < n.Length; k++)
                                        { // Перебор элементов массива
                                            n[k]++; // Попытка изменить значение элемента массива
                                        }
                                        Console.WriteLine("В методе bravo(). На выходе :" + ArrayToText(n));
                                    }
                                    static void charlie(int[] n)
                                    { // Третий метод. Аргумент - ссылка на массив
                                        Console.WriteLine("В методе charlie(). На входе :" + ArrayToText(n));
                                        int[] m = new int[n.Length]; // Создается новый массив
                                        for (int k = 0; k < n.Length; k++)
                                        { // Перебор элементов в массиве
                                            m[k] = n[k] + 1; // Значение элемента в массиве
                                        }
                                        n = m; // Попытка присвоить новое значение аргументу
                                        Console.WriteLine("В методе charlie(). На выходе :" + ArrayToText(n));
                                    }
                                    static string ArrayToText(int[] n)
                                    { // Метод для преобразования массива в текст
                                        string res = " [" + n[0]; // Текстовая переменная
                                        for (int k = 1; k < n.Length; k++)
                                        { // Перебор элементов массива (кроме начального элемента)
                                            res += "," + n[k]; // Дописывание текста в текстовую переменную
                                        }
                                        res += "] "; // Дописывание текста в текстовую переменную
                                        return res; // Результат метода - текстовая строка
                                    }
                                    static void Main(string[] args)
                                    { // Главный метод программы
                                        int A = 100; // Переменная для передачи аргументом методу
                                        Console.WriteLine("До вызова метода alpha(): A = " + A); // Проверка значений переменной
                                        alpha(A); // Вызов метода
                                        Console.WriteLine("После вызова метода alpha: A = " + A); // Проверка значений переменной
                                        int[] B = { 1, 3, 5 }; // Массив для передачи аргументом методу
                                        Console.WriteLine("До вызова метода bravo(): B = " + ArrayToText(B)); // Проверка содержимого массива
                                        bravo(B); // Вызов метода
                                        Console.WriteLine("После вызова метода bravo(): B = " + ArrayToText(B)); // Проверка содержимого массива
                                        int[] C = { 2, 4, 6 }; // Массив для передачи аргументом методу
                                        Console.WriteLine("До вызова метода charlie(): C = " + ArrayToText(C)); // Проверка содержимого массива
                                        charlie(C); // Вызов метода
                                        Console.WriteLine("После вызова метода charlie(): C = " + ArrayToText(C)); // Проверка содержимого массива
                                    }
                                }
                            }
                            ```
                            
                        - **5_6_Передача_Аргументов_по_Ссылке**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_6_Передача_Аргументов_по_Ссылке
                            {
                                class RefArgsDemo
                                {
                                    static void alpha(ref int n)
                                    {
                                        Console.WriteLine("В методе alpha(). На входе: " + n);
                                        n++;
                                        Console.WriteLine("В методе alpha(). На выходе: " + n);
                                    }
                                    static void bravo(ref int[] n)
                                    {
                                        Console.WriteLine("В методе bravo(). На входе: " + ArrayToText(n));
                                        for (int k = 0; k < n.Length; k++)
                                        {
                                            n[k]++;
                                        }
                                        Console.WriteLine("В методе bravo(). На выходе: " + ArrayToText(n));
                                    }
                                    static void charlie(ref int[] n)
                                    {
                                        Console.WriteLine("В методе charlie(). На входе: " + ArrayToText(n));
                                        int[] m = new int[n.Length];
                                        for (int k = 0; k < n.Length; k++)
                                        {
                                            m[k] = n[k] + 1;
                                        }
                                        n = m;
                                        Console.WriteLine("В методе charlit(). На выходе: " + ArrayToText(n));
                                    }
                                    static string ArrayToText(int[] n)
                                    {
                                        string res = " [" + n[0];
                                        for (int k = 1; k < n.Length; k++)
                                        {
                                            res += " , " + n[k];
                                        }
                                        res += "]";
                                        return res;
                                    }
                                    static void Main()
                                    {
                                        int A = 100;
                                        Console.WriteLine("До вызова метода alpha(): A = " + A);
                                        alpha(ref A);
                                        Console.WriteLine("После вызова метода alpha(): A = " + A);
                                        int[] B = { 1, 3, 5 };
                                        Console.WriteLine("До вызова метода bravo(): B = " + ArrayToText(B));
                                        bravo(ref B);
                                        Console.WriteLine("После вызова метода bravo(): B = " + ArrayToText(B));
                                        int[] C = { 2, 4, 6 };
                                        Console.WriteLine("До вызова метода charlie(): C = " + ArrayToText(C));
                                        charlie(ref C);
                                        Console.WriteLine("После вызова метода charlie(): C = " + ArrayToText(C));
                                    }
                                }
                            }
                            ```
                            
                        - **5_7_Неинициализированный_Аргумент**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_7_Неинициализированный_Аргумент
                            {
                                class UsingOutDemo
                                {
                                    static int getMin(int[] nums, out int index)
                                    { // Метод для вычисления значения наименьшего элемента в массиве и его индекса
                                        index = 0; // Начальное значение для индекса
                                        for (int k = 1; k < nums.Length; k++) 
                                        { // Перебор элементов массива
                                            if (nums[k] < nums[index])
                                            { // Если значение элемента массива меньше текущего минимального значения, то
                                                index = k; // Новое значение для индекса
                                            }
                                        }
                                        return nums[index]; // Результат метода
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A = { 12, 7, 8, 3, 8, 4, 1, 3, 4, 1, 7, 15 }; // Целочисленный массив
                                        foreach(int v in A)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", v);
                                        }
                                        Console.WriteLine("|");
                            
                                        int val, k; // Объявление переменных
                                        val = getMin(A, out k); // Вычисление элемента с наименьшим значением и отображение результатов
                                        Console.WriteLine("Наименьшее значение: " + val);
                                        Console.WriteLine("Индекс элемента: " + k);
                                        Console.WriteLine("Проверка: A[{0}] = {1}", k, A[k]);
                                    }
                                }
                            }
                            ```
                            
                        - **5_8_Использование_Рекурсии**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_8_Использование_Рекурсии
                            {
                                class RecursionDemo
                                {
                                    static int factorial(int n)
                                    { // Метод для вычисления факториала числа
                                        if (n == 1) return 1;
                                        else return n * factorial(n - 1);
                                    }
                                    static int fibs(int n)
                                    { // Метод для вычисления чисел Фибоначчи
                                        if (n == 1 || n == 2) return 1;
                                        else return fibs(n - 1) + fibs(n - 2);
                                    }
                                    static int sum(int n)
                                    { // Метод для вычисления суммы чисел
                                        if (n == 0) return 0;
                                        else return n + sum(n - 1);
                                    }
                                    static void show(int[] a, int k)
                                    { // Метод для отображения содержимого массива
                                        Console.Write(a[k] + " "); // Отображение значения элемента массива
                                        if (k == a.Length - 1) // Если элемент в массиве последний
                                        {
                                            Console.WriteLine();
                                        }
                                        else
                                        { // Если элемент в массиве не последний
                                            show(a, k + 1); // Рекурсивный вызов метода
                                        }
                                    }
                                    static void show(int[] a)
                                    { // Перегрузка метода для отображения содержимого массива
                                        show(a, 0); // Вызов версии метода с двумя аргументами
                                    }
                                    static void Main(string[] args)
                                    { // Главный метод программы
                                        Console.WriteLine("Факториал числа: ");
                                        for (int k = 1; k <= 10; k++)
                                        { // Вычисление факториала числа
                                            Console.WriteLine(k + "!= " + factorial(k));
                                        }
                                        Console.WriteLine("Числа Фибоначчи: ");
                                        for (int k = 1; k <= 10; k++)
                                        { // Вычисление чисел Фибоначчи
                                            Console.Write(fibs(k) + " ");
                                        }
                                        Console.WriteLine();
                                        Console.Write("Сумма чисел от 1 до 100: ");
                                        Console.WriteLine(sum(100));
                            
                                        int[] A = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21 }; // Числовой массив
                                        Console.WriteLine("Числовой массив: ");
                                        show(A); // Отображение всех элементов массива
                                        Console.WriteLine("Элементы, начиная с третьего");
                                        show(A, 2); // Отображение элементов начиная с третьего
                                    }
                                }
                            }
                            ```
                            
                        - **5_9_Методы_с_Произвольным_Количеством_Аргументов**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_9_Методы_с_Произвольным_Количеством_Аргументов
                            {
                                class ParamsDemo
                                { // Методы для вычислеиня суммы чисел
                                    static int sums(params int[] a)
                                    {
                                        int res = 0;// Локальная переменная (значение суммы)
                                        for (int k= 0; k < a.Length; k++)
                                        { // Перебор аргументов метода
                                            res += a[k]; // Прибавление слагаемого к сумме
                                        }
                                        return res; // Результат метода
                                    }
                                    static string getText(string t, params int[] a)
                                    { // Метод для извлечения символов из текста
                                        string res = ""; // Начальное значение формируемой текстовой строки
                                        for (int k = 0; k < a.Length; k++)
                                        { // Перебор аргументов метода
                                            res += t[a[k]]; // Добавление символа в текст
                                        }
                                        return res; // Результат метода
                                    }
                                    static void show(int[] a, params char[] b)
                                    { // Метод отображает значения аргументов
                                        Console.Write("Чисел " + a.Length + ": "); // Количество элементов в числовом массиве
                                        for (int k = 0; k < a.Length - 1; k++)
                                        { // Значения элементов в числовом массиве
                                            Console.Write(a[k] + " ");
                                        } // Количество символьных аргументов
                                        Console.WriteLine("и " + a[a.Length - 1]);
                                        Console.Write("Символов" + b.Length + ": ");
                                        for (int k = 0; k < b.Length - 1; k++)
                                        { // Зн-я символьных аргументов
                                            Console.Write(b[k] + " ");
                                        }
                                        Console.WriteLine("и " + b[b.Length - 1]);
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        Console.WriteLine("Сумма чисел: " + sums(1, 6, 9, 2, 4)); // Вычисление суммы чисел
                                        Console.WriteLine("Сумма чисел: " + sums(5, 1, 2)); 
                                        Console.WriteLine(getText("Раз два три", 0, 10, 8, 1)); // Формируется текст
                                        Console.WriteLine(getText("Бревно", 3, 5, 1, 5, 4));
                                        show(new int[] { 1, 3, 5 }, 'A', 'B', 'C', 'D', 'E'); // Отображаются аргументы
                                        show(new int[] { 1, 3, 5, 7, 9 }, 'A', 'B', 'C', 'D');
                                    }
                                }
                            }
                            ```
                            
                        - **5_10_Главный_Метод_Возвращает_Результат**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_10_Главный_Метод_Возвращает_Результат
                            {
                                class MainMethDemo
                                {
                                    static int Main()
                                    { // Главный метод возвращает результат
                                        Console.WriteLine("Главный метод возвращает результат!");
                                        return 0; // Результат главного метода
                                    }
                                }
                            }
                            ```
                            
                    - ******************************************************************Знакомство с классами и объектами******************************************************************
                        - **6_1_Описание_Класса_и_Создание_Объектов**
                            
                            ```csharp
                            using System;
                            
                            namespace _6_1_Описание_Класса_и_Создание_Объектов
                            {
                                class MyClass
                                { // Описание класса
                                    public int number; // Целочисленное поле
                                    public char symbol; // Символьное поле
                                    public void show()
                                    { // Метод: Отображение значения целочисленного и символьного полей
                                        Console.WriteLine("Целочисленное поле: " + number);
                                        Console.WriteLine("Символьное поле: " + symbol);
                                    }
                                }
                                class UsingObjsDemo
                                { // Класс с главным методом
                                    static void Main()
                                    { // Главный метод
                                        MyClass A = new MyClass(); // Первый объект
                                        MyClass B; // Второй объект
                                        B = new MyClass(); // Присваивание значений полям первого объекта
                                        A.number = 123;
                                        A.symbol = 'A';
                                        B.number = 321; // Присваивание значений полям второго объекта
                                        B.symbol = 'B';
                                        Console.WriteLine("Первый объект");
                                        A.show();
                                        Console.WriteLine("Второй объект");
                                        B.show();
                                    }
                                }
                            }
                            ```
                            
                        - **6_2_Присваивание_Объектов**
                            
                            ```csharp
                            using System;
                            
                            namespace _6_2_Присваивание_Объектов
                            {
                                class MyClass
                                { // Описание класса
                                    public int number; // Целочисленное поле
                                    public void show() // Метод для отображения значения поля
                                    {
                                        Console.WriteLine("Значение поля: " + number);
                                    }
                                }
                                class AnotherObjsDemo
                                { // Класс с главным методом
                                    static void Main()
                                    { // Главный метод
                                        MyClass A, B; // Объектные переменные
                                        A = new MyClass(); // Создание объекта
                                        B = A; // Присваивание объектных переменных
                                        A.number = 123; // Присваивание значения полю через первую объектную переменную
                                        B.show(); // Вызов метода через вторую объектную переменную
                                        B.number = 321; // Вызов метода через первую объектную переменную
                                        A.show();
                                    }
                                }
                            }
                            ```
                            
                        - **6_3_Закрытые_Члены_Класса_и_Перегрузка_Методов**
                    
                    ```csharp
                    using System;
                    
                    namespace _6_3_Закрытые_Члены_Класса_и_Перегрузка_Методов
                    {
                        class MyClass
                        { // Описание класса
                            private int number; // Закрытое целочисленное поле
                            private char symbol; // Закрытое символьное поле
                            public void show()
                            { // Открытый метод для отображения значения полей
                                Console.WriteLine("Поля объекта: " + number + " и " + symbol);
                            }
                            public void set (int n, char s)
                            { // Открытый метод для присваивания значений полям, версия с двумя аргументами
                                number = n; // Значение целочисленного поля
                                symbol = s; // Значение символьного поля
                            }
                            public void set (int n)
                            { // Открытый метод для присваивания значений полям, версия с одним целочисленным аргументом
                                number = n; // Значение целочисленного поля
                                symbol = 'B'; // Значение символьного поля
                            }
                            public void set()
                            { // Открытый метод для присваивания значений полям, версия для без аргументов
                                set(100, 'A'); // Вызов версии метода с двумя аргументами
                            }
                        }
                        class MethodsDemo
                        { // Главный класс
                            static void Main()
                            { // Главный метод
                                MyClass obj = new MyClass(); // Создание объекта
                                obj.set(); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                                obj.set(200); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                                obj.set(200, 'C'); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                            }
                        }
                    }
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                - ************Часть 3. Резюме************
                    - В языке C# существуют специальные управляющие инструкции, позволяющие создавать в программе точки ветвления и блоки повторяемых команд.
                    - Условный оператор if позволяет выполнять разные блоки команд в зависимости от истинности или ложности некоторого условия. 
                    Проверяемое условие указывается в круглых скобках. Команды, выполняемые при истинном условии, указываются в блоке после инструкции. 
                    Команды, выполняемые при ложном условии, указываются в else-блоке.
                    Существует упрощенная форма условного оператора без else-блока
                    - Оператор выбора switch позволяет выполнять разные блоки команд в зависимости от значения некоторого выражения. Проверяемое выражение (целочисленное, символьное или текстовое) указывается в круглых скобках после ключевого слова switch. Затем указываются case-блоки с контрольными значениями. Выполняются команды в case-блоке, в котором контрольное значение совпадает со значением проверяемого выражения. В случае, если значение выражения не совпадает ни с одним из контрольных значений в case-блоках, выполняются команды в default-блоке. Этот блок не является обязательным. Каждый case-блок и default-блок заканчивается инструкцией break. В случае необходимости можно использовать пустые case-блоки.
                    - Оператор цикла while позволяет многократно выполнять блок определенных команд. После ключевого слова while в круглых скобках указывается условие, при истинности которого выполняются команды в теле оператора цикла. Каждый раз после выполнения этих команд проверяется условие, и, если оно истинно, команды выполняются снова.
                    - Оператор цикла do-while похож на оператор цикла while, но в операторе do-while сначала выполняются команды, а затем проверяется условие. Команды указываются после ключевого слова do. После блока команд следует ключевое слово while и, в круглых скобках, условие. Оператор цикла выполняется до тех пор, пока при очередной проверке условия оно не оказывается ложным.
                    - Описание оператора цикла for начинается с ключевого слова for. В круглых скобках указывается три блока инструкций. Блоки разделяются между собой точкой с запятой. Если блок содержит несколько инструкций, то они разделяются запятыми. Команды, формирующие тело оператора цикла, указываются в круглых скобках после for-инструкции. Выполнение оператора цикла начинается с выполнения команд в первом блоке. После этого проверяется условие во втором блоке. Если оно ложно, оператор цикла завершает работу. Если условие истинно, то выполняются команды в теле оператора цикла и в третьем блоке. Затем снова проверяется условие. Если условие ложно, работа оператора цикла завершается. Если условие истинно, выполняются команды в теле оператора и в третьем блоке и снова проверяется условие. И так далее, пока при проверке условия оно не окажется ложным.
                    - Инструкция безусловного перехода goto позволяет перейти к выполнению программного кода в том месте, которое выделено меткой. Используя инструкцию goto и условный оператор, можно организовать циклическое выполнение программного кода (симулировать работу оператора цикла). Общая рекомендация состоит в том, чтобы избегать использования инструкции goto.
                    - Система обработки исключений позволяет предусмотреть специальный код, выполняемый при возникновении ошибки. С этой целью используется конструкция try-catch. Программный код, при выполнении которого может возникнуть ошибка, помещается в try-блок. Программный код, предназначенный для выполнения в случае ошибки, помещается в catch-блок. Если при выполнении кода в try-блоке ошибка не возникает, то catch-блок игнорируется. Если при выполнении кода в try-блоке возникает ошибка, то выполнение команд в блоке try прекращается и начинают выполняться команды в блоке catch.
                - ******************************Часть 4. Резюме******************************
                    - Массив представляет собой набор переменных, объединенных общим именем. Переменные, входящие в массив, называются элементами массива.
                    Для идентификации элементов используется имя массива и индекс (или индексы). Количество индексов, необходимых для однозначной идентификации элемента массива, определяет размерность массива. 
                    Индексация всегда начинается с нуля. Размерность массива можно определить с помощью свойства Rank. Свойство Length позволяет определить количество элементов в массиве. 
                    Для определения размера массива по отдельным индексам используют метод GetLength() (аргумент метода определяет индекс, для которого вычисляется размер массива).
                    - Для реализации массива нужна переменная массива и собственно сам массив. 
                    Переменная массива содержит ссылку на массив. Для объявления переменной массива указываются идентификатор типа элементов массива, затем квадратные скобки и имя переменной. 
                    Для одномерного массива квадратные скобки пустые. Для многомерных массивов внутри квадратных скобок указывают запятые - количество запятых на единицу меньше размерности массива
                    - Массив создается с помощью оператора new, после которого следуют идентификатор типа, определяющий тип элементов массива и квадратные скобки. В квадратных скобках через запятую указывается размер массива по каждому из индексов. в результате выполнения инструкции на основе оператора new создается массив, а ссылка на этот массив является значением инструкции. Ссылку на массив можно записать в переменную массива (при условии, что тип и размерность массива совпадают с типом и размерностью, указанными при объявлении переменной массива).
                    - Массив при создании можно инициализировать. Для этого переменной массива значением присваивается список, содержащий значения, которыми инициализируется массив. 
                    Для одномерного массива список инициализации представляет собой последовательность разделенных запятыми значений, заключенных в фигурные скобки. 
                    Для двумерного массива элементами списка инициализации являются вложенные списки, которые содержат значения элементов в строках. Для трехмерного массива список инициализации содержит списки, элементами которых являются списки со значениями элементов трехмерного массива и так далее.
                    - Для работы с массивами может использоваться оператор цикла foreach. В нем объявляется локальная переменная (того же типа, что и тип элементов массива). Эта локальная переменная при выполнении оператора цикла последовательно принимает значения элементов массива. Через локальную переменную можно прочитать значение элемента массива, но нельзя присвоить элементу новое значение.
                    - Можно создать массив, элементами которого являются переменные массива. В таком случае можно создать иллюзию двумерного массива со строками разной длины. Если создать массив объектных переменных класса Object, то элементам такого массива можно присваивать практически любые значения.
                    - При запуске программе можно передавать параметры (параметры командной строки). В программе такие параметры обрабатываются с помощью текстового массива, который объявляется как аргумент главного метода программы.
                - ******************************Часть 5. Резюме******************************
                    - Метод - именованный блок кода, который может выполняться многократно (через вызов метода). 
                    Методы бывают статические и нестатические. 
                    Для вызова нестатического метода нужен объект. 
                    Для вызова статического метода объект не нужен
                    - Статический метод описывается с ключевым словом static. После него указывается идентификатор типа результата, возвращаемого методом (если метод не возвращает результат - указывают идентификатор void). Далее следует имя метода, в круглых скобках описываются аргументы метода, а код метода описывается в блоке из фигурных скобок.
                    Значение, возвращаемое методом, в теле метода указывают после инструкции return.
                    - Методы можно перегружать: в таком случае описывается несколько версий метода с одним и тем же именем. Перегруженные версии метода должны отличаться количеством и/или типом аргументов. 
                    Решение о том, какую версию следует вызывать, принимается на основе аргументов, которые фактически переданы методу.
                    - При передаче аргументом методу массива в действительности в метод передается ссылка на массив. Если метод возвращает результатом массив, то обычно при вызове метода создается массив, а ссылка на него возвращается результатом метода.
                    - Аргументы в метод могут передаваться по значению и по ссылке. 
                    При передаче аргументов по значению (такой режим используется по умолчанию) для аргументов создаются технические копии и все операции выполняются с ними. При передаче аргументов по ссылке в метод передаются те переменные, которые указаны аргументами.
                    Чтобы аргумент передавался по ссылке, в описании метода аргумент должен быть описан с инструкцией ref. Такая же инструкция указывается вместе с аргументом при вызове метода.
                    - В метод можно передавать неинициализированный аргумент - переменную, которая объявлена, но не инициализирована. Такой аргумент должен получить значение в процессе выполнения метода. Для возможности передачи неинициализированного аргумента в описании метода такой аргумент описывается с инструкцией out. Инструкция out также указывается вместе с неинициализированным аргументом при вызове метода.
                    - При описании методов можно использовать рекурсию. При рекурсии в процессе выполнения метода он вызывает сам себя.
                    - Можно описывать методы с аргументами, количество которых заранее неизвестно. Такие параметры формально описываются как массив с инструкцией params. В теле метода аргументы обрабатываются как элементы массива, а при вызове метода аргументы передаются как обычно, через запятую. Если у метода, кроме набора аргументов неизвестного количества, есть и “обычные” аргументы, то они в описании метода указываются в начале. Аргумент с инструкцией params должен быть последним в списке аргументов метода.
                    - Главный метод программы Main() может описываться как такой, что возвращает int-значение. В таком случае в теле метода обычно последней инструкцией является return 0.
                - ******************************Часть 6. Резюме******************************
                    - Представляет собой шаблон, на основе которого создаются объекты. Описание класса начинается с ключевого слова class, после которого указываются имя класса, а в блоке из фигурных скобок описывают поля и методы класса.
                    - Поля описываются также, как и объявляются переменные: указывается идентификатор типа и имя поля. 
                    При описании методов указываются идентификатор типа возвращаемого результата, имя метода, список аргументов и команды, формирующие тело метода (выделяются фигурными скобками).
                    - Поля и методы класса называются членами класса. 
                    По умолчанию члены класса являются закрытыми - они доступны только внутри кода класса.
                    Чтобы сделать поле или метод открытым (доступным вне пределов класса), его описывают со спецификатором уровня доступа public. Закрытые члены класса можно описывать с идентификатором уровня доступа private.
                    - Методы могут перегружаться: в классе может быть описано несколько версий метода с одним и тем же именем, но разными аргументами.
                    Решение о том, какая версия метода используется, принимается на основе команды вызова метода с учетом количества и типа аргументов, фактически переданных методу.
                    - Конструктор является методом, автоматически вызываемым при создании объекта.
                    Конструктор описывается особым образом: имя конструктора совпадает с именем класса, он не возвращает результат, и идентификатор типа результата для конструктора не указывается. 
                    Обычно конструктор описывается с ключевым словом public. У конструктора могут быть аргументы, и конструктор можно перегружать (в классе может быть несколько версий конструктора).
                    - Если в классе конструктор не описан, то используется конструктор по умолчанию: у него нет аргументов, и он не выполняет никаких дополнительных действий. Если в классе описана хотя бы одна версия конструктора, то конструктор по умолчанию больше не доступен.
                    - Деструктор является методом, автоматически вызываемым при удалении объекта из памяти. 
                    Имя деструктора получается объединением символа тильды и названия класса. 
                    У деструктора нет аргументов, он не возвращает результат, и идентификатор типа результата для деструктора не указывается. В классе может быть только один деструктор.
                    - Для создания объекта класса используют оператор new, после которого указываются имя класса и аргументы (в круглых скобках), которые передаются конструктору. 
                    Ссылка на созданный объект записывается в объектную переменную.
                    Объектная переменная объявляется так же, как и переменная простого типа, только в качестве идентификатора типа указывается имя класса.
                    - Обращение к нестатическим полям и методам выполянется с указанием объекта: после имени объекта через точку следует название поля или имя метода (с аргументами в круглых скобках или пустыми круглыми скобками, если аргументы не передаются).
                    - Статические поля и методы описываются с ключевым словом static. 
                    Статические поля и методы “не привязаны” к объекту и существуют даже если ни один объект класса не создан.
                    Обращение к статическим полям и методам выполняется так: имя класса, точка и название статического поля или метода (с аргументами или без). 
                    Если поле или метод используются в классе, в котором они описаны, то имя класса можно не указывать.
                    - Ключевое слово this в тебе методов (в том числе конструкторов и деструкторов) может использоваться для обозначения объекта, из которого вызывается метод. Это же ключевое слово используется как команда вызова в одной версии конструктора другой версии конструктора. В таком случае в описании конструктора после закрывающей круглой скобки указываются двоеточие, ключевое слово this и круглые скобки, в которых можно указать аргументы, которые передаются вызываемой версии конструктора. Вызываемая версия конструктора определяется по переданным ей аргументам.
                - **************************************************Часть 7. Работа с текстом**************************************************
                    - Текстовые значения реализуются в виде объектов класса String System. string System.String. 
                    Текстовая переменная ссылается на объект, содержащий текстовое значение.
                    - Текстовые литералы реализуются в виде объектов класса String.
                    - Создать текстовый объект можно, присвоив текстовой переменной значением литерал. 
                    Также имеется возможность создать текстовый объект на основе символьного массива. Существуют и некоторые иные способы создания текстовых объектов.
                    - Размер текста (количество символов в тексте) можно узнать с помощью свойства Length, а для обращения к отдельным символам в тексте текстовый объект индексируется как массив. 
                    Индексация символов в тексте начинается с нуля.
                    - После создания текстового объекта его содержимое изменить нельзя.
                    Изменения в текст вносятся путем создания новых текстовых объектов, а ссылка на вновь созданный объект записывается в текстовую переменную.
                    - Сравнивать текстовые строки на предмет совпадения или несовпадения можно с помощью операторов == и ≠. Также для этой цели может использоваться метод Equals().
                    - Существует много методов, предназначенных для выполнения различных операций с текстовыми значениями. В частности, методы позволяют: выполнять поиск символов и подстрок в строке, разбивать строку на подстроки, извлекать подстроку из текста, разбивать текст на символы, выполнять удаление подстрок, замену символов и подстрок и многое другое.
                    При выполнении операций с текстом новая текстовая строка является результатом операции, а исходный текст при этом не меняется.
                    - Описав в классе метод ToString(), можно задать способ преобразования объектов этого класса к текстовому формату.
                - ************************************************************Часть 8. Перегрузка операторов************************************************************
                    - В языке C# можно определять действие операторов на операнды, являющиеся объектами пользовательских классов. Этот механизм называется перегрузкой операторов и реализуется путем описания в пользовательском классе операторных методов.
                    - Операторный метод описывается с ключевыми словами public и static - т.е. метод должен быть открытым и статическим.
                    Операторный метод обязательно должен возвращать результат.
                    Название операторного метода получается объединением ключевого слова operator и символа оператора.
                    Аргументы операторного метода отождествляются с операндами выражения на основе перегружаемого оператора. У операторных методов для бинарных операторов должно быть два аргумента, у операторных методов для унарных операторов - один аргумент.
                    Хотя бы один аргумент операторного метода должен быть объектом класса, в котором этот операторный метод описан.
                    - Операторы сравнения перегружаются парами (< и >, ≤и ≥, == и ≠). При перегрузке операторов == и ≠ обычно переопределяют и методы Equals() и GetHashCode().
                    - Операторы true и false используются для проверки объектов на “истинность” и “ложность”. Операторы перегружаются в паре и должны возвращать результатом логическое значение. Оператор true вызывается, если объект указан условием в условном операторе или операторе цикла, а также при проверке первого операнда в выражении на основе оператора ||. Оператор false вызывается при проверке первого операнда в выражении на основе оператора &&.
                    - Операторы && и || не перегружаются. Но есть способ так перегрузить операторы &, |, true и false, что операторы && и || можно будет использовать
                    - Можно описать операторные методы для выполнения явного и неявного приведения типов (при условии, что одним из типов является пользовательский класс). 
                    Операторы для явного приведения типов описываются с ключевым словом explicit, операторы для неявного приведения типов описываются с ключевым словом implicit.
                    - Сокращенные формы операторов присваивания не перегружаются. Но можно так перегрузить базовые операторы, что сокращенные формы операторов также будут рабочими.
                - ********************************************************Часть 9. Свойства и индексаторы********************************************************
                    - Кроме полей и методов в классе могут быть описаны и другие члены: **Свойства и Индикаторы**
                    - Свойство представляет собой нечто среднее между полем и методом. 
                    По способам использования свойство похоже на поле.
                    В общем случае значение свойства можно прочитать и свойству можно присвоить значение. 
                    Обращение к свойству выполняется также, как и обращение к полю: имя свойства указывается через точку после имени объекта.
                    - При считывании значения свойства и при присваивании значения свойству вызываются специальные методы, которые называются аксессорами (get-аксессор и set-аксессор соответственно).
                    Аксессоры описываются при описании свойства.
                    - При описании свойства указывается тип свойства и его название (также указывается спецификатор уровня доступа). 
                    Затем в фигурных скобках описываются аксессоры.
                    Команды выполняемые при вызове аксессоров, указываются в фигурных скобках.
                    Перед блоком команд для get-аксессора указывается ключевое слово get. Перед блоком команд для set-аксессора указывается ключевое слово set.
                    - Для свойства может быть описан только один аксессор. Если для свойства описан только get-аксессор, то такое свойство доступно для чтения, но недоступно для присваивания значения. Если для свойства описан только set-аксессор, то такому свойству можно присвоить значение, но прочитать значение свойства нельзя.
                    - Свойство не определяет область памяти (т.е. наличие у объекта свойства не означает, что для этого свойства выделяется память). 
                    Свойство не может быть использовано с идентификаторами ref и out. Свойство может быть статическим.
                    - Если в классе описан индексатор, то объект такого класса можно индексировать: после имени объекта в квадратных скобках указывается индекс (или индексы). В общем случае можно считывать значение такого выражения или присваивать значение такому выражению.
                    - При описании индексатора указывается спецификатор уровня доступа, тип индексатора, ключевое слово this, а также в квадратных скобках описываются индексы (указывается тип индекса и формальное название).
                    Если индексов несколько, то их описание разделяется запятыми. В блоке, выделенном фигурными скобками, описывается get-аксессор и set-аксессор. В аксессорах можно использовать индексы, а в set-аксессоре также используют ключевое слово value, обозначающее присваиваемое значение. Разрешается описать два аксессора или только один аксессор.
                    - Индексатор не определяет область памяти. 
                    Индексатор не может быть статическим, а выражения, подразумевающие использование индексатора, не могут использоваться с ключевыми словами ref и out.
                    - Индексаторы можно перегружать: в классе может быть описано несколько версий индексатора, которые должны отличаться количеством и/или типом индексов.
                - **************Часть 10. Наследование**************
                    - Классы можно создавать на основе уже существующих классов путем наследования. 
                    Класс, на основе которого создается новый класс, называется базовым.
                    Тот класс, что создается на основ базового, называется производным классом.
                    - Для создания производного класса на основе базового в описании производного класса после его имени через двоеточие указывается имя базового класса.
                    Все открытые и защищенные члены базового класса наследуются в производном классе, в том смысле, что в теле производного класса к ним нельзя обратиться напрямую по имени.
                    - При создании объекта производного класса сначала вызывается конструктор базового класса, а уже затем выполняются команды, описанные в конструкторе производного класса.
                    В описании конструктора производного класса указывается инструкция вызова конструктора базового класса: это ключевое слово base с круглыми скобками, в которых могут передаваться аргументы конструктору базового класса.
                    Инструкция на основе ключевого слова base указывается через двоеточие в описании конструктора производного класса после закрывающей круглой скобки.
                    - При удалении объекта производного класса из памяти сначала выполняются команды в теле деструктора производного класса, а затем вызывается деструктор базового класса.
                    - Объектная переменная базового класса может ссылаться на объект производного класса.
                    Через объектную переменную базового класса можно получить доступ только к тем членам объекта производного класса, которые объявлены в базовом классе.
                    - Унаследованные из базового класса члены могут замещаться в производном классе.
                    Для этого соответствующий член описывается в производном классе с ключевым словом new. Для обращения к такому члену используется его имя. 
                    Для обращения к одноименному члену из базового класса, замещенному в производном классе, пере именем этого члена через точку указывают ключевое слово base.
                    - Если в базовом классе метод объявлен как виртуальный (в описании метода использовано ключевое слово virtual), то в производном классе такой метод можно переопределить. Для этого в производном классе описывается новая версия метода. При этом используется ключевое слово override.
                    - Принципиальная разница между замещением и переопределением метода состоит в том, что при замещении метода версия метода для вызова определяется по объектной переменной, через которую вызывается метода, а при переопределении метода версия метода для вызова определяется по объекту, из которого вызывается метод. 
                    Наряду с замещением и переопределением методов можно также использовать и перегрузку методов.
                    - Свойства и индексаторы могут наследоваться. В описании свойств и индексаторов в базовом классе допускается использовать ключевое слово virtual, а в производном классе такие свойства и индексаторы могут переопределяться.
            - ************************Шилдт Г. “C# 4.0 Полное руководство************************
                - **************************Коды программ**************************
                    - ************************************************Первая простая программа************************************************
                        
                        ```csharp
                        // В эту версию не включена строка "using System;"
                        class Example
                        {
                            // Любая программа на C# начинается с вызова метода Main().
                            static void Main()
                            {
                                // Здесь имя Console.WriteLine полностью определено.
                                System.Console.WriteLine("Простая программа на C#");
                            }
                        }
                        ```
                        
                    - ************************************************Вторая простая программа************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _002_Применение_Переменных
                        {
                            internal class Program
                            { // Данная программа демонстрирует применение переменных
                                static void Main()
                                {
                                    int x; // Здесь объявляется переменная
                                    int y; // Здесь объявляется еще одна переменная
                        
                                    x = 100; // Здесь переменной х присваивается значение 100
                        
                                    Console.WriteLine("х содержит " + x);
                        
                                    y = x / 2;
                        
                                    Console.Write("y содержит х / 2: ");
                                    Console.WriteLine(y);
                                }
                            }
                        }
                        ```
                        
                    - ********************************************************************************************************************************Программа демонстрирует отличия между типами данных int и double********************************************************************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _003_Int_Double_Отличия
                        { // Эта программа демонстрирует отличия между типами данных int и double.
                            internal class Program
                            {
                                static void Main()
                                {
                                    int ivar; // Объявить целочисленную переменную
                                    double dvar; // Объявить переменную с плавающей точкой
                        
                                    ivar = 100; // Присвоить переменной ivar значение 100
                                    dvar = 100.0; // Присвоить переменной dvar значение 100.0
                        
                                    Console.WriteLine(" ivar: " + ivar);
                                    Console.WriteLine(" dvar: " + dvar);
                        
                                    Console.WriteLine(); // Вывести пустую строку
                                    // Разделить значения обеих переменных на 3
                                    ivar = ivar / 3;
                                    dvar = dvar / 3;
                        
                                    Console.WriteLine(" ivar : " + ivar);
                                    Console.WriteLine(" dvar : " + dvar);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Вычислить площадь круга**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _004_Площадь_круга
                        {
                            class Circle
                            { // Вычислить площадь круга
                                static void Main()
                                {
                                    double radius;
                                    double area;
                        
                                    radius = 10.0;
                                    area = radius * radius * 3.1416;
                        
                                    Console.WriteLine("Площадь равна " + area);
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************Применение условного оператора if******************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _005_If_Условный_Оператор
                        {
                            internal class IfDemo
                            { // Продемонстрировать применение условного оператора if
                                static void Main()
                                {
                                    int a, b, c;
                        
                                    a = 2; b = 3;
                        
                                    if (a < b) Console.WriteLine("a меньше b");
                        
                                    // Не подлежит выводу
                                    if (a == b) Console.WriteLine("Этого никто не увидит");
                                    Console.WriteLine();
                        
                                    c = a - b; // c содержит -1
                                    Console.WriteLine("c содержит -1");
                                    if (c >= 0) Console.WriteLine("Значение с неотрицательно");
                                    if (c < 0) Console.WriteLine("Значение с отрицательно");
                        
                                    Console.WriteLine();
                        
                                    c = b - a; // теперь содержит 1
                                    Console.WriteLine("с содержит 1");
                                    if (c >= 0) Console.WriteLine("Значение с неотрицательно");
                                    if (c < 0) Console.WriteLine("Значение с отрицательно");
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Применение оператора цикла for********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _006_for_Применение_цикла
                        {
                            internal class ForDemo
                            { // Продемонстрировать применение оператора цикла for
                                static void Main()
                                {
                                    int count;
                                    for (count = 0; count < 5;  count++)
                                    {
                                        Console.WriteLine("Это подсчет: " + count);
                                    }
                                    Console.WriteLine("Готово!");
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************Применение кодового блока с if************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _007_If_Применение_кодового_блока
                        {
                            class BlockDemo
                            { // Продемонстрировать применение кодового блока
                                static void Main()
                                {
                                    int i, j, d;
                                    i = 5;
                                    j = 10;
                                    // Адресатом этого оператора if служит кодовый блок
                                    if (i != 0)
                                    {
                                        Console.WriteLine("i не равно нулю!");
                                        d = j / i;
                                        Console.WriteLine("j / i равно " + d);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Вычисляем сумму и произведение чисел от 1 до 10**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _008_Вычисляем_сумму_и_произведение_чисел
                        {
                            class ProdSum
                            {
                                static void Main()
                                {
                                    int prod;
                                    int sum;
                                    int i;
                        
                                    sum = 0;
                                    prod = 1;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        sum = sum + i;
                                        prod = prod * i;
                                    }
                                    Console.WriteLine("Сумма равна " + sum);
                                    Console.WriteLine("Произведение равно " + prod);
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************************Применение идентификатора со знаком @**************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _009_Применение_идентификатора__
                        {
                            class IdTest
                            { // Продемонстрировать применение идентификатора со знаком @
                                static void Main()
                                {
                                    int @if; // Применение ключевого слова if в качестве идентификатора
                                    for (@if = 0; @if < 10; @if++)
                                    {
                                        Console.WriteLine("@if равно " + @if);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************Вычисляем расстояние от Земли до Солнца в дюймах********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _010_Расстояние_от_Земли_до_Солнца_в_дюймах
                        {
                            internal class Inches
                            { // Вычислить расстояние от Земли до Солнца в дюймах.
                                static void Main()
                                {
                                    long inches;
                                    long miles;
                        
                                    miles = 93000000; // 93 000 000 миль до Солнца
                                    // 5 280 футов в миле, 12 дюймов в футе
                                    inches = miles * 5280 * 12;
                        
                                    Console.WriteLine("Расстояние до Солнца: " + inches + " дюймов.");
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Использование типа byte**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _011_Использование_типа_byte
                        {
                            class Use_byte
                            { // Использовать тип byte
                                static void Main()
                                {
                                    byte x;
                                    int sum;
                        
                                    sum = 0;
                        
                                    for (x = 1; x <= 100; x++)
                                        sum = sum + x;
                        
                                    Console.WriteLine("Сумма чисел от 1 до 100 равна " + sum);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************************************Вычисляем радиус окружности по площади круга****************************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _012_Вычисляем_радиус_по_площади_круга
                        { // Определить радиус окружности по площади круга
                            class FindRadius
                            {
                                static void Main()
                                {
                                    Double r;
                                    Double area;
                                    area = 10.0;
                                    r = Math.Sqrt(area / 3.1416);
                                    Console.WriteLine("Радиус равен " + r);
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************************Демонстрация тригонометрических функций******************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _013_Демонстрация_тригонометрических_функций
                        {
                            class Trigonometry 
                            { // Продемонстрировать применение тригонометрических функций.
                                static void Main()
                                {
                                    Double theta; // угол в радианах
                        
                                    for (theta = 0.1; theta <= 1.0; theta = theta + 0.1)
                                    {
                                        Console.WriteLine("Синус угла " + theta + " равен " + Math.Sin(theta));
                                        Console.WriteLine("Косинус угла " + theta + " равен " + Math.Cos(theta));
                                        Console.WriteLine("Тангенс угла " + theta + " равен " + Math.Tan(theta));
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Расчет скидки с помощью decimal**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _014_Расчет_скидки_decimal
                        {
                            class UseDecimal
                            { // Использовать тип decimal для расчета скидки
                                static void Main()
                                {
                                    decimal price;
                                    decimal discount;
                                    decimal discounted_price;
                        
                                    // Рассчитать цену со скидкой.
                                    price = 19.95m;
                                    discount = 0.15m; // норма скидки составляет 15%
                                    discounted_price = price - (price * discount);
                        
                                    Console.WriteLine("Цена со скидкой: $" + discounted_price);
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Расчет роста капиталовложений с помощью decimal**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _015_Расчет_Роста_Капиталовложений
                        {
                            class FutVal
                            { // Применить тип decimal для расчета будущей стоимости капиталовложений
                                static void Main()
                                {
                                    decimal amount;
                                    decimal rate_of_return;
                                    int years, i;
                        
                                    amount = 1000.0M;
                                    rate_of_return = 0.07M;
                                    years = 10;
                        
                                    Console.WriteLine("Первоначальные капиталовложения: $" + amount);
                                    Console.WriteLine("Норма прибыли: " + rate_of_return);
                                    Console.WriteLine("В течение " + years + " лет");
                        
                                    for (i = 0; i < years; i++)
                                        amount = amount + (amount * rate_of_return);
                        
                                    Console.WriteLine("Будущая стоимость равна $" + amount);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************Применение типа bool****************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _016_Применение_типа_bool
                        {
                            class BoolDemo
                            { // Продемонстрировать применение типа bool
                                static void Main()
                                {
                                    bool b;
                                    b = false;
                        
                                    Console.WriteLine("b равно " + b);
                                    b = true;
                                    Console.WriteLine("b равно " + b);
                                    // Логическое значение может управлять оператором if
                                    if (b) Console.WriteLine("Выполняется!");
                                    b = false;
                                    if (b) Console.WriteLine("Не выполняется!");
                                    // Результатом вып-я оператора отношения является логическое зн-е
                                    Console.WriteLine("10 > 9 равно " + (10 > 9));
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Применяем команды форматирования****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _017_Применяем_Команды_Форматирования
                        {
                            class DisplayOptions
                            { // Применяем команды форматирования
                                static void Main()
                                {
                                    int i;
                                    Console.WriteLine("Число\tКвадрат\tКуб");
                        
                                    for (i = 1; i < 10; i++)
                                        Console.WriteLine("{0}\t{1}\t{2}", i, i * i, i * i * i);
                        
                                    Console.WriteLine("Деление 10/3 дает: {0:#.##}", 10.0 / 3.0);
                                    Console.WriteLine("{0:###,###.##}", 123456.56);
                        
                                    decimal balance = 12323.09m;
                                    Console.WriteLine("Текущий баланс равен {0:C}", balance);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************************Вывод скидки в местной валюте**********************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _018_decimal_Представление_в_Валюте
                        {
                            internal class UseDecimal
                            { // Использовать спецификатор формата С для вывода результата в местной валюте
                                static void Main()
                                {
                                    decimal price;
                                    decimal discount;
                                    decimal discounted_price;
                                    // рассчитать цену со скидкой
                                    price = 19.95m;
                                    discount = 0.15m;
                                    discounted_price = price - (price * discount);
                        
                                    Console.WriteLine("Цена со скидкой {0:C}", discounted_price);
                                }
                            }
                        }
                        ```
                        
                    - ************************************Строковые литералы************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _019_Строковые_Литералы
                        {
                            class StrDemo
                            { // Продемонстрировать применение управляющих последовательностей символов в строковых литералах
                                static void Main()
                                {
                                    Console.WriteLine("Первая строка\nВторая строка\nТретья строка");
                                    Console.WriteLine("Один\tДва\tТри");
                                    Console.WriteLine("Четыре\tПять\tШесть");
                                    // Вставить кавычки
                                    Console.WriteLine("\"Зачем\", спросил он.");
                        
                                    // Продемонстрировать применение буквальных строковых литералов
                                    Console.WriteLine(@"Это буквальный
                        строковый литерал,
                        занимающий несколько строк.
                        ");
                                    Console.WriteLine(@"А это вывод с табуляцией:
                        1   2   3   4
                        5   6   7   8
                        ");
                                    Console.WriteLine(@"Отзыв программиста: ""Мне нравится С#.""");
                                }
                            }
                        }
                        ```
                        
                    - ****************************************Вычисляем гипотенузу****************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _020_Вычисляем_гипотенузу
                        {
                            class DynInit
                            { // Вычисляем гипотенузу
                                static void Main()
                                {
                                    // Длина сторон прямоугольного треугольника
                                    double s1 = 4.0;
                                    double s2 = 5.0;
                                    // Инициализировать переменную hypot динамически
                                    double hypot = Math.Sqrt((s1 * s1) + (s2 * s2));
                                    Console.Write("Гипотенуза треугольника со сторонами " + s1 + " и " + s2 + " равна ");
                                    Console.WriteLine("{0:#.###}.", hypot);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Неявно типизированные переменные****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _021_Неявно_Типизированные_Переменные
                        {
                            class ImplicityTypedVar
                            { // Продемонстрировать применение неявно типизированных переменных.
                                static void Main()
                                {
                                    // Эти переменные типизированы неявно. Они отнесены к типу double, поскольку
                                    // инициализирующие их выражения сами относятся к типу double
                                    var s1 = 4.0;
                                    var s2 = 5.0;
                        
                                    // Итак, переменная hypot типизирована неявно и относится к типу double,
                                    // поскольку результат, возвращаемый методом Sqrt(), имеет тип double.
                                    var hypot = Math.Sqrt((s1 * s1) + (s2 * s2));
                                    Console.Write("Гипотенуза треугольника со сторонами " + 
                                        s1 + " и " + s2 + " равна ");
                                    Console.WriteLine("{0:#.###}.", hypot);
                        
                                    // Следующий оператор не может быть скомпилирован, поскольку
                                    // переменная s1 имеет тип double и ей нельзя присвоить
                                    // десятичное значение.
                                    // s1 = 12.2M; // Ошибка!
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Область действия кодового блока**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _022_Область_Действия_Кодового_Блока
                        {
                            class ScopeDemo
                            { // Продемонстрировать область действия кодового блока
                                static void Main(string[] args)
                                {
                                    int x; // Эта переменная доступна для всего кода внутри метода Main()
                                    x = 10;
                        
                                    if (x == 10) 
                                    { // Начинаем новую область действия
                                        int y = 20; // Эта переменная доступна только в данном кодовом блоке.
                                        // Здесь доступны обе переменные х и у
                                        Console.WriteLine("х и у: " + x + " " + y);
                                        x = y * 2;
                                    }
                                    // y = 100; // Ошибка! Переменная у здесь недоступна
                                    // А переменная х здесь по-прежнему доступна.
                                    Console.WriteLine("" + x);
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************Время существования переменной************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _023_Время_Существования_Переменной
                        {
                             class VarInitDemo
                            { // Продемонстрировать время существования переменной
                                static void Main()
                                {
                                    int x;
                        
                                    for (x = 0; x < 3; x++)
                                    {
                                        int y = -1; // Переменная у инициализируется при каждом входе в блок
                                        Console.WriteLine("" + y); // Здесь всегда выводится -1
                                        y = 100;
                                        Console.WriteLine("" + y);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ************************Попытка объявить 2 переменные с одним именем************************
                        
                        ```csharp
                        using System;
                        
                        namespace _024_Попытка_Объявить_2_Переменные_Одноименные
                        {
                            class NestVar
                            { /* В этой программе предпринимается попытка объявить во внутренней области
                               * действия переменную с таким же самым именем, как и у переменной, определенной
                               * во внешней области действия.
                               * Эта программа не может быть скомпилирована! */
                                static void Main()
                                {
                                    int count;
                        
                                    for (count = 0; count < 10; count = count + 1)
                                    {
                                        Console.WriteLine("Это подсчет: " + count);
                        
                                        int count; // Недопустимо!!!
                                        for (count = 0; count < 2; count++)
                                            Console.WriteLine("В этой программе есть ошибка!");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************Неявное преобразование типа long в тип double******************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _025_Неявное_Преобразование_Long_Double
                        {
                            class LtoD
                            { // Продемонстрировать неявное преобразование типа long в тип double
                                static void Main()
                                {
                                    long L;
                                    double D;
                        
                                    L = 100123285L;
                                    D = L;
                                    Console.WriteLine("L и D: " + L + " " + D);
                        
                                    /* *** Эта программа не может быть скомпилирована ***
                                     * long L;
                                     * double D;
                                     * 
                                     * D = 100123285.0;
                                     * L = D; // Недопустимо!!!
                                     * Console.WriteLine("L и D: " + L + " " + D);
                                     */
                                }
                            }
                        }
                        ```
                        
                    - **************************Приведение типов**************************
                        
                        ```csharp
                        using System;
                        
                        namespace _026_Приведение_Типов
                        {
                             class CastDemo
                            { // Продемонстрировать приведение типов
                                static void Main()
                                {
                                    double x, y;
                                    byte b;
                                    int i;
                                    char ch;
                                    uint u;
                                    short s;
                                    long l;
                        
                                    x = 10.0;
                                    y = 3.0;
                        
                                    // Приведение типа double к типу int, дробная часть числа теряется 
                                    i = (int)(x / y);
                                    Console.WriteLine("Целочисленный результат деления x / y: " + i);
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу byte без потери данных
                                    i = 255;
                                    b = (byte)i;
                                    Console.WriteLine("b после присваивания 255: " + b + " -- без потери данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу byte с потерей данных
                                    i = 257;
                                    b = (byte)i;
                                    Console.WriteLine("b после присваивания 257: " + b + " -- с потерей данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа uint к типу short без потери данных
                                    u = 32000;
                                    s = (short)u;
                                    Console.WriteLine("s после присваивания 32000: " + s + " -- без потери данных ");
                        
                                    // Приведение типа uint к типу short с потерей данных
                                    u = 64000;
                                    s = (short)u;
                                    Console.WriteLine("s после присваивания 64000: " + s + " -- с потерей данных");
                                    Console.WriteLine();
                        
                                    // Приведение типа long к типу uint без потери данных
                                    l = 64000;
                                    u = (uint)l;
                                    Console.WriteLine("u после присваивания 64000: " + u + " -- без потери данных");
                        
                                    // Приведение типа long к типу uint с потерей данных
                                    l = -12;
                                    u = (uint)l;
                                    Console.WriteLine("u после присваивания -12: " + u + " -- с потерей данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу char
                                    b = 88; // код ASCII символа X
                                    ch = (char)b;
                                    Console.WriteLine("ch после присваивания 88: " + ch);
                        
                                    // Пример неожиданного результата продвижения типов!
                                    byte k;
                                    k = 10;
                                    k = (byte)(k * k); // Необходимо приведение типов
                                    Console.WriteLine("Пример неожиданного продвижения типов:");
                                    Console.WriteLine("b: " + b);
                        
                                    // Пример приведения типов в выражениях
                                    Console.WriteLine();
                                    Console.WriteLine("Пример приведения типов в выражениях");
                                    double n;
                        
                                    for (n = 1.0; n <= 10; n++)
                                    {
                                        Console.WriteLine("Квадратный корень из {0} равен {1}", n, Math.Sqrt(n));
                                        Console.WriteLine("Целая часть числа: {0}", (int) Math.Sqrt(n));
                                        Console.WriteLine("Дробная часть числа: {0}", Math.Sqrt(n) - (int)Math.Sqrt(n));
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Применение оператора %********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _027_Оператор__
                        {
                            class ModDemo
                            { // Продемонстрировать применение оператора %
                                static void Main()
                                {
                                    int iresult, irem;
                                    double dresult, drem;
                        
                                    iresult = 10 / 3;
                                    irem = 10 % 3;
                        
                                    dresult = 10.0 / 3.0;
                                    drem = 10.0 % 3.0;
                        
                                    Console.WriteLine("Результат и остаток от деления 10 / 3: " + iresult + " " + irem);
                                    Console.WriteLine("Результат и остаток от деления 10.0 / 3.0: " + dresult + " " + drem);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************************************************Инкремент. Постфиксная и префиксная формы**********************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _028_Инкремент_Постфиксная_Префиксная_Формы
                        {
                            class PrePostDemo
                            { // Продемонстрировать отличие между префиксной и постфиксной формами оператора инкремента (++)
                                static void Main()
                                {
                                    int x, y;
                                    int i;
                        
                                    x = 1;
                                    y = 0;
                                    Console.WriteLine("Ряд чисел, полученных с помощью оператора y = y + x++;");
                                    for (i = 0; i < 10; i++)
                                    {
                                        y = y + x++; // постфиксная форма оператора ++
                                        Console.WriteLine(y + " ");
                                    }
                                    Console.WriteLine();
                        
                                    x = 1;
                                    y = 0;
                                    Console.WriteLine("Ряд чисел, полученных с помощью оператора y = y + ++x;");
                                    for (i = 0; i < 10; i++)
                                    {
                                        y = y + ++x; // префиксная форма оператора ++
                                        Console.WriteLine(y + " ");
                                    }
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - ******************Операторы отношения и логические операторы******************
                        
                        ```csharp
                        using System;
                        
                        namespace _029_Операторы_Отношения_и_Логические
                        {
                            class RelLogOps
                            { // Продемонстрировать применение операторов отношения и логических операторов
                                static void Main()
                                {
                                    int i, j;
                                    bool b1, b2;
                        
                                    i = 10;
                                    j = 11;
                                    if (i < j) Console.WriteLine("i < h");
                                    if (i <= j) Console.WriteLine("i <= j");
                                    if (i != j) Console.WriteLine("i != j");
                                    if (i == j) Console.WriteLine("");
                                    if (i >= j) Console.WriteLine("");
                                    if (i > j) Console.WriteLine("");
                        
                                    b1 = true;
                                    b2 = false;
                                    if (b1 & b2) Console.WriteLine("");
                                    if (!(b1 & b2)) Console.WriteLine("!(b1 * b2) - true");
                                    if (b1 | b2) Console.WriteLine("b1 | b2 - true");
                                    if (b1 ^ b2) Console.WriteLine("b1 ^ b2 - true");
                                }
                            }
                        }
                        ```
                        
                    - **************************************Операция импликации**************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _030_Операция_Импликации
                        {
                            class Implication
                            { // Построении операции импликации в C#
                                static void Main()
                                {
                                    bool p = false, q = false;
                                    int i, j;
                        
                                    for (i = 0; i < 2; i++)
                                    {
                                        for (j = 0; j < 2; j++)
                                        {
                                            if (i == 0) p = true;
                                            if (i == 1) p = false;
                                            if (j == 0) q = true;
                                            if (j == 1) q = false;
                                            Console.WriteLine("p равно " + p + ", q равно " + q);
                                            if (!p | q)
                                                Console.WriteLine("Результат импликации " + p + " и " + q + " равен " + true);
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************Укороченные логические операторы******************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _031_Укороченные_Логические_Операторы
                        {
                            class SCops
                            { // Продемонстрировать применение укороченных логических операторов
                                static void Main()
                                {
                                    int n, d;
                        
                                    n = 10;
                                    d = 2;
                                    if (d != 0 && (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                        
                                    d = 0; // задать нулевое значение переменной d
                                    // d равно нулю, поэтому второй операнд не вычисляется
                                    if (d != 0 && (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                                    // Если теперь попытаться сделать то же самое без укороченного
                                    // логического оператора, то возникнет ошибка из-за деления на ноль.
                                    if (d != 0 & (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************Значение побочных эффектов****************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _032_Значение_Побочных_Эффектов
                        {
                             class SideEffects
                            { // Продемонстрировать значение побочных эффектов
                                static void Main()
                                {
                                    int i;
                                    bool someCondition = false;
                                    i = 0;
                                    // Значение переменной i инкрементируется, несмотря на то, что if не выполняется
                                    if (someCondition & (++i < 100))
                                        Console.WriteLine("Не выводится");
                                    Console.WriteLine("Оператор if выполняется: " + i); // выводится 1
                                    // В данном случае значение переменной i не инкрементируется
                                    // поскольку инкремент в укороченном логическом операторе опускается.
                                    if (someCondition && (++i < 100))
                                        Console.WriteLine("Не выводится");
                                    Console.WriteLine("Оператор if выполняется: " + i); // по-прежнему 1!!!
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Поразрядный оператор И********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _033_Поразрядный_Оператор_И
                        {
                            class MakeEven
                            { // Применить поразрядный оператор И, чтобы сделать число четным
                                static void Main()
                                {
                                    ushort num;
                                    ushort i;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        num = i;
                                        Console.WriteLine("num: " + num);
                                        num = (ushort)(num & 0xFFFE);
                                        Console.WriteLine("num после сброса младшего разряда: " + num + "\n");
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _034_Поразрядный_И_Определение_Нечетности
                        {
                            class IsOdd
                            { // Применить поразрядный оператор И, чтобы определить, является ли число нечетным
                                static void Main()
                                {
                                    ushort num;
                                    num = 10;
                                    if ((num & 1) == 1)
                                        Console.WriteLine("Не выводится.");
                        
                                    num = 11;
                                    if ((num & 1) == 1)
                                        Console.WriteLine(num + " - нечетное число");
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Показать биты, составляющие байт****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _035_Показать_Биты_Составляющие_Байт
                        {
                            class ShowBits
                            { // Показать биты, составляющие байт
                                static void Main()
                                {
                                    int t;
                                    byte val;
                                    val = 123;
                                    for (t = 128; t > 0; t = t / 2)
                                    {
                                        if ((val & t) != 0) Console.Write("1 ");
                                        if ((val & t) == 0) Console.Write("0 ");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **************************************************Поразрядный оператор ИЛИ**************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _036_Поразрядный_Оператор_ИЛИ
                        {
                            class MakeOdd
                            { // Применить поразрядный оператор ИЛИ, чтобы сделать число нечетным
                                static void Main()
                                {
                                    ushort num;
                                    ushort i;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        num = i;
                                        Console.WriteLine("num: " + num);
                                        num = (ushort)(num | 1);
                                        Console.WriteLine("num после установки младшего разряда: ", +num + "\n");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************************Поразрядный оператор исключающее ИЛИ************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _037_Исключающее_ИЛИ
                        {
                            class Encode
                            { // Продемонстрировать применение поразрядного оператора исключающее ИЛИ
                                static void Main()
                                {
                                    char ch1 = 'H';
                                    char ch2 = 'i';
                                    char ch3 = '!';
                                    int key = 88;
                        
                                    Console.WriteLine("Исходное сообщение: " + ch1 + ch2 + ch3);
                        
                                    // Зашифровать сообщение
                                    ch1 = (char)(ch1 ^ key);
                                    ch2 = (char)(ch2 ^ key);
                                    ch3 = (char)(ch3 ^ key);
                        
                                    Console.WriteLine("Зашифрованное сообщение: " + ch1 + ch2 + ch3);
                        
                                    // Расшифровать сообщение
                                    ch1 = (char)(ch1 ^ key);
                                    ch2 = (char)(ch2 ^ key);
                                    ch3 = (char)(ch3 ^ key);
                        
                                    Console.WriteLine("Расшифрованное сообщение: " + ch1 + ch2 + ch3);
                                }
                            }
                        }
                        ```
                        
                    - **********************************Поразрядный унарный оператор НЕ**********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _038_Унарный_Оператор_НЕ
                        {
                            class NotDeme
                            { // Продемонстрировать применение поразрядного унарного оператора НЕ
                                static void Main()
                                {
                                    sbyte b = -34;
                        
                                    for (int t = 128; t > 0; t = t / 2)
                                    {
                                        if ((b & t) != 0) Console.Write("1 ");
                                        if ((b & t) == 0) Console.Write("0 ");
                                    }
                                    Console.WriteLine();
                        
                                    // 
                                    b = (sbyte)~b;
                                    for (int t = 128; t > 0; t = t / 2)
                                    {
                                        if ((b & t) != 0) Console.Write("1 ");
                                        if ((b & t) == 0) Console.Write("0 ");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************Операторы сдвига********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _039_Операторы_Сдвига
                        {
                            class ShiftDemo
                            { // Продемонстрировать применение операторов сдвига.
                                static void Main()
                                {
                                    int val = 1;
                                    for (int i = 0; i < 8; i++)
                                    {
                                        for (int t = 128; t > 0; t = t / 2)
                                        {
                                            if ((val & t) != 0) Console.Write("1 ");
                                            if ((val & t) == 0) Console.Write("0 ");
                                        }
                                        Console.WriteLine();
                                        val = val << 1; // сдвиг влево
                                    }
                                    Console.WriteLine();
                        
                                    val = 128;
                                    for (int i = 0; i < 8; i++)
                                    {
                                        for (int t = 128; t> 0; t = t / 2)
                                        {
                                            if ((val & t) != 0) Console.Write("1 ");
                                            if ((val & t) == 0) Console.Write("0 ");
                                        }
                                        Console.WriteLine();
                                        val = val >> 1; // сдвиг вправо
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _040_Операторы_Сдвига_Для_Умножения_И_Деления_На_2
                        {
                            class MultDiv
                            { // Применить операторы сдвига для умножения и деления на 2
                                static void Main()
                                {
                                    int n;
                                    n = 10;
                                    Console.WriteLine("Значение переменной n: " + n);
                        
                                    // Умножить на 2
                                    n = n << 1;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n * 2: " + n);
                        
                                    // Умножить на 4
                                    n = n << 2;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n * 4: " + n);
                        
                                    // Разделить на 2
                                    n = n >> 1;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n / 2: " + n);
                        
                                    // Разделить на 4
                                    n = n >> 2;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n / 4: " + n);
                        
                                    // Установить переменную n в исходное состояние
                                    n = 10;
                                    Console.WriteLine("Значение переменной n: " + n);
                        
                                    // Умножить на 2 тридцать раз.
                                    n = n << 30; // данные теряются
                                    Console.WriteLine("Значение переменной n после " + "сдвига на 30 позиций влево: " + n);
                                }
                            }
                        }
                        ```
                        
                    - ********************Оператор ?********************
                        
                        ```csharp
                        using System;
                        
                        namespace _041_Исключаем_Деление_На_Ноль
                        {
                            class NoZeroDiv
                            { // Исключить денелие на ноль, используя оператор ?
                                static void Main()
                                {
                                    int result;
                        
                                    for (int i = -5; i < 6; i++)
                                    {
                                        result = i != 0 ? 100 / i : 0;
                                        if (i != 0)
                                            Console.WriteLine("100 / " + i + " равно " + result);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _042_Делим_Только_На_Четные_Ненулевые_Значения
                        {
                            class NoZeroDiv2
                            { // Разделить только на четные, ненулевые значения
                                static void Main()
                                {
                                    for (int i = -5; i < 6; i++)
                                        if (i != 0 ? (i % 2 == 0) : false)
                                            Console.WriteLine("100 / " + i + " равно " + 100 / i);
                                }
                            }
                        }
                        ```
                        
                    - **Оператор if_else**
                        
                        ```csharp
                        using System;
                        
                        namespace _043_Оператор_if_else
                        { // Определить, является ли числовое значение положительным или отрицательным
                            class PosNeg
                            {
                                static void Main()
                                {
                                    int i;
                                    for (i = -5; i <= 5; i++)
                                    {
                                        Console.Write("Проверка " + i + ": ");
                        
                                        if (i < 0) Console.WriteLine("отрицательное число");
                                        else Console.WriteLine("положительное число");
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _044_if_else_Проверяем_Числа
                        {
                            class PosNegZero
                            { // Определить, является ли числовое значение положительным, отрицательным или нулевым
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = -5; i <= 5; i++)
                                    {
                                        Console.Write("Проверка " + i + ": ");
                                        if (i < 0) Console.WriteLine("отрицательное число");
                                        else if (i == 0) Console.WriteLine("число без знака");
                                        else Console.WriteLine("положительное число");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Конструкция if_else_if**
                        
                        ```csharp
                        using System;
                        
                        namespace _045_Конструкция_if_else_if
                        {
                            class Ladder
                            { // Определить наименьший множитель заданного целого значения, состоящий из одной цифры
                                static void Main()
                                {
                                    int num;
                        
                                    for (num = 2; num < 12; num++)
                                    {
                                        if((num % 2) == 0)
                                        Console.WriteLine("Наименьший множитель числа " + num + " равен 2.");
                                        else if ((num % 3) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 3.");
                                        else if ((num % 5) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 5.");
                                        else if ((num % 7) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 7.");
                                        else
                                            Console.WriteLine(num + " не делится на 2, 3, 5 или 7.");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор switch**
                        
                        ```csharp
                        using System;
                        
                        namespace _046_Оператор_switch
                        { // Продемонстрировать применение оператора switch.
                            class SwitchDemo
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 0; i < 10; i++)
                                        switch(i)
                                        {
                                            case 0:
                                                Console.WriteLine("i равно нулю");
                                                break;
                                            case 1:
                                                Console.WriteLine("i равно единице");
                                                break;
                                            case 2:
                                                Console.WriteLine("i равно двум");
                                                break;
                                            case 3:
                                                Console.WriteLine("i равно трем");
                                                break;
                                            case 4:
                                                Console.WriteLine("i четырем");
                                                break;
                                            default:
                                                Console.WriteLine("i равно или больше пяти");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _047_Switch_Case_Char
                        { // Использовать элементы типа char для управления оператором switch
                            class SwitchDemo2
                            {
                                static void Main()
                                {
                                    char ch;
                        
                                    for (ch = 'A'; ch <= 'E'; ch++)
                                        switch (ch)
                                        {
                                            case 'A':
                                                Console.WriteLine("ch содержит A");
                                                break;
                                            case 'B':
                                                Console.WriteLine("ch содержит B");
                                                break;
                                            case 'C':
                                                Console.WriteLine("ch содержит C");
                                                break;
                                            case 'D':
                                                Console.WriteLine("ch содержит D");
                                                break;
                                            case 'E':
                                                Console.WriteLine("ch содержит E");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _048_Пример_Проваливания_Пустых_Ветвей_Case
                        { // Пример "проваливания" пустых ветвей case
                            class EmptyCasesCanFall
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 1; i < 5; i++)
                                        switch(i)
                                        {
                                            case 1:
                                            case 2:
                                            case 3: Console.WriteLine("i равно 1, 2 или 3");
                                                break;
                                            case 4: Console.WriteLine("i равно 4");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                    - **Цикл for**
                        - ************************************************Число в обратном порядке************************************************
                            
                            ```csharp
                            using System;
                            
                            namespace _060_Do_While_Цифры_Числа_Обратный_Порядок
                            { // Отобразить цифры целого числа в обратном порядке
                                class DoWhileDemo
                                {
                                    static void Main()
                                    {
                                        int num;
                                        int nextdigit;
                                        num = 198;
                            
                                        Console.WriteLine("Число: " + num);
                                        Console.Write("Число в обратном порядке: ");
                            
                                        do
                                        {
                                            nextdigit = num % 10;
                                            Console.Write(nextdigit);
                                            num = num / 10;
                                        }
                                        while(num > 0);
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        
                        ```csharp
                        using System;
                        
                        namespace _049_Цикл_for_Отрицательное_Направление
                        { // Выполнение цикла for в отрицательном направлении
                            class DecrFor
                            {
                                static void Main(string[] args)
                                {
                                    int x;
                        
                                    for (x = 100; x > -100; x -= 5)
                                        Console.WriteLine(x);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _050_for_Выявление_Простых_Чисел
                        { // Выяснить, является ли число простым. Если оно непростое, вывести наибольший его множитель
                            class FindPrimes
                            {
                                static void Main()
                                {
                                    int num;
                                    int i;
                                    int factor;
                                    bool isprime;
                        
                                    for (num = 2; num < 20; num++)
                                    {
                                        isprime = true;
                                        factor = 0;
                        
                                        // Выяснить, делится ли значение переменной num нацело
                                        for (i = 2; i <= num / 2; i++)
                                        {
                                            if ((num % i) == 0)
                                            {
                                                // Значение переменной num делится нацело.
                                                // Следовательно, это не простое число.
                                                isprime = false;
                                                factor = i;
                                            }
                                        }
                                        if (isprime)
                                            Console.WriteLine(num + " - простое число.");
                                        else
                                            Console.WriteLine("Наибольший множитель числа " + num + " равен " + factor);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _051_for_Применение_Нескольких_Переменных_Управления_Циклом
                        { // Использовать запятые в операторе цикла for
                            class Comma
                            {
                                static void Main()
                                {
                                    int i, j;
                        
                                    for (i = 0, j = 10; i < j; i++, j--)
                                        Console.WriteLine("i и j: " + i + " " + j);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _052_for_Использование_Запятых
                        { // Использовать запятые в операторе цикла for для выявления наименьшего
                          // и наибольшего множителя числа
                            class Comma
                            {
                                static void Main()
                                {
                                    int i, j;
                                    int smallest, largest;
                                    int num;
                        
                                    num = 100;
                                    smallest = largest = 1;
                        
                                    for (i = 2, j = num / 2; (i <= num / 2) & (j >= 2); i++, j--)
                                    {
                                        if ((smallest == 1) & ((num % i) == 0))
                                            smallest = i;
                                        if ((largest == 1) & ((num % j) == 0))
                                            largest = j;
                                    }
                        
                                    Console.WriteLine("Наибольший множитель: " + largest);
                                    Console.WriteLine("Наименьший множитель: " + smallest);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _053_Условное_Выражение
                        { // Условием выполнения цикла может служить любое выражение типа bool
                            class ForDemo
                            {
                                static void Main()
                                {
                                    int i, j;
                                    bool done = false;
                        
                                    for (i = 0, j = 100; !done; i++, j--)
                                    {
                                        if (i * i >= j) done = true;
                                        Console.WriteLine("i, j: " + i + " " + j);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _054_for_Отдельные_Пустые_Блоки
                        { // Отедльные части цикла for могут оставаться пустыми
                            class Empty
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 0; i < 10; )
                                    {
                                        Console.WriteLine("Проход №" + i);
                                        i++; // инкрементировать переменную управления циклом
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _055_for_Исключаем_Два_Блока
                        { // Исключить еще одну часть из определения цикла for
                            class Empty2
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    i = 0; // исключить инициализацию из определения цикла
                                    for (; i < 10; )
                                    {
                                        Console.WriteLine("Проход №" + i);
                                        i++; // инкрементировать переменную управления циклом
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _056_for_Без_Тела
                        { // Тело цикла может быть пустым
                            class Empty3
                            {
                                static void Main()
                                {
                                    int i;
                                    int sum = 0;
                                    // получить сумму чисел от 1 до 5
                                    for (i = 1; i <= 5; sum += i++) ;
                        
                                    Console.WriteLine("Сумма равна " + sum);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _057_Объявление_Управляющих_Переменных_for
                        { // Объявить переменную управления циклом в самом цикле for
                            class ForVar
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int fact = 1;
                        
                                    // вычислить факториал чисел от 1 до 5
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        sum += i; // Переменная i действует в цикле
                                        fact *= i;
                                    }
                                    // А здесь переменная i недоступна
                                    Console.WriteLine("Сумма равна " + sum);
                                    Console.WriteLine("Факториал равен " + fact);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _058_While_Вычисляем_Порядок_Величины_Целого_Числа
                        { // Вычислить порядок величины целого числа
                            class WhileDemo
                            {
                                static void Main()
                                {
                                    int num;
                                    int mag;
                        
                                    num = 435679;
                                    mag = 0;
                        
                                    Console.WriteLine("Число: " + num);
                        
                                    while (num > 0)
                                    {
                                        mag++;
                                        num = num / 10;
                                    };
                                    Console.WriteLine("Порядок величины: " + mag);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _059_while_Вычисляем_Целые_Степени_Числа
                        { // Вычислить целые степени числа 2
                            class Power
                            {
                                static void Main()
                                {
                                    int e;
                                    int result;
                        
                                    for (int i = 0; i < 10; i++)
                                    {
                                        result = 1;
                                        e = i;
                        
                                        while (e > 0)
                                        {
                                            result *= 2;
                                            e--;
                                        }
                                        Console.WriteLine("2 в степени " + i + " равно " + result);
                                    }    
                                }
                            }
                        }
                        ```
                        
                    - **Оператор break**
                        - Применение оператора break для выхода из цикла for
                            
                            ```csharp
                            using System;
                            
                            namespace _061_Оператор_break
                            { // Применить оператор break для выхода из цикла
                                class BreakDemo
                                {
                                    static void Main()
                                    {
                                        // Использовать оператор break для выхода из этого цикла
                                        for (int i = -10; i <= 10; i++)
                                        {
                                            if (i > 0) break; // завершить цикл, как только значение
                                                              // переменной i станет положительным
                                            Console.Write(i + " ");
                                        }
                                        Console.WriteLine("Готово!");
                                    }
                                }
                            }
                            ```
                            
                        - Применить оператор break для выхода из цикла do-while
                            
                            ```csharp
                            using System;
                            
                            namespace _062_break_Из_Цикла_Do_While
                            { // Применить оператор break для выхода из цикла do-while
                                class BreakDemo2
                                {
                                    static void Main()
                                    {
                                        int i;
                                        i = -10;
                                        do
                                        {
                                            if (i > 0) break;
                                            Console.Write(i + " ");
                                            i++;
                                        }
                                        while (i <= 10);
                                        Console.WriteLine("Готово!");
                                    }
                                }
                            }
                            ```
                            
                        - Выявляем наименьший множитель числа
                            
                            ```csharp
                            using System;
                            
                            namespace _063_Выявляем_Наименьший_Множитель_Числа
                            { // Выявить наименьший множитель числа
                                class FindSmallestFactor
                                {
                                    static void Main()
                                    {
                                        int factor = 1;
                                        int num = 1000;
                            
                                        for (int i = 2; i <= num / i; i++)
                                        {
                                            if ((num % i) == 0)
                                            {
                                                factor = i;
                                                break; // прервать цикл, как только будет выявлен
                                                        // наименьший множитель числа
                                            }
                                        }
                                        Console.WriteLine("Наименьший множитель числа равен " + factor);
                                    }
                                }
                            }
                            ```
                            
                        - Применяем оператор break во вложенных циклах
                            
                            ```csharp
                            using System;
                            
                            namespace _064_break_Вложенные_Циклы
                            {
                                class BreakNested
                                { // Применить оператор break во вложенных циклах
                                    static void Main()
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            Console.WriteLine("Подсчет во внешнем цикле: " + i);
                                            Console.Write("Подсчет во внутреннем цикле: ");
                            
                                            int t = 0;
                                            while (t < 100)
                                            {
                                                if (t == 10) break; // прервать цикл, если t равно 10
                                                Console.Write(t + " ");
                                                t++;
                                            }
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine("Циклы завершены!");
                                    }
                                }
                            }
                            ```
                            
                    - **Оператор continue**
                        
                        ```csharp
                        using System;
                        
                        namespace _065_Оператор_Continue
                        { // Применить оператор continue 
                            class ContDemo
                            {
                                static void Main()
                                {
                                    // Вывести четные числа от 0 до 100
                                    for (int i = 0; i <= 100; i++)
                                    {
                                        if ((i % 2) != 0) continue; // перейти к следующему шагу итерации
                                        Console.WriteLine(i);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор goto**
                        
                        ```csharp
                        using System;
                        
                        namespace _066_GoTo_Switch
                        { // Применить оператор goto в операторе switch
                            class Program
                            {
                                static void Main()
                                {
                                    for (int i = 1; i < 5; i++)
                                    {
                                        switch(i)
                                        {
                                            case 1:
                                                Console.WriteLine("В ветви case 1");
                                                goto case 3;
                                            case 2:
                                                Console.WriteLine("В ветви case 2");
                                                goto case 1;
                                            case 3:
                                                Console.WriteLine("В ветви case 3");
                                                goto default;
                                            default:
                                                Console.WriteLine("В ветви default");
                                                break;
                                        }
                                        Console.WriteLine();
                                    }
                                    // goto case 1; // Ошибка! Безусловный переход к оператору switch недопустим
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _067_Практическое_Применение_GoTo
                        { // Продемонстрировать практическое применение оператора goto
                            class Use_goto
                            {
                                static void Main()
                                {
                                    int i = 0, j = 0, k = 0;
                        
                                    for (i = 0; i < 10; i++)
                                    {
                                        for (j = 0; j < 10; j++)
                                        {
                                            for (k = 0; k < 10; k++)
                                            {
                                                Console.WriteLine("i, j, k: " + i + " " + j + " " + k);
                                                if (k == 3) goto stop;
                                            }
                                        }
                                    }
                                stop: Console.WriteLine("Остановлено! i, j, k: " + i + ", " + j + ", " + k);
                                }
                            }
                        }
                        ```
                        
                    - **Класс Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _068_Класс_Building
                        { // Программа, в которой используется класс Building
                            class Building
                            {
                                public int Floors; // количество этажей
                                public int Area; // общая площадь здания
                                public int Occupants; // количество жильцов
                            }
                        
                            // В этом классе объявляется объект типа Building
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building(); // создать объект типа Building
                                    int areaPP; // площадь на одного человека
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Вычислить площадь на одного человека
                                    areaPP = house.Area / house.Occupants;
                                    Console.WriteLine("Дом имеет\n" + house.Floors + 
                                        " этажа\n" + house.Occupants + " жильца\n" + house.Area + 
                                        " кв. футов общей площади, из них\n" + areaPP + 
                                        " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Программа с двумя объектами типа Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _069_Два_Объекта_Типа_Building
                        { // в этой программе создаются два объекта типа Building
                            class Building
                            {
                                public int Floors; // количество этажей
                                public int Area; // общая площадь
                                public int Occupants; // количество жильцов
                            }
                            
                            class BuildingDemo
                            { // В этом классе объявляются два объекта типа Building
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    int areaPP; // площадь на одного человека
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    // Вычислить площадь на одного человека в жилом доме
                                    areaPP = house.Area / house.Occupants;
                        
                                    Console.WriteLine("Дом имеет\n" + house.Floors + " этажа\n" + 
                                        house.Occupants + " жильца\n" + 
                                        house.Area + " кв. футов общей площади, из них\n" + 
                                        areaPP + " приходится на одного человека");
                                    Console.WriteLine();
                        
                                    // 
                                    areaPP = office.Area / office.Occupants;
                                    Console.WriteLine("Учреждение имеет\n" + office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + "кв. футов общей площади, из них\n" +
                                        areaPP + " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Добавляем метод в класс Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _070_Добавляем_Метод_В_Класс_Building
                        { // Добавить метод в класс Building
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Вывести площадь на одного человека
                                public void AreaPerPerson()
                                {
                                    Console.WriteLine(" " + Area / Occupants + " приходится на одного человека");
                                }
                            }
                            // Использовать метод AreaPerPerson()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Дом имеет: \n" +
                                        house.Floors + " этажа\n" +
                                        house.Occupants + " жильца\n" +
                                        house.Area + " кв. футов общей площади, из них");
                                    house.AreaPerPerson();
                        
                                    Console.WriteLine();
                        
                                    Console.WriteLine("Учреждение имеет: \n" +
                                        office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + " кв. футов общей площади, из них");
                                    office.AreaPerPerson();
                                }
                            }
                        }
                        ```
                        
                    - **Возвращаем значение из метода AreaPerPerson()**
                        
                        ```csharp
                        using System;
                        
                        namespace _071_Возвращаем_Значение_Из_Метода_Return
                        { // Возвратить значение из метода AreaPerPerson
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Возвратить величину площади на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                            }
                            // Использовать значение, возвращаемое методом AreaPerPerson()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                                    int areaPP; // площадь на одного человека
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Дом имеет: \n" +
                                        house.Floors + " этажа\n" +
                                        house.Occupants + " жильца\n" +
                                        house.Area + " кв. футов общей площади, из них\n" + 
                                        house.AreaPerPerson() + " приходится на одного человека");
                        
                                    Console.WriteLine();
                        
                                    Console.WriteLine("Учреждение имеет: \n" +
                                        office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + " кв. футов общей площади, из них\n" +
                                        office.AreaPerPerson() + " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Применение параметров в методе**
                        
                        ```csharp
                        using System;
                        
                        namespace _072_Применение_Параметров_В_Методе
                        { // Простой пример применения параметра
                            class ChkNum
                            {
                                // Возвратить значение true, если значение параметра х окажется простым числом 
                                public bool IsPrime(int x)
                                {
                                    if (x <= 1) return false;
                        
                                    for (int i = 2; i <= x / i; i++)
                                        if ((x % i) == 0) return false;
                                    return true;
                                }
                            }
                            class ParmDemo
                            {
                                static void Main()
                                {
                                    ChkNum ob = new ChkNum();
                        
                                    for (int i = 2; i < 10; i++)
                                        if (ob.IsPrime(i)) Console.WriteLine(i + " простое число.");
                                        else Console.WriteLine(i + " непростое число.");
                                }
                            }
                        }
                        ```
                        
                    - **Метод, принимающий два аргумента**
                        
                        ```csharp
                        using System;
                        
                        namespace _073_Метод_Принимает_Два_Аргумента
                        { // Добавить метод, принимающий два аргумента
                            class ChkNum
                            {
                                // Возвратить значение true, если значение параметра х окажется простым числом 
                                public bool IsPrime(int x)
                                {
                                    if (x <= 1) return false;
                        
                                    for (int i = 2; i <= x / i; i++)
                                        if ((x % i) == 0) return false;
                                    return true;
                                }
                        
                                // Возвратить наименьший общий множитель
                                public int LeastComFactor(int a, int b)
                                {
                                    int max;
                        
                                    if (IsPrime(a) || IsPrime(b)) return 1;
                                    max = a < b ? a : b;
                        
                                    for (int i = 2; i <= max / 2; i++)
                                        if (((a % i) == 0) && ((b % i) == 0)) return i;
                                    return 1;
                                }
                            }
                            class ParmDemo
                            {
                                static void Main()
                                {
                                    ChkNum ob = new ChkNum();
                                    int a, b;
                        
                                    for (int i = 2; i < 10; i++)
                                        if (ob.IsPrime(i)) Console.WriteLine(i + " простое число.");
                                        else Console.WriteLine(i + " непростое число.");
                        
                                    a = 7;
                                    b = 8;
                                    Console.WriteLine("Наименьший общий множитель чисел " + 
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                        
                                    a = 100;
                                    b = 8;
                                    Console.WriteLine("Наименьший общий множитель чисел " +
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                        
                                    a = 100;
                                    b = 75;
                                    Console.WriteLine("Наименьший общий множитель чисел " +
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                                }
                            }
                        }
                        ```
                        
                    - **Возвращаем максимальное количество жильцов**
                        
                        ```csharp
                        using System;
                        
                        namespace _074_Возвращаем_Максимальное_Количество_Жильцов_Building
                        { /* Возвратить максимальное количество человек, занимающих здание, исходя из 
                           * заданной минимальной площади на одного человека.
                           * Добавить параметризированный метод, вычисляющий максимальное количество человек, 
                           * которые могут занимать здание, исходя из заданной минимальной площади на одного человека.*/
                            
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Возвратить площадь на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                        
                                // Возвратить максимальное кол-во чел, занимающих здание, исходя из
                                // заданной минимальной площади на одного человека
                                public int MaxOccupant(int minArea)
                                {
                                    return Area / minArea;
                                }
                            }
                        
                            // Использовать метод MaxOccupant()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 3;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 4;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Максиальное количество человек в доме, \n" + 
                                        "если на каждого должно приходиться " + 300 + " кв. футов: " +
                                        house.MaxOccupant(300));
                                    Console.WriteLine("Максиальное количество человек в учреждении, \n" +
                                        "если на каждого должно приходиться " + 300 + " кв. футов: " +
                                        office.MaxOccupant(300));
                                }
                            }
                        }
                        ```
                        
                    - Простой конструктор
                        
                        ```csharp
                        using System;
                        
                        namespace _075_Простой_Конструктор
                        { // Простой конструктор
                        
                            class MyClass
                            {
                                public int x;
                        
                                **public MyClass()
                                {
                                    x = 10;
                                }**
                            }
                            class ConsDemo
                            {
                                static void Main()
                                {
                                    MyClass t1 = new MyClass();
                                    MyClass t2 = new MyClass();
                        
                                    Console.WriteLine(t1.x + t2.x);
                                }
                            }
                        }
                        ```
                        
                    - Параметризированный конструктор
                        
                        ```csharp
                        using System;
                        
                        namespace _076_Параметризированный_Конструктор
                        { // Параметризированный конструктор
                            
                            class MyClass
                            {
                                public int x;
                        
                                public MyClass(int i)
                                {
                                    x = i;
                                }
                            }
                            class ParmsConsDemo
                            {
                                static void Main()
                                {
                                    MyClass t1 = new MyClass(10);
                                    MyClass t2 = new MyClass(88);
                        
                                    Console.WriteLine(t1.x + " " + t2.x);
                                }
                            }
                        }
                        ```
                        
                    - Добавляем конструктор в класс Building
                        
                        ```csharp
                        using System;
                        
                        namespace _077_Конструктор_В_Классе_Building
                        { // Добавить конструктор в класс Building
                        
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Параметризированный конструктор для класса Building
                                public Building(int f, int a, int o)
                                {
                                    Floors = f;
                                    Area = a;
                                    Occupants = o;
                                }
                        
                                // Возвратить площадь на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                        
                                // Возвратить макс кол-во чел, исходя из заданной мин площади на человека
                                public int MaxOccupant(int minArea)
                                {
                                    return Area / minArea;
                                }
                            }
                        
                            // Использовать параметризированный конструктор класса Building
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building(2, 2500, 4);
                                    Building office = new Building(3, 4200, 250);
                        
                                    Console.WriteLine("Максимальное количество человек в доме\n" +
                                        "если на каждого должно приходиться " +
                                        300 + " кв. футов: " + house.MaxOccupant(300));
                        
                                    Console.WriteLine("Максимальное количество человек в учреждении\n" +
                                        "если на каждого должно приходиться " +
                                        300 + " кв. футов: " + office.MaxOccupant(300));
                                }
                            }
                        }
                        ```
                        
                    - Оператор new
                        
                        ```csharp
                        // Использовать оператор new вместе с типом значения (однако, это нецелесообразно)
                        
                        using System;
                        
                        class newValue
                        {
                        	static void Main()
                        	{
                        		int i = new int(); // инициализировать переменную i нулевым значением
                        		Console.WriteLine("Значение переменной i равно: " + i);
                        	}
                        }
                        ```
                        
                    - Применение деструктора
                        
                        ```csharp
                        using System;
                        
                        namespace _078_Применение_Деструктора
                        { // Продемонстрировать применение деструктора
                        
                            class Destruct
                            {
                                public int x;
                        
                                public Destruct(int i)
                                {
                                    x = i;
                                }
                        
                                // Вызывается при утилизации объекта
                                ~Destruct()
                                {
                                    Console.WriteLine("Уничтожить " + x);
                                }
                                
                                // Создает объект и тут же уничтожает его
                                public void Generator(int i)
                                {
                                    Destruct o = new Destruct(i);
                                }
                            }
                            class DestructDemo
                            {
                                static void Main()
                                {
                                    int count;
                        
                                    Destruct ob = new Destruct(0);
                                    /* А теперь создать большое кол-во объектов. В какой-то момент 
                                     произойдет "сборка мусора". 
                                    Примечание: для того, чтобы активизировать сборку мусора, возможно
                                    придется увеличить число создаваемых объектов. */
                        
                                    for (count = 1; count < 100000; count++)
                                        ob.Generator(count);
                        
                                    Console.WriteLine("Готово! ");
                                }
                            }
                        }
                        ```
                        
                    - Ключевое слово This
                        
                        ```csharp
                        using System;
                        
                        namespace _079_Ключевое_Слово_this
                        { // однако, в данной программе this можно опустить и ничего не изменится
                            class Rect
                            {
                                public int Width;
                                public int Height;
                        
                                public Rect(int w, int h)
                                {
                                    this.Width = w;
                                    this.Height = h;
                                }
                        
                                public int Area()
                                {
                                    return this.Width * this.Height;
                                }
                            }
                            class UseRect
                            {
                                static void Main()
                                {
                                    Rect r1 = new Rect(4, 5);
                                    Rect r2 = new Rect(7, 9);
                        
                                    Console.WriteLine("r1: " + r1.Area());
                                    Console.WriteLine("r2: " + r2.Area());
                                }
                            }
                        }
                        ```
                        
                    - Одномерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _080_Одномерный_Массив
                        { // Продемонстрировать одномерный массив
                            class ArrayDemo
                            {
                                static void Main()
                                {
                                    int[] sample = new int[10];
                                    int i;
                        
                                    for (i = 0; i < 10; i = i + 1)
                                        sample[i] = i;
                        
                                    for (i = 0; i < 10; i = i + 1)
                                        Console.WriteLine("sample[" + i + "]: " + sample[i]);
                                }
                            }
                        }
                        ```
                        
                    - Среднее арифметическое массива
                        
                        ```csharp
                        using System;
                        
                        namespace _081_Среднее_Арифметическое_Ряда_Значений
                        {
                            class Average
                            { // Вычислить среднее арифметическое ряда значений
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    int avg = 0;
                        
                                    nums[0] = 99;
                                    nums[1] = 10;
                                    nums[2] = 100;
                                    nums[3] = 18;
                                    nums[4] = 78;
                                    nums[5] = 23;
                                    nums[6] = 63;
                                    nums[7] = 9;
                                    nums[8] = 87;
                                    nums[9] = 49;
                        
                                    for (int i = 0; i < 10; i++)
                                        avg = avg + nums[i];
                                    avg = avg / 10;
                        
                                    Console.WriteLine("Среднее: " + avg);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _082_Среднее_Арифметическое_Ряда_Значений
                        { // Вычислить среднее арифметическое ряда значений
                            class Average
                            {
                                static void Main()
                                {
                                    int[] nums = { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
                                    int avg = 0;
                        
                                    for (int i = 0; i < 10; i++)
                                        avg = avg + nums[i];
                                    avg = avg / 10;
                        
                                    Console.WriteLine("Среднее: " + avg);
                                }
                            }
                        }
                        ```
                        
                    - Превышение границ массива
                        
                        ```csharp
                        using System;
                        
                        namespace _083_Превышение_Границ_Массива
                        { // Продемонстрировать превышение границ массива
                            class ArrayErr
                            {
                                static void Main()
                                {
                                    int[] sample = new int[10];
                                    int i;
                        
                                    // Воссоздать превышение границ массива
                                    for (i = 0; i < 100; i = i + 1)
                                        sample[i] = i;
                                }
                            }
                        }
                        ```
                        
                    - Двумерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _084_Двумерный_Массив
                        { // Продемонстрировать двумерный массив
                            class TwoD
                            {
                                static void Main()
                                {
                                    int t, i;
                                    int[,] table = new int[3, 4];
                        
                                    for (t = 0; t < 3; ++t)
                                    {
                                        for (i = 0; i < 4; ++i)
                                        {
                                            table[t, i] = (t * 4) + i + 1;
                                            Console.Write(table[t, i] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Суммируем значения по диагонали 3х-мерного массива
                        
                        ```csharp
                        using System;
                        
                        namespace _085_Суммируем_Значения_По_Диагонали_3_Мерного_Массива
                        { // Суммировать значения по одной из диагоналей матрицы 3х3х3х
                            class ThreeDMatrix
                            {
                                static void Main()
                                {
                                    int[,,] m = new int[3, 3, 3];
                                    int sum = 0;
                                    int n = 1;
                        
                                    for (int x = 0; x < 3; x++)
                                        for (int y = 0; y < 3; y++)
                                            for (int z = 0; z < 3; z++)
                                                m[x, y, z] = n++;
                                    sum = m[0, 0, 0] + m[1, 1, 1] + m[2, 2, 2];
                        
                                    Console.WriteLine("Сумма значений по первой диагонали: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Инициализируем двумерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _086_Инициализация_Двумерного_Массива
                        { // Инициализировать двумерный массив
                            class Squares
                            {
                                static void Main()
                                {
                                    int[,] sqrs =
                                    {
                                        {1, 1 },
                                        {2, 4 },
                                        {3, 9 },
                                        {4, 16 },
                                        {5, 25 },
                                        {6, 36 },
                                        {7, 49 },
                                        {8, 64 },
                                        {9, 81 },
                                        {10, 100 }
                                    };
                        
                                    int i, j;
                        
                                    for (i = 0; i < 10; i++)
                                    {
                                        for (j = 0; j < 2; j++)
                                            Console.Write(sqrs[i, j] + " ");
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Инициализируем многомерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _087_Инициализация_Многомерного_Массива
                        { // Продемонстрировать применение ступенчатых массивов
                            class Jagged
                            {
                                static void Main()
                                {
                                    int[][] jagged = new int[3][];
                                    jagged[0] = new int[4];
                                    jagged[1] = new int[3];
                                    jagged[2] = new int[5];
                        
                                    int i;
                        
                                    // 
                                    for (i = 0; i < 4; i++)
                                        jagged[0][i] = i;
                                    // 
                                    for (i = 0; i < 3; i++)
                                        jagged[1][i] = i;
                                    // 
                                    for (i = 0; i < 5; i++)
                                        jagged[2][i] = i;
                                    // 
                                    for (i = 0; i < 4; i++)
                                        Console.Write(jagged[0][i] + " ");
                                    Console.WriteLine();
                                    // 
                                    for (i = 0; i < 3; i++)
                                        Console.Write(jagged[1][i] + " ");
                                    Console.WriteLine();
                                    // 
                                    for (i = 0; i < 5; i++)
                                        Console.Write(jagged[2][i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Присваивание ссылок на массивы
                        
                        ```csharp
                        using System;
                        
                        namespace _088_Присваивание_Ссылок_На_Массивы
                        { // Присваивание ссылок на массивы
                            class AssignARef
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    int[] nums1 = new int[10];
                                    int[] nums2 = new int[10];
                        
                                    for (i = 0; i < 10; i++) nums1[i] = i;
                        
                                    for (i = 0; i < 10; i++) nums2[i] = -i;
                                    Console.Write("Содержимое массива nums1: ");
                        
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                        
                                    Console.Write("Содержимое массива nums2: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                        
                                    nums2 = nums1; // Теперь nums2 ссылается на nums1
                        
                                    Console.Write("Содержимое массива nums2\n" + "после присваивания: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                        
                                    // Далее оперировать массивом nums1 посредством переменной
                                    // ссылки на массив nums2
                                    nums2[3] = 99;
                        
                                    Console.Write("Содержимое массива nums1 после изменения\n" +
                                        "посредством переменной nums2: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Применение свойства Length
                        
                        ```csharp
                        using System;
                        
                        namespace _089_Применение_Свойства_Length
                        { // Использовать свойство Length массива
                            class LengthDemo
                            {
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    Console.WriteLine("Длина массива nums равна " + nums.Length);
                        
                                    // Использовать свойство Length для инициализации массива nums
                                    for (int i = 0; i < nums.Length; i++)
                                        nums[i] = i * i;
                        
                                    // А теперь воспользоваться свойством Length для вывода
                                    // содержимого массива nums
                                    Console.Write("Содержимое массива nums: ");
                                    for (int i = 0; i < nums.Length; i++)
                                        Console.Write(nums[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _090_Length_Трехмерный_Массив
                        { // Использовать свойство Length трехмерного массива
                            class LengthDemo3D
                            {
                                static void Main()
                                {
                                    int[,,] nums = new int[10, 5, 6];
                                    Console.WriteLine("Длина массива nums равна " + nums.Length);
                                }
                            }
                        }
                        ```
                        
                    - Поменять местами содержимое элементов массива
                        
                        ```csharp
                        using System;
                        
                        namespace _091_Меняем_Местами_Элементы_Массива
                        { // Поменять местами содержимое элементов массива
                            class RevCopy
                            {
                                static void Main()
                                {
                                    int i, j;
                                    int[] nums1 = new int[10];
                                    int[] nums2 = new int[10];
                        
                                    for (i = 0; i < nums1.Length; i++) nums1[i] = i;
                                    Console.Write("Исходное содержимое массива: ");
                                    for (i = 0; i < nums2.Length; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                        
                                    // Скопировать элементы массива nums1 в массив nums2 в обратном порядке
                                    if (nums2.Length >= nums2.Length) // Проверить, достаточно ли
                                                                      // длины массива nums2
                                        for (i = 0, j = nums1.Length - 1; i < nums1.Length; i++, j--)
                                            nums2[j] = nums1[i];
                        
                                    Console.Write("Содержимое массива в обратном порядке: ");
                                    for (i = 0; i < nums2.Length; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Применение Length в зубчатых массивах
                        
                        ```csharp
                        using System;
                        
                        namespace _092_Length_В_Зубчатых_Массивах
                        { // Продемонстрировать применение свойства Length при обращении со ступенчатыми массивами
                            class Jagged
                            {
                                static void Main()
                                {
                                    int[][] network_nodes = new int[4][];
                                    network_nodes[0] = new int[3];
                                    network_nodes[1] = new int[7];
                                    network_nodes[2] = new int[2];
                                    network_nodes[3] = new int[5];
                        
                                    int i, j;
                        
                                    // Имитировать данные об ипользовании ЦП
                                    for (i = 0; i < network_nodes.Length; i++)
                                        for (j = 0; j < network_nodes[i].Length; j++)
                                            network_nodes[i][j] = i * j + 70;
                        
                                    Console.WriteLine("Общее количество узлов сети: " + 
                                        network_nodes.Length + "\n");
                        
                                    for (i = 0; i < network_nodes.Length; i++)
                                    {
                                        for (j = 0; j < network_nodes[i].Length; j++)
                                        {
                                            Console.Write("Использование в узле сети " + i + 
                                                " ЦП " + j + ": ");
                                            Console.Write(network_nodes[i][j] + "% ");
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Неявно типизированный ступенчатый массив
                        
                        ```csharp
                        using System;
                        
                        namespace _093_Неявно_Типизированный_Зубчатый_Массив
                        { // Продемонстрировать неявно типизированный зубчатый массив
                            class Jagged
                            {
                                static void Main()
                                {
                                    var jagged = new[]
                                    {
                                        new[] {1, 2, 3, 4 },
                                        new[] {9, 8, 7 },
                                        new[] {11, 12, 13, 14, 15 }
                                    };
                                    for (int j = 0; j < jagged.Length; j++)
                                    {
                                        for (int i = 0; i < jagged[j].Length; i++)
                                            Console.Write(jagged[j][i] + " ");
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор цикла foreach**
                        
                        ```csharp
                        using System;
                        
                        namespace _094_Оператор_Цикла_Foreach
                        { // Использовать оператор цикла foreach
                            class ForeachDemo
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[] nums = new int[10];
                        
                                    // Задать первоначальные значения элементов массиваnums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                        
                                    // Использовать цикл foreach для вывода значений эл-в массива и подсчета их суммы
                                    foreach (int x in nums)
                                    {
                                        Console.WriteLine("Значение элемента равно:" + x);
                                        sum += x;
                                    }
                                    Console.WriteLine("Сумма равна: " + sum);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _096_Обращаемся_Через_foreach_К_Двумерному_Массиву
                        { // Использовать оператор цикла foreach для обращения к двумерному массиву
                            class ForeachDemo2
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[,] nums = new int[3, 5];
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 3; i++)
                                        for (int j = 0; j < 5; j++)
                                            nums[i, j] = (i + 1) * (j + 1);
                                    // Использовать цикл foreаch для вывода значений элементов массива и подсчета их суммы
                                    foreach (int x in nums)
                                        {
                                        Console.WriteLine("Значение элемента равно: " + x);
                                        sum += x;
                                    }
                                    Console.WriteLine("Сумма равна: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Завершаем foreach через break
                        
                        ```csharp
                        using System;
                        
                        namespace _095_Завершаем_foreach_через_break
                        { // Использовать оператор break для преждевременного завершения цикла foreach
                            class ForeachDemo
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[] nums = new int[10];
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                                    // Использовать foreach для вывода зн-й эл-в массива и подсчета их суммы
                                    foreach (int x in nums)
                                    {
                                        Console.WriteLine("" + x);
                                        sum += x;
                                        if (x == 4) break; // прервать цикл, как только индекс массива достигнет 4
                                    }
                                    Console.WriteLine("Сумма первых 5 элементов: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Поиск в массиве с помощью оператора цикла foreach
                        
                        ```csharp
                        using System;
                        
                        namespace _097_Поиск_в_Массиве_с_Помощью_foreach
                        { // Поиск в массиве с помощью оператора цикла foreach
                            class Search
                            {
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    int val;
                                    bool found = false;
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                                    val = 5;
                        
                                    // Использовать цикл foreach для поиска заданного значения в массиве nums
                                    foreach (int x in nums)
                                    {
                                        if (x == val)
                                        {
                                            found = true;
                                            break;
                                        }
                                    }
                                    if (found)
                                        Console.WriteLine("Значение найдено");
                                }
                            }
                        }
                        ```
                        
                    - Строки
                        
                        ```csharp
                        using System;
                        
                        namespace _098_Создание_и_Выведение_Символьной_Строки
                        { // Создать и вывести символьную строку
                            class StringDemo
                            {
                                static void Main()
                                {
                                    char[] charray = { 'Э', 'т', 'о', ' ', 'с', 'т', 'р', 'о', 'к', 'а', };
                        
                                    string str1 = new string(charray);
                                    string str2 = "Еще одна строка.";
                        
                                    Console.WriteLine(str1);
                                    Console.WriteLine(str2);
                                }
                            }
                        }
                        ```
                        
                    - Операции со строками
                        
                        ```csharp
                        using System;
                        using System.Globalization;
                        using System.Reflection.Emit;
                        
                        namespace _099_Некоторое_Операции_Над_Строками
                        { // Некоторые операции со строками
                            class StrOps
                            {
                                static void Main()
                                {
                                    string str1 = "Программировать в .NET лучше всего на C#.";
                                    string str2 = "Программировать в .NET лучше всего на C#.";
                                    string str3 = "Строки в C# весьма эффективны.";
                                    string strUp, strLow;
                                    int result, idx;
                        
                                    Console.WriteLine("str1: " + str1);
                                    Console.WriteLine("Длина строки str1: " + str1.Length);
                        
                                    // Создать варианты строки str1, набранные прописными и строчными буквами
                                    strLow = str1.ToLower(CultureInfo.CurrentCulture);
                                    strUp = str1.ToUpper(CultureInfo.CurrentCulture);
                                    Console.WriteLine("Вариант строки str1, " + 
                                        "набранный строчными буквами:\n" + strLow);
                                    Console.WriteLine("Вариант строки str1, " +
                                        "набранный прописными буквами:\n" + strUp);
                                    Console.WriteLine();
                        
                                    // Вывести строку str1 посимвольно
                                    Console.WriteLine("Вывод строки str1 посимвольно.");
                                    for (int i = 0; i < str1.Length; i++)
                                        Console.Write(str1[i]);
                        
                                    Console.WriteLine("\n");
                                    // Сравнить строки способом порядкового сравнения
                                    if (str1 == str2)
                                        Console.WriteLine("str1 == str2");
                                    else 
                                        Console.WriteLine("str1 != str2");
                                    if (str1 == str3)
                                        Console.WriteLine("str1 == str3");
                                    else
                                        Console.WriteLine("str1 != str3");
                        
                                    // Сравнить сроки с учетом культурной среды
                                    result = string.Compare(str3, str1, StringComparison.CurrentCulture);
                                    if (result == 0)
                                        Console.WriteLine("Строки str1 и str3 равны");
                                    else if (result < 0)
                                        Console.WriteLine("Строка str1 меньше строки str3");
                                    else
                                        Console.WriteLine("Строка str1 больше строки str3");
                                    Console.WriteLine();
                        
                                    // Присвоить новую строку переменной str2
                                    str2 = "Один Два Три Один";
                        
                                    // Поиск подстроки
                                    idx = str2.IndexOf("Один", StringComparison.Ordinal);
                                    Console.WriteLine("Индекс первого вхождения подстроки <Один>: " + idx);
                                    idx = str2.LastIndexOf("Один", StringComparison.Ordinal);
                                    Console.WriteLine("Индекс последнего вхождения подстроки <Один>: " + idx);
                                }
                            }
                        }
                        ```
                        
                    - Массивы строк
                        
                        ```csharp
                        using System;
                        
                        namespace _100_Массивы_Строк
                        { // Продемонстрировать массивы строк
                            class StringArrays
                            {
                                static void Main()
                                {
                                    string[] str = { "Это", "очень", "простой", "тест." };
                                    Console.WriteLine("Исходный массив: ");
                                    for (int i = 0; i < str.Length; i++)
                                        Console.Write(str[i] + " ");
                                    Console.WriteLine("\n");
                        
                                    // Изменить строку
                                    str[1] = "тоже";
                                    str[3] = "до предела тест!";
                        
                                    Console.WriteLine("Видоизмененный массив: ");
                                    for (int i = 0; i < str.Length; i++)
                                        Console.Write(str[i] + " ");
                                }
                            }
                        }
                        ```
                        
                    - Выводим число словами
                        
                        ```csharp
                        using System;
                        
                        namespace _101_Отдельные_Цифры_Числа_Словами
                        { // Вывести отдельные цифры целого числа словами
                            class ConvertDigitsToWords
                            {
                                static void Main()
                                {
                                    int num;
                                    int nextdigit;
                                    int numdigits;
                                    int[] n = new int[20];
                                    string[] digits = { "ноль", "один", "два", "три", "четыре", "пять", 
                                        "шесть", "семь", "восемь", "девять"};
                                    num = 1908;
                        
                                    Console.WriteLine("Число: " + num);
                                    Console.Write("Число словами: ");
                                    nextdigit = 0;
                                    numdigits = 0;
                        
                                    // Получить отдельные цифры и сохранить их в массиве n
                                    do
                                    {
                                        nextdigit = num % 10;
                                        n[numdigits] = nextdigit;
                                        numdigits++;
                                        num = num / 10;
                                    }
                                    while (num > 0);
                                    numdigits--;
                        
                                    // Вывести полученные слова
                                    for (; numdigits >= 0; numdigits--)
                                        Console.Write(digits[n[numdigits]] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Метод Substring()
                        
                        ```csharp
                        using System;
                        
                        namespace _102_Метод_Substring
                        { // Применить метод Substring()
                            class Substr
                            {
                                static void Main()
                                {
                                    string orgstr = "В C# упрощается обращение со строками.";
                                    // 
                                    string substr = orgstr.Substring(5, 20);
                        
                                    Console.WriteLine("orgstr: " + orgstr);
                                    Console.WriteLine("substr: " + substr);
                                }
                            }
                        }
                        ```
                        
                    - Применение строк в операторах switch
                        
                        ```csharp
                        using System;
                        
                        namespace _103_Применение_Строк_в_Операторах_Switch
                        { // Продемонстрировать управление оператором switch посредством строк
                            class StringSwitch
                            {
                                static void Main()
                                {
                                    string[] strs = { "один", "два", "три", "два", "один" };
                        
                                    foreach (string s in strs)
                                    {
                                        switch (s)
                                        {
                                            case "один":
                                                Console.Write(1);
                                                break;
                                            case "два":
                                                Console.Write(2);
                                                break;
                                            case "три":
                                                Console.Write(3);
                                                break;
                                        }
                                    }
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Блоки кода пустые
                        
                        ```csharp
                        
                        ```
                        
                - ************Тезисы************
                    
                    if (условие) оператор;
                    
                    for (инициализация; условие; итерация) оператор;
                    
                    count = count + 1; ⇒ count++;
                    count = count - 1; ⇒ count—;
                    
                    - ******************************Оператор switch******************************
                        
                        ```csharp
                        switch (выражение)
                        {
                        	case константа1:
                        		последовательность операторов
                        		break;
                        	case константа2:
                        		последовательность операторов
                        		break;
                        	case константа 3:
                        		последовательность операторов
                        		break;
                        	...
                        	default:
                        		последовательность операторов
                        		break;
                        }
                        ```
                        
                    - ****************Цикл for****************
                        
                        ```csharp
                        for (инициализация; условие; итерация)
                        {
                        	последовательность операторов;
                        }
                        ```
                        
                    - ****************************************Оператор цикла while****************************************
                        
                        `while (условие) оператор;`
                        
                    - **********************************************Оператор цикла do-while**********************************************
                        
                        ```csharp
                        do 
                        {
                        	операторы
                        }
                        while ( условие );
                        ```
                        
                    - ************************************************************Общая форма определения класса************************************************************
                        
                        ```csharp
                        class имя_класса
                        {
                        	// Объявление переменных экземпляра.
                        	доступ тип переменная1;
                        	доступ тип переменная2;
                        	//...
                        	доступ тип переменнаяN;
                        
                        	// Объявление методов.
                        	доступ возвращаемый_тип метод1 (параметры)
                        	{
                        		// тело метода
                        	}
                        	доступ возвращаемый_тип метод2 (параметры)
                        	{
                        		// тело метода
                        	}
                        		// ...
                        	доступ возвращаемый_тип методы (параметры)
                        	{
                        		// тело метода
                        	}
                        }
                        
                        class Building
                        {
                        	public int Floors;    // количество этажей
                        	public int Area;      // общай площадь здания
                        	public int Occupants; // количество жильцов
                        
                        	Building house = new Building(); // создать объект типа Building
                        	
                        	// объект.член
                        	house.Floors = 2;
                        
                        	Building house; // объявить ссылку на объект
                        	house = new Building(); // распределить память для объекта типа Building
                        
                        	// Форма определения метода:
                        	доступ возвращаемый_тип имя (список_параметров)
                        	{	
                        		// тело метода
                        	}
                        }
                        ```
                        
                    - ************************************************************************Общая форма определения конструктора и деструктора************************************************************************
                        
                        ```csharp
                        доступ имя_класса(список_параметров)
                        {
                        	// тело конструктора
                        }
                        
                        ********************************new Оператор********************************
                        new имя_класса(список_аргументов)
                        
                        ~имя_класса()
                        {
                        	// код деструктора
                        }
                        ```
                        
                    - **************Массивы**************
                        
                        ```csharp
                        тип[] имя_массива = new тип[размер]
                        тип[] имя_массива = {val1, val2, val3, ..., valN};
                        [,..., ] имя_массива = new тип[размер1, размер 2, ..., размерN];
                        int[,,] multidim = new int[4, 10, 3];
                        	multidim[2, 4, 1] = 100;
                        
                        тип[,] имя_массива = 
                        {
                        	{val, val, val, ...,val,},
                        	{val, val, val, ...,val,},
                        							...
                        	{val, val, val, ...,val,}
                        };
                        
                        ************************************************************Ступенчатые (Зубчатые) Массивы************************************************************
                        тип[][] имя_массива = new тип[размер][];
                        
                        int[][] jagged = new int[3][];
                        jagged[0] = new int[4];
                        jagged[1] = new int[3];
                        jagged[2] = new int[5];
                        
                        foreach (тип имя_переменной_цикла in коллекция) оператор;
                        ```
                        
                    - ************Строки************
                        
                        ```jsx
                        string Substring(int индекс_начала, int длина)
                        Индекс_начала - начальный индекс исходной строки
                        Длина - длина выбираемой подстроки
                        ```
                        
                - ******************************Ожидания, Мысли******************************
                    
                    **Глава 8**. Подробнее о методах и классах - 60 страниц и 37 программ
                    Ожидаю узнать о методах и классах, что позволит глубже погрузиться в изучение C#.
                    Планирую изучить Главу за неделю (к 12.11.23). Можно и быстрее, но есть другие материалы.
                    
            
            [C#7.0 Карманный справочник](https://www.notion.so/C-7-0-1b6ac268b0b2487994aa178d2a9af44e?pvs=21)
            
            [********************************************************Язык программирования С#7. Троелсен Э., Джепикс Ф. 21.09.23 -******************************************************** ](https://www.notion.so/7-21-09-23-f34c8792204e4eab8b2e8694b5ce13b1?pvs=21)
            
            [**C# для школьников. Мартин Дрейер. Изучение книги 17.09.23 -** ](https://www.notion.so/C-17-09-23-0f95deb271b64e73a310009881690e27?pvs=21)
            
            [**C# программирование. Джеффри Рихтер. Изучение книги 17.09.23 -** ](https://www.notion.so/C-17-09-23-aabc3f6eb55d41c5b6703bca7c51f556?pvs=21)
            
        - ******************Что необходимо для написания программ на языке C#******************
            1. Пакет Microsoft .NET Framework
            http://msdn.microsoft.com/ru-ru/netframework/aa569263.aspx.
            2. Среда разработки для .Net Framework. Среда разработки нужна для того, чтобы сделать процесс работы максимально удобным - Microsoft Visual C#
            http://www.microsoft.com/rus/express/vcsharp.
            3. И наконец, нужно скопировать файлы примеров на диск своего компьютера. Распакуйте архив и сохраните его содержимое в любой папке и запомните, где она расположена - находящиеся в ней файлы вам понадобятся позже
            http://intuit.ru/software/school/cs2kids/examples.zip
    - ******C++******
        - **********Видео**********
            
            [Курс по С++](https://www.youtube.com/watch?v=kRcbYLK3OnQ&list=PLQOaTSbfxUtCrKs0nicOg2npJQYSPGO9r&pp=iAQB) для начинающих
            
        - **********Книги**********
    - ************Python************
        - ********************************Основные моменты********************************
            - ********База********
                - Что самое важное в языке? - **Объекты**
                - Главная идея - **Все сущности - Объекты**
                - Объект - это экземпляр Класса
                - **Класс - это шаблон или прототип для создания Объектов.** 
                На основании одного Класса можно создавать много разных Объектов.
                - **У каждого Объекта есть Атрибуты**
                - **Атрибут Объекта называется Методом, если его значение - ФУНКЦИЯ**.
                - Отличие **Списка** от **Словаря** в том, что в Списке просто перечислены элементы, а в Словаре - пары “Ключ : Значение”.
                И в Словарях и в Списках может быть любое количество элементов
                - **[Стандарты РЕР8](https://peps.python.org/)**
            - **Строки**
                - [Возможности f-строк](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals)
            - **[Материал](https://docs.python.org/3/tutorial/controlflow.html#match-statements) об операторе match, который используется для проверки шаблона**
            - **Встроенные функции**
                
                `print("Hello Python") 
                type(), id (), len(), sum(), input()
                round(), min(), max(), int(), str(), bool()`
                и много-много других
                
                - Функция **dir** и атрибуты объектов
                    
                    С помощью этой функции можно получить названия всех атрибутов того или иного объекта.
                    На примере функция отображаем имена всех атрибутов объекта “Строка” (name).
                    
                    ```csharp
                    name = 'Bogdan'
                    print(dir(name))
                    	РЕЗУЛЬТАТ:
                    ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', 
                    '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', 
                    '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', 
                    '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', 
                    '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 
                    'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 
                    'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 
                    'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 
                    'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 
                    'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 
                    'upper', 'zfill']
                    
                    **************Как вызывать данные методы? Очень просто - используем ТОЧКУ:
                    name = 'Bogdan'
                    print(name.upper())**************
                    ```
                    
            - **Все доступные встроенные функции и их [описание](https://docs.python.org/3/library/functions.html)**
            - **Свои функции**
                - С помощью ключевого слова **def** мы можем создавать свои собственные функции
                У каждой функции есть Имя и Тело (набор строк, который выполняется при каждом вызове функции
                Также есть Параметры, которые находятся в круглых скобках.
                Возврат результата (ключевое слово - **return**).
            - **********************************************Инструкции (Statements)**********************************************
                
                Инструкция выполняет **Действие** 
                
                ```python
                my_name = 'Bogdan' # Присвоение значения
                # Условная инструкция
                if my_name:
                		print(my_name)
                # Импортирование модуля
                import datetime
                ```
                
        - **[Курс от Академии Яндекса](https://education.yandex.ru/handbook/python)**
            - **Введение**
                
                Хендбук поможет овладеть основным синтаксисом и принципами языка.
                Для этого не потребуется специальной подготовки - достаточно знаний по информатике, логике и математике на уровне школьной программы. Кроме основных конструкций в учебнике рассмотрены разные подходы к программированию.
                В последней главе вы прикоснетесь к главной суперсиле языка - большому количеству прикладных библиотек.
                
                Python - интерпретируемый язык, поэтому для запуска программы требуется программа - **интерпретатор**.
                
            - ********************Блоки кода********************
                - **Задачи**
                    - 001_Привет, Яндекс!
                        
                        **Задача**: 
                        Когда мы приходим на встречу, то первым делом здороваемся. Давайте тоже поприветствуем Яндекс.
                        **Формат вывода:** Одна строка: “Привет, Яндекс!”
                        
                        ```csharp
                        print("Привет, Яндекс!")
                        ```
                        
                    - 002_Привет, всем!
                        
                        **Формат ввода:** Одна строка - имя пользователя программы
                        **Формат вывода:** В первой строке написан вопрос “Как Вас зовут?”.
                        Во второй строке - приветствие пользователя: “Привет %username%”.
                        
                        ```csharp
                        username = input("Как тебя зовут?\n")
                        print("Привет, " + username + ".")
                        ```
                        
                    - 003_Излишняя автоматизация
                        
                        **Ввод:** Одна строка - весьма полезная информация
                        
                        **Вывод:** Трижды повторенная весьма полезная информация
                        
                        ```csharp
                        txt = "2 x 2 = 4\n"
                        print(txt * 3)
                        
                        txt = input("Введи ценную информацию: ")
                        print((txt + "\n") * 3)
                        ```
                        
                    - 004_Сдача
                        
                        **Задача**: 
                        Чаще всего автоматизация идет на пользу.
                        Одна из задач, в которой лучше исключить человеческий фактор - подсчет сдачи.
                        Определите, какую сдачу нужно выдать тому, кто купил 2,5кг черешни по цене 38 руб/кг. 
                        
                        **Формат ввода:** Одно натуральное число - номинал купюры пользователя (≥ 100)
                        **Формат вывода:** Одно натуральное число - размер сдачи
                        
                        ```csharp
                        money = int(input())
                        amount = int(2.5 * 38)
                        print(money - amount)
                        ```
                        
                    - 005_Магазин
                        
                        **Задача**: 
                        Кроме черешни в магазине продается множество других товаров, которые продаются на развес.
                        Давайте автоматизируем расчет сдачи и для них!
                        
                        **Формат ввода:** 
                        Три натуральных числа:
                         - цена товара
                         - вес товара
                         - количество денег у пользователя
                        **Формат вывода:** Одно целое число - сдача, которую требуется отдать пользователю
                        
                        ```csharp
                        Мое решение:
                        price = int(input("Введите цену товара: "))
                        weight = int(input("Введите вес товара: "))
                        money = int(input("Количество денег у пользователя: "))
                        amount = money - price * weight
                        print(amount)
                        ```
                        
                        ```csharp
                        price = int(input())
                        weight = int(input())
                        money = int(input())
                        print(money - price * weight)
                        ```
                        
                    - 006_Чек
                        
                        **Задача**: 
                        Сдачу посчитать, конечно, все могут, но красивый чек напечатать - не так просто.
                        
                        **Формат ввода:** 
                         - Название товара
                         - Цена товара
                         - Вес товара
                         - Количество денег у пользователя
                        **Формат вывода:** 
                        Чек
                        <название товара> - <вес>кг - <цена>руб/кг 
                        Итого:<итоговая стоимость>руб
                        Внесено:<количество денег от пользователя>руб
                        Сдача:<сдача>руб
                        
                        ```csharp
                        Мое решение:
                        good = input("Название товара: ")
                        height = int(input("вес: "))
                        price = int(input("цена: "))
                        money = int(input("Внесено: "))
                        amount = height * price
                        money_back = money - amount
                        
                        print("Чек")
                        print(f"{good} - {height}кг - {price}руб/кг")
                        print(f"Итого: {amount}руб")
                        print(f"Внесено: {money}руб")
                        print(f"Сдача: {money_back}руб")
                        ```
                        
                        ```csharp
                        name = input()
                        price = int(input())
                        weight = int(input())
                        money = int(input())
                        print("Чек")
                        print(name, "-", str(weight) + "кг -", str(price) + "руб/кг")
                        print("Итого:", str(weight * price) + "руб")
                        print("Внесено:", str(money) + "руб")
                        print("Сдача:", str(money - weight * price) + "руб")
                        ```
                        
                    - 007_Делу - время, потехе - час
                        
                        **Задача**: 
                        Давайте передохнем от автоматизации и сделаем что-то действительно интересное
                        
                        **Формат ввода:** Одно натуральное число N
                        **Формат вывода:** N строк с фразой: “Купи слона!”
                        
                        ```csharp
                        N = int(input())
                        print("Купи слона!\n" * N)
                        ```
                        
                    - 008_Наказание
                        
                        **Задача**: 
                        Наше развлечение не осталось незамеченным… И наказание нам выбрали соответствующее.
                        
                        **Формат ввода:** 
                        В первой строке записано одно натуральное число N
                        Во второй строке записана часть наказания.
                        **Формат вывода:** 
                        N строк вида: Я больше никогда не буду писать “<часть наказания>”!
                        
                        ```csharp
                        N = int(input())
                        string = input()
                        print(("Я больше никогда не буду писать \"" + string + "\"" + "!""\n") * N)
                        ```
                        
                    - 009_Деловая колбаса
                        
                        **Задача**: 
                        Настало время для действительно серьезных задач…
                        В детском саду 2 ребенка съедают 2 куска колбасы за 2 минуты.
                        Сколько кусков колбасы за N минут съедят M детей?
                        
                        **Формат ввода:**
                        В первой строке записано натуральное число N≥ 1
                        Во второй строке записано натуральное число M ≥ 1
                        **Формат вывода:** 
                        Одно натуральное число - количество кусков колбасы, съеденных детьми.
                        **********************Примечание:**********************
                        Гарантируется, что в результате вычислений будет получено натуральное число.
                        
                        ```csharp
                        N = int(input())  # minutes
                        M = int(input())  # children
                        pieces_of_sausage = int(M * N / 2)
                        print(pieces_of_sausage)
                        ```
                        
                    - 010_Детский сад - штаны на лямках
                        
                        **Задача**: 
                        В продолжение темы детского сада давайте и там что-нибудь автоматизируем.
                        За каждым ребенком закреплен шкафчик и кровать. Номер шкафчика состоит из трех цифр:
                         - номер группы в саду
                         - номер кроватки закрепленной за ребенком
                         - порядковый номер ребенка в списке группы.
                        Воспитатель просит сделать программу, которая по имени ребенка и номеру его шкафчика формирует “красивую” карточку для личного дела.
                        **Формат ввода:** 
                        В первой строке записано имя ребенка
                        Во второй строке записан номер шкафчика
                        **Формат вывода:** 
                        Карточка в виде::
                        Группа №<номер группы>.
                        <номер ребенка в списке>. <имя ребенка>.
                        Шкафчик: <номер шкафчика>.
                        Кроватка: <номер кроватки>.
                        
                        ```csharp
                        name = input()
                        number = int(input())
                        group = number // 100
                        list = number % 10
                        bed = number // 10 - number // 100 * 10
                        
                        print("Группа №" + str(group))
                        print(str(list) + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + str(bed) + ".")
                        
                        name = input()
                        number = int(input())
                        group = str(number // 100)
                        list = str(number % 10)
                        bed = str(number // 10 - number // 100 * 10)
                        
                        print("Группа №" + group)
                        print(list + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + bed + ".")
                        
                        name = input()
                        number = int(input())
                        print("Группа №" + str(number // 100)
                        print(str(number % 10) + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + str(number // 10 - number // 100 * 10) + ".")
                        
                        name = input()
                        number = int(input())
                        print(f"Группа №{number // 100}.")
                        print(f"{number % 10}. {name}".)
                        print(f"Шкафчик: {number}.")
                        print(f"Кроватка: {number // 10 - number // 100 * 10}.")
                        ```
                        
                    - 011_Автоматизация игры
                        
                        **Задача**: 
                        Все в том же детском саду ребята очень любят играть с цифрами.
                        Одна из таких игр - перестановка цифр четырехзначного числа.
                        Напишите программу для робота-няни, которая из числа **********abcd**********  составляет число **********badc.**********
                        **Формат ввода:** 
                        Одно четырехзначное число
                        **Формат вывода:** 
                        Одно четырехзначное число - результат перестановки
                        
                        ```csharp
                        abcd = int(input())
                        a = str(abcd // 1000)
                        b = str(abcd // 100 - abcd // 1000 * 10)
                        c = str(abcd // 10 - abcd // 100 * 10)
                        d = str(abcd % 10)
                        print(b + a + d + c)
                        
                        abcd = input()
                        print(abcd[1] + abcd[0] + abcd[3] + abcd[2])
                        ```
                        
                    - 012_Интересное сложение
                        
                        **Задача**: 
                        Один малыш из детского сада услышал от старшей сестры о некоем действии с числами - сложении.
                        И как это часто бывает - он не до конца разобрался, как работает сложение. Например, не совсем понял, как произвести перенос разряда.
                        Теперь он хочет научить сложению остальных ребят и просит написать программу, которая поможет ему в качестве наглядного материала.
                        **Формат ввода:** 
                        В первой и второй строках записаны натуральные числа меньше 1000
                        **Формат вывода:** 
                        Одно число - результат сложения введенных чисел без учета переносов.
                        
                        ```csharp
                        num1 = int(input())
                        num2 = int(input())
                        
                        digit1_num1 = num1 % 10
                        digit1_num2 = num2 % 10
                        sum1 = (digit1_num1 + digit1_num2) % 10
                        
                        digit2_num1 = num1 // 10 - num1 // 100 * 10
                        digit2_num2 = num2 // 10 - num2 // 100 * 10
                        sum2 = (digit2_num1 + digit2_num2) % 10
                        
                        digit3_num1 = num1 // 100
                        digit3_num2 = num2 // 100
                        sum3 = (digit3_num1 + digit3_num2) % 10
                        
                        print(str(sum3) + str(sum2) + str(sum1))
                        ```
                        
                    - 013_Дед Мороз и конфеты
                        
                        **Задача**: 
                        Настало самое главное событие в детском саду - новогодний утренник.
                        Хорошо замаскированная робоняня в роли Деда Мороза решила раздать детям конфеты так, чтобы каждому досталось поровну.
                        Напишите для робоняни алгоритм, который поможет распределить конфеты.
                        **Формат ввода:** 
                        В первой строке указано количество детей на утреннике.
                        Во второй строке - количество конфет в конфетном отсеке робоняни.
                        **Формат вывода:** 
                        Сначала выведите количество конфет, которое выдано каждому ребенку, а затем количество конфет, что осталось в конфетном отсеке.
                        
                        ```csharp
                        red = int(input())
                        green = int(input())
                        blue = int(input())
                        
                        count = red + blue + 1
                        print(count)
                        ```
                        
                    - 014_Шарики и ручки
                        
                        **Задача**: 
                        Иногда ребята в детском саду скучают, поэтому они постоянно придумывают себе не очень сложные, но веселые по их мнению, игры.
                        В группе есть ящик с шариками, количество которых детям заранее неизвестно, следующих цветов:
                         - красный
                         - зеленый
                         - синий
                        Игра заключается в том, что каждый ребенок подходит к ящику и, не глядя, вытаскивает один шарим, победителем считается тот, кто первым вытащит зеленый шарик.
                        Как вы думаете, через какое максимальное количество ходов дети выяснять победителя игры?
                        **Формат ввода:** 
                        Три натуральных числа, каждое на новой строке (количество красных, зеленых и синих шаров соответственно).
                        **Формат вывода:** 
                        Одно число - максимальное количество ходов, которое потребуется для определения победителя.
                        
                        ```csharp
                        red = int(input())
                        green = int(input())
                        blue = int(input())
                        
                        count = red + blue + 1
                        print(count)
                        ```
                        
                    - 015_В ожидании доставки
                        
                        **Задача**: 
                        Сегодня в N часов M минут хозяин магазина заказал доставку нового товара. Оператор сказал, что продукты доставят через T минут. 
                        Сколько будет времени на электронных часах, когда привезут долгожданные продукты?
                        **Формат ввода:** 
                        В первой строке записано натуральное число N (0 ≤ N < 24).
                        Во второй строке записано натуральное число M (0 ≤ M < 60).
                        В третьей строке записано натуральное число T (30 ≤ T < 10^9).
                        **Формат вывода:** 
                        Одна строка, представляющая циферблат электронных часов.
                        
                        ```csharp
                        n = int(input())  # hours
                        m = int(input())  # minutes
                        t = int(input())  # delivery
                        
                        time_hours_digit2 = ((n + (t + m) // 60) % 24) // 10
                        time_hours_digit1 = ((n + (t + m) // 60) % 24) % 10
                        time_minutes_digit2 = ((m + t) % 60) // 10
                        time_minutes_digit1 = ((m + t) % 60) % 10
                        
                        print(str(time_hours_digit2) + str(time_hours_digit1) + 
                              ":" + str(time_minutes_digit2) + str(time_minutes_digit1))
                        ```
                        
                    - 016_Доставка
                        
                        **Задача**: 
                        Продуктовый склад и магазин находятся на одной дороге города Н.
                        Склад находится на отметке А км, а магазин - В км. 
                        Средняя скорость автомобиля, доставляющего товары, С км/ч.
                        За какое время продукты попадают со склада в магазин?
                        **Формат ввода:** 
                        Три натуральных числа А, В и С, каждое на отдельной строке.
                        **Формат вывода:** 
                        Одно рациональное число с точностью до сотых.
                        
                        ```csharp
                        a = int(input())  # store
                        b = int(input())  # shop
                        c = int(input())  # speed
                        
                        t = float((b - a) / c)
                        print(round(t, 2))
                        ```
                        
                    - 017_Ошибка кассового аппарата
                        
                        **Задача**: 
                        Мы уже помогали магазину с расчетами и формированием чеков, но сегодня кассовый аппарат вместо привычных продавцу десятичных чисел начал выдавать двоичные.
                        Техподдержка приедет только завтра, а магазин должен продолжать работать. Надо помочь.
                        **Формат ввода:** 
                        В первой строке записано десятичное число - общая сумма купленных в магазине товаров на данный момент.
                        Во второй строке указано двоичное число - сумма за последнюю покупку.
                        **Формат вывода:** 
                        Одно десятичное число - сумма прибыли за день с учетом последней покупки.
                        
                        ```csharp
                        amount_dec = int(input())
                        sum_last = str(input())
                        sum_last_bin = str("0b" + sum_last)
                        
                        sum_last_int = int(sum_last_bin, 2)
                        amount_day = sum_last_int + amount_dec
                        print(amount_day)
                        ```
                        
                    - 018_Сдача 10
                        
                        **Задача**: 
                        Кстати, несмотря на ошибку аппарата, сдачу тоже нужно отдавать
                        **Формат ввода:** 
                        Цена покупки - двоичное число, выданное кассовым аппаратом.
                        Номинал купюры пользователя - десятичное число
                        **Формат вывода:** 
                        Одно десятичное число - сдача, которую потребуется отдать пользователю
                        **Примечание**: 
                        Все числа, используемые в задаче - целые
                        
                        ```csharp
                        price = input()
                        money = int(input())
                        
                        price_bin = str("0b" + price)
                        price_dec = int(price_bin, 2)
                        money_back = money - price_dec
                        
                        print(money_back)
                        ```
                        
                    - 019_Украшение чека
                        
                        **Задача**: 
                        Давайте приведем в порядок чек, который печатали ранее.
                        Все строки должны быть длиной в 35 символов
                        **Формат ввода:** 
                         - Название товара
                         - Цена товара
                         - Вес товара
                         - Количество денег у пользователя
                        **Формат вывода:** 
                        Красивый чек в формате:
                        ================Чек=================
                        Товар:                                                           <продукт>
                        Цена:                               <число>кг * <число>руб/кг
                        Итого:                                                        <число>руб
                        Внесено:                                                    <число>руб
                        Сдача:                                                        <число>руб
                        ===================================
                        **Примечание**: 
                        В данный момент примеры ниже визуализируются неправильно
                        
                        ```csharp
                        name = input()
                        price_name = int(input())
                        weight = int(input())
                        money = int(input())
                        
                        count = price_name * weight
                        money_back = money - count
                        
                        print(str("=" * 16 + "Чек" + "=" * 16))
                        print(f"Товар:{name:>29}")
                        s = str(weight) + "кг" + " * " + str(price_name)+ "руб/кг"
                        print("Цена:" + " " * (35 - 5 - len(s)) + s)
                        print(f"Итого:{count:>26}руб")
                        print(f"Внесено:{money:>24}руб")
                        print(f"Сдача:{money_back:26}руб")
                        print(str("=" * 35))
                        ```
                        
                    - 020_Мухи отдельно, котлеты отдельно
                        
                        **Задача**: 
                        Вернемся в магазин, хозяин которого уже привык полагаться на всемогущую автоматизацию.
                        Помогите ему разобраться с одной проблемой. Далее его история:
                        ”Пару дней назад я купил две партии котлет и по случайности высыпал их на один прилавок. Общий вес котлет составил N килограмм, а ценник - M рублей за килограмм.
                        Сегодня я обнаружил, что накладные на эти виды котлет потерялись, но я помню, что первый вид котлет стоил K1 рублей за килограмм, а второй - K2.
                        Помогите мне вспомнить вес каждой партии котлет, чтобы поставить их на учет.
                        **Формат ввода:** 
                        В первой строке записано натуральное число N
                        Во второй строке - натуральное число M
                        В третьей строке - натуральное число K1
                        В четвертой строке - натуральное число K2
                        Причем доподлинно известно, что второй вид котлет стоит меньше, чем первый.
                        **Формат вывода:** 
                        Два натуральных числа, записанных через пробел - вес обеих партий котлет.
                        
                        ```csharp
                        n = int(input())
                        m = int(input())
                        k1 = int(input())
                        k2 = int(input())
                        x = n * (k2 - m)  // (k2 - k1)
                        print(x, n - x)
                        ```
                        
                - 001_Первая программа “Привет, Мир!” - от 15.11.2023
                    
                    ```csharp
                    print("Hi, Dudes and Mazafackaz!")
                    ```
                    
                - 002_Операции со строками
                    
                    ```csharp
                    name = "User"
                    print(f"Good day, {name}!") 
                    print("Гляди, йопт!:")
                    print(f"{123:0>9}")
                    print(f"{123:0<9}")
                    print(f"{123:0^9}")
                    
                    phrase = input("Ну-ка скажи че-нить?")
                    print(f"{phrase}  Это ты написал, не я!")
                    
                    print(ord("t"), ord("w"))  ==>  116 119  получение кодов символов
                    print(chr(116), chr(119))  ==>  t w      и наоборот
                    ```
                    
                - 
                
                ```python
                
                ```
                
            - **2.1 Ввод и вывод данных. Операции с числами, строками. Форматирование**
                
                В данном курсе мы будем писать программы без графического пользовательского интерфейса, т.е. без кнопок, текстовых полей ввода и тд.
                Программы будут принимать на вход данные от пользователя с клавиатуры (а чуть позже мы научимся работать с файловым вводом выводом), а выводить результат будут на экран.
                Все взаимодействие с программой будет происходить в командной строке или консоли.
                
                Внутри f-строк можно обращаться к переменным, используя фигурные скобки, а также производить операции, выполнять функции и подставлять их результаты в данную строку. И это только малая часть возможностей f-строк.
                Использование f-строк является приоритетным способом форматирования. Наряду с f-строками существует функция format(), которая также предназначена для удобного форматирования (мы рассмотрим ее чуть позже). Также форматирование строк может производиться с помощью символа %. 
                В строках можно применять управляющие символы, начинающиеся с символа бэкслэш \:
                
                - \n - переход на новую строку
                - \t - табуляция
                - \r - возврат каретки в начало строки
                - \b - возврат каретки на один символ
                
                Кроме того, с помощью бэкслэша можно экранировать символы, то есть делать их частью выводимой строки. Например, для вывода символа \ необходимо его экранировать самим собой: `print("\\")`
                
                В функции`print()` кроме параметра sep существует еще параметр `end`, который определяет символ в конце строки.
                Значение по умолчанию для него - переход на новую строку (`\n`). Если вывести строки с помощью нескольких использований функции `print(),` то вывод каждой из них будет осуществлен с новой строки: 
                
                ```csharp
                print("Привет, Пользователь!")
                print("Как дела?")
                
                Привет, Пользователь!
                Как дела?
                ```
                
                Над строками можно производить следующие операции: 
                
                - Сложение (конкатенация строк)
                - Умножение строки на целое число
                
                Результатом сложения строк будет новая строка, представляющая собой записанные последовательно складываемые строки (строки как бы склеиваются друг с другом, образуя новую строку)
                
                При умножении строки на целое число п получается новая строка, состоящая из п дублированной исходной строки.
                Например, выведем 10 символов - подряд: `print("-" * 10)`
                **Работа с числами**
                
                Для создания целочисленной переменной в программе достаточно назначить ей имя и присвоить целочисленное значение: `п = 10`
                По аналогии создаются вещественные числовые переменные, только в качестве разделителя целой и дробной частей используется десятичный разделитель “точка”: `pi = 3.14`
                Для преобразования строк в числа и наоборот используются следующие функции:
                
                - int() - преобразует строку (или вещественное число) в целое число. Дополнительно можно указать, в какой системе счисления было записано исходное число. По умолчанию используется десятичная система. При конвертации вещественного числа в целое отбрасывается дробная часть.
                - float() - преобразует строку (или целое число) в вещественное число
                - str() - преобразует значения (в общем случае не только числовые) в строки
                
                Рассмотрим несколько примеров применения этих функций
                
                ```csharp
                n_1 = "1"
                n_2 = "2"
                print(n_1 + n_2)
                n_1 = int(n_1)
                n_2 = int(n_2)
                Print(n_1 + n_2)
                В результате выполнения программы получим:
                12
                3
                ```
                
                Первый результат - результат сложения (конкатенации) двух строк. 
                Второй - результат сложения целых чисел, которые были преобразованы из строк функцией `int().`
                
                ```csharp
                x = 3.89
                x = int(x)
                print(x)
                ```
                
                Здесь программа выведет в консоли результат 3.
                Дробная часть после десятичного разделителя была отброшена при преобразовании в целое число.
                
                ```csharp
                width = "3.7"
                height = "2.5"
                s = float(width) * float(height)
                print(s)
                ```
                
                Программа выведет 9.25
                А чтобы вводить целые или вещественные числа с клавиатуры, можно использовать уже знакомую нам функцию input() в сочетании с функциями int() и float():
                
                ```csharp
                int_number = int(input())
                float_number = float(input())
                ```
                
                Для работы с числовыми переменными доступны следующие математические операции:
                
                - Сложение - x + y;
                - Вычитание - x - y;
                - Умножение - x * y;
                - Деление - x / y;
                - Возведение в степень x ** y
                
                Используем все эти операции в следующей программе:
                
                ```csharp
                n = 25
                x = 0.5
                print(n + x)
                print(n - x)
                print(n * x)
                print(n / x)
                print(n ** x)
                Вывод программы будет таким:
                25.5
                24.5
                12.5
                50.0
                5.0
                ```
                
                Необходимо учитывать, что если выполняется операция деления или хотя бы один из операндов является вещественным числом, то результат также будет вещественным.
                Например, выполнение следующего кода выведет на экран 2.0: `print(4 / 2)`
                Для округления вещественных чисел при выводе можно использовать уже известные нам f-строки. 
                Например, выведем квадратный корень из 2 с точностью 2 знака после запятой: `print(f"{2 ** 0/5:.2f}")`
                Для целых чисел дополнительно доступны операции:
                
                - целочисленное деление - x // y;
                - остаток от деления - x % y.
                
                Эти операции можно использовать, например, для получения определенных цифр числа. 
                Получим последнюю цифру числа 1234 (т.е. остаток от деления на 10):
                `last_digit = 1234 % 10`
                Для получения предпоследней цифры нужно “отрезать” последнюю цифру целочисленным делением на 10, а затем у нового числа найти последнюю цифру - уже известным способом:
                `penultimate_digit = 1234 // 10 % 10`
                
            - **2.2 Условный оператор**
                
                ```python
                yesterday_temp = int(input())
                today_temp = int(input())
                if today_temp > yesterday_temp:
                    print("Today is warmer than yesterday")
                elif today_temp < yesterday_temp:
                    print("Today is colder than yesterday")
                else:
                    print("Today such temperature as yesterday")
                
                В качестве условия может выступать результат операции сравнения:
                 - > - больше
                 - >= - больше или равно
                 - < - меньше
                 - <= - меньше или равно
                 - == - равно
                 - != - не равно
                
                 - and - логическое И для двух суловий. Возвращает True, если оба условия истинны, иначе False
                 - or - логическое ИЛИ для двух условий. Возвращает False, если оба условия ложны, иначе True
                 - not - логическое НЕ для одного условия. Возвращает False для истинного условия, и наоборот.
                ```
                
                ```python
                print("Enter first and last letters of english alphabet")
                first_letter = input()
                last_letter = input()
                if (first_letter == "a" or first_letter == "A") and (
                    last_letter == "z" or last_letter == "Z"):
                    print("That's right, homie!")
                else:
                    print("Wrong, babe")
                ```
                
                ```python
                В логическом операторе можно использовать двойное неравенство:
                if x >= 0 and x < 100 ==> if 0 <= x < 100: ...
                
                text = input()
                if "добр" in text:
                    print("Встретилось 'доброе' слово.")
                else:
                    print("Добрых слов не найдено")
                
                color = input()
                match color:
                    case 'red' | 'yellow':
                        print('Stop!')
                    case 'green':
                        print('You can go!')
                    case _:
                        print('Incorrect input')
                ```
                
                В версии 3.10 языка появился оператор match. В простейшем случае он последовательно сравнивает значение выражения с заранее заданными в операторах case. А затем выполняет код в операторе case, значение в котором соответствует проверяемому. Выше описана программа, которая сравнивает значение текущего сигнала светофора с одним из трех вариантов.
                Обратите внимание, что для проверки выполнения условия ИЛИ в операторе case не используется логическая операция or. Ее нельзя использовать, поскольку она применяется для переменных логического типа, а в примере перечисляются значения-строки. Вместо нее мы используем специальных оператор |.
                Последний оператор case выполняется всегда и сработает в случае, если ни одно из предыдущих условий не сработало. Оператор match похож на оператор switch других языков программирования -  C++, JavaScript и т.д.
                     Рассмотрим некоторые полезные встроенные функции.
                 - Для определения длины строки (а также других коллекций) используется функция len().
                 - Для определения максимального и минимального из нескольких значений (не только числовых) используются функции max() и min() соответственно.
                 - Функция abs() используется для определения модуля числа.
                
                Рассмотрим применение встроенных функций в следующем примере. Обратите внимание на строки, начинающиеся со знака #. Так в Python обозначаются комментарии - линии, которые не выполняются интерпретатором, а служат для пояснения кода. 
                
                ```python
                m = 12
                n = 19
                k = 25
                
                print(max(m, n, k))  # max number
                
                line_1 = "m"
                line_2 = "n"
                line_3 = "k"
                
                print (min(line_1, line_2, line_3))  # min string
                print(len(str(2 ** 2023)))  # amount of digits in number 2 in 2023 degree
                ```
                
                ```python
                
                ```
                
            - **2.3 Циклы**
                
                ```python
                saved_pwd = "right_password"
                pwd = input("Enter the password: ")
                while pwd != saved_pwd:
                    pwd = input("Enter the password: ")
                print("Password right! Access allowed!")
                ```
                
                Обратите внимание, что внутри тела цикла в примере ниже использована пустая инструкция pass.
                Она ничего не делает в программе и нужна для соответствия кода синтаксису языка, т.к. тело цикла не может быть пустым (иначе будет синтаксическая ошибка и программа не будет работать. 
                
                ```python
                saved_pwd = "right_password"
                while input("Enter the password: ") != saved_pwd:
                    pass
                print("Password is right! Access allowed!")
                ```
                
                В версии 3.8 появился **моржовый оператор** (walrus operator). Он записывается как := и позволяет одновременно вычислить выражение, присвоить результат переменной и вернуть это значение, например, в условие.
                Давайте напишем программу, которая будет здороваться со всеми людьми, чьи имена введет пользователь. Сигнал для остановки - ввод строки “СТОП”:
                
                ```python
                name = input("Enter your name: ")
                while name != "STOP":
                    print(f"Hello, {name}!")
                    name = input("Enter your name: ")
                print("Program is over!")
                А теперь перепишем эту программу с использованием моржового оператора:
                while (name := input("Enter your name: ")) != "STOP":
                    print(f"Hello, {name}!")
                print("Program is over!")
                ```
                
                Благодаря моржовому оператору из программы были убраны строки, в которых считывалось имя первый раз до цикла, а также в теле цикла. 
                Теперь имя считывается только непосредственно на этапе проверки, выполняется ли условие продолжения цикла.
                     Итак, цикл while обычно применяется в тех случаях, когда заранее не известно, сколько итераций будет выполнено, но известно условие, при котором цикл продолжает работу.
                Если количество итераций заранее известно, то предпочтительнее использовать цикл for. Он применяется совместно с итерируемой переменной. Очень часто ей дают имя i и используют в теле цикла, а ее значение изменяется на каждой итерации в соответствии с диапазоном, заданным функцией range().
                Функция range() может принимать от одного до трех целочисленных аргументов:
                 - range(n) -  возвращает диапазон целых чисел от 0 до n - 1. Например, range(4) вернет диапазон целых чисел: 0, 1, 2, 3
                 - range(k, n) - возвращает диапазон целых чисел от k до n - 1. Например, range(1, 5) вернет диапазон целых чисел : 1, 2, 3, 4
                 - range(k, n, s) - возвращает диапазон целых чисел от k до n - 1 с шагом s. Например, range(1, 10, 2) вернет диапазон целых чисел: 1, 3, 5, 7, 9 
                Выведем на экран n целых чисел, начиная с 0 (n вводится пользователем):
                
                ```python
                n = int(input("Enter amount of numbers: "))
                for i in range(n):
                    print(i)
                Выведем на экран целые числа в диапазоне от k до n - 1 (k, n вводятся пользователем):
                k = int(input("Enter the begining of scope: "))
                n = int(input("Enter the end (without exception) of scope: "))
                for i in range(k, n):
                    print(i)
                Выведем на экран все целые четные числа в диапазоне от 0 до n (n вводится пользователем):
                n = int(input("Enter the end of scope: "))
                for i in range(0, n + 1, 2):
                    print(i)
                Используя в функции range() отрицательный шаг, можно запустить цикл в обратном порядке:
                n = int(input("Enter the amount of numbers: "))
                for i in range(n, -1, -1):
                    print(i)
                ```
                
                Обратите внимание: изменение значения итерируемой переменной внутри тела цикла не имеет смысла, т.к. будет перезаписано на следующей итерации очередным значением из диапазона функции range(). Например, следующий код по-прежнему выведет числа от 0 до n - 1, несмотря на изменение значения итерируемой переменной в теле цикла:
                
                ```python
                n = int(input("Enter n: "))
                for i in range(n):
                    print(i)
                    i = 100
                ```
                
            - **2.4 Вложенные циклы**
                
                Давайте рассмотрим следующую задачу: требуется сгенерировать все возможные комбинации строчных букв английского алфавита длиной четыре символа. Вот как можно решить эту задачу:
                
                ```python
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                print(f"{chr(ord('a') + i)}{chr(ord('a') + j)}{chr(ord('a') + 
                                k)}{chr(ord('a') + l)}")
                ```
                
                Задача решена полным перебором букв алфавита. В начале программы запускается внешний цикл, который отвечает за генерацию первой буквы. Внешний цикл фиксирует очередное значение итерируемой переменной - это будет смещение в алфавите относительно начальной буквы.
                     Далее запускается внутренний цикл, отвечающий за генерацию второй буквы.
                Процесс повторяется, пока все свои итерации не совершит внешний цикл. Внутри функции print() использованы известные нам функции chr() и ord(). Функция ord() использована для возврата кода начальной буквы алфавита (а), к нему прибавляется текущее смещение, задаваемое итерируемыми переменными i и j. А далее для полученных кодов функция chr() возвращает буквы.
                     Циклы могут иметь любую степень вложенности. Однако не стоит этим злоупотреблять, т.к. работа программы существенно замедляется и О-большое растет.
                
                Циклы for и while можно останавливать при наступлении определенного условия. Для этого используется оператор break. Рассмотрим следующий пример:
                
                ```python
                password = "right_password"
                while True:
                    if input("Enter the password: ") == password:
                        print("Access is allowed!")
                        break
                ```
                
                В примере мы запускаем бесконечный цикл, в котором просим пользователя ввести пароль и сравниваем результат с верным паролем. В случае если введенный пароль совпал с верным, то выводим фразу “Пароль принимается” и останавливаем цикл.
                     Так как операторов break в цикле может быть много, анализировать такие программы становится тяжело из-за того, что сложно сказать, где будет точка выхода из цикла для разных входных данных. Поэтому использованием данного оператора лучше не злоупотреблять.
                     При использовании оператора break во вложенных циклах он останавливает только тот цикл, в котором непосредственно вызывается. Дополним первый пример с генерацией строк условием: сгенерировать последовательно строки по алфавиту до строки auff: 
                
                ```python
                flag = False
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                text = f"{chr(ord('a') + i)}{chr(ord('a') + j)}{chr(ord('a') +
                                k)}{chr(ord('a') + l)}"
                                if text == "auff":
                                    print(text)
                                    flag = True
                                    break
                                print(text)
                            if flag:
                                break
                        if flag:
                            break
                    if flag:
                        break
                ```
                
                Обычно флаг устанавливают в начальное значение False (флаг опущен), а при выполнении какого-то условия в программе флаг устанавливают в значение True (флаг поднят). При генерации комбинации “auff” происходит вывод этой комбинации, “поднятие” флага и остановка внутреннего цикла. После завершения внутреннего цикла происходит проверка состояния флага, и если флаг поднят, то останавливается и внешний цикл.
                В циклах for и while можно останавливать текущую итерацию и переходить к следующей с помощью оператора continue. При использовании вложенных циклов оператор continue действует только на тот цикл, в котором непосредственно находится.
                Перепишем программу из первого примера так, чтобы не выводить комбинации с одинаковыми буквами (aaaa, bbbb и т.д.)
                
                ```python
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                if i == j == k == l:
                                    continue
                                print(f"{chr(ord('a')+ i)}{chr(ord('a') + j)}{chr(ord('a') + 
                                k)}{chr(ord('a') + l)}")
                Как уже было сказано, не стоит злоупотребять операторами breаk и continue. На самом деле последнюю программу можно
                написать проще, без использования оператора continue:
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                if i != j != k != l:
                                    print(f"{chr(ord('a') + i)}{chr(ord('a') + 
                                    j)}{chr(ord('a') + k)}{chr(ord('a') + l)}")
                В циклах while и for можно использовать оператор else. Записанный в нем код будет выполняться, когда для
                цикла while нарушится условие продолжения, а для цикла for закончатся итерации. Напишем программу, которая
                будет считывать строки, пока пользователь не введет "СТОП":
                
                while input("Enter string (STOP to discontinue): ") != "STOP":
                    pass
                else:
                    print("Cycle is over!")
                После завершения цикла сработает оператор else, и код внутри него выведет строку "Цикл завершен".
                ```
                
                Оператор break влияет на поведение оператора else в циклах. Если в цикле сработал оператор break, то цикл сразу завершается, а код в операторе else выполняться не будет. Перепишем предыдущий пример, добавив проверку: если введенное значение равно “ignore_else”, то остановим цикл с помощью break:
                
                ```python
                while (text := input("Enter string (STOP to discontinue): ")) != "STOP":
                    if text == "ignore_else":
                        break
                else:
                    print("Cycle is over!")
                ```
                
                Когда пользователь введет “СТОП”, цикл попадет в блок else, и в терминале появится строка “Цикл завершен”. А при вводе “ignore_else” сработает оператор break, и цикл завершится, не выполняя код в else.
                
            - **3.1 Строки, кортежи, списки**
                
                В первом параграфе мы познакомились с таким типом данных как строка (str).
                Мы умеем складывать строки, умножать их на число и даже сравнивать между собой.
                Если рассмотреть строку детальнее, то она состоит из символов, каждый из которых стоит на своем месте. Другими словами, строка - упорядоченная последовательность (коллекция) символов. 
                Слово “коллекция” в Python применяется не только к строкам. Коллекциями в Python также называют типы данных, в которых можно хранить сразу несколько значений.
                В упорядоченных коллекциях, к которым относится строка, каждое значение автоматически имеет свой номер - индекс. Индексация в коллекциях Python начинается со значения 0. При этом пробел, запятая, управляющие символы \n, \t и прочие тоже получают свой индекс в строке. Для доступа к определенному символу строки по индексу нужно указать его в квадратных скобках сразу после имени переменной.
                
                ```python
                Создадим программу, которая выводит первый символ строки, введенной пользователем: 
                text = input()
                print(text[0])
                Если пользователь введет пустую строку, то наша программа выдаст ошибку.
                ```
                
                В пустой строке нет символов, и программа вышла за пределы строки. Таким образом, нельзя получить значение по индексу, который за пределами строки. Перед обращением к символу строки по индексу можно проверять, не выходит ли он за пределы строки, используя известную нам функцию len следующим образом:
                
                ```python
                text = input('Enter the string: ')
                i = int(input('Enter the symbol index: '))
                if i < len(text):
                    print(text[i])
                else:
                    print('Index is out of range!')
                Однако в Python можно упростить эту запись, убрав из нее функцию len.
                И тогда в качестве индекса просто будет использоваться отрицательное число:
                text = input
                print(text[-1]) 
                ```
                
                Таким образом, последний символ имеет индекс -1, предпоследний -2 и т.д.
                Так как строка - упорядоченная коллекция, то можно пройти по этой коллекции в цикле, указав в качестве индекса итерируемую переменную цикла. Например, вывести на строке каждый символ введенной пользователем строки:
                
                ```python
                text = input()
                for i in range(len(text)):
                		print(text[i])
                ```
                
                Существует и другой способ пройти по символам строки в цикле. Если не требуется на каждой итерации цикла знать индекс текущего символа, то цикл можно оформить следующим образом:
                
                ```python
                text = input()
                for letter in text:
                    print(letter, end = '|')
                ```
                
                При такой записи цикла программа проходит не по индексам строки, а непосредственно по ее символам. Так, переменная letter на каждой итерации цикла принимает значение очередного символа строки text.
                Если требуется совместить проход непосредственно по символам строки с определением индекса итерации, то можно воспользоваться функцией enumerate. Она возвращает пары значений - номер элемента коллекции и сам этот элемент. Эта функция удобна, когда нужно пройти именно по элементам коллекции, но при этом еще и знать индекс каждого элемента.
                
                ```python
                text = input()
                for i, letter in enumerate(text):
                    print(f'{i}. {letter}', end = '|')
                ```
                
                Для строк в Python существует еще одна полезная операция - срез (slice).
                Срез позволяет взять часть строки, указав начальный и конечный индексы (конечный индекс не включается в диапазон). Также можно указать шаг, с которым срез будет взять (по умолчанию шаг 1). 
                Например, в одном из прошлых параграфов мы аналогичным образом использовали функцию range.
                Кроме того, в срезах можно использовать отрицательную индексацию. А если срез выходит за пределы строки, то программа не упадет с ошибкой, а просто вернет существующую часть строки.
                Следующий пример показывает возможные варианты использования срезов: 
                
                ```python
                text = input()
                print(text[8:11])
                print(text[:6])
                print(text[8:])
                print(text[:])
                print(text[::2])
                ```
                
                Обратите внимание, строка является неизменяемой коллекцией. Это означает, что изменить отдельный символ строки нельзя. Например, попытаемся в следующей программе изменить значение одного из символов строки:
                
                ```python
                word = 'world'
                word[0] = 'n'
                Программа выдаст ошибку.
                ```
                
                Мы уже знаем, что взаимодействовать с переменными в Python можно с помощью операций и функций. Рассмотрим еще один способ взаимодействия - методы.
                Методы похожи на функции, но вызываются не сами по себе, а для конкретной переменной. Для каждого типа данных есть свой набор методов. Чтобы вызвать метод, его нужно указать через точку после имени переменной. В круглых скобках после имени метода дополнительно можно обозначить аргументы (параметры) вызываемого метода, как это делаем с функциями.
                Например, у строк есть метод islower(), который проверяет, что в строке не встречаются большие буквы, и возвращает в таком случае значение True, иначе - False:
                
                ```python
                print('a'.islower())
                print('A'.islower())
                ```
                
                В следующей таблице перечислены часто используемые методы строк и примеры их работы. Важный момент: методы строк не меняют исходную строку, а возвращают новое значение, которое можно сохранить в переменной.
                
                | Метод | Пример | Результат | Описание |
                | --- | --- | --- | --- |
                | str.capitalize() | string01 = 'hello, World!'
                print('Method capitalize: ', string01.capitalize()) | Hello, world! | Возвращает копию строки, у которой первая буква заглавная, а остальные приведены к строчным. |
                | str.count(sub) | string02 = 'Hello, world!'
                print('Method count(\'l\'): ', string02.count('l')) | 3 | Возвращает кол-во неперекрывающихся вхождений подстроки sub. К примеру, если искать в строке “ААААА” неперекрывающиеся значения “АА”, то первое вхождение будет на первых двух, следующее на 3й и 4й. Больше неперекрывающихся вхождений нет. Так, поиск последующих вхождений подстроки происходит с индекса, который следует за последним найденным вхождением. |
                | str.endswith(suffix) | print('Method endswith(\'world!\'): ', string02.endswith('world!')) | True | Возвращает True, если строка оканчивается на подстроку suffix. Иначе возвращает False. suffix может быть кортежем проверяемых окончаний строки. |
                | str.find(sub) | print('Method find(\'o\'): ', string02.find('o')) | 4 | Возвращает индекс первого вхождения подстроки sub. Если подстрока не найдена, то возвращает -1 |
                | str.index(sub) | print('Method index(\'o\'): ', string02.index('o')) | 4 | Возвращает индекс первого вхождения подстроки sub. Вызывает исключение ValueError, если подстрока не найдена. Тема ошибок (исключений) будет разбираться на одном из следующих параграфов.  |
                | str.isalnum() | string03 = 'abc123'
                print('Method isalnum(): ', string01.isalnum(), string02.isalnum(), string03.isalnum()) | False False True | Возвращает True, если все символы строки являются буквами и цифрами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.isalpha() | string04 = 'Letters'
                print('Method isalpha(): ', string01.isalpha(), string02.isalpha(), string03.isalpha(), string04.isalpha()) | False False False True | Возвращает True, если все символы строки являются буквами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.isdigit() | string05 = '123'
                print('Method isdigit(): ', string01.isdigit(), string02.isdigit(), string03.isdigit(), string04.isdigit(), string05.isdigit()) | False False False False True | Возвращает True, если все символы строки являются цифрами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.islower() | print('Method islower(): ', string01.islower(), string02.islower(), string03.islower(), string04.islower(), string05.islower()) | False False True False False | Возвращает True, если все буквы в строке маленькие и в строке есть хотя бы одна буква. Иначе возвращает False |
                | str.isupper() | string06 = 'HELLO WORLD 123!'
                print('Method isupper(): ', string01.isupper(), string02.isupper(), string03.isupper(), string04.isupper(), string05.isupper(), string06.isupper()) | False False False False False True | Возвращает True, если все буквы в строке большие и в строке есть хотя бы одна буква. Иначе возвращает False |
                | str.join(str_col) | string07 = ['1', '2', '3']
                print('Method join(str_col): ', ';'.join(string07)) | 1;2;3 | Возвращает строку, полученную конкатенацией (сложением) строк - элементов коллекции str_col (обозначение коллекции с элементами типа данных “строка”). Разделителем является строка, для которой вызван метод.  |
                | str.ljust(width, fillchar) | print('Method ljust(width, fillchar): ', string04.ljust(10, '=')) | Letters=== | Возвращает строку длиной width с выравниваем по левому краю. Строка дополняется справа символами fillchar до требуемой длины. По умолчанию значение fillchar - пробел |
                | str.rstrip(chars) | string08 = 'stringBCCA'
                print('Method rstrip(chars): ', string08.rstrip('ABC')) | string | Возвращает строку, у которой в конце удалены символы, встречающиеся в строке chars. Если значение chars не задано, то пробельные символы удаляются. |
                | str.split(sep) | string09 = 'one, two, three'
                print('Method split(sep): ', string09.split(',')) | ['one', ' two', ' three'] | Возвращает список строк по разделителю sep. По умолчанию sep - любое кол-во пробельных символов |
                | str.startwith(prefix) | print('Method startwith(prefix): ', string02.startswith('Hello')) | True | Возвращает True, если строка начинается на подстроку prefix, иначе возвращает False. prefix моет быть кортежем проверяемых префиксов строки. Под кортежами подразумевается неизменяемая последовательность элементов |
                | str.strip(chars) | string10 = 'abc Hello, world! cba'
                print('Method strip(chars): ', string10.strip('abc') | Hello, world! | Возвращает строку, у которой в начале и в конце удалены символы, встречающиеся в строке chars. Если значение chars не задано, то пробельные символы удаляются |
                | str.title() | print('Method title(): ', string01.title()) | Hello, World! | Возвращает строку, в которой каждое отдельное слово начинается с буквы в верхнем регистре, а остальные буквы идут в нижнем |
                | str.upper() | print('Method upper(): ', string02.upper()) | HELLO, WORLD! | Возвращает копию строки, у которой все буквы приведены к верхнему регистру |
                | str.zfill(width) | print('Method zfill(width): ', string05.zfill(7)) | 0000123 | Возвращает строку, дополненную слева символами “0” до длины width |
                
                Рассмотрим еще одну коллекцию в Python - список (list). Этот тип данных является упорядоченной коллекцией, которая может в качестве элементов иметь значения любого типа данных.
                Одни из способов создания списков - перечислить его элементы в квадратных скобках и присвоить это значение переменной, которая и станет в итоге списком в программе:
                `numbers = [10, 20, 30]`
                В примере мы создали список, состоящий из трех элементов - целых чисел. Список может хранить значения любого типа, поэтому можно создать список со следующими элементами:
                `mixed_list = [10, 20.55, 'text']`
                Индексация в списках работает также, как и в строках - начальный индекс 0. Можно использовать отрицательные индексы, а также доступны срезы:
                
                ```python
                numbers = [10, 20, 30, 40, 50]  
                print(numbers[0])  # 10
                print(numbers[-1]  # 50
                print(numbers[1:3])  # [20, 30]
                print(numbers[::-1]  # [50, 40, 30, 20, 10]
                ```
                
                В отличие от строки, список относится к изменяемой коллекции. У списка можно изменить отдельный элемент, добавить новые или удалить существующие. Для изменения существующего элемента нужно указать его в левой части операции присваивания, а в правой указать новое значение этого элемента:
                
                ```python
                numbers = [10, 20, 50]
                numbers[2] = 30
                print(numbers)  # [10, 20, 30]
                ```
                
                Если требуется добавить элемент в конец списка, то можно использовать метод **append()**. 
                Например. напишем программу, в которой список последовательно заполняется 10 целочисленными значениями с клавиатуры:
                
                ```python
                numbers = []
                for i in range(10):
                		numbers.append(int(input())
                print(numbers)    # [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                ```
                
                Для удаления элемента из списка применяется операция del. Нужно указать индекс элемента, который требуется удалить: 
                
                ```python
                numbers = [10, 20, 50]
                del numbers[-1]
                print(numbers)  # [10, 20]
                С помощью del можно удалить несколько элементов списка. Для этого вместо одного элемента указываем срез:
                numbers = [1, 2, 3, 4, 5]
                del numbers[::2]
                print(numbers)  # [2, 4]
                ```
                
                ```python
                1 in [1, 2, 3]  # True
                4 not in [1, 2, 3]  # True
                [1, 2] + [3, 4, 5]  # [1, 2, 3, 4, 5]
                [1, 2, 3] * 3  # [1, 2, 3, 1, 2, 3, 1, 2, 3]
                len([1, 2, 3])  # 3
                min([1, 2, 3])  # 1
                max([1, 2, 3])  # 3
                [1, 2, 3, 2, 1].index(2)  # 1
                [1, 1, 1, 2, 3, 1].count(1)  # 4
                
                s = [1, 2]
                s.append(3)
                print(s)  # [1, 2, 3]
                
                s.clear()
                print(s)  # []
                
                [1, 2, 3].copy()  # [1, 2, 3]
                
                s.extend([3, 4, 5])
                print(s)  # [1, 2, 3, 4, 5]
                
                s.insert(1, 12)  # [1, 12, 2]
                
                s = [1, 2, 3]
                x = s.pop()
                print(x, s)  # 3 [1, 2]
                
                s = [1, 2, 3, 2, 1]
                s.remove(2)
                print(s)  # [1, 3, 2, 1]
                s.reverse()
                print(s)  # [1, 2, 3, 1]
                s.sort()  # [1, 1, 2, 3]
                
                s = [2, 3, 1]
                new_s = sorted(s, reverse = True)
                print(new_s)  # [3, 2, 1]
                ```
                
                Еще одной коллекцией в Python является кортеж (tuple). 
                Кортеж является неизменяемой упорядоченной коллекцией. В кортеже нельзя заменить значение элемента, добавить или удалить элемент. Простыми словами, кортеж - неизменяемый список. Свойство неизменяемости используется для защиты от случайных или намеренных изменений.
                Задать кортеж можно следующим образом:
                `numbers = (1, 2, 3, 4, 5)`
                Если нужно создать кортеж из одного элемента, то запись будет такой:
                `one_number = (1, )`
                Запятая в примере показывает, что в скобках не совершается операция, а идет перечисление элементов кортежа.
                Для кортежей доступны те операции и методы списков, которые не изменяют исходный кортеж.
                В качестве примера использования кортежей приведем программу для обмена значений двух переменных: 
                
                ```python
                a = 1
                b = 2
                (a, b) = (b, a)  #  a, b = b, a
                print(f"a = {a}, b = {b}")  # можно опустить круглые скобки и записать так: a = 2, b = 1
                ```
                
                Между коллекциями можно производить преобразования. Покажем на примере преобразования строки в список и кортеж (элементы строки, символы становятся элементами списка и кортежа соответственно): 
                
                ```python
                text = "Привет, мир!"
                list_symbols = list(text)
                tuple_symbols = tuple(text)
                text_from_list = str(list_symbols)
                print(list_symbols)
                print(tuple_symbols)
                print(text_from_list)
                
                Вывод программы: 
                ['П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!']
                ('П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!')
                ['П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!']
                ```
                
                Обратите внимание: преобразование коллекций к типу данных str не объединяет элементы этой коллекции в одну строку, а возвращает представление коллекции в виде строки.
                
            - **3.2 Множества, словари**
                
                Еще одна коллекция - множество (set). Чтобы задать множество, можно перечислить его элементы внутри фигурных скобок:
                `vowels = {'a', 'e', 'i', 'o', 'u'}`
                Для создания пустого множества следует использовать функцию set() без аргументов, а для определения количества элементов используется уже известная нам функция len():
                `empty_set = set()
                print(f'Lenth of the empty set is {len(empty_set)}.')  # Length of the empty set is 0`
                Множество можно получить из других коллекций, применив к ним функцию set(). Например, создадим множество из строки:
                
                ```python
                word = 'collection'
                letters = set(word)
                print(letters)
                Выполнив программу два раза, получим следующий вывод программы:
                {'i', 'c', 'e', 'n', 'l', 't', 'o'}
                {'i', 'l', 'c', 't', 'e', 'n', 'o'}
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
            
            ```python
            
            ```
            
        - ******************************************************Курс от Богдана YouTube 15:40 Закладка 01:24******************************************************
            - 001
                
                ```csharp
                print('Hello, Bogdan')
                print(print)
                
                name = input("Enter your name: ")
                print("Hello, " + name)
                ```
                
            - 002
                
                ```csharp
                print(10, 'Bogdan', True)
                print(print) # Показывает встроенная ли функция в Python
                print(input)
                print(dir)
                print(dir())
                print(dir(__builtins__)) # List of all Built-ins functions in Python
                ```
                
            - 003
                
                ```python
                name = 'johnny begood' # input("Enter your name: ")
                age = '40' # input("How old are you?: ")
                city = 'Krasnodar' # input("Which city do you live?: ")
                print("Your name is: " + name)
                print("You are " + age + " years old")
                print("You live in " + city)
                
                print(name.capitalize()) # Пишет с большой буквы
                print(name.split())     # Разбивает на слова и выводит в виде массива
                print(name)
                print(name.upper())     # большими буквами
                print(dir(name))
                ```
                
            - 004_Отступы и форматирование кода, комментарии
                
                ```csharp
                # Отступы и форматирование кода, комментарии
                def my_name(name):
                    print(name)
                
                my_name('Bogdan')
                # Ctrl + Shift + P -> format - Форматирование кода (не работает)
                my_list =       [1, 2,      3  ]
                
                print(   my_list)
                
                # This is comment
                # Ctrl + / - comment string or piece of code
                # Ctrl + Shift + K - remove full string
                ```
                
            - 005_Выражения
                
                ```csharp
                # Выражения (Expressions)
                print(10 + 5)
                print(print(10 + 5))
                
                print(input("Enter your name: "))
                ```
                
            - 006_Statements (Инструкции)
        - **Книга [Python на примерах.](https://drive.google.com/file/d/1TnGL9KEeOdM1iLB7vqfZDKJVhs9nPSKl/view?usp=drive_link) Васильев А.**
            - **Блоки кода**
                - 001
                    
                    ```python
                    print("Начинаем вычисления!")
                    a = 4
                    print("Значение переменной a = ", a)
                    b = 12
                    print("Значение переменной b = ", b)
                    c = b / a
                    print("Результат деления b / a = ", c)
                    print("Вычисления закончены!")
                    ```
                    
                - 002_Программа_с_Вводом_и_Выводом_Данных
                    
                    ```python
                    print("Давайте познакомимся!")  # Выводится сообщение
                    name = input("Как Вас зовут? ")  # Считываем введенное пользователем значение.
                                                    # Результат записывается в переменную name
                    print("Добрый день,", name + "!")  # Выводится новое сообщение
                    ```
                    
                - 003_Арифметические_Операторы
                    
                    ```python
                    a = (5 + 2) ** 2 - 3 * 2    # Результат 43
                    b = 6 - 5 / 2               # Результат 3.5
                    c = 10 // 4 + 10 % 3        # Результат 3
                    print("Результаты вычислений: ")  # Результаты вычислений выводим на экран
                    print(a, b, c)
                    
                    print(bin(18))  # Двоичный формат
                    print(hex(24548))  # 16-ричный формат
                    print(oct(358))  # 8-ричный формат
                    print(max(3, 4, 8, 9, 14, 1, -5, 18, 0, 2))
                    print(min(3, 4, 8, 9, 14, 1, -5, 18, 0, 2))
                    print(oct(pow(2,10)))  # Возведение в степень и конв-я в 8-ричный формат
                    import math
                    print(round(math.pi, 2))
                    ```
                    
                - 004_Использование_Функции_eval()
                    
                    ```python
                    a = "(5 + 2) ** 2 - 3 * 2"  # Текстовое значение
                    b = "6 - 5 / 2"             # Текстовое значение
                    c = "10 // 4 + 10 % 3"      # Текстовое значение
                    print("Результаты вычислений")  # Результаты вычислений выводим на экран.
                    print(a + " =", eval(a))    # Для "Вычисления" текстовых выражений
                    print(b + " =", eval(b))    # используем функцию eval()
                    print(c + " =", eval(c))
                    ```
                    
                - 005_Побитовые_Операторы
                    
                    ```python
                    a = 70 >> 3  # 01000110 - убираем 3 позиции справа, остается 01000 = 8 
                    # (еще проще - 3 раза делим на 2 без остатка 70 / 2 = 35 / 2 = 17 / 2 = 8)
                    b = ~a  # 0100 -> 10111 = -9
                    c = a << 1  # 0100 = 01000 (8 * 2 = 16)
                    print(a, b, c)
                    print(7 | 3, 7 & 3, 7 ^ 3)
                    ```
                    
                - 006_Логические_Операторы
                    
                    ```python
                    a = True
                    b = not a
                    print(a, b)
                    c = a and b
                    d = a or b
                    print(c, d)
                    ```
                    
                - 007_Снова_Логические_Операторы
                    
                    ```python
                    x = 10          # Числовая переменная
                    y = 20          # Числовая переменная
                    z = x and y     # Логическое И
                    print(z)        # Результат логического И
                    z = x or y      # Логическое ИЛИ
                    print(z)        # Результат логического ИЛИ
                    print(not x)    # Логическое отрицание
                    ```
                    
                - 008_Операторы_Сравнения
                    
                    ```python
                    a = 100
                    b = 200
                    print(a < b, a >= b, a == 100, b != 199)
                    ```
                    
                - 009_Тернарный_Оператор
                    
                    ```python
                    a = float(input("Введите первое число: "))  # Считывается первое число
                    b = float(input("Введите второе число: "))  # Считывается второе число
                    value_1 = "Первое число больше второго!"  # Первое значение
                    value_2 = "Второе число не меньше первого!"  # Второе значение
                    res = value_1 if a > b else value_2  # Вызывается тернарный оператор
                    print(res)          # Отображается результат
                    ```
                    
                - 010_Условный_Оператор
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит значение
                    if type(res) == int:  # Используем условный оператор для проверки типа введенного пользователем значения
                        print("Вы ввели целое число!")  # Если целое число
                    else:           # Если что-то другое
                        print("Это точно не целое число!")
                    print("Работа завершена!")  # После выполнения условного оператора
                    ```
                    
                - 011_Упрощенная_Форма_Условного_Оператора
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит занчение
                    resType = type(res)  # Тип значения запоминаем в переменной
                    if resType == int:  # Используем условные операторы (упрощенная форма)
                        print("Это целое число!")  # для проверки типа введенного пользователем значения
                    if resType == float:  # Если число действительное
                        print("Это действительное число!")
                    if resType != int and resType != float:  # Если не число
                        print("Наверное, это текст!")
                    print("")
                    ```
                    
                - 012_Условный_Оператор_с_Проверкой_Нескольких_Условий
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит значение
                    resType = type(res)  # Тип значения запоминаем в переменной
                    if resType == int:  # Используем условные операторы для проверки введенного значения
                        print("Это целое число!")
                    elif resType == float:  # Если действительное число
                        print("Это действительное число!")
                    else:                   # Если не число
                        print("Наверное, это текст!")
                    print("Работа завершеня!")
                    ```
                    
                - 013_Сумма_Натуральных_Чисел_и_Оператор_Цикла
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых. Формируем текст для
                    text = "1 + 2 ... + " + str(n) + " ="  # отображения результата
                    i = 1  # Итерационная переменная для оператора цикла
                    s = 0  # Переменная для записи суммы
                    while i <= n:  # Оператор цикла для вычисления суммы
                        s = s + i  # Добавляем слагаемое к сумме
                        i = i + 1  # Изменяем итерационную переменную
                    print(text, s) # Отображаем результат
                    ```
                    
                - 014_Оператор_цикла_с_break_Инструкцией
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых
                    text = "1 + 2 + ... +" + str(n) + " ="  # Формируем текст для отображения результата
                    i = 1  # Итерационная переменная для оператора цикла
                    s = 0  # Переменная для записи суммы
                    while True:  # Оператор цикла для вычисления суммы
                        s += i  # Добавляем слагаемое к сумме
                        i += 1  # Изменяем итерационную переменную
                        if i > n:
                            break  
                    print(text,s)  # Отображаем результат
                    ```
                    
                - 015_Вычисление_Площади_Фигуры_и_Операторы_Цикла
                    
                    ```python
                    n = 500  # Кол-во разных интервалов, на которые делятся стороны единичного квадрата
                    dz = 1 / n  # "Цена деления" - расстояние между соседними точками
                    pts = 0  # Кол-во точек, которые попадают внутрь области
                    i = 0  # Начальное значение идекса, определяющего столбец точек
                    while i <= n:  # Внешний оператор цикла. Перебираем столбцы точек
                        x = dz * i  # х - координата точки
                        j = 0  # Начальное значение второго индекса для точек столбца
                        while j <= n:  # Внутренний оператор цикла. Перебираем точки в одном столбце
                            y = dz * j  # у - координата точки
                            if y <= x and y >= x ** 2:  # Условный оператор: проверяем, попала ли точка внутрь области
                                pts = pts + 1  # Еще одна точка внутри области
                            j = j + 1  # Значение второго индекса увеличиваем на единицу
                        i = i + 1  # Значение первого индекса увеличиваем на единицу
                    s = pts / (n + 1) ** 2  # Вычисляем площадь фигуры
                    print("Площадь фигуры: ", s)  #  Отображаем результат
                    ```
                    
                - 016_Вычисление_Суммы_Чисел_For
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых
                    text = "1 + 2 + ... + " + str(n) + " ="  # Формируем текст для отображения результата
                    s = 0  # Переменная для записи суммы
                    for i in range(1, n + 1):  # Оператор цикла для вычисления суммы
                        s = s + i  # Добавляем слагаемое к сумме
                    print(text, s)  # Отображаем результат
                    ```
                    
                - 017_Текст_в_Операторе_Цикла
                    
                    ```python
                    txt = "Python - Текст для оператора цикла!"  # Текст для оператора цикла
                    i = 1  # Переменная для нумерации букв
                    empty = 0  # Переменная для подсчета пробелов
                    for s in txt:  # Оператор цикла
                        t = str(i) + "-я буква: "  # Формируем вспомогательный текст
                        if s == " ":  # Игнорируем пробелы
                            empty += 1
                            continue
                        print(t, s)  # Выводим сообщение
                        i += 1  # Изменяем номер буквы
                    print("Количество пробелов: ", empty)
                    print("Работа программы завершена!")  # Команда после завершения оператора цикла
                    ```
                    
                - 018_Оператор_Цикла_с_else_Блоком
                    
                    ```python
                    print("Проверяем содержимое списка: ")  # Начинаем проверку списка
                    # Список для проверки. Текста не содержит. При проверке альтернативного списка
                    # следует пометить как комментарий следующую строку
                    myList = [1, 3 + 2j, True, 4.0]  # Альтернативный список с текстом
                    # При проверке этого списка следует отменить комментарий для следующей строки (и удалить пробел)
                    print("Список: ", myList)  # Отображаем содержимое списка 
                    for s in myList:  # Проверяем элемент на "текстовость"
                        if type(s) == str:  # Если элемент текстовый
                            print("В списке есть текстовые элементы!")
                            break  # Завершается выполнение оператора цикла
                    else:  # Блок else оператора цикла. Выполняется только если не выполнялась инструкция break
                        print("В списке нет текстовых элементов!")  # Отображается сообщение 
                        # об отсутствии текстовых элементов
                    print("Проверка закончена")  # Сообщение о завершении проверки
                    ```
                    
                - 019_Сопадение_Элементов_в_Списках
                    
                    ```python
                    print("Поиск совпадающих элементов.")  # 
                    A = [2, False, 9.1, 2 - 1j, "hello", 5, "Python"]  # Первый список
                    B = [5, 3, "HELLO", 7, 12.5, "Python", True, False]  # Второй список
                    print("1-й список: ", A)  # Отображаем содержимое первого списка
                    print("2-й список: ", B)  # Отображаем содержимое второго списка
                    print("Совпадают: ")  # 
                    i = 0  # Индекс для нумерации элементов 1-го списка
                    for a in A:  # Внешний оператор цикла. Перебираем элементы 1-го списка
                        i += 1  # Новый индекс элемента из 1-го списка
                        j = 0  # Индекс для нумерации элементов 2-го списка
                        for b in B:  # Перебираем элементы 2-го списка
                            j += 1  # Новый индекс элемента из 1-го списка
                            if a == b:  # Условный оператор. Проверяем равенство элементов
                                txt = str(i) + "-й элемент из 1-го списка и "
                                txt = txt + str(j) + "-й элемент из 2-го списка"
                                print(txt)
                    print("Завершение программы")
                    ```
                    
                - 020_Обработка_Исключительной_Ситуации
                    
                    ```python
                    print("Решаем уравлнение ax = b")  # Начало try-блока (основной код)
                    try:  # Определяем первый параметр. Возможна ошибка при преобразовании текста в число
                        a = float(input("Введите a: "))  # Определяем второй параметр. Возможна ошибка при 
                        b = float(input("Введите b: "))  # преобразовании текста в число
                        x = b / a  # Решение уравнения. Возможна ошибка при делении на ноль
                        print("Решение уравнения: x = ", x)  # Отображается значение для корня уравнения.
                    except:  # Команда выполняется. если до этого не возникли ошибки.
                        print("Вы ввели некорректные данные!")  # Команда выполняется только если ранее
                    # Команда выполняется после блока try-except
                    print("Спасибо, работа программы завершена")  # при выполнении основного кода возникла ошибка
                    ```
                    
                - 021_Обработка_Ошибок_Разных_Типов
                    
                    ```python
                    print("Решаем уравнение ax = b")  # Начало try-блока (основной код)
                    try:  # Определяем первый параметр. Возм ошибка при преобразовании текста
                        a = float(input("a: "))  # в число. Определяем второй параметр. 
                        b = float(input("b: "))  # Возможна та же ошибка
                        x = b / a  # Решение ур-я. Возможна ошибка при делении на ноль
                        print("Решение уравнения: x = ", x)  # Отображается значение для корня уравнения
                    except ValueError:  # Вспомогательный код. Команда выполняется, если пользователь
                        print("Нужно было ввести число!")  # ввел некорректное значение
                    except ZeroDivisionError:  # Команда выполняется при попытке деления на ноль
                        print("Внимание! Делить на ноль нельзя!") 
                    print("Спасибо, работа команды завершена!") # Команда вып-ся после блока try-except
                    ```
                    
                - 022_Объявление_Функций
                    
                    ```python
                    def your_name():  # Функция без аргументов
                        print("Добрый день!")  # Отображается сообщение
                        name = input("Как Вас зовут? ")  # Запоминается введенный пользователем текст
                        return name  # Результат функции
                    def say_hello(txt):  # Функция с одним аргументом
                        print("Здравствуйте,", txt + "!")  # Отображается сообщение
                    my_name = your_name()  # Вызываем функцию и результат записываем в переменную
                    say_hello(my_name)  # Вызываем функцию аргументом
                    ```
                    
                - 023_Математические_Функции
                    
                    ```python
                    def my_exp(x, n):  # Функция для вычисления экспоненты
                        s = 0  # Начальное значение суммы ряда
                        q = 1  # Начальное значение добавки
                        for k in range(n + 1):  # Оператор цикла для вычисления ряда
                            s += q  # Добавка к сумме
                            q *= x / (k + 1)  # Новая добавка
                        return s  # Результат функции
                    x = 1  # Аргумент для экспоненты
                    for n in range(11):  # Оператор цикла для многократного вызова функции
                        print("n = ", n, "->", my_exp(x, n))  # вычисления экспоненты
                    ```
                    
                - 024_Значения_Аргументов_по_Умолчанию
                    
                    ```python
                    def print_text(txt = "Значение аргумента по умолчанию"):  # 1я функция с одним 
                        print(txt)  # аргументом. У аргумента есть значение по умолчанию
                    def show_args(a, b = "Второй аргумент не указан"):  # 2я функция с двумя
                        print(a, b)  # аргументами. У второго аргумента есть значение по умолчанию
                    def my_func(x = "1-й аргумент x.", y = "2-й аргумент y."):  # 3я функция с двумя
                        print(x, y)  # аргументами. У аргументов есть значения по умолчанию
                    print_text("Аргумент указан явно.")  # Проверяем рабоут 1й функции. Передан один аргумент
                    print_text()  # Функции аргументы не передаются
                    show_args("Первый аргумент.", "Второй аргумент.")  # Проверяем работу 2й функции
                    show_args("Первый аргумент.")  # Функции передан один аргумент
                    my_func()  # Проверяем работу 3й функции. Аргументы не передаются
                    my_func("Один из аргументов.")  # Функции передан один аргумент идентифицирован явно
                    my_func(y = "Один из аргументов.")
                    ```
                    
                - 025_Ссылка_на_Функцию
                    
                    ```python
                    def my_func(txt):  # Исходная функция
                        print("Функция my_func:", txt)
                    new_func = my_func  # Переменной присваивается имя функции
                    new_func("Вызов через new_func.")  # Вызываем функцию через переменную
                    ```
                    
                - 026_Метод_Последовательных_Приближений
                    
                    ```python
                    def solve_eqn(f, x0, n):  # Описание функции для решения уравнения
                        x = x0  # Начальное приближение для корня
                        for k in range(1, n + 1):  # Оператор цикла для вычисления приближений для решения
                            x = f(x)  # Итерационная формула
                        return x  # Результат функции
                    def eqn_1(x):  # Функция, определяющая 1е уравнение
                        return(x ** 2 + 5) / 6  # Значение функции
                    def eqn_2(x):  # Функция, определяющая второе уравнение
                        return(6 * x - 5) ** 0.5  # Значение функции
                    x = solve_eqn(eqn_1, 0, 10)  # Решаем 1е уравнение
                    print("1-е уравнение: x = ", x)  # Отображаем результат
                    x = solve_eqn(eqn_2, 4, 10)  # Решаем 2е уравнение
                    print("2-е уравнение: x =", x)
                    ```
                    
                - 027_Решение_Дифференциального_Уравнения
                    
                    ```python
                    import math  # Импорт математического модуля
                    def solve_deqn(f, x0, y0, x):  # Функция для решения дифференциального ур-я
                        n = 1000  # Кол-во отрезков, на которые делится интервал поиска решения
                        dx = (x - x0) / n  # Расстояние между соседними узловыми точками
                        x = x0  # Начальная точка
                        y = y0  # Начальное значение функции
                        for k in range(1, n + 1):  # Оператор цикла для вычисления решения
                            y = y + dx * f(x, y)  # Значение функции в узловой точке
                            x = x + dx  # Следующая узловая точка
                        return y  # Результат функции
                    
                    def diff_eqn(x, y):  # Функция, определяющая дифф. ур-е
                        return 2 * x - y  # Результат
                    
                    def y(x):  # Функция точного решения ур-я
                        return 2 * (x - 1) + 5 * math.exp(-x)
                    
                    h = 0.5  # Шаг приращения по аргументу
                    for k in range(0, 6):  # Выч-е рез-та для неск зн-й аргумента
                        x = k * h  # Значение аргумента
                        print("Числовое решение: ")  # Числовое решение
                        print("x = ", x, "-> y(x) = ", solve_deqn(diff_eqn, 0, 3, x))
                        print("Точное решение: ")  # Точное решение
                        print("x =", x, "-> y(x) =", y(x))
                    ```
                    
                - 028_Рекурсия_Числа_Фибоначчи
                    
                    ```python
                    n = int(input("Введите кол-во чисел в последовательности?: "))
                    def Fib(n):  # Функция для вычисления чисел Фибоначчи рекурсией
                        
                        if n == 1 or n == 2:  # Первое и второе равны 1
                            return 1
                        else:  # Числа в посл-ти равно сумме двух предыдущих
                            return Fib(n - 1) + Fib(n - 2)
                    print("Числа Фибоначчи: ")  # Проверяем работу функции
                    for i in range(1, n):  # Числа печатаются в одной строке через пробел
                        print(Fib(i), end = " ")  #
                    ```
                    
                - 029_Рекурсия_для_Метода_Последовательных_Приближений
                    
                    ```python
                    def solve(f, x0, n):  # Описание функции для решения уравнения
                        if n == 0:  # Используем рекурсию. Начальное приближение
                            return x0
                        else:  # Рекурсивное соотношение
                            return solve(f, f(x0), n - 1)
                    def eqn(x):  # Функция, определяющая уравнение
                        return(x **2 + 5) / 6  # Значение функции
                    x = solve(eqn, 0, 10)  # Решаем уравнение
                    print("Решение уравнения: x =", x)  # Отображаем результат
                    ```
                    
                - 030_Лямбда_Функции
                    
                    ```python
                    def find_value(f, x):  # Функция для отображения значения другой функции
                        print("x =", x, "-> f(x) =", f(x))
                    my_func = lambda x: 1 / (1 + x ** 2)  # Переменной присваивается ссылка на лямбда-функцию
                    find_value(my_func, 2.0)  # Проверяем результат
                    find_value(lambda x: x * (1 - x), 0.5)  # Аргументом передана лямбда-функция
                    z = 1 + (lambda x, y: x * y - x ** 2) (2, 3) ** 2  # Исп-е лямбда-функции в выражении
                    print("z =", z)
                    ```
                    
                - 031_Функция_как_Результат_Функции
                    
                    ```python
                    def my_pow(n):  # Ф-я в кач-ве рез-та возвращает ф-ю
                        return lambda x: x ** n
                    for n in range(1, 4):  # Проверяем результат
                        for x in range(1, 11):  # Внешний и внутренний циклы
                            print(my_pow(n) (x), end = " ")  # Выводим результат вызова функции
                        print()  # Переходим к новой строке
                    ```
                    
                - 032_Локальная_и_Глобальная_Переменные
                    
                    ```python
                    x = 100  # Глобальная переменная
                    def test_vars():  # Описание функции
                        x = "Локальная переменная"  # Локальная переменная
                        print("В теле функции x =", x)  # Проверяем значение переменной в теле функции
                    test_vars()  # Выполняем функцию
                    print("Вне функции x =", x)  # Проверяем значение переменной вне тела функции
                    ```
                    
                - 033_Глобальные_Переменные
                    
                    ```python
                    def test_vars():  # Описание функции
                        print("В теле функции x =", x)  # Проверяем зн-е переменной в теле ф-и.
                    x = "глобальная переменная"  # Значение пер-й х в теле не присваивается
                    test_vars()  # Выполняем функцию
                    print("Вне функции x =", x)  # Проверяем зн-е пер-й вне тела функции
                    ```
                    
                - 034_Использование_Инструкции
                    
                    ```python
                    x = 100  # Глобальная переменная
                    def test_vars():  # Описание функции
                        global x, y  # Объявляем глобальные переменные
                        print("В теле функции x =", x)  # Проверяем значение переменной х
                        y = 200  # Значение глобальной переменной у
                        print("В теле функции y =", y)  # Проверяем зн-е переменной у
                        x = 300  # Значение глобальной переменной х
                        test_vars()  # Выполняем функцию
                        print("Вне тела функции x =", x)  # Проверяем зн-е х вне тела функции
                        print("Вне тела функции y =", y)  # Проверяем зн-е у вне тела функции
                    ```
                    
                - 035_Использование_Вложенных_Функций
                    
                    ```python
                    def sq_sum():  # Внешняя функция
                        def get_n():  # Вложенная функция для считывания кол-ва слагаемых
                            n = int(input("Слагаемых в сумме: "))  # Считываем числовое значение
                            return n  # Рез-т ф-и get_n() - целое число
                        def find_sq_sum():  # Влож ф-я для выч-я суммы квадратов натур чисел
                            s = 0  # Нач-е зн-е суммы
                            for i in range(1, n + 1):  # Оп-р цикла для вычисления суммы
                                s += i ** 2  # Новое слагаемое в сумме
                            return s  # Результат ф-и find_sq_sum()
                        n = get_n()  # Определяем кол-во слагаемыхв сумме
                        return find_sq_sum  # Рез-т ф-и sq_sum() - вложенная функция
                    z = sq_sum()()  # Вычисляем сумму квадратов чисел
                    print("", z)
                    ```
                    
                - 036_Вычисление_Факториала
                    
                    ```python
                    def factor(mode = True):  # Ф-я для выч-я факториала и двойного факториала
                        def sf(n):  # Вложенная функция для выч-я факториала числа
                            s = 1  # Нач зн-е произведения
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= 1  # Уменьшение индекса на 1
                            return s  # Рез-т влож ф-и
                        def df(n):  # Влож ф-я для выч-я двойного факториала числа
                            s = 1  # Нач зн-е пр-я
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= 2  # Уменьшение индекса на 2
                            return s  # Рез-т влож ф-и
                        if mode:  # Если аргумент mode равен True
                            return sf  # Ссылка на ф-ю для выч-я факториала
                        else:  # Если аргумент равен False
                            return df  # Ссылка на ф-ю для выч-я двойного факториала
                    n = int(input("Введите число: "))
                    print(f"{n}! =", factor()(n))  # Вызываем ф-ю factor() для выч-я факториала
                    print(f"{n}! =", factor(True)(n))
                    print(f"{n}!! =", factor(False)(n))  # Выз-м ф-ю factor() для выч-я двойного факториала
                    ```
                    
                - 037_Факториал_и_Двойной_Факториал
                    
                    ```python
                    def factor(mode = True):  # Ф-я для выч-я факториала и двойного факториала
                        def f(n, d):  # Вложенная ф-я для выч-я обычного / двойного факт
                            s = 1  # Нач зн-е пр-я
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= d  # Уменьшение индекса
                            return s  # Рез-т влож ф-и
                        d = 1 if mode else 2  # Зн-е декремента для индекса
                        return lambda n: f(n, d)  # Рез-т ф-и. Лямбда-функция
                    print("5! =", factor()(5))  # Выз-м ф-ю factor() для выч-я факт
                    print("5! =", factor(True)(5))
                    print("5!! =", factor(False)(5))  # Выз-м ф-ю factor() для выч-я двойного факт
                    ```
                    
                - 038_Еще_Один_Способ_Вычислить_Факториал
                    
                    ```python
                    def factorial(n):  # Ф-я для выч-я факториала числа
                        if n == 1:
                            return 1
                        else:  # Рекурсия
                            return n * factorial(n - 1)
                    def dfactorial(n):  # Функция для вычисления двойного факториала
                        if n == 1 or n == 2:
                            return n
                        else:  # Рекурсия
                            return n * dfactorial(n - 2)
                    def factor(mode = True):  # Ф-я для выч-я факт и двойного факт
                        return factorial if mode else dfactorial  # Рез-т - ссылка на внеш ф-ю
                    n = int(input("Введите число: "))
                    print(f"{n}! =", factor()(n))  # Выз-м ф-ю factor() для выч-я факт 
                    print(f"{n}! =", factor(True)(n))
                    print(f"{n}!! =", factor(False)(n))  # Выз-м ф-ю для выч-я двойного факт
                    ```
                    
                - 039_Вычисление_Производной
                    
                    ```python
                    def D(f):  # Ф-я для выч-я производной
                        def df(x, dx = 0.001):  # Влож ф-я. Выч-т прибл зн-е производной
                            return(f(x + dx) - f(x)) / dx  # Рез-т влож ф-и
                        return df  # Рез-т ф-и - производная
                    def f1(x):  # Первая ф-я для диф-я
                        return x ** 2
                    def f2(x):  # Вторая ф-я для диф-я
                        return 1 / (1 + x)
                    
                    # Ф-я для отображения производной в неск точках. Аргументы такие: 
                    # F - производная (приближенная). 
                    # Nmax - кол-во точек (минус один).
                    # Xmax - правая граница по аргументу. 
                    # dx - приращение аргумента 
                    # f - производная (аналитически)
                    def show(F, Nmax, Xmax, dx, f):
                        for i in range(Nmax + 1):  # Точки, в кот выч-ся производная
                            x = i * Xmax / Nmax  # Значение аргумента
                            print(F(x), F(x, dx), f(x), sep = " -> ")  # Прибл и точное зн-е пр-й
                    F1 = D(f1)  # Пр-я для первой ф-и
                    F2 = D(f2)  # Пр-я для второй ф-и
                    print("Производная (x ** 2) ' = 2x: ")  # Зн-я в разных точках пр-й для 1й ф-и
                    show(F1, 5, 1, 0.01, lambda x: 2 * x)
                    print("Производная (1 / (1 + )) ' = -1 / (1 + x) ** 2: ")  # Зн-я в разн точках пр-й для 2й ф-и
                    show(F2, 5, 1, 0.01, lambda x: -1 / (1 + x) ** 2)
                    ```
                    
                
                ```python
                
                ```
                
                ```python
                ******def****** имя_функции(аргументы):
                		команды
                ```
                
            - **Выжимки**
                - **Глава 1. Первые программы на Python**
                    1. Программа, написанная на Python - это последовательность команд. Для выполнения этих команд используется специальная программа-интерпретатор.
                    2. В программе могут использоваться переменные. В Python переменная ссылается на значение, а не содержит его, как во многих других языках программирования.
                    3. В Python существует несколько типов данных. Числовые значения реализуются данными типа int float и complex (комплексные числа). Для обозначения мнимой части комплексного числа используют букву j (большую или маленькую). Бинарные, восьмеричные и шестнадцатеричные литералы вводятся соответственно с префиксами 0b, 0o и 0x (вторая буква после нуля может быть большой или маленькой).
                    4. Тексту соответствует тип str. Текстовые литералы заключаются в двойные (или одинарные) кавычки.
                    5. С помощью типа bool реализуются логические значения. Данные этого типа могут принимать значения True и False. Логические значения являются подвидом целочисленного типа данных, и поэтому могут использоваться в арифметических вычислениях.
                    6. Тип переменной явно указывать не нужно - он определяется на основе значения, на которое ссылается переменная.
                    7. Для ввода данных с консоли используют функцию input(), а для вывода - print().
                    8. Для ввода в программный код комментария используют символ #. Все, что находится справа от этого символа, интерпретатором игнорируется. 
                    9. Основные операторы Python можно разделить на четыре группы: арифметические, побитовые, логические и операторы сравнения.
                    10. Арифметические операторы: +, -, *, /, // (целочисленное деление), %, ** (возведение в степень).
                    11. Побитовые операторы: ~ (побитовое отрицание), & (побитовое И), | (побитовое ИЛИ), ^ (побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ), << (побитовый сдвиг влево), >> (побитовые сдвиг вправо).
                    12. Логические операторы or (логическое ИЛИ), and (логическое И), not (логическое отрицание).
                    13. Операторы сравнения: >, <, <=, >=, ==, !=. Также к операторам сравнения обычно относят оператор проверки идентичности объектов is и оператор проверки неидентичности объектов is not.
                    14. Оператор присваивания имеет сокращенные формы: например, команду вида x = x + y можно записать в виде x += y. Такого типа сокращенные выражения можно использовать для всех арифметических и побитовых операторов.
                    15. Функция eval() позволяет вычислить выражение, которое в виде текста передано аргументом функции.
                    16. Для подключения модулей используется инструкция import, после которой указывается имя подключаемого модуля. При использовании переменный (функций) из подключенного модуля имя модуля (через точку) указывается перед именем переменной (функции). 
                    17. Тернарный оператор имеет три операнда и возвращает значение в зависимости от истинности или ложности некоторого условия (один из операндов тернарного оператора).
                - **Глава 2. Управляющие инструкции**
                    1. Условный оператор позволяет выполнять различные блоки кода в зависимости от истинности или ложности некоторого условия.
                    2. В условном операторе после ключевого слова if указывается условие, которое проверяется при выполнении оператора. Если условие истинно, выполняется блок команд после условия. Если условие ложно, выполняется блок команд после ключевого слова else.
                    3. В условном операторе else-блок не является обязательным. Также в условном операторе могут использоваться elif-блоки, что позволяет проверять в условном операторе последовательно несколько условий и выполнять для каждого из них отдельный блок команд.
                    4. Оператор цикла while позволяет многократно выполнять предопределенный набор команд.
                    5. После ключевого слова while в операторе цикла указывается условие.
                    Оператор выполняется, пока условие истинно. Условие проверяется в начале выполнения оператора, и затем каждый раз после выполнения группы команд оператора цикла.
                    6. Оператор цикла for удобен в том случае, если необходимо произвести перебор элементов некоторой последовательности. После ключевого слова for указывается переменная для выполнения перебора элементов последовательности, которая, в свою очередь, указывается после ключевого слова in. Переменная последовательно принимает значения элементов последовательности, и для каждого такого значения выполняется блок команд оператора цикла.
                    7. В качестве последовательности, которая указывается в операторе цикла for можно, кроме прочего, указывать текст, списки или виртуальную числовую последовательность, созданную с помощью функции range().
                    8. Инструкции break и continue используются в операторах цикла while и for соответственно для прекращения выполнения оператора цикла или для прекращения выполнения текущего цикла.
                    9. В операторах цикла (while и for) может использоваться else-блок, который выполняется по завершении работы оператора и при условии, что завершение работы оператора цикла не связано с выполнением инструкции break.
                    10. Механизм обработки исключительных ситуаций базируется на использовании инструкции try-except. Если при выполнении программного кода, помеченного ключевым словом try, возникает ошибка, она может быть перехвачена и обработана в одном из блоков, отмеченных инструкцией except. Для каждого except-блока после ключевого слова except можно указать тип ошибки (исключения), которая обрабатывается этим блоком.
                    
                    ```python
                    Обработка ошибок и исключений:
                    
                    ****************try:
                    		# основной код 
                    except Тип_ошибки_1:
                    		# вспомогательный код
                    except Тип_ошибки_2:
                    		# вспомогательный код
                    ...
                    except Тип_ошибки_N:
                    		# вспомогательный код****************
                    
                    В инструкции try-except помимо блоков try и except могут также использоваться блоки else и finally.
                    Общий шаблон инструкции в этом случае такой:
                    try:
                    		# основной код
                    except Тип_ошибки_1:
                    		# вспомогательный код
                    except Тип_ошибки_2:
                    		# вспомогательный код
                    ...
                    except Тип_ошибки_N
                    		# вспомогательный код
                    else: 
                    		# код для случая, если ошибки не было
                    finally: 
                    		# код, который выполняется всегда
                    ```
                    
                - **Глава 3. Функции**
                    1. При описании функции используем идентификатор def, после которого указывается имя функции, список аргументов (в круглых скобках) и, после двоеточия, программный код функции. 
                    2. Инструкция return в теле функции приводит к завершению выполнения программного кода функции, а значение, указанное после инструкции return, возвращается в качестве результата функции. 
                    3. При описании функции создается объект типа function. 
                    Имя функции является ссылкой на объект функции. 
                    Ссылка на объект функции может присваиваться переменной. В этом случае переменная будет ссылкой на функцию, и эта переменная может использоваться как имя функции.
                    4. Имя функции может передаваться аргументом другой функции.
                    5. Функция может возвращать в качестве результата функцию. В этом случае возвращается ссылка на функцию-результат.
                    6. У аргументов могут быть значения по умолчанию. Значение аргументов по умолчанию указываются через знак равенства после имени аргументов. Аргументы со значениями по умолчанию указываются в списке аргументов функции последними.
                    7. При описании функции в теле функции можно использовать вызов описываемой функции (обычно с другими аргументами). Такая ситуация называется рекурсией.
                    8. Лямбда-функция или анонимная функция - это функция без имени. Такие функции могут использоваться, например, для передачи аргументом в другие функции или возвращаться в качестве результата функции.
                    Описывается лямбда-функция с помощью ключевого слова lambda, после которого указывается список аргументов и, через двоеточие, выражение, которое является результатом лямбда-функции.
                    9. Если переменной присваивается значение в теле функции, то такая переменная является локальной. Она доступна только в теле функции. Если переменная в теле функции входит в выражения, но значение ей не присваивается, то такая переменная интерпретируется как глобальная. Чтобы ясвно объявить переменную в теле функции как глобальную, используют ключевое слово global
                    10. В теле функции могут описываться другие функции. Такие функции называются вложенными. 
                    Вложенные функции имеют доступ к переменным в теле внешней функции.
                - **Глава 4. Работа со списками и кортежами**
                - **Схемы и картинки**
                    
                    ![Python_If_Elif_Цикл.drawio.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/f6344d67-935d-4061-b0b2-71519e9f3f2a/Python_If_Elif_%D0%A6%D0%B8%D0%BA%D0%BB.drawio.png)
                    
- **************************Общие моменты**************************
    - ********************************************************Стадии развития разработчика********************************************************
        1. Академические знания 
        2. Стажер (интерн учебный проект)
        3. Junior (боевой опыт в проекте)
        4. Middle (автономность)
        5. Senior (может отвечать уже за других разработчиков)
        
        Разделения по специализациям:
        
        1. Techlead
        2. Teamlead
        3. Архитектор
        4. Руководитель разработки, СТО
        
        С чего начать?
        
        1. Важно понимать, что ************работодателю необходимо решить или закрыть некую проблему************
        2. Высшее образование важно, НО если оно принципиально, можно его получить уже в процессе работы
        3. Учить английский MUST HAVE
        4. Математика нужна в Backend-разработке
        5. Сколько времени нужно? - Фронтенд - от 6 до 9 мес, посложнее - 2 года
        
    - 
        
        Все языки программирования условно делятся на 2 группы:
        
        - Компилируемые
        - Интерпретируемые

### Математика

- **********************************************Линейная алгебра и геометрия**********************************************
- **********************************************Алгебра**********************************************
- **********************************************Математический анализ**********************************************
- **********************************************Дискретная математика**********************************************
- **********************************************Дифференциальные уравнения**********************************************
- **********************************************Теория вероятности и математическая статистика**********************************************

[************************************************************************************************************************Книга. Литвак Н. “Математика для безнадежных гуманитариев”************************************************************************************************************************](https://www.notion.so/762ed0e32248425b962ff94082cecad0?pvs=21)

### 

- Машинное обучение
- Методы оптимизации

### Другое

[******************************************************************************************Станислас Деан. “Как мозг кодирует мысли” Книга******************************************************************************************](https://www.notion.so/d107a256a46c4c2f95d6c809a95cb74c?pvs=21)

- ******************************************************************************************************************Вебинар от GeekBrains. [Получи новую профессию и сразу начни зарабатывать с помощью нейросетей](https://www.youtube.com/watch?v=0vtNWki52Bk&t=3093s) 16.09.2023**
    - ******************Маркетолог******************
        
        ****************************************************Чем занимается маркетолог?****************************************************
        
        ********************************За что отвечает?********************************
        Маркетолог привлекает клиентов к продукту или услуге. Таким образом влияет на прибыль компании. Поэтому это одна из самых востребованных и денежных профессий.
        
        ******Ежедневные задачи:******
        
        - Настраивает рекламные кампании
        - Делает презентации
        - Проводит аналитику рекламы
        - Пишет продающие тексты
        - Делает баннеры
        - Проводит конкурентную разведку
        - Делает сайты
        - Составляет контент-план для соц-сетей
        - Исследует рынок и ЦА
        
        ********************************************************************************************************С чем сталкиваются люди, когда решают сменить профессию и стать маркетологом********************************************************************************************************
        
        1. Долго учиться
        2. На работу не берут без опыта
        3. Конкуренция на рынке, много более опытных специалистов
        4. Во время обучения, как правило, нет дохода от нового направления
    - **********************************************Искусственный интеллект**********************************************
        
        ****************************************************************************************Искусственный интеллект меняет правила игры****************************************************************************************
        Врывайся “с ноги” в новую профессию!
        Стань специалистом с помощью нейросетей и начни зарабатывать деньги всего за месяц
        
        **************************************************Искусственный интеллект - это сложно? Нет!**************************************************
        Это уже наша реальность:
        
        - Про ИИ говорят из каждого утюга
        - ИИ - не только сложное программирование, но и удобные легкие программы, которыми каждый может пользоваться с телефона
        - Нейронные сети выполняют конкретные задачи, главное уметь поставить задачу программе
        
        ****************************************************************************************************Нейросети могут выполнять 90% рутинных задач маркетолога****************************************************************************************************
        Выполняются за считанные минуты
        
        1. Составить тексты для сайтов и дизайн
        2. Писать продающие тексты для рекламы
        3. Сделать презентации
        4. Составить контент-план для соц-сетей
        5. Провести аналитику рекламы
        6. Писать продающие тексты для рассылок
        7. Сделать баннеры, которые заметят
        8. Исследовать рынок и ЦА
        
        ********************************Нейросети - лучший ускоритель для старта в новой профессии********************************
        Сейчас достаточно:
        
        - Найти задачу, за которую готовы заплатить
        - Поставить нейросети правильное ТЗ
        - Передать заказчику результат
        - Получить деньги
    - ********************Уровни маркетологов********************
        
        **************************************************************Уровень 1. Маркетолог-фрилансер 30,000 - 60,000 в месяц**************************************************************
        
        - Быстрые живые деньги
        - Брать несколько заказов параллельно
        - Свободный график
        - Мониторинг бирж для фрилансеров
        - Много разных заказчиков
        - Постоянно новые задачи
        
        ********************Уровень 2. Штатный маркетолог от 100,000 в месяц********************
        
        - Стабильная работа
        - Работа в команде
        - Совмещать с фрилансом
        - Быстрое развитие
        - Возможность обучения
        
        ******************************Уровень 3. Топовый маркетолог. От 150,000 в месяц******************************
        
        - Возможность выбирать интересную компанию и проекты
        - Возможность влиять на прибыль компании и получать KPI
        - Возможность стать тим-лидом и руководить командой маркетологов
        - Потолка по доходу нет
    - **********Приступим к ПРАКТИКЕ! (Заходим на биржу - берем конкретный заказ - выполняем через нейросети**********
        - **Как делаются описания для нейросетей**
            
            *“Ты являешься интернет-маркетологом. Запускаешь новый продукт - подушки. Все продукты разные. Характеристик будет много. Я тебе дам сейчас пример описания одной из подушек. Твоя задача - придумать 3 похожих, но не списанных с примера описания.”*
            Задача должна быть **ОДНА, КОНКРЕТНАЯ и ЧЕТКАЯ**. 
            
            /Нейросеть выдала 3 текста. Они нас устраивают, идем дальше…/
            ******************************”Основываясь на этих текстах, сделай еще 3”****************************** /Не даем сразу 11 текстов, т.к. будет работать на количество, а не на качество, а нам необходимо **КАЧЕСТВО**/  
            /Дальше мы берем каждое описание, добавляем в отдельный файлик и прорабатываем дальше/
            
            **************************************************************************Второй способ (в качестве секретика):************************************************************************** 
            Есть нейронная сеть, которая называется [Gerwin.io](http://Gerwin.io) - отличная российская разработка для работы с текстами и описаниями. Именно она справляется лучше, чем ЧатГПТ, Клауд и др
            
            ****************************Задача перевести видео в текст. 6р/мин (400р/час)****************************
            Заходим на ютуб. Расширение Transcribe & Summary и получаем весь наш текст. 
            Дальше мы можем закинуть через кнопочку этот ролик в ЧатГПТ и он пишет описание - о чем этот ролик, делает списком с эмодзи, пишет вывод даже. 
            Если у нас стоит задача перевести аудио в  транскриб, можно закинуть аудио в ютуб, а оттуда уже транскрибировать. 
            
            ************************************************************************************************************Задача - Из видео сделать текст, а потом презентацию************************************************************************************************************ 
            Берем часть транскриба и идем в Бат (в ЧатГПТ лишь определенное количество символов) 
            Открываем Бат, скидываем текстовый файл с транскрибом и пишем: *********“Привет. Ты являешься организатором важного мероприятия. Твоя задача сейчас прочитать доклад одного из спикеров, выделить основные буллетпойнты выступления и сделать контент для презентации, рассчитанной на 10 слайдов минимум*********”. 
            Далее мы можем взять любой слайд и написать ********************************“Возьми Слайд 2 и напиши к нему короткую информацию к каждому из пунктов…********************************”
            Далее нам необходимо создать саму презентацию. Оформить ее. Нам нужно идти в Power Point? 
            Нет! Мы идем, например, в [ideogram.ai](http://ideogram.ai) - берем контент и генерим картинки. 
            Берем, например red fisker Karma (такой авто), выбираем сделать в виде постера и жмем ок. 
            
            **********************************************Задача: Написать контент-план********************************************** 
            Воспользуемся программой Notion. Назовем тему “Путешествия на Алтай.
            *Ты являешься контент-маркетологом. Ведешь профиль для турагентства, которое продает путевки на Алтай. Нам нужно создать рубрики, которые мы можем использовать в контент-плане.*
            Нейросеть выдала рубрики и их краткое описание.
            *Давай также подумаем над рубриками, которые помогут путешественникам. Важно учесть акклиматизацию, отели, еду, места интересов и страховку. Добавь в этот список вот эти рубрики*.
            Нейросеть выдала 5 рубрик. Далее:
            *Мне нужно теперь, основываясь на этой структуре, выше написать контент-план, который будет состоять из названия поста, вид поста: (пост, reals, карусель), рубрика и краткий план на этот пост. Сделай таблицу, где будут эти столбцы.*
            Нейросеть выдала таблицу с контент-планом. Далее:
            *Основываясь на вышеполученном плане, давай сделаем такой же, но с 5 постами под рубрику “Интересные места на Алтае”*
            Сеть выдает 5 мест на Алтае, но без конкретного описания, а просто основу и теперь мы идем в **бар** и 
            *Привет. Ты являешься гидом на Алтае. Какие бы 10 интересных мест ты бы выделил, чтобы показать их путешественникам.*
            И Нейросеть выдала 10 мест с краткими описаниями.
            Далее идем в DeepL и переводим, например, Телецкое озеро, а с переводом идем в Идеограм и вставляем и просим фото, некинематографичное и ждем картинки.
            
        - ************************************************************Что нужно для быстрого старта?************************************************************
            1. ******************************************************************************Сделать нейросети своими помощниками******************************************************************************
            Это значительно ускорит тебя и на старте даст недосягаемые конкурентные преимущества
            2. **************************************************************************Научиться выполнять самые простые задания в новой профессии**************************************************************************
            С первого же месяца получишь опыт и дополнительный доход 30,000 - 50,000 рублей
            
            ****************В чем фишка востребованного дорогостоящего маркетолога?****************
            
            - **Фундаментальные знания** - есть понимание целевой аудитории и ее потребностей. Знает, как составить оффер и донести клиенту ценность компании
            - **Навыки** - умеет запускать рекламные кампании, считать аналитику. Решает нестандартные задачи
            - **Опыт** - работа с большими проектами и компаниями в разных сферах и с разными каналами трафика
            
            **********************************************************************************************************************************************Как получить современную профессию и стать востребованным маркетологом?**********************************************************************************************************************************************
            
- ************************************************************Модуль: Стартовое обучение наставников 11 - 12.10.2023************************************************************
    - **********Урок 1. Введение. О GeekBrains и роли наставника**********
    - ************************************************************************************************Урок 2. Особенности роли наставника в GeekBrains************************************************************************************************
    - **********************************************************************************************************************Урок 3. Как помочь студентам разобраться в новом материале?**********************************************************************************************************************
        
        ******************************Помоги студенту самостоятельно найти ответ:******************************
        
        - Задавай наводящие вопросы
        - Приводи примеры схожих заданий
        - Попроси студента вспомнить какой подход использовать преподаватель на уроке
        
        **********************Как помочь студенту разобраться в теме?**********************
        
        - **Подскажи студенту вернуться к учебным материалам**. Какая-то из подтем рассказана преподавателем или описана в методичке. Если тема не освещена в материалах урока - поделись ссылками на внешние ресурсы.
        - **Определи значимость темы и расставь приоритеты** совместно со студентом. Например, если завтра дедлайн по сдаче домашнего задания, предложи студенту сфокусироваться на той части вопроса, которая поможет ему справиться с заданием, и обязательно вернись к дополнительным вопросам после.
        - **Предложи студенту изучить дополнительные материалы** - статьи, подкасты, вебинары из открытых источников.
        - **Самостоятельно объясни студенту материал** через уже известное. Используй примеры, аналогии, метафоры. Старайся подбирать такие примеры. которые понятны большинству.
        
        Если ты уже попробовал несколько вариантов, но **студенту по-прежнему сложно разобраться в теме, направь его за ответом к преподавателю**. Обязательно спроси о результатах - показывай свою вовлеченность и восполняй пробелы в знаниях!
        
    - ************************************************Урок 4. Этика наставника************************************************
        
        ************************************************************************************Этические убеждения наставника GeekBrains^************************************************************************************
        
        <aside>
        ⛔ **Нарушает дисциплину**: не отвечает на сообщения студентов, игнорирует вопросы.
        
        </aside>
        
        <aside>
        ✅ **Соблюдает дисциплину**: отвечает каждому студенту в течение 24 часов
        
        </aside>
        
        <aside>
        ⛔ **Транслирует надменность и сухость**. Общается со студентами сухо и грубо.
        
        </aside>
        
        <aside>
        ✅ **Общается приятным дружественным тоном**. Проявляет уважение к студентам
        
        </aside>
        
        <aside>
        ⛔ **Использует шаблонные ответы**. Не учитывает индивидуальные особенности студентов.
        
        </aside>
        
        <aside>
        ✅ **Находит индивидуальный подход** к каждому студенту. Делится своим опытом обучения.
        
        </aside>
        
    - ******************Урок 5. Как построить эффективную коммуникацию со студентами?******************
        - **********************************************************************************Как обозначить свою зону ответственности?**********************************************************************************
            
            Будь готов к тому, что **тематика вопросов от студентов может быть разной** и не всегда лежать в твоей зоне ответственности. Если такое произошло, следуй простым правилам:
            
            - Напомни студенту, что твоя основная задача - помочь разобраться в учебном материале
            - Перенаправь студента к куратору или технической поддержке
        - ************************************************************************************************Как из потока мыслей выделить реальную проблему?************************************************************************************************
            - **Задай уточняющие вопросы**. При большом количестве уточняющих вопросов поясни: ты задаешь так много вопросов, чтобы разобраться во всем как можно лучше и действительно помочь.
            - **Попроси студента привести конкретный пример**. На примере студент детально опишет, что именно в теме ему осталось непонятно.
            - **Опиши по шагам: как ты поможешь в решении вопроса**. Уточни, остались ли у студента еще вопросы по этой теме.
            - **Закончи разговор на позитивной ноте**, сказав: “Я всегда рад помочь тебе! Обращайся!”
        - **************************************************Как работать с негативом?**************************************************
            
            Если **образовательный опыт студента не соответствует** его ожиданиям, он ищет любой канал связи с GeekBrains, иногда **приходит со своей болью к наставнику**. Несколько советов, как действовать в такой ситуации:
            
            - **Вчитайся в сообщение, окажи студенту моральную поддержку**.
            - **Обозначь ответственного за решение проблемы и расскажи, как с ним связаться**
            
            **************************************************************************************************Что точно не стоит делать при работе с негативом:**************************************************************************************************
            
            - Давать шаблонные ответы
            - Задавать дополнительные вопросы
            Все уточняющие вопросы задаст человек, который будет помогать студенту в решении проблемы
            - Игнорировать негатив
            Обязательно отвечай на сообщения, соблюдай правила вежливости и будь тактичен. Своим примером ты покажешь студентам, как стоит выстраивать общение.
        - ****************************************************************************Как давать развивающую обратную связь?****************************************************************************
            
            **”Похвалить” - “Поругать” - “Похвалить”**
            
            - ******************************************************************************Отмечаем положительные моменты в работе******************************************************************************
                - “Приветствую! Отлично выполнено, понравилось, что …”
                - “Добрый день! Проект организован хорошо: …”
            - ************************************************************Говорим, что можно сделать лучше, указываем зоны роста / ошибки************************************************************
                - “Обрати внимание на второй пункт вопроса, в примере этот момент решен иначе. Думаю, что стоит сделать так, как показано в примере …”
                - “В первой задаче в начале ошибка при расчете …”
            - **************************************************************************Даем финальное побуждающее напутствие**************************************************************************
                - “Ты хорошо поработал. Продолжай в том же духе!”
                - “У тебя отлично получается. Ты можешь обратиться ко мне за советом и в следующий раз, буду рад помочь”.
    - ****************************************************************Урок 6. Как поддержать студентов?****************************************************************
        - **************************************************Стадии мотивации студента**************************************************
            
            **В начале обучения** студент находится на пике мотивации
            **********************************************************************На этом этапе важно настроиться на серьезную работу.**********************************************************************
            Для этого можно:
            
            - Поговорить о том, что вдохновляет студента: о его планах, целях, мечтах
            - Поделиться советами по организации учебного процесса и тайм-менеджменту
            
            ************************************************************После прохождения нескольких курсов мотивация студента падает************************************************************
            Проходит этап эйфории и наступает осознание, что впереди долгий и тернистый путь.
            Способы поддержать студентов на этом этапе:
            
            - Своевременно реагировать на запросы
            - Давать развивающую обратную связь
            - Хвалить за маленькие достижения
            
            **Ближе к экватору** обучения мотивация выравнивается
            **********************************************************************************************При общении со студентами в середине программы:**********************************************************************************************
            
            - Делай акцент на том, какой путь они уже прошли, чего достигли
            - Доверяй студентам больше ответственности
            
            **На финишной прямой** мотивации студентов идет вниз
            Причина этому - **синдром самозванца и неуверенность**
            Если студент делится с тобой подобными мыслями:
            
            - Внимательно выслушай его
            - Приободри студента, рассказав о собственном опыте обучения и опыте сокурсников
            - Поделись известными тебе историями успеха
        - ****************************************************************************************Как поддержать мотивацию студента к обучению****************************************************************************************
            
            Это нормально, если тебе трудно определить, на какой стадии мотивации находится студент. Способы поддержки, которые мы перечислили работают практически всегда
            
            **Резюмируем**:
            
            - Фокусируйся на сильных сторонах и достижениях студента
            - Говори о целях обучения
            - Делись личным опытом, рассказывай истории успеха
            - Помогай советом, делись лайфхаками эффективной учебы
        - **********Лайфхаки продуктивного обучения**********
            
            ********************************************************Лайфхаки эффективной учебы:********************************************************
            Несколько рекомендаций, которыми ты можешь поделиться со студентами, если видишь, что им непросто дается учеба:
            
            - Смотреть уроки маленькими блоками и вовлекаться в учебу понемногу, но каждый день
            - Перенести занятия на наиболее продуктивное время дня
            - Задавать больше вопросов преподавателю на уроке и одногруппникам в чате
            - Разнообразить расписание дня: не забыть про физическую активность или хобби, а также общение с друзьями и семьей.
            
    - ****************Урок 7.****************
        
        
- **Видео**
    - **CS50 Harward**
        - [Лекция](https://www.youtube.com/watch?v=SW_UCzFO7X0&t=2s) 01 - 45 мин
        - [Лекция](https://www.youtube.com/watch?v=7fJ42lfCUXg) 02 - 64 мин
        - [Лекция](https://www.youtube.com/watch?v=agdXnmEadCM&t=1s) 03 - 50 мин
        - [Лекция](https://www.youtube.com/watch?v=ej3EA451m2c&t=1s) 04 - 53 мин
    - по 30.11.2023 = 6,000 минут или 100 часов
    - [План как стать программистом](https://www.youtube.com/watch?v=qyosZkVSfe4) - 25 мин
    - [Путь программиста, который почти никто не вывозит](https://www.youtube.com/watch?v=BZ2Ee3HgIVY&t=486s) - 14 мин
    - Python. [Roadmap](https://www.youtube.com/watch?v=i6n9-_oh_2E&t=520s) - 27 мин
    - [Теория вероятностей для программиста](https://www.youtube.com/watch?v=X8W-6RDHqxM) - 13 мин
    - [История одного килобайта](https://www.youtube.com/watch?v=6n8gALZzBx4) - 11 мин
    - [Командная строка для самых маленьких](https://www.youtube.com/watch?v=LtZpdRJvU1A) - 21 мин
    - Языки программирования. [Что нужно знать](https://www.youtube.com/watch?v=PS4S8BnURYU)? - 13 мин
    - [Как изучать программирование](https://www.youtube.com/watch?v=Cser9bunQ7Q) - 31 мин
    - [Вся сложность алгоритмов](https://www.youtube.com/watch?v=cXCuXNwzdfY) - 11 мин
    - Как работать с битами. [Основы программирования](https://www.youtube.com/watch?v=qewavPO6jcA&t=1327s) - 25 мин
    - Вся правда о массивах. [Структуры данных](https://www.youtube.com/watch?v=47_LhSf-ago) - 13 мин
    - Ускорь свой код в миллион раз. [Алгоритмы](https://www.youtube.com/watch?v=cyIw3NKfdGw&t=1177s) - 33 мин
    - [Путь программиста с полного нуля до Дзен за 24 шага](https://www.youtube.com/watch?v=uOa7XtkK1vQ) - 25 мин
    - [Эти книги сделают из тебя хакера](https://www.youtube.com/watch?v=7ijMUXRtnZQ) - 16 мин
    - Володя Моженков - 786 мин
    - [Notion. Полный практический курс с нуля](https://www.youtube.com/watch?v=JbJducQmxqw) - 38 мин
    - Про Kanban простыми словами - 10 мин
    - Как компьютер думает транзисторами - 31 мин
    - Сверхинтеллект. Начало - 70 мин
    - Хакатон. Что такое? Зачем он нужен? - 20 мин
    - Душкин объясняет - 35 мин
    - GeekBrains. Курсы для детей. - 140 мин
    - GeekBrains. Востребованная профессия - 140 мин
    - GeekBrains. Основы программирования - 90 мин
    - GeekBrains. Git - 90 мин
    - Кому не стоит идти в программисты - 17 мин
    - Как делают игры и про игровые движки - 117 мин
    - Прочие по теме - 3,840 мин
- **Распределить**
    - **Распределенные системы**
    - **Теоретическая информатика**
    - **Анализ и принятие решений**
    - **Анализ данных и интеллектуальные системы**
    - **Математическая инженерия в науке и бизнесе**
    - **Промышленная разработка**
    - **Проектирование**
    - **Нейросетевые технологии**
    - **Системное программирование**
    - **Медиа и массовые коммуникации**
    - **Основы программной инженерии**
    - **IT-Менеджмент**
    - **Принципы разработки ПО**
    - **Высокопроизводительные вычисления**
    - **Параллельные вычисления**
    - **Компьютерные сети**

### **1 четверть**

- ********************************************************************************Разработчик - Программист. Специализация********************************************************************************
    - ************************************Основная Программа (28.11.2023 -************************************
        - **Знакомство с языком Python (28.11.23 -**
            - **Лекции (5 уроков)**
                - **[Лекция 1](https://gb.ru/lessons/387269). Знакомство с языком программирования Python - 50 мин**
                    
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681957/attachment/1c087c4ab6843d78755c442d9de3d2bb.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/3681957/attachment/1c087c4ab6843d78755c442d9de3d2bb.pdf)
                    
                    ```python
                    n = int(input())
                    r = range(n, n + 1000)
                    flag = True
                    i = 2
                    while flag:
                        if n % i == 0:  # if remain from division n to i is 0
                            flag = False
                            print(i)
                        elif i > n // 2:  # divider of number can't be more than input divided to 2 number
                            print(n)
                            flag = False
                        i += 1
                    ```
                    
                - ****************Лекция 2. Коллекции данных. Профилирование и отладка - 40 мин****************
                    
                    
                    [Видео](https://gb.ru/lessons/387270)
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681985/attachment/2b53800e2531729158451a1ce970419b.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/4930873/attachment/f47fe672dae3f865d23fd98479dde5f7.pdf)
                    
                    ```python
                    list_1 = []
                    list_1 = list()
                    list_1 = [1, 2, 3, 8]
                    print(f'list_1: {list_1}')
                    print(f'list_1: ', *list_1)  # Вывод через пробел и без квадратных скобочек
                    
                    for i in list_1:
                        print(i, end = ' ')
                        i += 1
                    print(f'\nlen(list_1): {len(list_1)}')
                    
                    print(f'list_1[3]: {list_1[3]}')
                    ```
                    
                    ```python
                    list_1 = [1, 5]
                    print(list_1)
                    list_1.append(8)
                    print(list_1)
                    list_1.append(85)
                    print(list_1)
                    
                    for i in range(5):
                        list_1.append(i)
                        i += 1
                    print(list_1)
                    
                    # Удаление последнего элемента из списка
                    print(list_1.pop())  # 4
                    print(list_1)  
                    print(list_1.pop())  # 3
                    print(list_1)
                    print(list_1.pop())  # 2
                    print(list_1)
                    
                    # Удаление конкретного элемента из списка
                    list_1 = [12, 7, -1, 21, 0]
                    print(list_1.pop(0))  # 12
                    print(list_1)
                    
                    # Добавление элемента на нужную позицию
                    list_1.append(0)
                    print(list_1)
                    print(list_1.insert(2, 11))
                    print(list_1)
                    ```
                    
                    ```python
                    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    print("Выводим нулевой элемент: ", list_1[0])
                    print("Выводим первый элемент: ", list_1[1])
                    print("Выводим последний элемент: ", list_1[len(list_1) - 1])
                    print("Выводим с конца 5й элемент: ", list_1[-5])
                    print("Выводим все элементы по порядку с шагом 1: ", list_1[:])
                    print("Выводим элементы до 2го: ", list_1[:2])
                    print("Выводим элементы, начиная от второго с конца: ", list_1[len(list_1) - 2:])
                    print("Выводим элменты с индекса 2 по 9: ", list_1[2:9])
                    print("Выводим элементы с 6 с : ", list_1[6:-18])
                    print("Выводим элементы с 0 по макс с шагом 6: ", list_1[0:len(list_1):6])
                    print("Выводим все элементы с шагом 6: ", list_1[::6])
                    ```
                    
                    ```python
                    t = ()
                    
                    print(type(t))
                    
                    t = (1)
                    print(type(t))
                    t = (1, )
                    print(type(t))
                    t = (1, 2, 3, 4, 5)
                    print(type(t))
                    t = (1, 2, 3, 4, 5, )
                    print(type(t))
                    
                    v = [1, 8, 9, 4]
                    print(type(v))
                    
                    v = tuple(v)
                    print(type(v))
                    print(v)
                    
                    a, b, c, d = v
                    print(a, b, c, d)
                    ```
                    
                    ```python
                    t = (1, 2, 3, 5,)
                    
                    for i in t:
                        print(i, end = ' ')
                    print()
                    
                    for i in range(len(t)):
                        print(t[i],  end = ' ')
                    ```
                    
                    ```python
                    d = {}
                    d = dict()
                    
                    d['q'] = 'qwerty'
                    print(d)
                    d['w'] = 'werty'
                    print(d['w'])
                    
                    dictionary = {}
                    dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
                    print(dictionary)
                    print(dictionary['left'])
                    print(dictionary['up'])
                    dictionary['left'] = '◄'
                    print(dictionary['left'])
                    # print(dictionary['type'])
                    del dictionary['left']
                    for item in dictionary:
                        print('{}: {}'.format(item, dictionary[item]))
                    dictionary[895] = 98998
                    print(dictionary)
                    print(dictionary.items())
                    
                    for (k, v) in dictionary.items():
                        print(k, v)
                    ```
                    
                    ```python
                    colors = {'red', 'green', 'blue'}
                    print(colors)
                    colors.add('red')
                    print(colors)
                    colors.add('gray')
                    print(colors)
                    colors.remove('red')
                    print(colors)
                    # colors.remove('red')
                    colors.discard('red')
                    print(colors)
                    colors.clear()
                    print(colors)
                    colors.clear()
                    print(colors)
                    
                    q = set()
                    print(q)
                    ```
                    
                    ```python
                    # Операции с множествами
                    a = {1, 2, 3, 5, 8}
                    b = {2, 5, 8, 13, 21}
                    c = a.copy()            # {1, 2, 3, 5, 8}
                    print(c)
                    u = a.union(b)          # {1, 2, 3, 5, 8, 13, 21}
                    print(u)
                    i = a.difference(b)     # {1, 3}
                    print(i)
                    di = a.difference(a)    # set()
                    print(di)
                    dr = b.difference(a)    # {13, 21}
                    print(dr)
                    q = a.union(b).difference(a.intersection(b))  # {1, 21, 3, 13}
                    print(q)
                    ```
                    
                    ```python
                    # Замороженные множества
                    a = {1, 8, 6}
                    b = frozenset(a)
                    print(b)
                    
                    # Задача: Создать список, состоящий из четных чисел от 1 до 100
                    list_1 = []
                    for i in range(1, 101):
                        list_1.append(i)
                    print('program in 3 strings: ', list_1)
                    
                    list_1 = [i for i in range(1, 101)]
                    print('programm in 1 string: ', list_1)
                    
                    list_1 = [i for i in range(1, 101) if not i %2]
                    print('program in 1 string "even numbers": ', list_1)
                    
                    list_1 = [(i, i) for i in range(1, 101) if not i % 2]
                    print('Создадим пары каждому из чисел (кортежи): ', list_1)
                    
                    list_1 = [i * 2 for i in range(10) if not i % 2]
                    print('Умножим значения на 2: ', list_1)
                    ```
                    
                - ****************Лекция 3. Функции, рекурсия, алгоритмы - 35 мин****************
                    
                    
                    [Видео](https://gb.ru/lessons/387271)
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681992/attachment/6c93769617a21fed4f4bc56585d29c33.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/4930886/attachment/dd26301ff7f87e47e796ba6b67215c45.pdf)
                    
                    ```python
                    def sum_numbers(n):
                        sum = 0
                        for i in range(1, n + 1):
                            sum += i
                        print(sum)
                    n = int(input('Enter the number: '))
                    sum_numbers(n)
                    ```
                    
                    ```python
                    def sum_numbers(n, y = 'Hello'):
                        print(y)
                        sum = 0
                        for i in range(1, n + 1):
                            sum += i
                        return(sum)
                        print('stop') # Не воспринимает эту строку, т.к. уже возвращено значение
                    n = int(input('Enter the number: '))
                    print(sum_numbers(n))
                    a = sum_numbers(n)
                    print(a)
                    ```
                    
                    ```python
                    def sum_str(*args):  # unbounded arguments amount
                        res = ''
                        for i in args:
                            res += i
                        return res
                    print(sum_str('q', 'e', 'i'))
                    print(sum_str('q', 'e', 'i', 'r', 'f'))
                    print(sum_str('1', '8', '9', 'i'))
                    ```
                    
                    ```python
                    module01.py
                    
                    def max1(a, b):
                        if a > b:
                            return a  # else won't work after return
                        return b
                    ```
                    
                    ```python
                    import module01
                    print(module01.max1(15, 9))
                    
                    from module01 import max1
                    print(max1(5, 9))
                    
                    from module01 import *
                    print(max(10, 9))
                    
                    import module01 as m01
                    print(m01.max1(16, 241))
                    ```
                    
                    ```python
                    def fib(n):
                        if n in [1, 2]:
                            return 1
                        return fib(n - 1) + fib(n - 2)
                    
                    list_1 = []
                    for i in range(1, 10):
                        list_1.append(fib(i))
                    print(list_1)
                    ```
                    
                    ```python
                    # Fast sorting
                    
                    def quick_sort(array):
                        if len(array) <= 1:
                            return array
                        else:
                            pivot = array[0]
                        less = [i for i in array[1:] if i <= pivot]
                        greater = [i for i in array[1:] if i > pivot]
                        return quick_sort(less) + [pivot] + quick_sort(greater)
                    
                    print(quick_sort([14, 5, 9, 6, 3, 58, 7, 5, 2, 7]))
                    ```
                    
                    ```python
                    def quick_sort(array):
                        if len(array) <= 1:
                            return array
                        else:
                            pivot = array[0]
                        less = [i for i in array[1:] if i <= pivot]
                        greater = [i for i in array[1:] if i > pivot]
                        return quick_sort(less) + [pivot] + quick_sort(greater)
                    
                    print(quick_sort([10, 5, 2]))
                    ```
                    
                    ```python
                    # Merge sort
                    
                    def merge_sort(nums):
                        if len(nums) > 1:
                            mid = len(nums) // 2
                            left = nums[:mid]
                            right = nums[mid:]
                            merge_sort(left)
                            merge_sort(right)
                            i = j = k = 0
                            while i < len(left) and j < len(right):
                                if left[i] < right[j]:
                                    nums[k] = left[i]
                                    i += 1
                                else:
                                    nums[k] = right[j]
                                    j += 1
                                k += 1
                            while i < len(left):
                                nums[k] = left[i]
                                i += 1
                                k += 1
                            while j < len(right):
                                nums[k] = right[j]
                                j += 1
                                k += 1
                    
                    list_1 = [1, 5, 6, 9, 8, 18, 4, 9, 1, 55, 2, 4, 7]
                    merge_sort(list_1)
                    print(list_1)
                    ```
                    
                - ****************Лекция 4****************
                    
                    ```python
                    
                    ```
                    
                - ****************Лекция 5****************
                    
                    ```python
                    
                    ```
                    
            - **Семинары (10 уроков)**
                
                ```python
                
                ```
                
                - **[Семинар 01](https://gb.ru/lessons/387274)**
                    
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4930953/attachment/d82b5c9437fe83c67401681b4ab00c6c.pdf)
                    
                    Кирилл Панфилов. [Канал Youtube](https://www.youtube.com/channel/UCCC7ihYh4SNQZj26adlk2Kg)
                    
                    - **001**
                        
                        ```python
                        # За день машина проезжает п километров. 
                        # Сколько дней нужно, чтобы проехать маршрут длиной m километров?
                        # При решении этой задачи нельзя пользоваться условиями и циклами
                        
                        import math
                        n = int(input("Введите кол-во километров, которое проезжает за день авто: "))
                        m = int(input("Введите кол-во километров пути: "))
                        days = math.ceil(m / n)
                        print("Количество дней в пути: ", days)
                        
                        Решение на семинаре:
                        per_day = int(input("km per day: "))
                        total = int(input("total kilometers: "))
                        days = (total + per_day - 1) // per_day
                        print(days)
                        
                        import math
                        per_day = int(input("km per day: "))
                        total = int(input("total kilometers: "))
                        days = total // per_day + bool(total % per_day != 0)
                        print(days)
                        ```
                        
                    - **002**
                        
                        ```python
                        # Найдите сумму трехзначного числа
                        
                        num = int(input("Введите трехзначное число: "))
                        sum = num // 100 + (num // 10 - num // 100 * 10) + num % 10
                        print(sum)
                        ```
                        
                    - **003**
                        
                        ```python
                        # В некоторой школе решили набрать три новых математических класса и
                        # оборудовать кабинеты для них новыми партами.
                        # За каждой партой может сидеть два учащихся.
                        # Известно кол-во учащихся в каждом из трех классов.
                        # Выведите наименьшее число парт, которое нужно приобрести для них.\
                        
                        from math import ceil
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = ceil(class_1 / 2) + ceil(class_2 / 2) + ceil(class_3 / 2)
                        print(desks)
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = (class_1 // 2 + bool(class_1 % 2 != 0)) + (class_2 // 2 
                        + bool(class_2 % 2 != 0)) + (class_3 // 2 + bool(class_3 % 2 != 0))
                        print(desks)
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = ((class_1 + 1) // 2) + ((class_2 + 1) // 2) + ((class_3 + 1) // 2)
                        print(desks)
                        
                        ```
                        
                    - **004**
                        
                        ```python
                        # Петя, Катя и Сережа делают из бумаги журавликов.
                        # Вместе они сделали S журавликов.
                        # Сколько журавликов сделал каждый ребенок, если известно, что:
                        # Петя и Сережа сделали одинаковое кол-во журавликов, 
                        # а Катя сделала в 2 раза больше журавликов, чем Петя и Сережа вместе?
                        
                        S = int(input("Введите количество журавликов: "))
                        
                        x = int(S / 6)
                        
                        amount_Peter = x
                        amount_Sergey = x
                        amount_Kate = 4 * x
                        
                        print("Петя сделал:", amount_Peter, "журавликов")
                        print("Сергей сделал:", amount_Sergey, "журавликов")
                        print("Катя сделала:", amount_Kate, "журавликов")
                        ```
                        
                    - **005**
                        
                        ```python
                        # Вагоны в электричке пронумерованы натуральными числами, начиная с 1.
                        # При этом иногда вагоны нумеруются от "головы", иногда - с "хвоста";
                        # Это зависит от того, в какую сторону едет электричка.
                        # в каждом вагоне написан его номер.
                        # Витя сел в i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j.
                        # Он хочет определить сколько всего вагонов в электричке. 
                        # Напишите программу, которая будет это делать или сообщать, 
                        # что без дополнительной информации это сделать невозможно.
                        
                        vagon_number_i = int(input("Введите вагон с головы: "))
                        vagon_number_j = int(input("Введите вагон с хвоста: "))
                        if vagon_number_i != vagon_number_j:
                            vagon_total = vagon_number_i + vagon_number_j - 1
                            print(vagon_total)
                        else:
                            print("Нифига не понять, сколько вагонов!")
                        ```
                        
                    - **006**
                        
                        ```python
                        # Вы пользуетесь общественным транспортом?
                        # Вероятно вы расплачивались за проезд и получали билет с номером.
                        # Счастливым билетом называют такой билет с 6-значным номером, где 
                        # сумма первых трех цифр равна сумме последних трех.
                        # Напишите программу, которая проверяет "счастливость" билета
                        
                        number_of_billet = int(input("Введите номер билета: "))
                        
                        # second_three_digits = 
                        
                        sixth_digit = number_of_billet // 100000
                        print("6 digit: ", sixth_digit)
                        fifth_digit = number_of_billet // 10000 - number_of_billet // 100000 * 10
                        print("6 digit: ", fifth_digit)
                        fourth_digit = number_of_billet // 1000 - number_of_billet // 10000 * 10
                        print("6 digit: ", fourth_digit)
                        third_digit = number_of_billet // 100 - number_of_billet // 1000 * 10
                        print("6 digit: ", third_digit)
                        second_digit = number_of_billet // 10 - number_of_billet // 100 * 10
                        print("6 digit: ", second_digit)
                        first_digit = number_of_billet % 10
                        print("6 digit: ", first_digit)
                        
                        first_half_sum_number = sixth_digit + fifth_digit + fourth_digit
                        second_half_sum_number = third_digit + second_digit + first_digit
                        
                        print("first sum: ", first_half_sum_number)
                        print("second sum: ", second_half_sum_number)
                        
                        if first_half_sum_number == second_half_sum_number:
                            print("Yeah!")
                        else:
                            print("No!")
                        ```
                        
                    - **007**
                        
                        ```python
                        # Дано натуральное число. 
                        # Требуется определить, является ли год с данным номером високосным.
                        # Если год является високосным, то выведите YES, иначе выведите NO.
                        # Напомним, что в соответствии с григорианским календарем, 
                        # год является високосным, если он кратен 4, но не кратен 100
                        # Но также если он кратен 400 - тогда високосный.
                        ```
                        
                    - **008**
                        
                        ```python
                        # Требуется определить, можно ли от шоколадки размером n x m долек отломить
                        # k долек, если разрешается сделать один разлом по прямой между дольками,
                        # т.е. разломить шоколадку на 2 прямоугольника
                        ```
                        
                - **************Семинар 02**************
                    - 009
                        
                        ```python
                        # По данному целому неотрицательному n вычислите значение n!. N! = 1 * 2 * 3 * ... * N 
                        # (произведение всех чисел от 1 до N) 0! = 1 Решить задачу, используя цикл while 
                        # Input: 5 
                        # Output: 120
                        
                        n = int(input("Enter the number: "))
                        i = 1
                        factorial = 1
                        while i <= n:
                            factorial *= i
                            i += 1
                        print(f"{n}! = {factorial}")
                        ```
                        
                    - 010
                        
                        ```python
                        
                        ```
                        
                    - 011
                        
                        ```python
                        
                        ```
                        
                    - 012
                        
                        ```python
                        
                        ```
                        
                    - 013
                        
                        ```python
                        
                        ```
                        
                    - 014
                        
                        ```python
                        
                        ```
                        
                    - 015
                        
                        ```python
                        
                        ```
                        
                    - 016
                        
                        ```python
                        
                        ```
                        
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
                    - 026
                        
                        ```python
                        
                        ```
                        
                    - 027
                        
                        ```python
                        
                        ```
                        
                    - 028
                        
                        ```python
                        
                        ```
                        
                    - 029
                        
                        ```python
                        
                        ```
                        
                    - 030
                        
                        ```python
                        
                        ```
                        
                    - 031
                        
                        ```python
                        Последовательностью Фибоначчи называется
                        последовательность чисел a0
                        , a1
                        , ..., an
                        , ..., где
                        a0
                         = 0, a1
                         = 1, ak
                         = ak-1 + ak-2 (k > 1).
                        Требуется найти N-е число Фибоначчи
                        Input: 7
                        Output: 21
                        Задание необходимо решать через рекурсию
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input("Enter the FIBO index: "))
                        # i = 0
                        
                        # while i < fib_index - 2:
                        #     fib_sum = fib_1 + fib_2
                        #     fib_1 = fib_2
                        #     fib_2 = fib_sum
                        #     i += 1
                        # print(f"The number of your FIBO index is: {fib_2}")
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input('Enter the FIBO index: ')) - 2
                        
                        # while fib_index > 0:
                        #     fib_1, fib_2 = fib_2, fib_1 + fib_2
                        #     fib_index -= 1
                        # print(f'The number of your FIBO index is: {fib_2}')
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input('Enter the FIBO index: '))
                        # #print(fib_1, fib_2, end = ' ')
                        
                        # for i in range(2, fib_index):
                        #     fib_1, fib_2 = fib_2, fib_1 + fib_2
                        # print(fib_2, end = ' ')  # max index = 20577
                        
                        def fibonacci(n):
                            if n in (1, 2):
                                return 1
                            return fibonacci(n - 1) + fibonacci(n - 2)
                        fib_index = int(input('Enter the FIBO index: '))
                        print(fibonacci(fib_index))
                        ```
                        
                    - 032
                        
                        ```python
                        
                        ```
                        
                    - 033
                        
                        ```python
                        
                        ```
                        
                    - 034
                        
                        ```python
                        
                        ```
                        
                    - 035
                        
                        ```python
                        
                        ```
                        
                    - 036
                        
                        ```python
                        
                        ```
                        
                    - 037
                        
                        ```python
                        
                        ```
                        
                - **************Семинар 06**************
                - **************Семинар 07**************
                - **************Семинар 08**************
                - **************Семинар 09**************
                - **************Семинар 10**************
        - **Java: знакомство и как пользоваться базовым API**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Объектно-ориентированное программирование**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Подготовка к дипломному проекту**
        - **Исключения в программировании и их обработка**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Промежуточная контрольная работа по блоку Специализация**
        - **Операционные системы и виртуализация (Linux)**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Контейнеризация**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Базы данных и SQL**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Итоговая контрольная работа по блоку Специализация**
        - **Выбор технологической специализации. Обязательно для продолжения обучения**
    - **********************Факультатив**********************
        - **Веб-верстка HTML/CSS**
            - ************Лекции************
            - ****************Семинары****************
        - **Искусственный интеллект**
            - ************Лекции************
            - ****************Семинары****************
        - **Знакомство с веб-технологиями**
            - ************Лекции************
            - ****************Семинары****************
        - **Парадигмы программирования и языки парадигм**
            - ************Лекции************
            - ****************Семинары****************
        - **Гибкие методологии (Agile, SCRUM, Канбан и другие)**
            - ************Лекции************
            - ****************Семинары****************
        - **Алгоритмы и структуры данных**
            - ************Лекции************
            - ****************Семинары****************
        - **Введение в IoT**
            - ************Лекции************
        - **Компьютерные сети**
            - ************Лекции************
            - ****************Семинары****************
        - **Контроль версий углубленно (GIT)**
            - ************Лекции************
            - ****************Семинары****************
        - **Вводный курс по Big Data**
            - ************Лекции************
            - ****************Семинары****************
        - **MongoDB**
        - **Data Scuence передовые технологии**
        - **Основы информационной безопасности**
- **************************************************Буткемп. Продакт-менеджер 10.11.2023 -**************************************************
    - **[Урок 1.](https://gb.ru/lessons/375308) Как создать продукт за 30 дней и 30 ночей [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/5483238/attachment/87a27929f807b15ca922340ffca2e50f.pdf)**
        - **************************Преподаватель**************************
            
            ****************************************Станислав Завершинский -**************************************** Founder/CEO стартапов, трекер-консультант ФРИИ
            
            - Founder и CEO стартапа CommTrade (B2B SaaS на рынке США и РФ). Успешные раунды от бизнес-ангела и от акселератора в США, оценка компании в 2 млн долларов
            - СРО стартапа Longevity Hub, консультант стартапов в фонде и акселераторе ФРИИ
            - Проходил акселерации в РФ, США и Европе. С 2014 года запускаю стартапы и продукты, стараюсь помогать проектам развиваться разумно.
            - Найти мои бредни можно тут: https://t.me/reflinc
            
        - **Что мы будем делать и как делать?**
            - 30 дней буткемпа
            - 60 минут занятие
            - Минимум необходимой теории - максимум практики
            - 1 общий продукт
            
            <aside>
            💡 Полное погружение в разработку, запуск и управление продуктом с нуля!
            
            </aside>
            
            **********************************Работа над продуктом:**********************************
            
            - **************Гипотезы и lean canvas**************
            - Конкурентный анализ + Customer Research
            - Как не терять продуктовый подход в работе + Как привлечь пользователей?
            - Питчинг + Продуктовый дизайн и MVP
            - Инвестиции
            - ********************************Карьерные советы********************************
            
            ************************************************************Для того, чтобы буткемп прошел продуктивно, вам необходимо:************************************************************
            
            - Внимательно смотреть все лекции, а еще лучше - **выполнять практические задачи**, так вовлеченность в обучение выше
            - Выполнять **домашние задания** - только так вы погрузитесь в специальность максимально
            - **Участвовать в обсуждениях** в комментариях под вебинаром
        - ******************************************************************************Как создать продукт за 30 дней и 30 ночей
        День 1:****************************************************************************** Разбор задачи по созданию продукта “Буткемп” и инструментов его реализации
            
            ************************************************************************************************************************************************Что такое продукт? - Товар или услуга, которую можно предложить рынку, и которая:************************************************************************************************************************************************
            
            - будет удовлетворять потребности клиентов
            - будет достигать поставленные цели компании
            
            ****************************************************Другие определения продукта:****************************************************
            
            - Способ конкретной реализации нашей идеи и конкретный способ зарабатывать деньги (А. Морейнис)
            - Клиент х Бизнес х Технологии (Марти Кеган)
            - Все, что может быть полезно людям настолько, что они готовы за это заплатить (Аноним)
            
            ******************Сформулируйте гипотезу своего продукта, запуском которого вы хотели бы заняться******************
            
            ************************************************************Какой продукт мы будем делать?************************************************************
            
            **Продукт**: Разрабатываем и запускаем курс-bootcamp для молодых продактов “Как создать продукт за 30 дней и 30 ночей”
            
            <aside>
            💡 **Гипотеза**: У молодых специалистов специальностей продакт-менеджмент будет востребован короткий курс в формате марафона, на котором по шагам ежедневно будет создаваться продукт и освещаться методы и инструментарий запуска продуктов.
            
            </aside>
            
            **********************Soft Skills**********************
            
            - **********************************************Умение решать проблемы!**********************************************
            - Коммуникационные навыки
            - Гибкость
            - Личная эффективность (Тайм-менеджмент)
            - Управление ожиданиями стейкхолдерами
            - Лидерские навыки
            - Умение гасить конфликты
            - Умение говорить “нет”
            - Навыки мотивации команды
            
            ********************Hard Skills********************
            
            - **********************************************Работа с пользователями**********************************************
                - CustDev
                - Customer Journey Map
            - ************************************Работа с метриками************************************
                - Работа с системами аналитики (Я.Метрика, Google Analytics, мобильная аналитика)
                - Проведение А/В тестов
                - Расчет юнит-экономики
            - ****************************************************Понимание рынка и продукта****************************************************
                - Определение объема рынка (TAM, SAM, SOM)
                - Определение стратегии выхода на рынок (ADL-матрица, 5 сил Портера, SWOT-анализ, PEST-анализ
                - Определение бизнес-модели продукта (Lean Canvas, Business Model Canvas, Value Proposition)
            - ****************************************************************Выстраивание процессов разработки****************************************************************
                - Управление разработкой:
                - Фреймворки приоритизации продуктовых задач
                - Формирование дорожной карты продукта
            
            ************************************************************А что будет дальше?
            Вводный урок 2: “Продакты создают продукт!”************************************************************
            Определяем верхнеуровневый план работ и зоны ответственности продакта и проджекта
            
            ********************************Домашнее задание********************************: Продумайте верхнеуровневую гипотезу своего продукта и пропишите подробный план - дорожную карту работы над его запуском по шагам.
            
    - **[Урок 2.](https://gb.ru/lessons/375309) Product development. [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/5483241/attachment/5724e27bdfc85abc07f98472e896d036.pdf)**
        
        ********************************Вводный урок 2:******************************** “Продакты создают продукт!” Определяем верхнеуровневый план работ и зоны ответственности продакта и проджекта.
        
        - ****************************************************************************************************************************************************************************************************************************************************Product development - (разработка нового продукта) процесс создания и вывода нового продукта (товара или услуги) на рынок.****************************************************************************************************************************************************************************************************************************************************
            
            Что включает в себя Product Development:
            
            - Изменения в существующий продукт
            - Полная переработка продукта
            - Расширение продуктовой линейки
            - Новая продуктовая линейка
            - Новое позиционирование
            - Абсолютно новый продукт
            
            **************************************************Этапы Product development**************************************************
            
            1. Формулирование проблемы
            2. Генерация и проверка гипотез продукта
            3. Экономический анализ
                1. Оценка объемов рынка
                2. Оценка прибыльности и точки безубыточности (юнит-экономика)
            4. Запуск MVP продукта
                1. Первая версия продукта
                2. Первые пользователи
                3. Внесенные изменения
            5. Реализация и запуск полноценного продукта
            6. Масштабирование
            
            ********************************************************Генерация и проверка гипотез********************************************************
            
            Необходимо сформировать список гипотез и найти дешевые способы проверить их
            На какие вопросы необходимо ответить?:
            
            - **Какая боль решается?** - Не могу позволить репетитора для ребенка так дорого
            - **Кто ваш клиент?** - Женщины 35+ с детьми школьного возраста
            - **Какие каналы продвижения будут использоваться?** - ВК, Инстаграм, Фэйсбук, реклама в лифте
            - **Кто ваши конкуренты?** - Обычные репетиторы
            - **Какое ваше конкурентное преимущество?** - Низкая цена
            
            **************************Экономический анализ - Считаем экономику продукта, чтобы подтвердить ее жизнеспособность**************************
            
            - Оцениваем объемы рынка вашего продукта, и потенциальную долю, которую планируется занять, таким образом мы оцениваем примерную выручку продукта
            - Считаем юнит-экономику продукта, чтобы на старте понимать, может ли продукт приносить прибыль
                
                TAM - 1 млрд руб
                SAM - 100 млн руб
                SOM - 10 млн руб
                
            
            **********Запуск MVP-продукта. Первая версия продукта**********
            С помощью максимально простой реализации запускаем первую версию продукта
            **********************************************Критерии запуска:
             -********************************************** Быстро (до месяца)
             - Закрывает 1 боль
             - Ограниченная аудитория
             - Ограниченный ассортимент
            
            **Цель**: продукт должен как можно быстрее столкнуться с реальностью. Столкновение с реальностью вызывает страх, но это лучший способ запуска продукта.
            **Примеры**: 
             - https://web.archive.org/web/20130517200909/http://skyeng.ru/
             - https://web.archive.org/web/20030220173514/http://www.ozon.ru/
            
        - ******************************************************************************Как будем работать мы? - Мы начнем с гипотезы и lean canvas:******************************************************************************
            - **Формируем lean canvas продукта “Буткемп”**: Сегменты потребителей, их проблемы и боли? (часть 1: Потребители, проблемы, решения)
            - **Формируем lean canvas продукта “Буткемп”**: Сегменты потребителей, их проблемы и боли? (часть 2: Альтернативы, ранние последователи, кого мы забыли)
            - **Формируем lean canvas продукта “Буткемп”**: Часть 3. А что по ценностному предложению и нечестным преимуществам? Каналы продвижения и финансы.
            - **Формируем lean canvas продукта “Буткемп”**: Часть 4. Каналы продвижения и финансы. Финализируем канву. Задумываемся про Business Model Canvas
            
            **************************************************************************************************Продолжим исследованиями потенциальной аудитории:**************************************************************************************************
            
            - **Customer Research**: Разбираем цели и стратегию нашего продукта и способы их достижения
            - **Customer Research**: Определяем и считаем рынок нашего продукта
            - **Customer Research**: Определяемся с моделями монетизации
            - **Customer Research**: Генерируем гипотезы по продукту (Часть 1: Мультивселенные идей и риски продукта)
            - **Customer Research**: Генерируем гипотезы по продукту (Часть 2: Приземляем идеи)
            - **Customer Research**: Валидируем гипотезы (Количественные и качественные исследования)
            
            ************************Подумаем над привлечением аудитории и посмотрим, что там у конкурентов, и есть ли они:************************
            
            - **Как привлечь пользователей?** Выбираем каналы продвижения для нашего продукта
            - Юнит-экономика (часть 1)
            - Юнит-экономика (часть 2). Определяемся, какие каналы будут самыми эффективными, и в которые мы будем вкладываться
            - **Конкурентный анализ**: Анализируем конкурентов и их буткемпы.
            
            ************************Сделаем-таки продукт:************************
            
            - **Продуктовый дизайн**: Думаем над дизайном продукта (часть 1)
            - **Продуктовый дизайн**: Прорабатываем CJM продукта (часть 2)
            - **Продуктовый дизайн**: (Часть 3) Финализируем идеи для дизайна и делаем набросок
            - **Zero-code** или создаем сайт для буткемпа своими руками (часть 1: Выбираем инструмент)
            - **Zero-code** или создаем сайт для буткемпа своими руками (часть 2: Тильда - я у мамы фронтендер и папин вебмастер)
            
            ****Запускаем продукт:****
            
            - **Подводим итоги создания продукта**: Как развивать продукт не теряя продуктового подхода
            - **Финальный питчинг**: Что рассказываем о продукте?
            
            ****************************************************************Поговорим о работе и ее методах:
            Как не терять продуктовый подход в работе:****************************************************************
            
            - ТРИЗ / АРИП, GIST / Impact / Road Planning
            - Метод Канбан, Scrum Framework, HADI
            - Модель культур Шнейдера / OKR / Workplace Learning/ Кайдзен / Теория ограничений и развития систем
            
            **************************************************************************************************************************************Подумаем, где достать инвестиции и как рассказать о нашем продукте:**************************************************************************************************************************************
            
            - **А если я стартап? Инвестиции**: Как привлечь инвестиции на развитие нашего продукта?
            - Как посчитать финансовую модель продукта и полную экономику компании?
            
            ********************************************************************************************Поговорим, как стать продактом и найти работу:********************************************************************************************
            
            - **Разговор с продактом**: “Перспективы профессии и мой путь становления или почему ушел из проджектов в продакты, а затем в стартаперскую вечность”
            - **Карьерные советы**: Как в [hh.ru](http://hh.ru) найти именно ту вакансию, которую ты хочешь. Распространенная путаница с функционалом. Как составить резюме.
        - **Product VS Progect**
            
            ********************Product -Куда? Что? (Бизнес + Рынок + Разработка********************
            
            - Отвечает за результат продукта
            - Формулирует и проверяет гипотезы
            - Формирует видение продукта
            - Определяет ключевые метрики продукта
            - Приоритезирует бэклог
            - Отлеживает успешность внедренных улучшений
            - Решает любую проблему, возникшую в команде
            - Управляет ожиданиями стейкхолдеров
            
            ********************Project - Как? (Сроки + Бюджет + Команда)********************
            
            - Отвечает за процесс реализации
            - Помогает команде разработки оценить и декомпозировать проект
            - Ведет планирование
            - Формирует дорожную карту
            - Контролирует время разработки
            - Управляет ожиданиями продакта
        
        ****************************А что будет дальше?****************************
        Формируем lean canvas продукта “Буткемп”: Сегменты потребителей, их проблемы и боли? (Часть 1: Потребители, проблемы, решения.
        
        ************************************Домашнее задание:************************************ Подготовить по продукту категории потребителей, проблем и решений.
        
- ******************************************************************************Буткемп. Программирование 10.11.2023 -******************************************************************************
    - ********************Блоки кода********************
        - **************001_**************
            
            ```csharp
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            
            namespace _001_Буткемп
            {
                internal class Program
                {
                    static void Main(string[] args)
                    {
                        int n = 5;
                        int[] array = new int[n];
                        for (int i = 0; i < n; i++)
                            array[i] = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine("[" + string.Join(" ", array) + "]");
                        Console.WriteLine(array[3]);
                        // Сложность алгоритма О(1)
                        // [4, 5, 3, 1, 2] - чтобы выяснить сумму операций,
                        // необходимо 5 операций или О(п)
                        // [1, 2, 3, 4, 5] = O(n + lg n) - поиск в отсортированном массиве
                        // ((5 + 1) / 2) * 5 = О(1)
            
                        int sum = 0;
                        for (int i = 0; i < n; i++)
                            sum += array[i];
                        Console.WriteLine("Сумма: "sum); // O(n)
                    }
                }
            }
            ```
            
        - ********002_********
        
        ```csharp
        
        ```
        
        ```csharp
        
        ```
        
    - ******************************Ссылки и Статьи******************************
        
        Статья “J[ava память](https://habr.com/ru/post/549176/)” - Прочитана
        
        Статья [“Java память 2.0”](https://habr.com/ru/articles/489360/) - Прочитана
        
    - **Лекция 5. TCP/IP, HTTP и основы сетевого взаимодействия (35 мин)**
        
        [Лекция](https://gb.ru/lessons/375190)
        
        [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4949573/attachment/8d24affe2cb8685fd4177102822bb226.pdf)
        
        **************************************Что будет на уроке?**************************************
        
        - Поговорим о том, что происходит, когда вы вводите адрес в браузере и нажимаете Ввод
        
        В сетевом взаимодействии задействована масса элементов
        Для удобства их решили разделить на группы или слои
        
        **********************************************Немного про URL в браузере**********************************************
        
        - Протокол - http://
        - Имя сервера - geekbrains
        - Порт - :80
        - Путь к документу - lesson/123456/
        - Имя документа - index.html
        
        ************************************************Стек сетевых протоколов:************************************************
        
        | Уровень | Протоколы |
        | --- | --- |
        | Прикладной | HTTP, FTP, SMTP |
        | Транспортный | TCP, UDP |
        | Сетевой | IP |
        | Канальный | Ethernet, Wi-Fi |
        
        **Немного про протокол TCP/IP**
        
        - По протоколу ТСР можно передавать произвольные наборы байтов с одного узла сети на другой
        - Узлы идентифицируются числовым IP-адресом
        - Система DNS позволяет использовать текстовые названия вместо IP-адресов
        - На одном сервере может быть запущено несколько приложений на разных ТСР-портах
        
        **Немного про порты ТСР. Стандартные порты ТСР**
        
        - 20/21 - FTP
        - 22 - SSH
        - 53 - DNS
        - 80/8080 - HTTP
        - 110 - POP3
        - 443 - HTTPS
        - 3389 - RDP
        - Всего портов 65535
        
        **Немного про протокол НТТР**
        
        - Человеку удобнее обращаться не за наборами байт, а за читаемыми и понятно названными документами
        - По этой причине поверх протокола TCP/IP был добавлен протокол НТТР
    - ********Лекция 6. Пузырьковая сортировка********
        - ****************************Задания на собеседованиях****************************
            - [Дополнительные материалы. Вопросы для собеседования аналитик](https://gbcdn.mrgcdn.ru/uploads/asset/4947985/attachment/44c07b0aaba80c987f1b1871cbe205ec.docx)
            - [Дополнительные материалы. Задание на собеседование в Расчётный центр](https://gbcdn.mrgcdn.ru/uploads/asset/4947988/attachment/825ea471c386122a556ea1a44c7bde96.docx)
            - [Дополнительные материалы. Задание Программист SQL ETL](https://gbcdn.mrgcdn.ru/uploads/asset/4947990/attachment/136e19895c085665aa4f77138c628bef.docx)
- **Знакомство с базами данных 22.10.23 - 14.11.23**
    - ************Лекции************
        - ********************************************************************Урок 1. Знакомство с базами данных********************************************************************
            - **Приветствие**
                
                На этом уроке мы начнем знакомиться с базами данных. Сразу оговорюсь: важно различать концепцию и инструменты для работы с ней. 
                Базы данных - это **концепция**, а системы управления базами данных (СУБД) - **инструмент**.
                
                Приведу аналогию: есть математика и есть калькулятор. 
                Учить базы данных через СУБД - то же самое, что учить математику через калькулятор. Мы хорошо справимся с некоторыми математическими операциями, но все наши знания будут привязаны на инструменте, на том, как решать задачи с его помощью.
                
                На этом курсе мы немного поговорим и про языки, и про программные средства для работы с базами данных. Но основное внимание уделим концепции: посмотрим, почему базы данных работают именно так. Что происходит под капотом, как все это сделать без СУБД.
                
            - **Первые базы данных**
                
                Многие думают, что базы данных появились во второй половине 20 века, но это не так. Картотеки, библиотеки, книги учета и результаты переписи населения - все это базы данных. При этом первая перепись населения прошла в 1897 году.
                
                Получается, базы данных были, а инструменты для удобной и быстрой их обработки - нет. Работать с данными приходилось вручную, поэтому результаты переписи 1897 года появились только к 1905. Процесс обработки информации занял 8 лет.
                
                Сегодня работать с данными можно гораздо быстрее, благодаря компьютерам. Но факт остается фактом: базы данных использовались давно, просто по-другому.
                
            - **Функционал баз данных**
                
                Базы данных нужны для хранения обработки и быстрого извлечения информации. Попробуем рассмотреть этот функционал на примере.
                Представим большую картинную галерею. Нам нужно собрать информацию о картинах и каталогизировать ее. чтобы было удобно работать. Т.е. хранить, обрабатывать и быстро извлекать информацию.
                
                Как мы можем организовать информацию? Как будем находить картины определенного художника, жанра или года создания? Давайте попробуем собрать информацию обо всех картинах в каталоге.
                
            - **Иерархическая модель**
                
                Сперва соберем информацию обо всех художниках и запишем ее в базу данных (наш каталог). Художники будут на вершине иерархии. Затем информацию о них можно категоризировать: в одной части каталога будут российские художники, в другой зарубежные. 
                Следующий шаг - выделить разные жанры для картин российских и зарубежных художников: пейзаж, натюрморт, портрет.
                
                ![Слайд 003.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/472345b3-bdf8-47c2-ae6b-d88e22601de0/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_003.jpg)
                
                Добавим в эту структуру художников. Например, среди российских пейзажистов выделим Шишкина и Айвазовского, а затем внесем информацию об их знаменитых картинах - “Утро в сосновом лесу” и “Девятый вал”. Также с зарубежными художниками: натюрморты писал Ван Гог, пример картины - “12 подсолнухов в вазе”.
                
                ![Слайд 002.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/2a157794-b2e1-4e22-a46f-b5ecc0fcc05b/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_002.jpg)
                
                Итак, у нас появился каталог. Можно ли с ним работать?
                Да, все картины мы можем разложить по этой структуре. Ее называют **иерархической**. 
                Но все ли в ней в порядке? Полностью ли она нас устраивает? Какие могут быть ограничения? Достаточно простые: художники могут писать в нескольких жанрах, а у картин может быть несколько авторов. Например, у Ван Гога кроме натюрмортов есть известные портреты. Можем положить их в нашу иерархию (для этого выделим еще одну ячейку).
                
                ![Слайд 001.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/ef787393-0d51-4815-b7d3-f357585f53bc/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_001.jpg)
                
                В этом решении есть сложности. если нам понадобится найти все картины Ван Гога, сперва придется искать его среди зарубежных художников, а затем перебирать разные жанры. Только потом мы сможем получить все картины, которые он написал. Работать с таким каталогом сложно.
                Кроме того, у картины может быть несколько авторов. Например, медведей из “Утра в сосновом лесу” писал не Шишкин, а другой художник - Савицкий. Коллекционер Третьяков стер его подпись, когда покупал картину. Возможно, у Третьякова была иерархическая модель базы данных, и когда он собирал коллекцию, он не мог взять картины нескольких авторов.
                
                Что же делать с такой картиной? Если мы свяжем ее сразу с несколькими авторами в каталоге, можем потерять информацию: всех ли авторов мы нашли? Придется пробежаться по всем картинам и поискать, нет ли у них “Утра в сосновом лесу”.
                
                <aside>
                💡 **********************************************************************************************************************************************************************************При создании иерархической базы данных мы изначально фиксируем сценарий ее использования.**********************************************************************************************************************************************************************************
                
                </aside>
                
                В каталоге, который мы создали, удобно искать картины всех российских и зарубежных писателей, а также картины по жанрам. Т.е. наша иерархическая структура рассчитана на определенный круг задач. Если мы получим задачу, которая не была заложена в структуру, столкнемся с проблемами
                
                Можно ли поменять модель так, чтобы решить новую задачу? Да, но это тоже будет решение для частного случая. Мы можем пронумеровать все картины и подготовить для них предметный указатель. Сперва по уже составленной иерархии с российскими / зарубежными художниками и жанрами. Затем, если у нас будет другая задача, по другой иерархии (в зависимости от сценария использования)
                
                - **Задание**
                    
                    Что закрепить знания на практике, выполните небольшое задание: соберите предметный указатель или подготовьте иерархическую структуру, которая позволит находить картины, написанные во второй половине 19 века.
                    
                - **Вариант решения**
                    
                    У этой задачи нет единственного варианта решения, поэтому рассмотрим самое распространенное:
                    
                    ************************************************Год написания картины - Страна художника - Жанр - Другая информация************************************************
                    
                    Мы можем начать каталог с года написания картин. В зависимости от года будем указывать страну художника, потом жанр и другую информацию. Все, что дальше, нас пока не так интересует. Наша задача - получить картины, написанные в тот или иной год.
                    
                    **************Важно!************** Если мы поднимем в иерархии информацию, которая нам нужна в первую очередь, пользоваться каталогом будет проще.
                    Из такого каталога мы можем взять всю информацию с 1850 по 1900 годы. Но это не просто и не удобно. Иерархическая система долго помогала человечеству структурировать данные, но сейчас, когда у нас есть компьютеры, мы можем посмотреть и на другие модели хранения информации. 
                    
            - **Задача: телефонный справочник**
                
                С иерархической моделью хранения данных мы немного разобрались. Узнали, что она не гибкая, приходится сразу определять сценарий работы с такой базой данных.
                Теперь посмотрим, можно ли работать по-другому. Для этого начнем решать задачу - создадим телефонный справочник. Сначала он будет простым, но потом начнет усложняться: мы будем постепенно решать возникающие проблемы.
                
                Для решения понадобится Ексель, Гугл Таблицы или Опен Оффис. Рекомендуем собирать таблицу параллельно с преподавателем, чтобы понимать, что происходит и решать возникающие проблемы.
                
                - **Минимальные данные**
                    
                    Минимальные данные, которые нам нужны - ФИО человека и номер его телефона. Для этого хватит двух столбцов.
                    
                    | ФИО | Номер телефона |
                    | --- | --- |
                    | Иванов Иван Иванович | 12345678 |
                    | Петров Петр Петрович | 12345687 |
                    | Васильев Василий Васильевич | 12345679 |
                    
                    Если мне нужен телефон Петрова, я сперва ищу фамилию, а затем смотрю номер телефона, который указан рядом. Кажется все просто. Но база данных - это толкьо модель реальности, и реальность не всегда может в нее укладываться. Попробуйте себя в роли тестировщика, подумайте, есть ли какая проблема, которую эта таблица не решит?
                    
                    Думаю, многие догадались: в жизни у нас не один номер телефона. У многих есть личный и рабочий. Как их разместить в таблице? Например, добавить столбец “Дополнительный номер телефона”.
                    
                    | ФИО | Номер телефона | Дополнительный номер телефона |
                    | --- | --- | --- |
                    | Иванов Иван Иванович | 12345678 | 87654321 |
                    | Петров Петр Петрович | 12345687 | 78654321 |
                    | Васильев Василий Васильевич | 12345679 | 97654321 |
                    
                    Итак, проблему с двумя номерами телефонов мы решили: если у кого-то один номер, “дополнительную” ячейку мы можем оставить пустой, если два номера, заполним ее тоже. 
                    Подумайте, какие еще проблемы могут быть в этой модели и как их можно решить?
                    
                - **Увеличиваем количество номеров**
                    
                    Одна из очевидных проблем - номеров может быть больше, чем два: например, личный, рабочий, для поездок, для рекламы в интернете или просто старый, которым мы уже не пользуемся, но хранить информацию хотим. Мы не можем сказать заранее, сколько у человека номеров. Здесь как с массивами: если мы заранее не знаем количество элементов, нам тяжело определить, какой массив будет нужен для хранения информации.
                    
                    Как решить эту проблему? Сделаем таблицу, которая позволяет хранить больше номеров.
                    
                    | ФИО | Телефон 1 | Телефон 2 | Телефон 3 | Телефон 4 | Телефон 5 |
                    | --- | --- | --- | --- | --- | --- |
                    | Иванов Иван Иванович | 123 | 124 | 125 | 126 | 127 |
                    | Петров Петр Петрович | 234 | 231 |  |  |  |
                    | Васильев Василий Васильевич | 456 |  |  |  |  |
                    
                    Из-за Иванова с пятью номерами получилась таблица с множеством пустых ячеек. Это тоже проблема - много пространства тратим впустую. Решение рабочее, но не такое хорошее, как мы хотели.
                    Кроме того, название столбцов отличаются только номерами. Непонятно, какой из них личный, какой рабочий, а какой для поездок. Можно переименовать их, но это тоже не 100% решение: мы не можем предусмотреть все ситуации использования этих номеров. Хорошо бы хранить для каждого из них комментарий. Как это сделать?
                    
                - **Избавляемся от пустых ячеек**
                    
                    Раньше каждому человеку соответствовал какой-то номер или набор номеров. Сейчас я сделаю по-другому; запишу ФИО человека столько раз, сколько у него телефонов и к каждому телефону добавлю комментарий. Т.е. таблица будет расти не вширь, а вниз.
                    
                    | ФИО | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов Иван Иванович | 123 | личный |
                    | Иванов Иван Иванович | 124 | рабочий |
                    | Иванов Иван Иванович | 125 | для поездок |
                    | Иванов Иван Иванович | 126 | для объявлений в интернете |
                    | Иванов Иван Иванович | 127 | старый, возможно, неактуальный |
                    | Иванов Иван Иванович | 234 | личный |
                    | Иванов Иван Иванович | 235 | рабочий |
                    | Иванов Иван Иванович | 456 | личный |
                    
                    Теперь я могу ввести в поиск фамилию человека и выбрать нужный телефон из набора его номеров. Ориентироваться буду по комментарию.
                    Такое решение можно использовать для хранения неограниченного количества номеров для каждого человека. Мы решили часть проблем: таблица более сжатая, в ней нет пустых ячеек, мы добавили комментарии, так что работать с телефонами теперь будет удобнее.
                    
                - **Работаем с дублями**
                    
                    Но проблемы в таблице еще остались. Как вы думаете, какие?
                    Если мы дополним информацию о человеке, появится много дублей. Объем данных, который мы будем хранить, сильно увеличится:
                    
                    | ФИО | Телефон | Комментарий | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- | --- | --- |
                    | Иванов И. И. | 123 | личный | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 124 | рабочий | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 125 | для поездок | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 126 | интернет | Казань | 12.02.1990 | женат |
                    
                    Если кроме телефона мы захотим еще хранить адрес, дату рождения и семейное положение, в каждую строку с новым номером человека эту информацию придется копировать. В примере адрес, день рождения и статус Иванова повторяется 4 раза, от записи к записи они никак не меняются.
                         Из программирования вы уже знаете термин “захардкорженная информация”. Если мы что-то написали руками, а не сделали с помощью переменной, нужно внимательно следить: если условия задачи поменяются, менять придется все.
                    Представим ситуацию, что Иванов развелся. Тогда в каждой записи придется исправить его семейное положение. Если мы это сделаем только в одном месте, возникнет путаница. Получается, такая форма хранения информации добавляет нам много сложностей даже за исключением того, что ее нужно дублировать каждый раз.
                    
                    Кроме того, адресов у человека тоже может быть несколько: например, по прописке или фактический. Соответственно, помимо нескольких записей для хранения номеров телефонов добавятся записи с адресами. Информации о человеке тоже можно добавить больше, чем на 3 столбца.
                    Таблица сильно разрастается, следить за ней становится все сложнее. Если мы поменяем фактический адрес или семейное положение, нужно будет в каждой копии записи внести изменение.
                    Пожалуйста, заполните ваши таблицы, чтобы мы видели всю картину. Добавьте еще 3 столбца и внесите информацию о каждом персонаже. Посмотрите, какой объемной стала таблица.
                    
                - **Разбиваем таблицу**
                    
                    Что можно сделать с этой проблемой? Разбить информацию на несколько таблиц и вынести в них всю повторяющуюся информацию:
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов И. И. | 123 | личный |
                    | Иванов И. И. | 124 | рабочий |
                    | Иванов И. И. | 125 | для поездок |
                    | Иванов И. И. | 126 | интернет |
                    | Иванов И. И. | 127 | старый |
                    
                    | Петров П. П. | 234 | личный |
                    | --- | --- | --- |
                    | Петров П. П. | 235 | рабочий |
                    | Васильев В. В. | 456 | личный |
                    
                    Мы выделили столбцы “Чей телефон” (в нем указали ФИО людей), “Телефон” и “Комментарий”. По сути, это та таблица, которая у нас была. В ней содержится минимальная информация, которую целесообразно дублировать.
                    В основной таблице останется информация о персонажах: их адреса, дни рождения и семейное положение.
                    
                    | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- |
                    | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | Петров П. П. | Москва | 23.04.1983 | женат |
                    | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Основная таблица сильно уменьшилась в размерах после того, как мы убрали дублирущуюся информацию. Осталось всего три контакта. Если нам нужно найти номер конкретного человека, воспользуемся дополнительной таблицей.
                    Если вы попробуете экстраполировать ситуацию, т.е. посмотрите, что случится, если мы будем увеличивать количество людей и номеров телефонов, вы увидите, что наше предыдущее решение будет очень разрастаться, а в последнее - нет. В нем информация будет добавляться по минимуму. С такой таблицей уже можно работать вручную.
                    
                - **Добавляем идентификаторы**
                    
                    Но у этого решения тоже есть проблемы. Как вы думаете, какие? И как их можно решить?
                    Сложность в том, что может быть несколько однофамильцев или полных тезок. Приведу пример: добавлю в основную таблицу еще одного Иванова Ивана Ивановича. Но он будет жить не в Казани, а в Санкт-Петербурге, у него будет другой день рождения и семейное положение.
                    
                    | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- |
                    | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | Санкт-Петербург | 18.09.2001 | холост |
                    | Петров П. П. | Москва | 23.04.1983 | женат |
                    | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Если оставить все как есть, то ни я, ни компьютер не сможем разобраться, какой номер телефона относится к одному Иванову, а какой ко второму.
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов И. И. | 123 | личный |
                    | Иванов И. И. | 124 | рабочий |
                    | Иванов И. И. | 125 | для поездок |
                    | Иванов И. И. | 126 | интернет |
                    | Иванов И. И. | 127 | старый |
                    | Иванов И. И. | 527 | личный |
                    | Петров П. П. | 234 | личный |
                    | Петров П. П. | 235 | рабочий |
                    | Васильев В. В. | 456 | личный |
                    
                    Если бы мы использовали прошлое решение, можно было бы найти нового человека по адресу. Но мы уже разбили таблицу надвое и будем с этим работать.
                    Чтобы решить проблему, добавим уникальные идентификаторы. Пронумеруем людей в списке: id - число, которое будет своим для каждой записи. У нас четыре человека, значит будет 4 номера.
                    
                    | id | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- | --- |
                    | 1 | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | 2 | Иванов И. И. | Санкт-Петербург | 18.09.2001 | холост |
                    | 3 | Петров П. П. | Москва | 23.04.1983 | женат |
                    | 4 | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Теперь в столбце “Чей телефон” будем указывать не ФИО, а идентификатор.
                    Идентификатор будет связывать две таблицы.
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | 1 | 123 | личный |
                    | 1 | 124 | рабочий |
                    | 1 | 125 | для поездок |
                    | 1 | 126 | интернет |
                    | 1 | 127 | старый |
                    | 2 | 527 | личный |
                    | 3 | 234 | личный |
                    | 3 | 235 | рабочий |
                    | 4 | 456 | личный |
                    
                    Если нам понадобится найти номер Иванова из Санкт-Петербурга, сперва нужно будет узнать его идентификатор в основной таблице (id 2), а затем посмотреть, какой номер ему соответствует в связанной таблице. Так мы решим проблему тезок.
                    
                - **Первичный и внешний ключи**
                    
                    Столбик с идентификатором в основной таблице - это первичный ключ. Так называют уникальную информацию, которая помогает нам идентифицировать каждую конкретную запись в таблице.
                    Столбик “Чей телефон” в дополнительной таблице - это внешний ключ. Он не уникален, но по нему можно найти нужную запись.
                    
                    Подробнее о ключах мы будем говорить на будущих курсах. Сейчас самое важное - понять, что если мы связываем несколько таблиц, нужен уникальный идентификатор, чтобы понимать, какая запись где находится.
                    С одной стороны, мы получили огромную пользу от того, что разбили информацию на разные таблицы, но, с другой стороны, нельзя терять связи между данным, которые в этих таблицах хранятся.
                    
            - **Реляционные базы данных**
                
                Мы решили задачу: разбили одну большую таблицу с неуникальной информацией на две, в которых нет повторов. По сути, и первое и второе решения позволяют работать с информацией одинаково, но физически занимают разное количество ячеек. Первое решение более громоздкое. Если мы воспользуемся вторым, сэкономим память и ресурсы.
                
                Мы создали связи между таблицами и получили **реляционную базу данных** - базу, в которой данные распределены по отдельным связанный между собой таблицам.
                Мы связали две таблицы, но ограничиваться ими не обязательно. У человека может быть несколько адресов, и их тоже можно вынести в новую таблицу.
                Попробуйте выделить третью таблицу с адресами, связать ее с основной по первичному ключу и поискать информацию по конкретному человеку.
                
            - **Заключение**
                
                Итак, попробуйте добавить в базу данных третью таблицу с адресами и посмотреть, как она будет работать. Задание простое, но оно поможет закрепить все те шаги, которые мы прошли сегодня на уроке.
                
                На следующей лекции мы разберем, как получать информацию из разных связанных таблиц. 
                
        - **Урок 2. Работа с данными из разных таблиц**
            
            
            [Лекция](https://gb.ru/lessons/370770)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3667113/attachment/844d1bd3c23dab6272fe11def84c1f6d.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353408/attachment/62e10c1f45c2f380c4ef756d6efb3eeb.pdf)
            
        - ******************************************************************************Урок 3. Создание структуры базы данных******************************************************************************
            
            
            [Лекция](https://gb.ru/lessons/370770)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3603631/attachment/351a73c23d3f4ef616bbe9a5e3d54ff2.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353417/attachment/8443f7de1588a65e1af83261f0923fee.pdf)
            
        - **********************************************************Урок 4. Дополнительная лекция**********************************************************
            
            
            [Лекция](https://gb.ru/lessons/370771)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3937508/attachment/a1ad27c097b9789ff17a03bf6e07e5d6.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353430/attachment/747f92ce50fab2c29b2681e1fd88f122.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353430/attachment/747f92ce50fab2c29b2681e1fd88f122.pdf)
            
    - ****************Семинары****************
        - [Семинар 1.](https://gb.ru/lessons/372097) Знакомство с базами данных
        - [Семинар 2](https://gb.ru/lessons/372098). Работа с данными из разных таблиц
        - [Семинар 3](https://gb.ru/lessons/372099). Создание структуры базы данных

[Знакомство с языками программирования 16.09.23 - ](https://www.notion.so/16-09-23-6459d2aea20140db9609b045f04937e9?pvs=21)

[Модуль: Введение в контроль версий 29.08.23 - 12.09.23](https://www.notion.so/29-08-23-12-09-23-80b9c86289284de9a690f74bde3064b5?pvs=21)

[Модуль: Введение в математику 17.08.23 - ](https://www.notion.so/17-08-23-1264e9e92f6244f3a4a186e540e68657?pvs=21)

[Модуль: Математика и информатика для программистов 17.08 - ](https://www.notion.so/17-08-3badacf67b9e4fd3b6ed84fa7eb2a75d?pvs=21)

[Модуль: Введение в программирование (лекции) 17.08.23 - 04.09.23](https://www.notion.so/17-08-23-04-09-23-adc6f241cdea4a2d8b0680244dfb7986?pvs=21)

- Модуль: Знакомство со специализациями 12.09.23
    - **************************************************************************Урок 1. Знакомство со специализациями 33 мин**************************************************************************
        - ************Ссылки************
            - [Лекция](https://gb.ru/lessons/362961)
            - [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4283992/attachment/ffa632a026336c61c47e11b1d59b2705.pdf)
            - [Колесо компетенций](https://gbcdn.mrgcdn.ru/uploads/asset/4283993/attachment/4e7be2c979f70296ddc4c77d4f5c6f16.pdf)
            - [Матрица Декарта](https://gbcdn.mrgcdn.ru/uploads/asset/4286371/attachment/ac712e44c516bb26b57453666520d636.pdf)
        - ************Спикеры************
            - ********************************Александр Волчек********************************
            Генеральный директор GttkBrains, Идеолог программы Разработчик
                - Начал карьеру системным администратором, вырос до СЕО топовых компаний России
                - Руководил департаментом программного обеспечения и электроники в Mecasoft International в Минске
                - Разработал программное обеспечение для компаний Intel, Samsung, SEH Malasia, Infineon
                - Руководил проектами в TMI-Tech в Тулузе, Франция
                - Был совладельцем и управляющим партнером в “Бизнес молодости”
                - В “Мегаплане” из коммерческого директора вырос до генерального, увеличив продажи в 12 раз
                - Создал торговую платформу АГРО24 и образовательные проекты [A2.LIFE](http://A2.LIFE) и ПОТОК24
            - ******************************Александр Сагун******************************
            Исполнительный директор GttkBrains, Идеолог программы Разработчик
                - Прошел путь от программиста до исполнительного директора в EdTech-компании GttkBrains
                - За полгода выстроил с нуля CRM-систему для государственной поликлиники
                - Проект под его руководством занял второе место в мире по разработке на SAP
                - Руководил ИТ-разработкой в “Техносиле”
                - За полгода выстроил ИТ-отдел в Х5 Retail Group
                - Пришел в “Бизнес молодость” автоматизировать продажи и вырос до исполнительного директора
                - Автоматизировал свой бизнес и за год увеличил продажи в 8 раз
        - ****************************************Сегодня в программе:****************************************
            1. Разберем 5 специализаций в разработке:
                1. Кто такие
                2. Что делают
                3. Какими инструментами пользуются
                4. Кому подойдет
                5. Что изучим на Разработчике
            2. Покажем траектории развития по специализациям
            3. Дадим тесты на рефлексию по каждому направлению
            4. Расскажем, как сменить специализацию
            5. Обсудим первый месяц обучения
        - ******************************5 специализаций******************************
            
            **********************************************Фундамент разработчика:**********************************************
            
            - **Программист**
                
                Разрабатывает программное обеспечение с помощью написания кода.
                
                **Конечный результат работы:** 
                
                Код, благодаря которому программное обеспечение обладает нужными функциями и работает исправно.
                
                ****************************Примеры задач:****************************
                
                - Разработчики XRM-систем: Bitrix 24
                - Веб-разработчики: создают сайты
                - Разработчики игр: прописывают физические свойства предметов, программируют механику действий
                - Разработка искусственного интеллекта
                
                ************************Среды задач:************************
                
                - Android Studio
                - Webflow (CMS)
                - GitHub (Контроль версий)
                - Редактор кода Sublime Text 3
                - MySQL (СУБД)
                - Atom: работа с кодом
                
                ******************************************Уровни программистов:******************************************
                
                - 6 месяцев - 1,5 года: Junior, младший специалист. Знает основы профессии, выполняет несложное ТЗ
                - 1,5 - 3 года: Middle, специалист среднего уровня. Умеет работать с ТЗ, реализует функционал, понимает задачи проекта
                - 4 - 6 лет: Senior, старший специалист. Определяет способы реализации задачи. Отвечает за других специалистов в команде.
                
                ****************************************Деление по видам и типам.**************************************** 
                
                - ****************************************Базовое распределение:****************************************
                    - Frontend
                    - Backend
                    - Fullstack
                - **************************************************Емкость рынка ИТ-вакансий**************************************************
                    - 2020 - 41 млн
                    - 2021 - 51 млн
                    - 2022 - 66 млн
                    - 2023 - 90 млн
                    - 2024 - 127 млн
                    - 2025 - 190 млн
                    
                    ******************************************************************************************************************************************************************************149 млн новых вакансий до 2025 года по всему миру, из них:******************************************************************************************************************************************************************************
                    
                    - 1 млн - Защита данных
                    - 6 млн - Кибербезопасность
                    - 20 млн - Анализ данных, машинное обучение ИИ
                    - 23 млн - Облачные решения
                    - 98 млн - Разработка ПО
                    
                    **************************************************************Программист - не одна профессия**************************************************************
                    
                    - Системный аналитик
                    - Проджект-менеджер
                    - Тестировщик
                    - Аналитик
                    - Продакт-менеджер
                    - Data Science
                    - DevOps
                    - Team Lead
                    - Архитектор
                    - СТО
                    - Машинное обучение
                - ****************************************Операционные системы****************************************
                    - Linux
                    - AmigaOS
                    - FreeBSD
                    - macOS
                    - Microsoft Windows
                    - ReactOS
                    - Plan 9
                    - Inferno OS
                    - MenuetOS
                    - KolibriOS
                    - ОС Эльбрус
                    - iOS
                    - Android
                    - BlackBerryOS
                    - LG webOS
                    - Облачная Chrome OS
                    - tvOS
                    - watchOS
                    - Haiku
                    - Solaris
                    - OpenVMS
                    - Tizen
                    - KaiOS
                - ********************************************************************Деление по языкам программирования********************************************************************
                    - Pascal
                    - C
                    - Fortran
                    - Assembly language
                    - AspectJ
                    - BASIC
                    - C#
                    - C++
                    - Chef
                    - CSS
                    - Dart
                    - Delphi
                    - Elixir
                    - Erlang
                    - Genie
                    - Go
                    - Groovy
                    - Haskell
                    - HTML
                    - HTML5
                    - Java
                    - JavaScript
                    - Julia
                    - Kotlin
                    - Lisp
                    - Matlab
                    - Mercury
                    - Node.js
                    - Objective-C
                    - Perl
                    - PHP
                    - PureBasic
                    - Python
                    - R
                    - React.js
                    - Ruby
                    - Rust
                    - Sass
                    - Scala
                    - SQL
                    - Swift
                    - TypeScript
                    - Vala
                    - Visual Basic .NET (VB.NET)
                - **********************************Деление по видам и типам**********************************
                    - **********************************************Программное обеспечение**********************************************
                        - Desktop
                        - Mobile
                        - Оборудование
                    - **************Отрасли**************
                        - Финансовые технологии
                        - Образование и обучение
                        - Искусственный интеллект
                        - Биотехнологии
                        - Еда и продукты питания
                        - Машинное обучение
                        - Аналитика
                        - Маркетинг и реклама
                        - Автомобильные технологии
                        - Сельское хозяйство и фермеры
                        - Космические технологии
                        - Искусство
                        - Наука
                        - Ювелирная индустрия
                        - Мобильные приложения
                        - Разработка программного обеспечения на заказ
                        - Большие данные
                        - Блокчейн
                        - Бытовая электроника
                        - Консалтинг
                        - Компьютеры
                        - Потребительские товары
                        - Информационная безопасность
                        - Строительство
                        - Облачные вычисления
                        - Медиа
                        - Доставка
                        - Беспилотники
                        - Базы данных
                        - Платформы для разработки
                        - Электронные технологии
                        - Государство
                        - Туристическая индустрия
                        - Тесты и измерения
                        - Электронная коммерция, маркетплейсы
                        - Аукционы
                        - Торговые платформы
                        - Доски объявлений
                        - Электронные каталоги
                        - Энергия
                        - Мероприятия
                        - Электронное обучение
                        - Генетика
                        - Геймификация
                        - Домашние сервисы
                        - Спорт
                        - Энергосбережение
                        - Аренда
                        - Найм персонала
                        - Фитнес
                        - Мебель
                        - Декор
                        - Игровые технологии
                        - Дизайн
                        - Зеленые технологии
                        - Игорная индустрия
                        - Подарки
                        - Здоровье и медицина
                        - Умный дом
                        - Образ жизни
                        - Интернет вещей
                        - Инфраструктура
                        - Ювелирная индустрия
                        - Юридическая индустрия
                        - Билеты
                        - SaaS
                        - Программное обеспечение
                        - Логистика
                        - Общественные организации
                        - Рестораны и общепит
                        - Компьютерные сети
                        - Ритейл-технологии
                        - Полезные ископаемые
                        - Навигация
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Программист
                        - Можете работать:
                            - Программистом
                            - Тестировщиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Системный аналитик
                            - DevOps
                            - Проджект-менеджер
                            - Тестировщик
                            - Аналитик
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Системным аналитиком
                            - Тестировщиком
                    - 3 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Системный аналитик
                            - DevOps
                            - Проджект-менеджер
                            - Тестировщик
                            - Аналитик
                            - Продакт-менеджер
                            - ML/DS
                            - СТО
                            - Team Lead
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Системным аналитиком
                            - Тестировщиком
                            - DevOps
                            - ML/DS
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Умеете структурировать информацию
                    - Не терпите беспорядок
                    - Последовательны
                    - Понимаете, как строятся процессы, шаг за шагом
                    - Вдумчивы и внимательны к деталям
                    - Нравится решать прикладные задачи, связанные с реальным миром
                    - Нравится автоматизировать процессы вокруг себя
                    - В беспорядочном наборе информации видите последовательность
                    - Умеете выстраивать структуру
                - ****************************************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике:****************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Дискретная математика
                    - Тестирование
                    - Базы данных
                    - Проектирование ПО
                    - Контроль версий
                    - Знакомство с выбранным языком программирования
                    - Процедурное программирование
                    
                    ********************Языки программирования:********************
                    
                    - Java
                    - Python
                    - JavaScript
                    - C#; C++
                    - PHP
                    - SQL
                    - HTML
            - **Тестировщик**
                
                Проверяет программное обеспечение с помощью тестов, чтобы выявить ошибки и передать на исправление разработчикам.
                
                ****************************************************Конечный результат работы:****************************************************
                
                Переданные в отдел разработки ошибки, учет которых улучшит работу программного обеспечения.
                
                ****************************************************Какие бывают тестировщики:****************************************************
                
                - Тестирование вручную (Manual QA)
                - Автоматизированное тестирование (Automation QA)
                
                **********************Тестировать можно все, что угодно:**********************
                
                - Оборудование
                - Процессы
                - Программы и приложения
                - Мнения (с помощью опросов)
                - и многое-многое другое
                
                Задачи тестировщика меняются в зависимости от отрасли.
                
                ****************************Примеры задач:****************************
                
                - Тестирование продукта
                    - Поиск ошибок в продукте, гипотезе, оборудовании
                    - Разработка методов тестирования
                    - Написание сценариев тестирования
                    - Реализация сценариев тестирования
                - При обнаружении ошибок
                    - Передача данных об ошибках
                    - Документирование найденных ошибок
                - Анализ
                    - Классификация ошибок и внесение их в базу данных
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Тестировщик
                        - Можете работать:
                            - Тестировщиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - Тестировщик
                            - Аналитик
                        - Можете работать:
                            - QA-Automation
                            - Аналитиком
                            - Тестировщиком
                    - 3 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - QA-Automation
                            - Аналитик
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Тестировщиком
                            - QA-Automation
                - ********************************************************Специальность для вас, если:********************************************************
                    - Нравится выискивать ошибки и уязвимости
                    - Интересно смотреть на ИТ-продукт со всех сторон
                    - Интересно продумывать сценарии пользователя
                    - Нравится улучшать продукт своими руками
                    - Интересно погружаться в продукты и изучать их изнутри
                    - У вас аналитический склад ума
                    - Вы усидчивы и внимательны
                    - У вас системный подход к решению проблем
                    - Интересно смотреть на одно ПО с разных точек зрения
                    - Любопытны
                    - Смотрите на работу критично
                - ************************************************************************************************************Технологии с которыми вы познакомитесь на Разработчике************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Ручное тестирование
                    - Автоматическое тестирование
                    - Локализация дефектов
                    - Тестирование веб-приложений
                    - Тест-кейсы
                    - Тест-менеджмент
                    - Тест-аналитика
                    
                    ********************************************************Языки программирования и ОС:********************************************************
                    
                    - Linux
                    - CSS
                    - HTML
                    - SQL
                    - Java
            - **Аналитик**
                
                Собирает и обрабатывает информацию, формирует отчеты и помогает бизнесу принимать взвешенные решения.
                
                ****************************************************Конечный результат работы:****************************************************
                
                - Свод актуальных данных, позволяющий ставить конкретные задачи по созданию продукта.
                
                **********************************************Какие бывают аналитики:**********************************************
                
                - Бизнес-аналитик
                - Маркетинговый аналитик
                - Финансовый аналитик
                - Продуктовый аналитик
                - Веб-аналитик
                - И многие другие
                
                **********************************Деление по видам и типам:**********************************
                
                - ETL-аналитик
                - BI-аналитик
                - Аналитик
                - Аналитик Big Data
                - Data-инженер
                - ETL-разработчик
                - Архитектор данных
                
                ****************************************************************************Аналитик, когда пересекается с программированием:****************************************************************************
                
                - Искусственный интеллект
                - Data Science
                - Machine Learning
                - Нейронные сети
                
                ************************Среды задач:************************
                
                - Визуализация данных в Power BI
                - Подготовка отчетов в различных форматах
                - Работа с базами данных. Создание запроса в SQL
                - Создание инфраструктуры хранения данных
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Аналитик
                        - Можете работать:
                            - Младшим аналитиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Программистом
                            - Тестировщиком
                            - ML/DS
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Аналитиком
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Обладаете критическим мышлением
                    - Замечаете ошибки других
                    - Умеете и любите работать с большим объемом информации
                    - Ищете закономерности, наблюдая за миром
                    - Перед тем, как взяться за задачу, сначала проводите анализ
                    - Внимательны к мелочам
                    - Умеете из большого объема информации достать суть
                    - Способы сделать убедительный вывод на основе анализа
                - ********************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике:********************************************************************************************
                    - Базы данных
                    - Unit-экономика
                    - Google Analytics
                    - Яндекс.Метрика
                    - Flowchart
                    - Excel
                    - A/B-тесты
                    - task-трекинг
                    - SQL
                    - Python
            - **Проджект-менеджер**
                
                Отвечает за процессы, касающиеся организации рабочего процесса ИТ-проекта
                
                **************************************Конечный результат:**************************************
                
                - Организованная деятельность внутри команды и вовремя сданные задачи
                
                ************************************Какие бывают Проджект-менеджеры:************************************
                
                - Общий менеджер
                Выполнение основных задач компании
                - Проектный менеджер
                Обеспечение результатов и качества конкретного проекта
                - Менеджер в ИТ
                Создание качественного ИТ-продукта
                - ************************************************************************Какими проектами руководят в Digital************************************************************************
                    - POS-терминалы
                    - Digital ART
                    - Digital гаджеты
                    - Компьютеры и планшеты
                    - Мобильные приложения
                    - Смартфоны
                    - Социальные сети
                    - Локальные сети
                    - Веб-сайты
                    - Цифровое телевидение
                    - Игровые консоли
                    - Оффлайн-магазины
                    - Интерактивные экраны
                    - Терминалы самообслуживания
                - **********************Среды задач**********************
                    - ************************Task-трекеры************************
                        - Мегаплан
                        - Notion
                        - Slack
                        - Youtrack
                        - Trello
                        - Jira
                        - Microsoft Teams
                        - Microsoft Project
                    - **********************CRM-системы**********************
                        - amoCRM
                        - SAP CRM
                        - Битрикс24
                        - Мегаплан
                    - **********************************Системы аналитики**********************************
                        - Google Аналитика
                        - AppMetrica
                        - Google AdWords
                        - Яндекс.Метрика
                - ****************************************Какие задачи решает?****************************************
                    - Регулярно проводит планирование, оценку задач и их согласование
                    - Делает стоимость и сроки изменений разумными
                    - Достигает цели в установленные сроки и в рамках ресурсов
                    - Доносит до разработки продуктовую цель
                    - Помогает сформировать у заказчика реалистичные ожидания
                    - Устраняет конфликт ожиданий между бизнес-заказчиком и программистом
                    - Ведет проекты с учетом времени, задач, приоритетов и ресурсов
                    - Задает руководящий вектор проекту и проектному офису
                    - Определяет приоритеты по задачам
                    - Прорабатывает список задач с проектной командой
                    - Ставит задачи другим сотрудникам в команде
                    - Уточняет и согласовывает требования
                    - Контролирует исполнение
                    - Несет ответственность за результат
                    - Работает с изменениями и рисками
                    - Готовит набор документов по стандартам
                    - Пишет отчеты для заказчика
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Проджект-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Любите общаться с людьми, легко идете на контакт
                    - Умеете вести переговоры
                    - Системно мыслите
                    - Любите играть в стратегии
                    - У вас развиты организационные способности
                    - Нравится видеть результаты работы в действии
                    - Интересно ставить задачи и контролировать их выполнение
                - **************************************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике**************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Управление командой
                    - Стандарты менеджмента
                    - Основы программирования
                    - Веб-программирование
                    - Составление проектной документации
                    - Контроль версий
                    
                    ****************************************Программы и сервисы:****************************************
                    
                    - Notion
                    - Trello
                    - Jira
                    - Confluence
                    - Kanban
                    - Scrum
            - **Продакт-менеджер**
                
                Администрирует процесс создания продукта от генерации идеи до ее реализации и выхода на рынок.
                
                **************************************Конечный результат:**************************************
                
                - ИТ-продукт, готовый к продаже и пользованию
                - ****************************************Какие задачи решает:****************************************
                    - Изучает рынок, чтобы создать востребованный продукт
                    - Знает все о конкурентах, чтобы опередить их
                    - Управляет ценностью продукта. Делает его лучше, чтобы подороже продать и больше заработать
                    - Управляет жизненным циклом продукта.
                    Руководит процессами продукта: от создания до реализации и улучшения
                    - Развивает каналы продаж
                    Помогает выстраивать стратегии по маркетингу и продвижению продукта
                    - Анализирует эффективность внедрений
                    Следит за тем, чтобы трудозатраты на выполнение задач окупались
                    - Управляет командой
                    Критический взгляд и применение методологий гибкой разработки в работе разработчиков и дизайнеров
                    - Управляет финансовыми ресурсами
                    Решает, сколько и каких ресурсов требует доработка и улучшение продукта. 
                    Осуществляет расчеты с командой
                    - Разрабатывает стратегию управления продуктом
                - **********************Среды задач**********************
                    - ************************Task-трекеры************************
                        - Мегаплан
                        - Notion
                        - Slack
                        - Youtrack
                        - Trello
                        - Jira
                        - Microsoft Teams
                        - Microsoft Project
                    - **********************CRM-системы**********************
                        - amoCRM
                        - SAP CRM
                        - Битрикс24
                        - Мегаплан
                    - **********************************Системы аналитики**********************************
                        - Google Аналитика
                        - AppMetrica
                        - Google AdWords
                        - Яндекс.Метрика
                    - ************************************************************************************************************Сервисы протоколирования, планирования, анализа данных************************************************************************************************************
                        - Miro
                        - Webflow
                        - Google Sheets
                        - Guide
                        - Figma
                        - Tilda
                        - Excel
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Продакт-менеджер
                        - Можете работать:
                            - Продакт-менеджером
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Хотите создавать ИТ-продукты от идеи до запуска
                    - Умеете смотреть на продукт глазами клиента
                    - Легко идете на контакт с людьми
                    - Обладаете аналитическим мышлением
                    - Интересно ставить задачи и контролировать их выполнение
                    - Хотите развивать креативные идеи
                    - Интересно исследовать рынок и работу конкурентов
                - ************Технологии, с которыми вы познакомитесь на Разработчике:************
                    
                    **********Темы:**********
                    
                    - Unit-экономика
                    - Привлечение инвестиций
                    - Финансы
                    - Бизнес-кейсы
                    - Просчет бизнес-моделей
                    - Аналитика
                    - Тестирование гипотез
                    - Управление командой
                    - Основы программирования
                    
                    ****************************************Программы и сервисы:****************************************
                    
                    - Figma
                    - Trello
                    - Notion
                    - Jira
                    - Tilda
    - **********************Факультатив**********************
        - [Востребованная профессия. Как выбрать востребованную профессию в ИТ?](https://www.youtube.com/watch?v=Z74XmSGHfiM) ************145 мин************
        - **********************Тестировщик**********************
            
            
        - ********************************Продакт-менеджер********************************
            - Минусы
                - Постоянные переработки
                - Повышенная нагрузка и стресс
                - Повышенные риски выгорания
            - Плюсы
                - Всегда интересно
                - Понимание, как создать продукт, продать его и масштабировать бизнес
                - Перспектива роста не ограничена
    - ************Анкета************
        - **Что будет хорошо, если я стану программистом?**
            1. Постоянная умственная работа
            2. Возможность работать удаленно из любой точки мира
            3. Высокий спрос на рынке труда
            4. Доход выше среднего
            5. Мое оборудование будет постоянно апгрейдиться
            6. Сам планирую свой график
            7. Прокачка Самодисциплины
        - ****************************************************************************************Что будет плохо, если я стану программистом?****************************************************************************************
            1. Недостаток свободного времени (-)
            2. Регулярные затраты на апгрейд оборудования (-)
            3. Ненормированный график (-)
        - ************************************************************************************Что будет хорошо, если я стану аналитиком?************************************************************************************
            1. Навыки работы с большим массивом данных
            2. Нормированный график и прозрачный функционал специальности
            3. Доход выше среднего
        - ************************Что будет плохо, если я стану аналитиком?************************
            1. Довольно рутинная работа, где креатив сведен к минимуму
            2. Высокая степень ответственности за предоставленные данные
        - **************Что будет хорошо, если я стану тестировщиком?**************
            1. Возможность быть первым, кто тестирует интересный именно вам продукт. 
            2. Причастность к масштабным проектам.
            3. Экспертная позиция в доведении продукта до совершенства.
            4. Можно работать удаленно
            5. Есть возможность найти работу, за рубежом (в Китае)
        - ****************************************************************************************Что будет плохо, если я стану тестировщиком?****************************************************************************************
            1. Монотонные рабочие задачи
            2. Довольно рутинная работа, где креатив сведен к минимуму
            3. Работа с продуктом, созданным другими специалистами
            4. Не сильно большие деньги в сравнении с остальными ИТ-специальностями
        - ************************************Что будет хорошо, если я стану проджект-менеджером?************************************
            1. Причастность к масштабным проектам
            2. Разделение ответственности за результат
            3. Регулярная коммуникация и нетворкинг
        - Ч****************************то будет плохо, если я стану проджект-менеджером?****************************
            1. Много времени уходит на совещания, постановку и контроль исполнения задач
            2. Разделение ответственности за результат
        - ************************************Что будет хорошо, если я стану продакт-менеджером?************************************
            1. Разработка продуктов, отвечающих запросам потребителей, отрасли, рынка
            2. Непрерывное развитие и творческая реализация
        - Ч****************************то будет плохо, если я стану продакт-менеджером?****************************
            1. Высокая степень ответственности за пользователя, бизнес, команду
            2. Недостаток свободного времени в связи с необходимостью быть постоянно погруженным в тренды и аналитику
        - ****************Определились ли вы уже точно до данного занятия, кем хотите быть?****************
        - ******************************************************************************************************************************Изменилось ли видение того, кем вы хотите быть после этого занятия?******************************************************************************************************************************
        - ********************************************************************************************************Кем бы вы хотели быть еще, кроме того, кого вы уже указали?********************************************************************************************************
            - Программистом
            - Аналитиком
            - Тестировщиком
            - Проджект-менеджером
            - Продакт-менеджером
            - Мне достаточно одной специальности, другие не нужны
            - Еще не определился
            - и др, мне не актуальные
        - ******************************************************************************************Сложно ли вам учиться с точки зрения времени?******************************************************************************************
            
            Очень сложно
            
    - ********************************************************************************Модуль: Итоги блока. Выбор специализации********************************************************************************
        - **Урок 1. [Программист](https://gb.ru/lessons/370809) 17 мин**
            
            ### **Основные тезисы:**
            
            1. Программист — творческая личность. Потому что то, как будет выполнена та или иная техническая задача, зависит от тебя (программиста).
            
            2. Python — мощный язык программирования, с точки зрения его применения. Он используется для написания тестов, реализации полноценного веб-приложения или в соревнованиях по созданию искусственного интеллекта для игр.
            
            3. Веб-технологии — это не только создание сайтов, но и магия, происходящая с момента клика по ссылке до отображения сайта на странице.
            
            4. Большинство серверов стоит на операционной системе Linux, поэтому большая часть разработки связана именно с ней.
            
            5. Чтобы собрать программное обеспечение, объектно-ориентированное программирование делит всё на множество маленьких кирпичиков, каждый из которых в дальнейшем можно изменить.
            
            6. Алгоритмы надо знать, чтобы понимать, какой алгоритм подходит для того или иного случая — будь то большой разносортный массив данных или набор повторяющихся элементов, которым требуется сортировка.
            
            7. Обработчики исключений используются, чтобы при возникновении какой-либо ошибки программа знала, что делать.
            
            8. Автоматизированное тестирование часто спасает и помогает разработчику при решении каких-то задач. Без тестирования ни одно программное обеспечение не может жить и развиваться длительное время.
            
            9. SQL — тот язык, на котором программа общается с базой данных. Так отделяется слой хранения данных от слоя обработки данных.
            
            10. Важно уметь читать и составлять ER-диаграммы для более эффективного выполнения задач, поставленных, например, аналитиком.
            
            11. Контейнер в программировании — это маленькая операционная система, где запущен только один главный процесс, например, ваша программа. Это даёт возможность управлять контейнерами и их взаимодействиями, а также составлять целую систему из маленьких частей, которые можно менять и разделять.
            
            12. Архитектура ПО — это совокупность важнейших решений об организации системы. Именно архитектура программного обеспечения больше коррелирует с творчеством.
            
            13. Система контроля версий — неотъемлемая часть разработки на сегодняшний день. Она позволяет выстраивать командную работу и обеспечивает безопасный откат версий программ.
            
            14. CI/CD — инструменты, которые решают проблему доставки ПО на веб-сервер или в магазины, а также помогают запланировать и провести автоматическое тестирование как целого приложения, так и отдельных изменений в его коде.
            
            15. Парадигмы программирования — совокупность идей и понятий, определяющих стиль написания компьютерных программ.
            
            16. Профессия «Программист» — широкий спектр специализаций. Есть фронтенд-разработка, бэкенд-разработка и так далее. Да, вам придётся сделать выбор. Однако находясь в одной специализации, вы сможете глубоко изучить её, а обретя хорошую базу знаний, переключиться на другое направление программирования.
            
            ### **Юрий Секин рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Типичный программист](https://t.me/tproger_official)
            
            2. [Точка входа в программирование](https://t.me/prog_point)
            
            3. [Soft Skillz](https://t.me/soft_skillz)
            
            4. [Книги по программированию](https://t.me/devs_books)
            
            5. [Инструменты программиста](https://t.me/prog_tools)
            
            **Литературу:**
            
            1. [«Паттерны проектирования» Эрик Фримен, Элизабет Фримен](https://clck.ru/sLP5L)
            
            2. [«Чистый код» Роберт Мартин](https://www.labirint.ru/books/642466)
            
            3. [«Совершенный код. Мастер-класс» Стив Макконнелл](https://www.labirint.ru/books/272529)
            
            4. [«Алгоритмы: построение и анализ» Томас Кормен, Чарльз Лейзерсон](https://vk.com/wall-54530371_2325)
            
            5. [«Искусство программирования» (все тома) Дональд Кнут](https://vk.com/wall-54530371_113285)
            
            6. [«Сколько стоит программный проект» Стив Макконнелл](https://clck.ru/sLPQp)
            
            7. [«Эмоциональный интеллект» Дэниел Гоулман](https://www.labirint.ru/books/788316)
            
            8. [«Человеческий фактор: успешные проекты и команды» Том Демарко](https://clck.ru/sLPTD)
            
            9. [«Психбольница в руках пациентов» Алан Купер](https://clck.ru/epuT3)
            
            **Сайты:**
            
            1. [HTML Academy](https://htmlacademy.ru/)
            
            2. [Code Basics](https://ru.code-basics.com/)
            
            3. [Coding Game](https://www.codingame.com/start)
            
            4. [Codecademy](https://www.codecademy.com/)
            
            5. [Scrimba](https://scrimba.com/)
            
            6. [freeCodeCamp](https://www.freecodecamp.org/)
            
            **Тренажёры:**
            
            1. [Tproger](https://tproger.ru/)
            
            2. [Тренировки по алгоритмам](https://yandex.ru/yaintern/algorithm-training)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 2. [Тестировщик](https://gb.ru/lessons/370810) 06 мин**
            
            ### **Основные тезисы:**
            
            1. Специалист по тестированию занимается поиском ошибок путём моделирования ситуаций, которые могут возникнуть у пользователя или у других программ и приложений, работающих с тестированием приложения. Задача тестировщика — найти ошибки и передать их в команду разработки для улучшения продукта.
            
            2. Python — один из самых популярных языков программирования с простым и понятным синтаксисом. На нём вы сможете создавать приложения практически на любых платформах и решать множество других задач.
            
            3. Объектно-ориентированное программирование (ООП) — один из наиболее популярных подходов к разработке программного обеспечения. Применяя его, программу делят на уникальные блоки, которые называются объектами. Объекты имеют аналоги в реальном мире — например, человек-пользователь. Данные внутри называются свойствами, а функции — методами.
            
            4. Язык Java — инструмент для решения задач по принципам ООП и написания программ в стиле ООП.
            
            5. Тестирование — процесс проверки программного обеспечения на соответствие между реальным поведением программы и её ожидаемым поведением. Используется, чтобы проверить работоспособность программы и исправить найденные ошибки.
            
            6. Тест-аналитика — анализ продукта перед тестированием: определение критериев качества, целей тестирования; создание тестовых случаев в соответствии с критериями качества и целями тестирования.
            
            7. Техники тест-дизайна применяются для составления чек-листов и тест-кейсов, а также для тестирования по пользовательским сценариям.
            
            8. Обработчики исключений используются, чтобы научить программу правильно обрабатывать критические ошибки.
            
            9. Чаще юнит-тесты пишут программисты, а не тестировщики. Программистам надо уметь работать с юнит-тестами, на уровне «умею писать», в то время как тестировщикам нужна теоретическая база и понимание, что это.
            
            10. Около 90% серверов стоят на операционной системе Linux, поэтому большая часть разработки связана именно с ней.
            
            11. API — программный интерфейс приложения, набор компонентов, посредством которых ИТ-продукт может взаимодействовать с другим ИТ-продуктом. Тестирование API даёт проверить, соответствует ли ПО ожиданиям, с точки зрения надёжности, производительности и безопасности.
            
            12. Диаграммы состояний позволяют описать поведение отдельно взятого объекта. Используются для описания последовательности переходов объекта из одного состояния в другое. Диаграммы состояний показывают все возможные состояния, в которых может находиться объект, а также процесс смены состояний в результате внешнего влияния.
            
            13. Тестирование веб-приложений — процесс проверки веб-приложений на ошибки в работе с помощью сценариев тестирования, имитирующих действия пользователей.
            
            14. Тестирование мобильных приложений — процесс проверки мобильных приложений на ошибки в работе путём создания искусственных сценариев, имитирующих действия пользователей.
            
            ### **Дмитрий Криницын рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Серьёзный тестировщик](https://t.me/serious_tester)
            
            2. [Тестировщик от бога](https://t.me/godoftesting)
            
            3. [QA — Automation](https://t.me/qa_automation)
            
            **Литературу:**
            
            1. [«Программист-прагматик. Путь от подмастерья к мастеру» Эндрю Хант, Дэвид Томас](https://clck.ru/sLT9Q)
            
            2. [«Выразительный JavaScript. Современное веб-программирование» Марейн Хавербеке](https://vk.com/wall-51126445_40916)
            
            3. [«Архитектура компьютера», Эндрю Таненбаум](https://clck.ru/sLTKT)
            
            4. [«Рефакторинг Улучшение существующего кода» Мартин Фаулер](https://www.labirint.ru/books/601754)
            
            5. [«Эффективная работа с унаследованным кодом» Майкл Физерс](https://www.labirint.ru/books/231685)
            
            6. [«Head First. Паттерны проектирования» Эрик Фримен, Берт Бейтс, Кэти Сьерра, Элизабет Робсон](https://www.labirint.ru/books/632960)
            
            7. [«Код. Тайный язык информатики» Чарльз Петцольд](https://clck.ru/sLTT9)
            
            8. [«Введение в компьютерные науки» Гленн Брукшир, Деннис Брилов](https://www.labirint.ru/books/720522)
            
            9. [«Грокаем алгоритмы. Иллюстрированное пособие для программистов и любопытствующих» Адитья Бхаргава](https://clck.ru/sLTXv)
            
            10. [«Непрерывное развёртывание ПО» Джез Хамбл, Дейвид Фарли](https://www.labirint.ru/books/534957)
            
            11. [«Принципы юнит-тестирования» Хориков Владимир](https://clck.ru/sLTZP)
            
            12. [«Тестирование программного обеспечения. Базовый курс» Станислав Куликов](https://svyatoslav.biz/software_testing_book)
            
            13. [«Тестирование Дот Ком» Роман Савин](https://clck.ru/sLTnF)
            
            14. [«Тестирование программного обеспечения» Канер Сэм, Фолк Джек, Нгуен Енг Кек](https://clck.ru/sLTzk)
            
            15. [«Тестирование черного ящика» Борис Бейзер](https://clck.ru/sLwgv)
            
            16. [«Искусство тестирования программ» Гленфорд Майерс, Том Баджетт, Кори Сандлер](https://clck.ru/sLTtD)
            
            17. [«Ключевые процессы тестирования» Рекс Блэк](https://clck.ru/sLTs6)
            
            18. [«Гибкое тестирование» Лиза Криспин, Джанет Грегори](https://clck.ru/sLwko)
            
            19. [«Автоматизированное тестирование программного обеспечения» Элфрид Дастин, Джефф Рэшка, Джон Пол](https://www.chitai-gorod.ru/catalog/book/1175642)
            
            20. [«Как тестируют в Google» Арбон Джейсон, Каролло Джефф, Уиттакер Джеймс](https://clck.ru/sLTwn)
            
            21. [«Дневник охотника за ошибками. Путешествие через джунгли проблем безопасности программного обеспечения» Тобиас Клейн](https://clck.ru/sLwnh)
            
            22. [«Software Testing» Ron Patton](https://www.amazon.com/Software-Testing-Ron-Patton/dp/0672327988)
            
            23. [«Agile-тестирование. Обучающий курс для всей команды» Джанет Грегори, Лайза Криспин](https://www.mann-ivanov-ferber.ru/books/agile-testirovanie)
            
            24. [«Быстрое тестирование» Роберт Калбертсон, Крис Браун, Гэри Кобб](https://ru.bookmate.com/books/V0eiYpnv)
            
            **Видео:**
            
            1. [Alexei Barantsev - YouTube](https://www.youtube.com/channel/UCVMFyEVvaBDQ3PrExtCH0uw)
            
            2. [QAGuild - YouTube](https://www.youtube.com/channel/UCHtyBZ2XbtsRmNiAxh48RGg)
            
            3. [Heisenbug](https://www.youtube.com/channel/UCX6fjZa167tSy_4ryTLcOBw)
            
            4. [iTechArt - YouTube](https://www.youtube.com/channel/UC5f8qKFSxMcxpIlc29w9zJQ)
            
            **Сайты:**
            
            1. [Software-Testing.Ru](https://software-testing.ru/)
            
            2. [Gcoder](https://gcoder.ru/category/study/qa)
            
            3. [Автоматизация тестирования с помощью Selenium и Python · Stepik](https://stepik.org/course/575/promo)
            
            4. [ISTQB Foundation Level Certification – The Definitive Guide](http://tryqa.com/istqb-certification-the-definitive-guide)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 3. [Аналитик](https://gb.ru/lessons/370811) 04 мин**
            
            ### **Основные тезисы:**
            
            1. Аналитик — это специалист, который собирает и обрабатывает информацию, формирует отчёты и прогнозы. Главная задача аналитика — подготовить данные, которые помогут бизнесу принять взвешенное решение по тому или иному вопросу.
            
            2. Agile, SCRUM, Канбан и другие гибкие методологии — технологии и инструменты управления проектами, которые используются для построения эффективного взаимодействия всех членов команды или рабочей группы, постановки задач и реализации целей проекта.
            
            3. Веб-технологии — это не только создание сайтов, но и техническая сторона работы интернета, облачные хранилища, где физически хранятся файлы, а также фронтенд, бэкенд.
            
            4. Python — один из самых популярных языков программирования с простым и понятным синтаксисом. На нём вы сможете создавать приложения практически на любых платформах и решать множество других задач.
            
            5. Таблицы — основной инструмент работы аналитика. В них удобно собирать, обрабатывать и анализировать данные, а также визуализировать информацию.
            
            6. Business Intelligence (BI) — это бизнес-аналитика. Она включает в себя визуализацию, а также BI-системы, такие как Power BI.
            
            7. Язык Python имеет специализированные библиотека, которые используются для упрощения работы аналитиков.
            
            8. Навыки, полученные после изучения специализации «Аналитик», пригодятся не только в работе аналитика, но и в других сферах — например, в продакт- и проджект-менеджменте.
            
            ### **Андрей Вельгушев рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [LEFT JOIN](https://t.me/leftjoin)
            
            2. [Дашбордец](https://t.me/dashboardets)
            
            3. [Дата-сторителлинг](https://t.me/data_publication)
            
            4. [Бизнес-анализ & IT](https://t.me/bamrus)
            
            5. [Reveal the Data](https://t.me/revealthedata)
            
            **Литературу:**
            
            1. [«Базы данных» С.М Диго](https://clck.ru/sCwUd)
            
            2. [«Путь аналитика. Практическое руководство IT-специалиста» Прерва А., Иванова В.](https://clck.ru/sM4uy)
            
            3. [«Разработка требований к программному обеспечению» Карл Вигерс](https://clck.ru/sM4x4)
            
            4. [«Азбука системного мышления» Донелли Медоуз](https://www.mann-ivanov-ferber.ru/books/azbuka-sistemnogo-myishleniya)
            
            5. [«Графики, которые убеждают всех» Богачев А.](https://clck.ru/sM53N)
            
            6. [«Системное мышление» Левенчук А.](https://clck.ru/sM56F)
            
            7. [«Как измерить все, что угодно. Оценка стоимости нематериального в бизнесе» Дуглас У. Хаббард](https://clck.ru/sM56p)
            
            8. [«Голая статистика» Чарльз Уилан](https://clck.ru/sM58Y)
            
            9. [«DAMA-DMBOK: Data Management Body of Knowledge» (2-е издание)](https://www.labirint.ru/books/732389)
            
            10. [«Аналитическая культура. От сбора данных до бизнес-результатов» Карл Андерсон](https://www.mann-ivanov-ferber.ru/books/analiticheskaya-kultura)
            
            11. [«Азбука аналитики» Ю. Курносов](https://clck.ru/sM5Bi)
            
            12. [«Веб-аналитика 2.0 на практике» А. Кошик](https://clck.ru/sM5CG)
            
            13. [«Lean Analytics» Алистер Кролл](https://clck.ru/sM5EE)
            
            14. [«Искусство статистики» Дэвид Шпигельхалтер](https://www.mann-ivanov-ferber.ru/books/iskusstvo-statistiki)
            
            15. [«Google Таблицы. Это просто Евгений Намоконов» Ренат Шагабутдинов](https://www.mann-ivanov-ferber.ru/books/google-tabliczyi-eto-prosto)
            
            16. [«Маркетинг от потребителя» Роджер Бест](https://www.mann-ivanov-ferber.ru/books/sse/mbmanagement)
            
            17. [«Данные: визуализируй, расскажи, используй» Коул Нассбаумер Нафлик](https://www.mann-ivanov-ferber.ru/books/dannye-vizualiziruj-rasskazhi-ispolzuj)
            
            18. [«Измеряйте самое важное» Джон Дорр](https://www.mann-ivanov-ferber.ru/books/izmeryajte-samoe-vazhnoe)
            
            19. [«Почему. Руководство по поиску причин и принятию решений» Саманта Клейнберг](https://www.mann-ivanov-ferber.ru/books/pochemu-rukovodstvo)
            
            20. [«Управление на основе данных» Тим Филлипс](https://www.mann-ivanov-ferber.ru/books/upravlenie-na-osnove-dannyix)
            
            21. [«Говори на языке диаграмм» Джин Желязны](https://www.mann-ivanov-ferber.ru/books/mif/026)
            
            22. [«Визуализация данных при помощи дашбордов и отчетов в Excel» Дик Куслейка](https://clck.ru/sLsZt)
            
            23. [«Now You see it: Simple visualization techniques for quantitative analysis» Стивен Фью](https://clck.ru/sLsfg)
            
            24. [«Искусство визуализации в бизнесе» Нейтан Яу](https://clck.ru/sLsh6)
            
            25. [«Анализ данных в Tableau на практике, 100 советов, уроков и стратегий от мастера Дзен в Tableau» Райан Слипер](https://clck.ru/sLspc)
            
            **Сайты:**
            
            1. [Crayon. Blog](https://bigdata-madesimple.com/)
            
            2. [Database Trends and Applications](https://www.dbta.com/)
            
            3. [Tableau. Blog](https://www.tableau.com/about/blog)
            
            4. [Capterra](https://blog.capterra.com/articles/business-intelligence)
            
            5. [Data Talks](https://datatalks.rt.ru/)
            
            6. [Open Data Science](https://ods.ai/)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 4. [Проджект-менеджер](https://gb.ru/lessons/370812) 20 мин**
            
            ### **Основные тезисы:**
            
            1. В большинстве компаний проджект-менеджер — связующее звено между всеми подразделениями, куда входят аналитики, дизайнеры, тестировщики, программисты, заказчики, подрядчики.
            
            2. Хороший проджект-менеджер определяется незаметностью своей деятельности. Его задача — обеспечить стабильность работы всей команды. А если он работает плохо, то сразу возникает множество ошибок и проблем, связанных с коммуникацией и сбором требований, реализуется не тот продукт, который ожидает заказчик.
            
            3. На курсе «Проджект-менеджер» вы освоите те компетенции, которые потребуются, чтобы довести продукт до релиза и конечного пользователя, а правильно сформированное ожидание заказчика превратилось во что-то осязаемое и твёрдое.
            
            4. Python — довольно лёгкий язык для входа в профессию и понимания основных концепций программирования. Освоив его, вы сможете говорить на одном языке с разработчиками и предлагать какие-то более подходящие решения задач.
            
            5. Не обязательно быть экспертом в каком-то языке программирования, главное — понять работу алгоритмов и то, как разработчики пишут код. Синтаксис Python как раз позволит это изучить.
            
            6. Agile представляет собой семейство гибких методологий, куда входят SCRUM, Канбан и прочие. Это также набор принципов и правил по работе с продуктом.
            
            7. Гибкие методологии пришли на смену традиционной системе управления проектами — Waterfall, когда разные зоны выполняются по очереди. Например, сначала идёт проектирование, затем — дизайн, разработка, тестирование и т. д.
            
            8. От метода Waterfall сейчас отказываются, так как ожидаемый и реальный результаты почти всегда не сходятся, на это затрачивается много времени, а проекты в итоге получаются массивными, неповоротливыми и негибкими.
            
            9. Тема «Веб-технологии» отвечает на вопросы, что такое интернет, как работают хостинги, сайты и домены, а также как собираются и рендерятся страницы.
            
            10. Жизненный цикл проекта — это некий набор этапов, который повторяется из раза в раз даже на базе одной компании. В рамках жизненного цикла проекта есть пять основных этапов — инициирование, планирование, исполнение, контроль и завершение проекта.
            
            11. Жизненный цикл продукта — это последовательность этапов, через которые проходит каждый выпущенный товар с момента своего появления на рынке до момента ухода с рынка. Зачастую продукт формируется исходя из какой-то проблемы и боли пользователя.
            
            12. Технология разработки в ИТ — процесс создания продукта в ИТ с нуля до готового продукта. В зависимости от типа вашей компании, будете работать в совершенно разном составе, что также зависит от проекта.
            
            13. Основные этапы жизненного цикла проекта — инициирование и планирование. На этапе инициирования вы обладаете только гипотезой, что конкретно хотите сделать. Ваши задачи, как проджекта — создать финансовую модель, понять, сколько примерно будет стоить продукт, как его разрабатывать и каким образом он будет выглядеть. Зачастую это работа в команде, но владеть этими компетенциями надо.
            
            14. Планирование — этап, на котором вы знаете, какой продукт хотите получить. На этом этапе планируется бюджет, сколько человеческого и временного ресурса потребуется, а также определяются реперные точки для формирования того или иного решения.
            
            15. Одна из важных компетенций в работе проджект-менеджера — понимание критического пути. Это последовательность задач, которая влияет на реализацию следующих задач.
            
            16. Финансовый менеджмент — это система управления финансами компании или проектов, направленная на достижение стратегических тактических целей, структурирование расходов, прогнозирование рисков и дохода. Важно понимать, насколько эффективно работает команда и сколько стоит ваше подразделение или модуль.
            
            17. MVP — минимально жизнеспособный продукт — тестовая версия товара, услуги или сервиса с минимальным набором функций, которая несёт ценность для конечного потребителя. Это концепция, с которой вам придётся работать постоянно, так как продукту зачастую нужно проверить какую-то тестовую гипотезу в сжатые сроки, потому что разработка стоит дорого, а выполнить задачу надо быстро.
            
            18. Зачастую самые классные ИТ-продукты создаются по основной концепции MVP. Сначала делается минимальная версия, она тестируется на пользователе, далее пробник идёт в массовую разработку, где наращиваются различные дополнения.
            
            19. Диаграммы состояний помогают описать поведение отдельно взятого объекта. Используются для описания последовательности переходов объекта из одного состояния в другое.
            
            20. Работа проектного менеджера сопряжена с разного рода коммуникациями. Поэтому важно быть спокойным, уметь думать на шаг вперёд и быть тем, к кому можно обратиться за помощью.
            
            21. Soft skills для проектного менеджера — одна из важнейших компетенций в рамках визуальной успешности работы. Но есть и трудности, связанные с умением отказать заказчику, например, в построении космолёта за месяц, а также с поддержанием эмоционального баланса в работе самой команды.
            
            22. Мониторинг и контроль — важные этапы в жизненном цикле проекта, отвечающие за его реализацию. Этап мониторинга связан со входом в операционные процессы работы команды, с ежедневной коммуникацией с сотрудниками и сверкой с установленными сроками. Контроль — этап, отвечающий за правильное формирование текущего состояния и отчётности — команда работает эффективно, все понимают, что делают.
            
            23. Проджект-менеджер должен быть готов к решению проблем, массово поступающих от коллег из разных отделов. Поэтому коммуникация — один из блоков создания и реализации продуктов.
            
            24. Сервис-менеджмент считается базисом в рамках проектного управления. Вы должны понимать, где и как работают специалисты разных отделов, например, дизайнеры, разработчики, тестировщики, чтобы в сложной ситуации суметь сориентироваться.
            
            25. Проджект-менеджер должен знать, как используются разные онлайн-сервисы для эффективной работы команды.
            
            26. SQL — язык управления базами данных. С его помощью можно извлекать, структурировать и выводить необходимую информацию.
            
            27. Завершение проекта — это заключительная стадия в рамках жизненного цикла проекта. Во время написания документации вы будете проводить рефлексию того, как сработали выстроенные вами процессы, насколько получившийся продукт эффективен и многое другое.
            
            ### **Роман Рыбкин рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [No Flame No Game](https://t.me/proproduct)
            
            2. [UX Horn](https://t.me/uxhorn)
            
            3. [Индекс дятла](https://t.me/dindex)
            
            4. [Менеджер от боженьки](https://t.me/pm_god)
            
            5. [Junior PM](https://t.me/junior_pm)
            
            6. [Project management | IT](https://t.me/pm_and_it)
            
            7. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
            
            8. [PMCLUB — про проекты, продукты и людей](https://t.me/pmclub)
            
            9. [Тимлид Леонид](https://t.me/teamleadleonid)
            
            10. [Владимир Завертайлов | Управление digital-проектами и продуктами](https://t.me/sibirix)
            
            11. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
            
            **Литературу:**
            
            1. [«Deadline», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
            
            2. [«Сделано», Скотт Беркун](https://www.mann-ivanov-ferber.ru/books/sdelano)
            
            3. [«Основы проектного менеджмента», Джозеф Хигни](https://www.mann-ivanov-ferber.ru/books/osnovyi-proektnogo-menedzhmenta)
            
            4. [«Путь scrum-мастера», Зузана Шохова](https://clck.ru/sM5GU)
            
            5. [«Канбан», Дэвид Андерсон](https://www.mann-ivanov-ferber.ru/books/kanban)
            
            6. [«Человеческий фактор: успешные проекты и команды», Том ДеМарко, Тимоти Листер](https://clck.ru/avy4h)
            
            7. [«Цели и ключевые результаты. Полное руководство по внедрению OKR», Пол Нивен и Бен Ламорт](https://www.mann-ivanov-ferber.ru/books/celi-i-klyuchevye-rezultaty)
            
            8. [«Эмоциональный интеллект для менеджеров проектов», Энтони Мерсино](https://www.chitai-gorod.ru/catalog/book/1014639)
            
            9. [«Исследование трендов», Мартин Реймонд](https://www.mann-ivanov-ferber.ru/books/issledovanie-trendov)
            
            10. [«Постигая Agile», Эндрю Стэллман, Дженнифер Грин](https://www.chitai-gorod.ru/catalog/book/1181653)
            
            11. [«Управление продуктом в Scrum», Роман Пихлер](https://www.mann-ivanov-ferber.ru/books/upravlenie-produktom-v-scrum)
            
            12. [«Цель. Процесс непрерывного совершенствования», Элияху Голдратт](https://clck.ru/reQVv)
            
            13. [«Цель-2. Дело не в везении», Элияху Голдратт](https://www.litres.ru/eliyahu-goldratt/cel-2-delo-ne-v-vezenii)
            
            14. [«Как привести дела в порядок», Дэвид Аллен](https://clck.ru/QdGrQ)
            
            15. [«Управление проектами, людьми и собой», Николай Товеровский](https://clck.ru/sM5PC)
            
            16. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
            
            17. [«От хорошего к великому» Джим Коллинз](https://www.mann-ivanov-ferber.ru/books/sse/good-great)
            
            18. [«Путь камикадзе», Эдвард Йордон](https://www.chitai-gorod.ru/catalog/book/1028345)
            
            19. [«Руководство PMBOK + Agile», Хеннер Ширенбер, Мойра Листер, Штефан Кирмсе](https://clck.ru/sM5TS)
            
            20. [«Scrum. Революционный метода управления проектами», Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
            
            21. [«Управление повседневным хаосом», Александр Фридман](https://clck.ru/sM5VC)
            
            22. [«Черная книга менеджера», Слава Панкратов](https://ru.bookmate.com/books/ZlzbUFjl)
            
            **Сайты:**
            
            1. [GoPractice](https://gopractice.ru/)
            
            2. [No Flame No Game](https://nfng.pro/)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок5. [Продакт-менеджер](https://gb.ru/lessons/370813) 51 мин**
            
            ### **Основные тезисы:**
            
            1. Для меня профессия «Продакт-менеджер» не столько специализация, сколько профессиональный путь, основанный на философии того, как смотреть на продукты в целом, понимать их и развивать. На первом месте стоит не работа с языками программирования, а коммуникация с людьми, исследование пользователей, чтобы придумывать новую функциональность для продукта, а также перевод разработчикам требований бизнеса и наоборот.
            
            2. Профессия «Продакт-менеджер» считается наиболее универсальной. Навыки, приобретённые в рамках этой специализации, пригодятся практически в любой компании, даже там, где нет собственных сайтов.
            
            3. Среди программистов наблюдается серьёзный уровень конкуренции за место в компании. Иная ситуация обстоит с продактами. Если вы сильный специалист в отрасли, альтернативы вам не будет.
            
            4. Компания в первую очередь будет ценить вас за отраслевой опыт, доплачивая процент к зарплате. И с этой точки зрения, важно смотреть на свою карьерную траекторию, когда растёте профессионально — как вертикально, так и горизонтально. Например, вчера вы работали продакт-менеджером или стажёром, а сегодня стали руководителем продакт-менеджмента и директором по продукту. Или можете двигаться в разных направлениях в рамках одной сферы.
            
            5. Продакт-менеджер администрирует процесс создания продукта от появления идеи до её реализации и выхода на рынок. Главная задача — создать ИТ-продукт, готовый к продаже и пользованию.
            
            6. При всей свой сложности процесс продакт-менеджмента достаточно известен и изучен. Есть понятные инструменты и технологии, они универсальны. Главное — быть компетентным в той или иной отрасли, чтобы иметь финансовые выгоды.
            
            7. Требуется знать клиентов, конкурентов, а также модели поведения пользователя. Важна и управленческая составляющая профессии, так как коммуницировать с людьми придётся часто.
            
            8. В продакт-менеджменте всегда есть что-то от проджект-менеджера. Например, продакт-менеджер часто ведёт какой-то проект, из-за чего этих специалистов путают.
            
            9. Я всегда считал, что продакт-менеджер — это человек, который делает проекты. Всю его деятельность можно засунуть в проектную, то есть встретиться с проектным треугольником ограничений. Поэтому важно знать, как происходит управление проектами.
            
            10. Так как в последнее время ИТ перешло на гибкие методологии, важно изучить историю, связанную с таким понятием, как Agile, и со всем, что в него входит. Agile — некая философия, в рамках которой действуют не только программисты, но и предприниматели. Эта методология полезна там, где есть управление людьми и взаимодействие с командой.
            
            11. Важно заметить, что продакт-менеджер, работающий в популярной методологии SCRUM, называется Product Owner. Это своеобразная роль в команде, которую с высокой вероятностью займёт продакт-менеджер. Он будет отвечать за финальное решение по продукту, чтобы удовлетворить цели стейкхолдеров. Стейкхолдер — тот, кто заинтересован в развитии продукта и получает от этого прибыль.
            
            12. Одним из важных аспектов продакт-менеджмента служит Customer Development, что подразумевает развитие пользователя. Это «библия» продакт-менеджера, с которой тесно связана Customer Journey Map, юнит-экономика, исследование пользователя, а также такие фреймворки, как Job To Be Done.
            
            13. Стоит особенно обратить внимание на soft skills, так как работа продакт-менеджера подразумевает коммуникацию с людьми и управление ими. Эти навыки позволят общаться с заказчиками, подрядчиками, командой разработки и генеральным директором.
            
            14. Продакт-менеджер — это своеобразный мостик между командой разработчиков и высшим руководством. Поэтому важно знать даже те дисциплины и инструменты, которые, на первый взгляд, кажутся лишними. Например, язык программирования Python.
            
            15. Python — один из самых распространённых языков программирования в мире, а по некоторым рейтингам — самый распространённый. Изучив его, вы сможете общаться с разработчиками и программистами по всему миру, а также решать многие продуктовые задачи.
            
            16. Гибкие методологии (Agile, SCRUM, Канбан) служат для большинства команд программистов и разработчиков основным рабочим процессом. Есть также технологии, отвечающие за принципы планирования фич в продукте.
            
            17. Множество стартапов в ИТ-отрасли связано с вебом. То есть на должности продакт-менеджера вы, так или иначе, будете работать с чем-то, что находится в интернете, используя для этого подходящий язык программирования, например, гипертекстовую разметку HTML.
            
            18. Придётся познакомиться с разными технологическими стеками и «частями» разработки: бэкенд, фронтенд, фулстек.
            
            19. В последнее время стало популярным такое понятие, как развитие ИТ-экосистем. Если вы попадёте в достаточно крупную ИТ-компанию, например, Сбербанк или МТС, то будете не просто разрабатывать сайты и приложения, а смотреть на всё это как на связанные друг с другом элементы, использующие одинаковые базы знаний и архитектуру. Это позволит лучше понимать, что сейчас происходит с веб-технологиями и куда всё движется.
            
            20. Жизненный цикл проекта связан с треугольником ограничений проекта, куда входят ресурсы, необходимое качество, которое надо достигнуть, и дедлайны. Есть даже известная шутка: «Выберите два из трёх: быстро, дёшево и качественно», — которая вышла из жизненного цикла проекта при работе в треугольнике ограничений.
            
            21. Жизненный цикл продукта больше относится к теоретическим дисциплинам. Однако её также важно изучить, чтобы не делать таких ошибок, которые в своё время совершал директор по продукту Kodak, когда компания продолжала развивать, по сути, умирающий продукт в условиях глобальной цифровизации.
            
            22. Так как вы осваиваете профессию «Продакт-менеджера» в рамках сферы ИТ, то зачастую будете разрабатывать ИТ-продукты разной величины.
            
            23. Этот курс позволит вам не только понять, как разрабатывать ИТ-продукты, но и узнать, какие стадии они проходят в ИТ-компаниях. Вы будете заниматься прототипированием, вёрсткой, а также постановкой задач дизайнерам, фронтенд- и бэкенд-разработчикам. Эти действия помогут создать и вывести на рынок новый или доработать уже существующий продукт, повысив его потребительскую ценность.
            
            24. В некотором смысле всё, что связано с бизнес-моделями, считается универсальной дисциплиной для любого продукта.
            
            25. У продакт-менеджеров в дисциплине, связанной с бизнес-моделями, есть своя библия. Например, Александр Остервальдер и Ив Пиньё придумали множество важных методологий рассмотрения, создания и развития бизнес-моделей.
            
            26. Вы познакомитесь с такими инструментами, как Lean Canvas и Business Model Canvas.
            
            27. В процессе изучения специализации «Продакт-менеджер» вам часто будут попадаться не переведённые с английского языка термины. Их много, однако это упростит поиск бесплатного контента в интернете по указанной теме.
            
            28. Всё, что связано с исследованиями (продукта, конкурентов), аналитикой, формированием гипотез роста и их проверкой, считается важным аспектом деятельности продакт-менеджера, который неизбежен в любой компании.
            
            29. HADI-циклы — состояние, когда вы постоянно находитесь в циклическом поиске гипотез роста и их проверке. Всё эти действия направлены на улучшение потребительской ценности продукта.
            
            30. Юнит-экономика — одна из тех дисциплин, которая в целом интересна продакт-менеджеру, но считается довольно побочным продуктом деятельности.
            
            31. За показатели, входящие в любую юнит-экономику продукта, как правило, отвечают другие подразделения. Для них это KPI — key performance indicators — ключевые показатели эффективности. А для продакт-менеджера — показатель того, сходится юнит-экономика или нет.
            
            32. Зачастую продакт-менеджеру не хватает ресурсов, чтобы протестировать свои гипотезы при помощи разработчиков. Поэтому чтобы самостоятельно доказать гипотезу, используется zero-coding, вложенный в конструктор. К zero-coding относится, например, конструктор лендингов.
            
            33. Создание MVP — одна из базовых дисциплин продакт-менеджмента. MVP — Minimal Viable Product — минимально жизнеспособный продукт для пользователя, на котором тестируется большое число гипотез. А для многих предпринимателей это целая философия по созданию стартапа.
            
            34. Диаграммы состояний — достаточно специфичная, но полезная дисциплина для продакт-менеджера, который самостоятельно вручную систематизирует информацию. То есть готовя задание разработчикам, вам необходимо разговаривать с ними на одном языке, а, значит, уметь составлять диаграммы.
            
            35. Диаграммы состояний связаны с созданием блок-схем и таблиц, чтобы описать разработчикам то, что вы от них хотите.
            
            36. Работа продакт-менеджера на 90% состоит из коммуникаций. Поэтому важно развивать определённые навыки, которые в мире принято называть soft skills.
            
            37. К soft skills относится навык презентации, коммуникации, публичных выступлений и лидерства. Их важно развивать самостоятельно и в рамках этого курса.
            
            38. Когда продакт-менеджер тестирует гипотезы или исследует потребителей, он должен знать тот фундамент, который заложен в классическом маркетинге. Всё, что относится к сегментации, позиционированию, изучению клиента и созданию уникального торгового предложения, входит в дисциплину «Основы маркетинга».
            
            39. Знания, полученные на курсе «Основы маркетинга», пригодятся вам для понимания более сложных концепций в продакт-менеджменте. Например, познакомитесь с концепцией развития потребительской ценности в продукте через фреймворк Job to be Done.
            
            40. Введение в продуктовую аналитику — дисциплина, после изучения которой вы научитесь правильно ставить задачи специалисту по аналитике.
            
            41. SQL, или Structured Query Language — это язык поисковых запросов. Курс «Базы данных и SQL» похож на курс по продуктовой аналитике, так как в рамках него вы также научитесь ставить задачи и узнаете, как работают аналитики.
            
            42. Знание баз данных позволит вам правильно проектировать архитектуру ИТ-продукта.
            
            43. В рамках специализации «Продакт-менеджер» вы будете изучать дисциплины, которые могут пригодиться или нет. К последним относятся инструменты для анализа и визуализации данных. Как правило, в компаниях всегда есть специалисты, отвечающие, например, за дизайн, и вам не потребуется самим делать те же презентации.
            
            44. Часто в своей работе продакт-менеджеры используют таск-трекеры. Таск-трекеры — места, где либо вам ставят задачи — заказчики компании, например, из отдела маркетинга или продаж, либо это делаете вы, но для разработчиков.
            
            45. Важно изучить принципы работы тех инструментов, которыми пользуются исполнители поставленной вами задачи. Например, в среде дизайнеров используется Figma или Sketch.
            
            46. Так как работа продакт-менеджера в большей степени связана с коммуникациями, вам обязательно понадобятся такие инструменты, как Slack, Jira, YouTrack, а также их российские аналоги.
            
            47. Вам, как продакт-менеджеру, придётся знать и уметь развивать продукт, используя различные фреймворки. Поэтому для вас уже написаны некие библии — читайте Александра Остервальдера, изучайте людей, которые придумали технологию Job to be Done, произвёдшую революцию в продуктовом мышлении. Это приведёт к успеху вас и бизнес, где вы будете работать продакт-менеджером.
            
            48. Коммуникация, изучение клиентов и трекинг задач — три столпа, на которых строится рабочий день продакт-менеджера. И даже если вы интроверт, это не послужит каким-то барьером для подобной специальности. Можно уйти в уединённое место и спокойно заняться, например, продуктовой аналитикой или проектированием продукта.
            
            49. Мой рабочий день, как директора по продукту, начинается с мониторинга статусов по текущим задачам и просмотра новых. Далее я коммуницирую с исполнителями по поводу пролонгирования сроков и выясняю, по каким причинам это происходит.
            
            50. Часто весь рабочий день посвящается коммуникациям в различных сервисах, типа Zoom, или совещаниям, где придумываются и обосновываются разные фичи по продукту.
            
            51. Нередко приходится делать презентации, чтобы рассказать о том или ином продукте.
            
            52. Я часто выступаю на разных конференциях и форумах. Цель этого — показать развитие бренда компании через донесение благ, которые она даёт.
            
            53. Иногда я работаю с таблицами, чтобы самостоятельно проанализировать какие-то цифры и написать техническое задание программистам и разработчикам. И в каких-то случаях я могу поручить это продакт-менеджеру, находящемуся у меня в подчинении, а где-то — нет. Например, когда надо придумать какую-то сложную архитектуру.
            
            54. Продакт-менеджмент — специализация, где вы освоите язык программирования, позанимаетесь аналитикой и приобретёте коммуникативные навыки. И после окончания обучения перед вами не встанет вопрос о трудоустройстве, так как ваши знания и навыки пригодятся в разных сферах.
            
            ### **Ярослав Карасёв рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Притчи продуктолога](https://t.me/product_proverbs)
            
            2. [Grow Horse](https://t.me/growhorse)
            
            3. [Продукторий Владимира Меркушева](https://t.me/vladimir_merkushev)
            
            4. [Improve Your Product (на украинском языке)](https://t.me/toceo)
            
            5. [Strategic move: стратегия, бизнес-модели, продукты](https://t.me/strategic_move)
            
            6. [Игорь Кузнецов о темных паттернах](https://t.me/brainshare)
            
            7. [Индекс дятла](https://t.me/dindex)
            
            8. [Alexcouncil⚡](https://t.me/alexcouncil)
            
            9. [Fresh Product Manager](https://t.me/FreshProductGo)
            
            10. [Epic Growth — рост продуктов](https://t.me/epicgrowth)
            
            11. [Product Management](https://t.me/ruspm)
            
            12. [FEDOR BORSHEV](https://t.me/pmdaily)
            
            13. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
            
            14. [ProductSense](https://t.me/productsense)
            
            15. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
            
            16. [Analysis Paradisis](https://t.me/analysis_paradisis)
            
            **Литературу:**
            
            1. [«На крючке. Как создавать продукты-хиты», Марти Кэган](https://clck.ru/sM5Y7)
            
            2. [«Построение бизнес-моделей», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5aX)
            
            3. [«Разработка ценностных предложений», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5b3)
            
            4. [«Стратегия голубого океана», В. Чан Ким, Рене Моборн](https://www.mann-ivanov-ferber.ru/books/paperbook/blueoceanstrategy)
            
            5. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
            
            6. [«Поведенческая экономика. Почему люди ведут себя иррационально и как на этом заработать», Дэн Ариели](https://clck.ru/sM5cL)
            
            7. [«Как чашка за чашкой строилась Starbucks», Говард Шульц](https://clck.ru/sM5dN)
            
            8. [«Покупатель на крючке», Нир Эяль и Райан Хувер](https://clck.ru/sM5fT)
            
            9. [«Корпорация гениев. Как управлять командой творческих людей», Эд Кэтмелл](https://www.litres.ru/ed-ketmell/korp-8645061/chitat-onlayn)
            
            10. [«Стартап. Настольная книга основателя», Стив Бланк, Боб Дорф](https://clck.ru/sM5g9)
            
            11. [«Позиционирование: битва за умы», Джек Траут, Эл Райс](https://www.chitai-gorod.ru/catalog/book/1001412)
            
            12. [«Как создать продукт, который купят. Метод Lean Customer Development», Синди Альварес](https://clck.ru/sM5i5)
            
            13. [«Когда кофе и капуста конкуренты», Алан Клемент](https://jobs-to-be-done.ru/)
            
            14. [«Scrum» Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
            
            15. [«Intercom on Product Management», Des Traynor](https://www.intercom.com/resources/books/intercom-product-management)
            
            16. [«Intercom on Jobs-to-be-Done», Des Traynor](https://www.intercom.com/resources/books/intercom-jobs-to-be-done)
            
            17. [«Growth hacks», Aladdin Happy](https://clck.ru/sM5s8)
            
            18. [«Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World with OKRs», Джон Доер](https://clck.ru/sM5un)
            
            19. [«Закон успешных инноваций. Зачем клиент «нанимает» ваш продукт и как знание об этом помогает новым разработкам», Клейтон Кристенсен](https://clck.ru/sM5ux)
            
            20. [«Deadline. Роман об управлении проектами», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
            
            21. [«Jobs To Be Done», Энтони Ульвик](https://jobs-to-be-done.ru/jobs-to-be-done-1)
            
            **Видео:**
            
            1. [20 Years of Product Management in 25 Minutes by Dave Wascha](https://www.youtube.com/watch?v=i69U0lvi89c)
            
            2. [The art of innovation | Guy Kawasaki | TEDxBerkeley](https://www.youtube.com/watch?v=Mtjatz9r-Vc)
            
            3. [Margaret Gould Stewart: How giant websites design for you (and a billion others, too)](https://www.youtube.com/watch?v=quJdL9ggETI)
            
            4. [Epic Growth Conference: Михаил Трутнев (Ultimate Guitar). Повышающий продажи маркетинговый абсурд](https://www.youtube.com/watch?v=1gwGRRGaEMo)
            
            5. [Андрей Хусид (CEO RealtimeBoard). Как построить команду и процессы, ориентированные на быстрый рост](https://www.youtube.com/watch?v=C1U4MD6DPI8)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 6. [Анкета](https://gb.ru/lessons/370814)**

[GeekSpeak_DigitalMaster&Geek 29.08.23](https://www.notion.so/GeekSpeak_DigitalMaster-Geek-29-08-23-aa30243466594a049ded9f22ac2d6e04?pvs=21)

[GeekSpeak_Разработчик](https://www.notion.so/GeekSpeak_-e00605266e27470ead7afc2ffaf56414?pvs=21)

[GeekSpeak_Ученые](https://www.notion.so/GeekSpeak_-fbad24d8cc42402eb5d6c0a997895ecc?pvs=21)

[GeekSpeak_Выпускники](https://www.notion.so/GeekSpeak_-57ae0561f3494bcc8ebfa4f1ca71708b?pvs=21)

[Команда ИТ](https://www.notion.so/c2ba2db575bc4046b7abd1be27e1f544?pvs=21)

### Материалы

- ****************Картинки и файлы****************
    - **Стратегия чтения**
        
        ![Стратегия чтения.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a25d6e31-f5ff-4203-a548-07fdbf7ce4df/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F.png)
        
    - **001_Hello_world**
        
        ![001_Hello_world.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/3a4399c6-8fb2-452e-a3af-c6495b7b65cb/001_Hello_world.jpg)
        
    - **Приветствие пользователя**
        
        ![002_Hello_username.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/2a5e7bae-659a-40b4-8c31-a86d311ff760/002_Hello_username.jpg)
        
    - **************************************Сложение двух чисел. Алгоритм**************************************
        
        ![003_Example.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/e8a50fa5-5f61-4a1f-aded-4c17024c2dd5/003_Example.jpg)
        
    - **Задача про гири. Алгоритмы нахождения максимума и минимума**
        
        ![Задача 1 Гири через Массив.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dbdf8170-2a89-489a-b8dc-f45e51db942f/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D0%93%D0%B8%D1%80%D0%B8_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2.jpg)
        
        ![Задача 1 Гири.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/215cbcec-6096-466e-ab85-32dd5c3e145a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D0%93%D0%B8%D1%80%D0%B8.png)
        
        ![Семинар 1. Задача 2.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6c2dcb8e-b3b2-4a51-acde-e4dbd0cfa4b3/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_2.png)
        
    - **Задача про собаку и двух друзей. Алгоритм**
        
        ![Задача 3 Друзья и собака.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6fdd05bc-1359-482d-94b5-d9a3f4fef4ca/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3_%D0%94%D1%80%D1%83%D0%B7%D1%8C%D1%8F_%D0%B8_%D1%81%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0.png)
        
    - **Сумма элементов массива. Алгоритм**
        
        ![Задача №1 с массивами про чек.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/54e180e1-403b-4968-bdb8-80591a2d9ed5/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%87%D0%B5%D0%BA.jpg)
        
    - **Сумма элементов массива с нечетными индексами. Алгоритм**
        
        ![Задача №2 с массивами про сумму нечетных индексов.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e0e1248d-e154-4a26-a772-2922a7de70b6/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_2_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%81%D1%83%D0%BC%D0%BC%D1%83_%D0%BD%D0%B5%D1%87%D0%B5%D1%82%D0%BD%D1%8B%D1%85_%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%BE%D0%B2.jpg)
        
        ![Задача №3 с массивами про сумму нечетных значений.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dab50576-7300-4f59-bb00-b5686615b57a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%81%D1%83%D0%BC%D0%BC%D1%83_%D0%BD%D0%B5%D1%87%D0%B5%D1%82%D0%BD%D1%8B%D1%85_%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9.jpg)
        
    - **Перевернуть массив и записать его в обратном порядке. Алгоритм**
        
        ![Задача №5 с массивами про переворот и обратный порядок.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6cb513cf-bd0a-4578-a9ed-1269f520645a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_5_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D0%BF%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D1%80%D0%BE%D1%82_%D0%B8_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D1%8B%D0%B9_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D0%BA.jpg)
        
    - **Скалярное произведение векторов. Алгоритм**
        
        ![Задача на скалярное произведение.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/47b6dece-761a-4026-86e7-9937366ebf4c/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BD%D0%B0_%D1%81%D0%BA%D0%B0%D0%BB%D1%8F%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5.jpg)
        
    - ************************************************************************Индивидуальное приветствие. Алгоритм************************************************************************
        
        ![005_Examples.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/9b7910e5-e345-44e3-a0b0-49d15fc507a5/005_Examples.jpg)
        
    - **********Блок-схема на основе псевдокода**********
        
        ![Блок-схема на основе псевдокода.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7bfc9c58-e8d4-4fbf-a5c4-050cc62731d8/%D0%91%D0%BB%D0%BE%D0%BA-%D1%81%D1%85%D0%B5%D0%BC%D0%B0_%D0%BD%D0%B0_%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B5_%D0%BF%D1%81%D0%B5%D0%B2%D0%B4%D0%BE%D0%BA%D0%BE%D0%B4%D0%B0.jpg)
        
    - **Алгоритмы. Домашние задания**
        
        ![ДЗ_Семинар2_Введение в программирование_Общий.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/afc70beb-1156-4337-afe1-910b928b5254/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D0%B1%D1%89%D0%B8%D0%B9.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Общий_без_привязки_чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8d5a7a66-46e1-4d47-b9e4-004376eca557/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D0%B1%D1%89%D0%B8%D0%B9_%D0%B1%D0%B5%D0%B7_%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B8_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Отдельный_файл_комплекса.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a47edab7-e5e3-442d-a362-36d5167ac753/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%84%D0%B0%D0%B9%D0%BB_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%B0.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Отдельный_файл_комплекса_без_привязки_чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a11d887a-2ac0-446c-b535-9eb1b93982b1/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%84%D0%B0%D0%B9%D0%BB_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%B0_%D0%B1%D0%B5%D0%B7_%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B8_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
    - **Задача нахождения среднего арифметического. Алгоритм**
        
        ![Среднее арифметическое 4 чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e429e243-a65d-4fd8-8d14-38eaaeebd968/%D0%A1%D1%80%D0%B5%D0%B4%D0%BD%D0%B5%D0%B5_%D0%B0%D1%80%D0%B8%D1%84%D0%BC%D0%B5%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_4_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
    - **Нахождение всех четных чисел от 1 до 15. Алгоритм**
        
        ![Семинар 1. Задача 1.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59921daa-8974-4a46-9faf-5fc1255e43a4/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1.png)
        
    - **Блок-схема по нахождению выхода из лабиринта**
        
        ![Лабиринт ДЗ.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4e7de1b-baf9-48f2-8d31-6ac05d4fbe14/%D0%9B%D0%B0%D0%B1%D0%B8%D1%80%D0%B8%D0%BD%D1%82_%D0%94%D0%97.png)
        
    - **Задача по нахождению факториала**
        
        ![Нахождение факториала N.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a88f11e-0c31-4734-8347-ed906154b3dd/%D0%9D%D0%B0%D1%85%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%B0%D0%BB%D0%B0_N.jpg)
        
    - **Задача по нахождению второго максимального числа в массиве. Алгоритм**
        
        ![Поиск второго после максимума числа.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/06e7be71-6f43-4b00-b2c8-bf42f2d352a2/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B3%D0%BE_%D0%BF%D0%BE%D1%81%D0%BB%D0%B5_%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D1%83%D0%BC%D0%B0_%D1%87%D0%B8%D1%81%D0%BB%D0%B0.jpg)
        
    - **Перевод числа из десятеричной в двоичную систему счисления. Алгоритм**
        
        ![Семинар 1. Задача 3.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9dcec314-bc94-48d7-9076-fc0521565582/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3.png)
        
        ![Задача. Перевод числа из 10-ной в двоичную систему счисления.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb98c830-92f9-44e5-b3a8-2c08c91231ed/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0._%D0%9F%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4_%D1%87%D0%B8%D1%81%D0%BB%D0%B0_%D0%B8%D0%B7_10-%D0%BD%D0%BE%D0%B9_%D0%B2_%D0%B4%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D1%83%D1%8E_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%83_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F.jpg)
        
    - **Перенести максимальное значение в правый край массива. Алгоритм**
        
        ![Задача №4 с массивами про перенос максимального значения в самый конец.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c73ca00-6054-45ff-8d1e-f48ffcedec38/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_4_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D0%BF%D0%B5%D1%80%D0%B5%D0%BD%D0%BE%D1%81_%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2_%D1%81%D0%B0%D0%BC%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BD%D0%B5%D1%86.jpg)
        

[Языки](https://www.notion.so/d81420be112945c5894fd52d61a416c6?pvs=21)

[Вопросы:](https://www.notion.so/5c26a52922a1494fb814394d6b350b45?pvs=21)

[Регалии](https://www.notion.so/dd4706fb00db407c8eba7922b8a58115?pvs=21)### Информация

- ****************Словарик****************
    - ТРИЗ / АРИП, GIST / Impact / Road Planning
    - Метод Канбан, Scrum Framework, HADI
    - Модель культур Шнейдера / OKR / Workplace Learning
    - CJM продукта
    - Business Model Canvas
    - TAM, SAM, SOM
    - Теория ограничений и развития систем
    - Определение стратегии выхода на рынок (ADL-матрица, 5 сил Портера, SWOT-анализ, PEST-анализ
    - Определение бизнес-модели продукта (Lean Canvas, Business Model Canvas, Value Proposition)
    - CustDev
    - Customer Journey Map, Customer Research
    - Питчинг
    - **Астроциты**
        
        Астроциты — это глиальные клетки, которые составляют большую часть глии в центральной нервной системе. Они выполняют множество функций, включая поддержку нейронов, регуляцию мозгового кровотока и участие в обмене веществ. Астроциты также играют важную роль в защите нервных клеток от повреждений и болезней.
        
    - **Глии**
        
        Глия - это клетки, которые не являются нейронами, но играют важную роль в работе нервной системы. Глия выполняет разнообразные функции, такие как поддержка нейронов, защита нервных клеток и регуляция мозгового кровотока. К глиальным клеткам относятся астроциты, микроглия и олигодендроциты.
        
        - Микроглия
            
            
        - Олигодендроциты
    - **************Имплицитный**************
        
        Содержащийся внутри, подразумеваемый, внешне не проявляющийся, не выраженный прямо; скрытый, неявный.
        
    - ********************Математика********************
        - ******************************Принцип Дирихле******************************
            
            
        - Среднее гармоническое
        - ****************************************************Программа обучения на [неком курсе](https://proglib.academy/mathspro?utm_source=proglib&utm_medium=partner&utm_campaign=mathspro&utm_content=link_sidebar_adv) за 6 месяцев за 30,000р**
            - ****Модуль 0. Школьная математика****
                
                Вспомните базу. Научитесь брать производные, считать интегралы, исследовать функции. Познакомитесь с последовательностями и прогрессиями. Узнаете, что такое неравенства.
                
                Основные темы:
                
                - Начала теории множеств.
                - Геометрическая прогрессия. Векторы.
                - Теория вероятностей. Рациональные уравнения.
                - Алгебраические уравнения.
                - Иррациональные уравнения. Графический способ решения систем.
                - Неравенства.
                - Функции, график и свойства.
                - Графики функций и их преобразования.
                - Производная, исследование функций.
                - Исследование функций. Интеграл.
            - ********Модуль 1. Математический анализ********
                
                Изучите пределы, дифференцируемость и ряды. Научитесь считать разные интегралы.
                
                Важные темы:
                
                - Числовые последовательности.
                - Предел числовой функции.
                - Непрерывность числовой функции.
                - Дифференцируемость числовой функции.
                - Основные теоремы дифференциального исчисления.
                - Другие вопросы дифференциального исчисления.
                - Функции многих переменных.
                - Дифференцируемость функций многих переменных.
                - Интеграл Римана.
                - Вопросы интегрального исчисления.
                - Ряды.
                - Теория меры и интеграла Лебега.
            - **Модуль 2. Линейная алгебра**
                
                Научитесь работать с матрицами, узнаете что такое СЛАУ и как их решать.
                
                Направления:
                
                - Матрицы и операции над ними.
                - Определитель матрицы. Разложения определителя.
                - Обратная матрица, ее явный вид.
                - Матричные перемножения.
                - Однородные и неоднородные системы линейных уравнений – геометрический подход.
                - Линейная зависимость в векторном пространстве.
                - Комплексные числа.
                - Линейные отображения (операторы).
                - Собственные значения и собственные векторы линейных отображений.
                - Евклидовы пространства.
                - Отображения в евклидовых пространствах.
                - Билинейные формы
            - **Модуль 3. Комбинаторика**
                
                Узнаете основные правила комбинаторики и научитесь с ними работать.
                
                Основные понятия:
                
                - Правила комбинаторики.
                - Множества.
                - Сочетания.
            - **Модуль 4. Теория вероятностей и математическая статистика**
                
                Изучите дискретную теорию вероятностей, статистические методы, случайные величины и события, матожидание, дисперсию и корреляцию. Разберетесь в законах распределения. Сформулируете гипотезы для A/B-тестирования.
                
                Темы:
                
                - Случайные события.
                - Случайные величины.
                - Совместное распределение, условное распределение.
                - Математическое ожидание, дисперсия, корреляция.
                - Основные законы распределения.
                - Моделирование случайных величин.
                - Точечные оценки и их свойства.
                - Интервальные оценки.
                - Проверка гипотез.
                - Проверка гипотез при A/B тестировании.
                - Исследование зависимостей.
                - Регрессии.
            - **Модуль 5. Машинное обучение**
                
                Узнаете, как пройденное применяется в работе аналитика данных.
                
                Дополнительные темы:
                
                - Word2vec.
                - Градиентный спуск.
                - Backpropagation.
                - Случайный лес.
                - Классификация наблюдений: логистическая и пробит регрессии.
                - Метод ближайших соседей (KNN).
                - Классификация наблюдений: байесовский классификатор.
    - ****************Синопсис****************
        
        Синопсис - это краткое и структурированное изложение информации. Это метод обучения, который помогает запомнить большое количество информации, разбивая ее на небольшие блоки и организуя их в логические цепочки. Синопсис позволяет быстро ориентироваться в информации и легко вспоминать ее, что делает его очень полезным инструментом для учебы и научной работы.
        
    - **Фасилитатор**
        
        Специалист в области управления процессами групповой работы и коммуникации. Он помогает людям работать вместе более эффективно, облегчает процесс принятия решений и решения конфликтов в коллективе. Возможно, в контексте документа, где вы видели это слово, фасилитатор отвечает за проведение тренингов, семинаров или других мероприятий, связанных с карьерным развитием. Надеюсь, это поможет вам понять, кто такой фасилитатор. Если вам нужна какая-то конкретная информация, я готова помочь вам еще раз.
        
    - **************Чанк**************
        
        Чанк - это когнитивное понятие, которое описывает процесс организации информации в группы (чанки), которые могут быть легко запомнены и использованы. Чанк может содержать как числа и факты, так и более сложные элементы, такие как идеи или понятия.
        
        - Примеры чанков
            - Числа телефонов: мы легко запоминаем телефонный номер в формате 123-456-7890, потому что он состоит из трех чанков, каждый из которых содержит три цифры.
            - Английские фразы: многие часто используемые английские фразы, например, "how are you?" или "what's up?" являются чанками, которые мы легко запоминаем и используем в повседневном общении.
            - Акронимы: многие акронимы, такие как NASA или ASAP, являются чанками, которые представляют собой сокращения нескольких слов или фраз.
            - Рецепты: рецепты могут быть организованы в чанки, такие как список ингредиентов, инструкции по приготовлению, время приготовления и т.д.
            - Музыкальные аккорды: музыкальные аккорды могут быть организованы в чанки, которые соответствуют определенным аккордам и легко запоминаются.
            - Веб-страницы: веб-страницы могут быть организованы в чанки, такие как заголовки, параграфы, списки, изображения и т.д. Это помогает нам быстро сканировать страницу и находить необходимую информацию.
            - Календарные даты: даты могут быть организованы в чанки, такие как день, месяц и год. Например, 25 декабря 2021 года - это чанк, который легко запоминается.
            - Списки задач: списки задач могут быть организованы в чанки, такие как заголовки задач, описания и сроки выполнения. Это помогает нам лучше организовывать свою работу и управлять своим временем.
            - Код: программный код может быть организован в чанки, такие как функции, классы, переменные и т.д. Это помогает нам лучше понимать код и быстрее находить ошибки.
            - Термины и определения: термины и их определения могут быть организованы в чанки, которые легко запоминаются и помогают нам лучше понимать сложные понятия.

### Инструменты

- ********Куча********
    - К уроку 1. Программист / Итоги блока. Выбор специализации
        
        ### **Юрий Секин рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Типичный программист](https://t.me/tproger_official)
        
        2. [Точка входа в программирование](https://t.me/prog_point)
        
        3. [Soft Skillz](https://t.me/soft_skillz)
        
        4. [Книги по программированию](https://t.me/devs_books)
        
        5. [Инструменты программиста](https://t.me/prog_tools)
        
        **Литературу:**
        
        1. [«Паттерны проектирования» Эрик Фримен, Элизабет Фримен](https://clck.ru/sLP5L)
        
        2. [«Чистый код» Роберт Мартин](https://www.labirint.ru/books/642466)
        
        3. [«Совершенный код. Мастер-класс» Стив Макконнелл](https://www.labirint.ru/books/272529)
        
        4. [«Алгоритмы: построение и анализ» Томас Кормен, Чарльз Лейзерсон](https://vk.com/wall-54530371_2325)
        
        5. [«Искусство программирования» (все тома) Дональд Кнут](https://vk.com/wall-54530371_113285)
        
        6. [«Сколько стоит программный проект» Стив Макконнелл](https://clck.ru/sLPQp)
        
        7. [«Эмоциональный интеллект» Дэниел Гоулман](https://www.labirint.ru/books/788316)
        
        8. [«Человеческий фактор: успешные проекты и команды» Том Демарко](https://clck.ru/sLPTD)
        
        9. [«Психбольница в руках пациентов» Алан Купер](https://clck.ru/epuT3)
        
        **Сайты:**
        
        1. [HTML Academy](https://htmlacademy.ru/)
        
        2. [Code Basics](https://ru.code-basics.com/)
        
        3. [Coding Game](https://www.codingame.com/start)
        
        4. [Codecademy](https://www.codecademy.com/)
        
        5. [Scrimba](https://scrimba.com/)
        
        6. [freeCodeCamp](https://www.freecodecamp.org/)
        
        **Тренажёры:**
        
        1. [Tproger](https://tproger.ru/)
        
        2. [Тренировки по алгоритмам](https://yandex.ru/yaintern/algorithm-training)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 2. Тестировщик / Итоги блока. Выбор специализации
        
        ### **Дмитрий Криницын рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Серьёзный тестировщик](https://t.me/serious_tester)
        
        2. [Тестировщик от бога](https://t.me/godoftesting)
        
        3. [QA — Automation](https://t.me/qa_automation)
        
        **Литературу:**
        
        1. [«Программист-прагматик. Путь от подмастерья к мастеру» Эндрю Хант, Дэвид Томас](https://clck.ru/sLT9Q)
        
        2. [«Выразительный JavaScript. Современное веб-программирование» Марейн Хавербеке](https://vk.com/wall-51126445_40916)
        
        3. [«Архитектура компьютера», Эндрю Таненбаум](https://clck.ru/sLTKT)
        
        4. [«Рефакторинг Улучшение существующего кода» Мартин Фаулер](https://www.labirint.ru/books/601754)
        
        5. [«Эффективная работа с унаследованным кодом» Майкл Физерс](https://www.labirint.ru/books/231685)
        
        6. [«Head First. Паттерны проектирования» Эрик Фримен, Берт Бейтс, Кэти Сьерра, Элизабет Робсон](https://www.labirint.ru/books/632960)
        
        7. [«Код. Тайный язык информатики» Чарльз Петцольд](https://clck.ru/sLTT9)
        
        8. [«Введение в компьютерные науки» Гленн Брукшир, Деннис Брилов](https://www.labirint.ru/books/720522)
        
        9. [«Грокаем алгоритмы. Иллюстрированное пособие для программистов и любопытствующих» Адитья Бхаргава](https://clck.ru/sLTXv)
        
        10. [«Непрерывное развёртывание ПО» Джез Хамбл, Дейвид Фарли](https://www.labirint.ru/books/534957)
        
        11. [«Принципы юнит-тестирования» Хориков Владимир](https://clck.ru/sLTZP)
        
        12. [«Тестирование программного обеспечения. Базовый курс» Станислав Куликов](https://svyatoslav.biz/software_testing_book)
        
        13. [«Тестирование Дот Ком» Роман Савин](https://clck.ru/sLTnF)
        
        14. [«Тестирование программного обеспечения» Канер Сэм, Фолк Джек, Нгуен Енг Кек](https://clck.ru/sLTzk)
        
        15. [«Тестирование черного ящика» Борис Бейзер](https://clck.ru/sLwgv)
        
        16. [«Искусство тестирования программ» Гленфорд Майерс, Том Баджетт, Кори Сандлер](https://clck.ru/sLTtD)
        
        17. [«Ключевые процессы тестирования» Рекс Блэк](https://clck.ru/sLTs6)
        
        18. [«Гибкое тестирование» Лиза Криспин, Джанет Грегори](https://clck.ru/sLwko)
        
        19. [«Автоматизированное тестирование программного обеспечения» Элфрид Дастин, Джефф Рэшка, Джон Пол](https://www.chitai-gorod.ru/catalog/book/1175642)
        
        20. [«Как тестируют в Google» Арбон Джейсон, Каролло Джефф, Уиттакер Джеймс](https://clck.ru/sLTwn)
        
        21. [«Дневник охотника за ошибками. Путешествие через джунгли проблем безопасности программного обеспечения» Тобиас Клейн](https://clck.ru/sLwnh)
        
        22. [«Software Testing» Ron Patton](https://www.amazon.com/Software-Testing-Ron-Patton/dp/0672327988)
        
        23. [«Agile-тестирование. Обучающий курс для всей команды» Джанет Грегори, Лайза Криспин](https://www.mann-ivanov-ferber.ru/books/agile-testirovanie)
        
        24. [«Быстрое тестирование» Роберт Калбертсон, Крис Браун, Гэри Кобб](https://ru.bookmate.com/books/V0eiYpnv)
        
        **Видео:**
        
        1. [Alexei Barantsev - YouTube](https://www.youtube.com/channel/UCVMFyEVvaBDQ3PrExtCH0uw)
        
        2. [QAGuild - YouTube](https://www.youtube.com/channel/UCHtyBZ2XbtsRmNiAxh48RGg)
        
        3. [Heisenbug](https://www.youtube.com/channel/UCX6fjZa167tSy_4ryTLcOBw)
        
        4. [iTechArt - YouTube](https://www.youtube.com/channel/UC5f8qKFSxMcxpIlc29w9zJQ)
        
        **Сайты:**
        
        1. [Software-Testing.Ru](https://software-testing.ru/)
        
        2. [Gcoder](https://gcoder.ru/category/study/qa)
        
        3. [Автоматизация тестирования с помощью Selenium и Python · Stepik](https://stepik.org/course/575/promo)
        
        4. [ISTQB Foundation Level Certification – The Definitive Guide](http://tryqa.com/istqb-certification-the-definitive-guide)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 3. Аналитик  / Итоги блока. Выбор специализации
        
        ### **Андрей Вельгушев рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [LEFT JOIN](https://t.me/leftjoin)
        
        2. [Дашбордец](https://t.me/dashboardets)
        
        3. [Дата-сторителлинг](https://t.me/data_publication)
        
        4. [Бизнес-анализ & IT](https://t.me/bamrus)
        
        5. [Reveal the Data](https://t.me/revealthedata)
        
        **Литературу:**
        
        1. [«Базы данных» С.М Диго](https://clck.ru/sCwUd)
        
        2. [«Путь аналитика. Практическое руководство IT-специалиста» Прерва А., Иванова В.](https://clck.ru/sM4uy)
        
        3. [«Разработка требований к программному обеспечению» Карл Вигерс](https://clck.ru/sM4x4)
        
        4. [«Азбука системного мышления» Донелли Медоуз](https://www.mann-ivanov-ferber.ru/books/azbuka-sistemnogo-myishleniya)
        
        5. [«Графики, которые убеждают всех» Богачев А.](https://clck.ru/sM53N)
        
        6. [«Системное мышление» Левенчук А.](https://clck.ru/sM56F)
        
        7. [«Как измерить все, что угодно. Оценка стоимости нематериального в бизнесе» Дуглас У. Хаббард](https://clck.ru/sM56p)
        
        8. [«Голая статистика» Чарльз Уилан](https://clck.ru/sM58Y)
        
        9. [«DAMA-DMBOK: Data Management Body of Knowledge» (2-е издание)](https://www.labirint.ru/books/732389)
        
        10. [«Аналитическая культура. От сбора данных до бизнес-результатов» Карл Андерсон](https://www.mann-ivanov-ferber.ru/books/analiticheskaya-kultura)
        
        11. [«Азбука аналитики» Ю. Курносов](https://clck.ru/sM5Bi)
        
        12. [«Веб-аналитика 2.0 на практике» А. Кошик](https://clck.ru/sM5CG)
        
        13. [«Lean Analytics» Алистер Кролл](https://clck.ru/sM5EE)
        
        14. [«Искусство статистики» Дэвид Шпигельхалтер](https://www.mann-ivanov-ferber.ru/books/iskusstvo-statistiki)
        
        15. [«Google Таблицы. Это просто Евгений Намоконов» Ренат Шагабутдинов](https://www.mann-ivanov-ferber.ru/books/google-tabliczyi-eto-prosto)
        
        16. [«Маркетинг от потребителя» Роджер Бест](https://www.mann-ivanov-ferber.ru/books/sse/mbmanagement)
        
        17. [«Данные: визуализируй, расскажи, используй» Коул Нассбаумер Нафлик](https://www.mann-ivanov-ferber.ru/books/dannye-vizualiziruj-rasskazhi-ispolzuj)
        
        18. [«Измеряйте самое важное» Джон Дорр](https://www.mann-ivanov-ferber.ru/books/izmeryajte-samoe-vazhnoe)
        
        19. [«Почему. Руководство по поиску причин и принятию решений» Саманта Клейнберг](https://www.mann-ivanov-ferber.ru/books/pochemu-rukovodstvo)
        
        20. [«Управление на основе данных» Тим Филлипс](https://www.mann-ivanov-ferber.ru/books/upravlenie-na-osnove-dannyix)
        
        21. [«Говори на языке диаграмм» Джин Желязны](https://www.mann-ivanov-ferber.ru/books/mif/026)
        
        22. [«Визуализация данных при помощи дашбордов и отчетов в Excel» Дик Куслейка](https://clck.ru/sLsZt)
        
        23. [«Now You see it: Simple visualization techniques for quantitative analysis» Стивен Фью](https://clck.ru/sLsfg)
        
        24. [«Искусство визуализации в бизнесе» Нейтан Яу](https://clck.ru/sLsh6)
        
        25. [«Анализ данных в Tableau на практике, 100 советов, уроков и стратегий от мастера Дзен в Tableau» Райан Слипер](https://clck.ru/sLspc)
        
        **Сайты:**
        
        1. [Crayon. Blog](https://bigdata-madesimple.com/)
        
        2. [Database Trends and Applications](https://www.dbta.com/)
        
        3. [Tableau. Blog](https://www.tableau.com/about/blog)
        
        4. [Capterra](https://blog.capterra.com/articles/business-intelligence)
        
        5. [Data Talks](https://datatalks.rt.ru/)
        
        6. [Open Data Science](https://ods.ai/)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 4. Проджект-менеджер / Итоги блока. Выбор специализации
        
        ### **Роман Рыбкин рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [No Flame No Game](https://t.me/proproduct)
        
        2. [UX Horn](https://t.me/uxhorn)
        
        3. [Индекс дятла](https://t.me/dindex)
        
        4. [Менеджер от боженьки](https://t.me/pm_god)
        
        5. [Junior PM](https://t.me/junior_pm)
        
        6. [Project management | IT](https://t.me/pm_and_it)
        
        7. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
        
        8. [PMCLUB — про проекты, продукты и людей](https://t.me/pmclub)
        
        9. [Тимлид Леонид](https://t.me/teamleadleonid)
        
        10. [Владимир Завертайлов | Управление digital-проектами и продуктами](https://t.me/sibirix)
        
        11. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
        
        **Литературу:**
        
        1. [«Deadline», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
        
        2. [«Сделано», Скотт Беркун](https://www.mann-ivanov-ferber.ru/books/sdelano)
        
        3. [«Основы проектного менеджмента», Джозеф Хигни](https://www.mann-ivanov-ferber.ru/books/osnovyi-proektnogo-menedzhmenta)
        
        4. [«Путь scrum-мастера», Зузана Шохова](https://clck.ru/sM5GU)
        
        5. [«Канбан», Дэвид Андерсон](https://www.mann-ivanov-ferber.ru/books/kanban)
        
        6. [«Человеческий фактор: успешные проекты и команды», Том ДеМарко, Тимоти Листер](https://clck.ru/avy4h)
        
        7. [«Цели и ключевые результаты. Полное руководство по внедрению OKR», Пол Нивен и Бен Ламорт](https://www.mann-ivanov-ferber.ru/books/celi-i-klyuchevye-rezultaty)
        
        8. [«Эмоциональный интеллект для менеджеров проектов», Энтони Мерсино](https://www.chitai-gorod.ru/catalog/book/1014639)
        
        9. [«Исследование трендов», Мартин Реймонд](https://www.mann-ivanov-ferber.ru/books/issledovanie-trendov)
        
        10. [«Постигая Agile», Эндрю Стэллман, Дженнифер Грин](https://www.chitai-gorod.ru/catalog/book/1181653)
        
        11. [«Управление продуктом в Scrum», Роман Пихлер](https://www.mann-ivanov-ferber.ru/books/upravlenie-produktom-v-scrum)
        
        12. [«Цель. Процесс непрерывного совершенствования», Элияху Голдратт](https://clck.ru/reQVv)
        
        13. [«Цель-2. Дело не в везении», Элияху Голдратт](https://www.litres.ru/eliyahu-goldratt/cel-2-delo-ne-v-vezenii)
        
        14. [«Как привести дела в порядок», Дэвид Аллен](https://clck.ru/QdGrQ)
        
        15. [«Управление проектами, людьми и собой», Николай Товеровский](https://clck.ru/sM5PC)
        
        16. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
        
        17. [«От хорошего к великому» Джим Коллинз](https://www.mann-ivanov-ferber.ru/books/sse/good-great)
        
        18. [«Путь камикадзе», Эдвард Йордон](https://www.chitai-gorod.ru/catalog/book/1028345)
        
        19. [«Руководство PMBOK + Agile», Хеннер Ширенбер, Мойра Листер, Штефан Кирмсе](https://clck.ru/sM5TS)
        
        20. [«Scrum. Революционный метода управления проектами», Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
        
        21. [«Управление повседневным хаосом», Александр Фридман](https://clck.ru/sM5VC)
        
        22. [«Черная книга менеджера», Слава Панкратов](https://ru.bookmate.com/books/ZlzbUFjl)
        
        **Сайты:**
        
        1. [GoPractice](https://gopractice.ru/)
        
        2. [No Flame No Game](https://nfng.pro/)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К уроку 5. Продакт-менеджер / Итоги блока. Выбор специализации
        
        ### **Ярослав Карасёв рекомендует:**
        
        **Телеграмм каналы:**
        
        1. [Притчи продуктолога](https://t.me/product_proverbs)
        
        2. [Grow Horse](https://t.me/growhorse)
        
        3. [Продукторий Владимира Меркушева](https://t.me/vladimir_merkushev)
        
        4. [Improve Your Product (на украинском языке)](https://t.me/toceo)
        
        5. [Strategic move: стратегия, бизнес-модели, продукты](https://t.me/strategic_move)
        
        6. [Игорь Кузнецов о темных паттернах](https://t.me/brainshare)
        
        7. [Индекс дятла](https://t.me/dindex)
        
        8. [Alexcouncil⚡](https://t.me/alexcouncil)
        
        9. [Fresh Product Manager](https://t.me/FreshProductGo)
        
        10. [Epic Growth — рост продуктов](https://t.me/epicgrowth)
        
        11. [Product Management](https://t.me/ruspm)
        
        12. [FEDOR BORSHEV](https://t.me/pmdaily)
        
        13. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
        
        14. [ProductSense](https://t.me/productsense)
        
        15. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
        
        16. [Analysis Paradisis](https://t.me/analysis_paradisis)
        
        **Литературу:**
        
        1. [«На крючке. Как создавать продукты-хиты», Марти Кэган](https://clck.ru/sM5Y7)
        
        2. [«Построение бизнес-моделей», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5aX)
        
        3. [«Разработка ценностных предложений», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5b3)
        
        4. [«Стратегия голубого океана», В. Чан Ким, Рене Моборн](https://www.mann-ivanov-ferber.ru/books/paperbook/blueoceanstrategy)
        
        5. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
        
        6. [«Поведенческая экономика. Почему люди ведут себя иррационально и как на этом заработать», Дэн Ариели](https://clck.ru/sM5cL)
        
        7. [«Как чашка за чашкой строилась Starbucks», Говард Шульц](https://clck.ru/sM5dN)
        
        8. [«Покупатель на крючке», Нир Эяль и Райан Хувер](https://clck.ru/sM5fT)
        
        9. [«Корпорация гениев. Как управлять командой творческих людей», Эд Кэтмелл](https://www.litres.ru/ed-ketmell/korp-8645061/chitat-onlayn)
        
        10. [«Стартап. Настольная книга основателя», Стив Бланк, Боб Дорф](https://clck.ru/sM5g9)
        
        11. [«Позиционирование: битва за умы», Джек Траут, Эл Райс](https://www.chitai-gorod.ru/catalog/book/1001412)
        
        12. [«Как создать продукт, который купят. Метод Lean Customer Development», Синди Альварес](https://clck.ru/sM5i5)
        
        13. [«Когда кофе и капуста конкуренты», Алан Клемент](https://jobs-to-be-done.ru/)
        
        14. [«Scrum» Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
        
        15. [«Intercom on Product Management», Des Traynor](https://www.intercom.com/resources/books/intercom-product-management)
        
        16. [«Intercom on Jobs-to-be-Done», Des Traynor](https://www.intercom.com/resources/books/intercom-jobs-to-be-done)
        
        17. [«Growth hacks», Aladdin Happy](https://clck.ru/sM5s8)
        
        18. [«Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World with OKRs», Джон Доер](https://clck.ru/sM5un)
        
        19. [«Закон успешных инноваций. Зачем клиент «нанимает» ваш продукт и как знание об этом помогает новым разработкам», Клейтон Кристенсен](https://clck.ru/sM5ux)
        
        20. [«Deadline. Роман об управлении проектами», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
        
        21. [«Jobs To Be Done», Энтони Ульвик](https://jobs-to-be-done.ru/jobs-to-be-done-1)
        
        **Видео:**
        
        1. [20 Years of Product Management in 25 Minutes by Dave Wascha](https://www.youtube.com/watch?v=i69U0lvi89c)
        
        2. [The art of innovation | Guy Kawasaki | TEDxBerkeley](https://www.youtube.com/watch?v=Mtjatz9r-Vc)
        
        3. [Margaret Gould Stewart: How giant websites design for you (and a billion others, too)](https://www.youtube.com/watch?v=quJdL9ggETI)
        
        4. [Epic Growth Conference: Михаил Трутнев (Ultimate Guitar). Повышающий продажи маркетинговый абсурд](https://www.youtube.com/watch?v=1gwGRRGaEMo)
        
        5. [Андрей Хусид (CEO RealtimeBoard). Как построить команду и процессы, ориентированные на быстрый рост](https://www.youtube.com/watch?v=C1U4MD6DPI8)
        
        ### **Рекомендации от GeekBrains:**
        
        **Книги:**
        
        1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
        
        2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
        
        **Подкасты:**
        
        1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
        
        2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
        
        3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
        
        4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
        
        5. Software Engineering Radio — еженедельные беседы о ПО
        
        6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
        
    - К урокам модуля Знакомство с базами данных
        
        📚 Пселтис Эндрю Дж. «Потоковая обработка данных» 
        
        📚 Моргунов Евгений «PostgreSQL. Основы языка SQL»
        
        📚 Конолли Томас, Бегг Каролин «Базы данных»
        
        📚 Бэнкер Кайл «MongoDB в действии»
        
        📚 Дюбуа Поль «MySQL. Сборник рецептов»
        
        📚 Ульман Джеффри, Уидом Дженифер, Гарсия-Молина Гектор «Системы баз данных»
        
        📚 Мишра Санжей, Бьюли Алан «Секреты Oracle SQL»
        
    - Видео с Youtube
        
        [GPT-4 Turbo. Презентация](https://www.youtube.com/watch?v=8MBUl0f2Ojw&list=WL&index=3&pp=gAQBiAQB) - 47 мин
        
        [Учим Python. Уроки. Полный курс](https://www.youtube.com/watch?v=5g-MHZ0MzZY&list=WL&index=34&pp=gAQBiAQB) - 07:03
        
        [Большой бесплатный курс по ChatGPT](https://www.youtube.com/watch?v=Genj8-NcmBo&list=WL&index=11&pp=gAQBiAQB) - 1 часть - 68 мин
        
        [TCP/IP - что это и зачем нужно](https://www.youtube.com/watch?v=rLUzYeLdM0k&list=WL&index=12&pp=gAQBiAQB) - 96 мин
        
        [JavaScript для начинающих. Уроки + Практика](https://www.youtube.com/watch?v=maPRR_jjyOE&list=WL&index=28&pp=gAQBiAQB) - 06:46
        
        [Лекция по теории игр](https://www.youtube.com/watch?v=LVrjE8RAkBw&list=WL&index=7&pp=gAQBiAQB) (МФТИ) - 69 мин
        
    - Ссылки
        
        С семинаров по языкам рекомендации:
        
        [«ASP.NET Core. Разработка приложений»](http://asp.net/)
        
        - Джеймс Чамберс
        - Дэвид Пэкетт
        - Саймон Тиммс
        
        Скачать. Евгения Роньжина советует:
        
        1. Лао-цзы «Книга об истине и силе»
        2. Н. Островский «Как закалялась сталь»
        3. Е. Водолазкин «Лавр»
        4. М. Уолтер «Развитие силы воли»
        5. В. Франкл «Воля к смыслу»
        6. М. Ибука «После трех уже поздно»
        7. О. Бахтияров «Активное сознание»
        8. Р. Грин «Большая книга мастера»
        
        Скачать и отсортировать. Роман Моисеев советует:
        
        [Зарецкий А. В. Энциклопедия профессора Фортрана](https://www.docdroid.net/qu4g/professora-fortrana-pdf)
        
        [Журнал «Наука и жизнь»](https://www.nkj.ru/)
        
        [Джаред Даймонд. Ружья, микробы и сталь. История человеческих сообществ](https://baguzin.ru/wp/wp-content/uploads/2016/08/%D0%94%D0%B6%D0%B0%D1%80%D0%B5%D0%B4-%D0%94%D0%B0%D0%B9%D0%BC%D0%BE%D0%BD%D0%B4.-%D0%A0%D1%83%D0%B6%D1%8C%D1%8F-%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D0%B1%D1%8B-%D0%B8-%D1%81%D1%82%D0%B0%D0%BB%D1%8C.pdf)
        
        [Телеграм-канал ForkLog](https://tlgrm.ru/channels/@forklog)
        
        **Что советует Алексей Денисенко и его команда**
        
        1. Отслеживать новые стартапы на [Product Hunt](https://www.producthunt.com/)
        
        2. Изучать компании, в которые инвестирует акселераратор [YCombinator](https://www.ycombinator.com/) и венчурный фонд [Andreessen Horowitz](https://a16z.com/)
        
        3. Читать новости технологий [TechCrunch](https://techcrunch.com/)
        
        4. Регулярно читать материалы на ресурсе [habr.com](https://habr.com/ru/all/)
        
        5. Подписаться на рассылку [Dear Architects](https://www.deararchitects.xyz/)
        
        ******************************************************Сергей Корнеев рекомендует:******************************************************
        
        [Уолтер Айзексон. Стив Джобс](https://www.labirint.ru/books/307571/)
        
        [Андрей Мовчан, Алексей Митров. Проклятые экономики](https://www.litres.ru/andrey-movchan/proklyatye-ekonomiki/)
        
        [Андрей Мовчан. Россия в эпоху постправды](https://www.chitai-gorod.ru/catalog/book/1181650/)
        
        [YouTube-канал Андрея Мовчана](https://www.youtube.com/Movchans)
        
        **********Акмаль Пайзиев рекомендует:**********
        
        [Подкаст Equity](https://castbox.fm/channel/Equity-id2088851?country=ru)
        
        [Подкаст Acquired](https://castbox.fm/channel/Acquired-id1987509?country=ru)
        
        [YouTube-канал Stanford](https://www.youtube.com/c/stanford/videos)
        
        [«Антихрупкость», Н. Н. Талеб](https://clck.ru/sXUjG)
        
        ****************************************************************Александр Пожаренко рекомендует:****************************************************************
        
        [Рэй Далио, «Принципы»](https://www.ozon.ru/category/printsipy-zhizn-i-rabota-dalio-rey/)
        
        [В. Тарасов, «Технология жизни»](https://www.ozon.ru/search/?deny_category_prediction=true&from_global=true&text=%D0%A2%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F+%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8.+%D0%9A%D0%BD%D0%B8%D0%B3%D0%B0+%D0%B4%D0%BB%D1%8F+%D0%B3%D0%B5%D1%80%D0%BE%D0%B5%D0%B2.+%7C+%D0%A2%D0%B0%D1%80%D0%B0%D1%81%D0%BE%D0%B2+%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80+%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D0%B8%D0%BD%D0%BE%D0%B2%D0%B8%D1%87&product_id=7016012)
        
        [Л. Ярухина «Финансы для нефинансистов»](https://www.ozon.ru/search/?deny_category_prediction=true&from_global=true&text=%D0%A4%D0%B8%D0%BD%D0%B0%D0%BD%D1%81%D1%8B+%D0%B4%D0%BB%D1%8F+%D0%BD%D0%B5%D1%84%D0%B8%D0%BD%D0%B0%D0%BD%D1%81%D0%B8%D1%81%D1%82%D0%BE%D0%B2+%7C+%D0%AF%D1%80%D1%83%D1%85%D0%B8%D0%BD%D0%B0+%D0%9B%D1%8E%D0%B4%D0%BC%D0%B8%D0%BB%D0%B0+%D0%98%D0%B2%D0%B0%D0%BD%D0%BE%D0%B2%D0%BD%D0%B0&product_id=147725580)
        
        [Элияху Голдратт. «Цель: процесс непрерывного совершенствования»](https://mybook.ru/author/eliyahu-goldratt/cel-process-nepreryvnogo-sovershenstvovaniya/read/)
        
        **Дмитрий Кибкало рекомендует**
        
        Книги:
        
        [После трех уже поздно, Масару Ибука](https://clck.ru/32sG9X)
        
        [К черту все! Берись и делай! Ричард Брэнсон](https://clck.ru/32rsE6)
        
        [Бизнес как игра, С. Абдульманов, Д. Кибкало, Д. Борисов](https://clck.ru/EnGa9)
        
        [Бизнес на свои, С. Абдульманов, Д. Кибкало](https://clck.ru/G9tY4)
        
        [Конец маркетинга, каким мы его знаем, Серхио Займан](https://clck.ru/32sKvS)
        
        [Анна Каренина, Лев Толстой](https://clck.ru/32rsMB)
        
        [Проект «Аве Мария», Энди Вейер](https://clck.ru/32rsMo)
        
        [Марсианин, Энди Вейер](https://clck.ru/32rsNR)
        
        [Тобол, Алексей Иванов](https://clck.ru/32rsPx)
        
        [Пищеблок, Алексей Иванов](https://clck.ru/32rsRu)
        
        [Географ глобус пропил, Алексей Иванов](https://clck.ru/32rsTx)
        
        Фильмы и сериалы:
        
        [Тед Лассо](https://clck.ru/Vjebx)
        
        [Мистический квест](https://clck.ru/32sHFb)
        
        [Медленные лошади](https://clck.ru/32sHHu)
        
        [Довод](https://clck.ru/QU7Zb)
        
        [Интерстеллар](https://clck.ru/JfuoK)
        
        [Счастливые люди](https://clck.ru/32rsYt)
        
        Телеграм-канал Дмитрия Кибкало — [«Киба у аппарта»](https://clck.ru/32sHqu)
        
- **********************************Программы на комп**********************************
    - ******Git (установлено 29.08.2023)******
    - ********************************************************************GitKraken (установлено 01.09.2023)********************************************************************
    - ************************************Visual Studio Code (установлено 29.08.2023)************************************
    - Для работы с C# - [Dotnet нужна 6 версия](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)
    - Для работы в Python
        - [Интерпретатор](https://www.python.org/)
        - VSCode - расширение Python
        - Ctrl + Shift + P → format - Python Document - устанавливаем плагин форматирования кода
- **********Книги**********
    - **********************Базы данных**********************
        
        Дейт К. Дж. «[Введение в системы баз данных](https://drive.google.com/file/d/1MSlQy3AelE_-33upT0VAaEP7qEBrpfPY/view?usp=drive_link)» - **************Скачана**************
        
        Уилсон Джим Р, Редмонд Эрик «[Семь баз данных за семь недель](https://drive.google.com/file/d/1nHrcuYZ3qmrIP_c6gSZ-qnSZqy7uD42Z/view?usp=drive_link)» - **************Скачана**************
        
        Хопкрофт Д. “[Структуры данных и алгоритмы](https://drive.google.com/file/d/1-QhPndk27_rE9844Oo9bjP_uUN5fGIjU/view?usp=drive_link)” - **Скачана**
        
        Шварц Б., Зайцев П., Ткаченко В. [“MySQL по максимуму”](https://www.litres.ru/book/beron-shvarc/mysql-po-maksimumu-pdf-epub-34946775/) - **Скачана**
        
    - ********************************Программирование********************************
        
        С. Чакон, Б. Штрауб. “[Git для профессионального программиста. Подробное описание самой популярной системы контроля версий.”](https://gbcdn.mrgcdn.ru/uploads/asset/4245110/attachment/d4eb8c232f8f2bdf4e42ba7cb49e0c50.pdf) (книга с курса ГБ)
        
        [Кен Швабер и Джефф Сазерленд “Руководство по Scrum”](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Russian.pdf) (Сергей Артюхов советует)
        
        [Дональд Кнут “Искусство программирования”](https://drive.google.com/file/d/1SUo8lnN6IuYNrANVdKe32RC1GC079riF/view?usp=drive_link) (Николай Ермаков советует)
        
        - Топология команд (на англ)
            
            [Team Topologies Organizing Business and Technology Teams for Fast Flow (Matthew Skelton  Manuel Pais [Skelton etc.).epub](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a54e031c-b8bf-4ead-88c3-c28cb2814fb5/Team_Topologies_Organizing_Business_and_Technology_Teams_for_Fast_Flow_(Matthew_Skelton__Manuel_Pais_Skelton_etc.).epub)
            
        
        Таненбаум Эндрю “Архитектура компьютера”
        
        Таненбаум Эндрю, Уэзеролл Дэвид “Компьютерные сети”
        
        Таненбаум Эндрю, “Операционные системы”
        
        Касперски Крис “Искусство дизассемблирования”
        
        Касперски Крис, Холмогоров Валентин, Кириллова Ксения “Восстановление данных “
        
        Касперски Крис “Компьютерные вирусы внутри и снаружи”
        
        Синтх Саймон “Книга шифров”
        
        Шнайдер Брюс “Прикладная криптография”
        
        Немет Эви “Unix и Linux для системного администратора”
        
        Макдауэлл Гейл Лакман [“Карьера программиста”](https://drive.google.com/file/d/1lCgiZk4zdnWxSNmlk0gvHgEM3Oa4BAqM/view?usp=drive_link) (Андрей Володин советует)
        
        [Newman. Networks](https://drive.google.com/file/d/1WeOmBD4IcDEB9Jqg9lzmFf4LMY1HhnSX/view?usp=drive_link) (Иван Козицын советует)
        
        Вьюгин “[Математические основы машинного обучения и прогнозирования](https://www.litres.ru/book/v-v-vugin/matematicheskie-osnovy-mashinnogo-obucheniya-i-prognozirovaniya-9013752/)”
        
        Окулов [“Алгоритмы компьютерной арифметики”](https://www.litres.ru/book/oleg-pestov/algoritmy-komputernoy-arifmetiki-11251994/)
        
        ***Адитья Бхартава “Грохаем алгоритмы” - Прочитана***
        
        ***Чарльз Петцольд “Код. Тайный язык информатики” - отправная точка в мир ИТ - Прочитана***
        
        [Литература.zip](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/86541372-578f-4a53-b4df-f02753b0838d/%D0%9B%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%B0.zip)
        
        - **Assembler**
            
            Зубков Сергей “Ассемблер. Для Dos, Windows, Unix” 
            
        - **С++**
            
            
            Доусон Майкл “[Изучаем С++ через программирование игр](https://drive.google.com/file/d/1k9Ry3KQa3I8dgZU1kp4fdPGISFBjbMbo/view?usp=drive_link)”, 353 стр. **********************************************Закладка стр. (% в день)**********************************************
            
        - **C#**
            
            [Рихтер Джеффри “C# программирование](https://drive.google.com/file/d/1pSCrd1lKnX2XOzdG8WsqQpUKZo69dD_U/view?usp=drive_link)” (книга с курса ГБ)
            
            [Мартин Дрейер “C# для школьников”](https://drive.google.com/file/d/1QgjLk2g9rG87jC5SoVS-SXF2EaKn1CRA/view?usp=drive_link) (книга с курса ГБ)
            
        - **Java**
            
            Брюс Эккель [“Философия Java”](https://drive.google.com/file/d/1gQdDMSh2p9g16NFH7srrtiwM8_lyffEI/view?usp=drive_link) (посоветовал С. Михайлов, гендир GetCource)
            
        - **Python**
            
            
            - [ ]  Лучано Р. “[Python. К вершинам мастерства](https://drive.google.com/file/d/1B-qyrwTYEmHdDq_HDz1nVyV41jrtoq9O/view?usp=drive_link)”, 898 стр.
            
            - [ ]  Эрик Мэтиз - “[Изучаем Python](https://drive.google.com/file/d/1HZKinI37wMwkdOwIogrVC7h7uqN8d68U/view?usp=drive_link)”, 512 стр.
            
            - [ ]  Луц М. “Программирование на Python” [Том 1](https://drive.google.com/file/d/1-_xb3VLrNUV8bnm11SlQiNjypP4mzHem/view?usp=drive_link), 991 стр. (возможно это лишь предверсия 5го издания)
            
            - [ ]  Луц М. “Python. [Карманный справочник](https://drive.google.com/file/d/1_HMpFkgiBOEvF2LOW633VftKTaeg1PIQ/view?usp=drive_link)”, 321 стр.
            
            - [ ]  Луц М. “Изучаем Python” [Tом 1](https://drive.google.com/file/d/1qIEWsYROkd7nkNr5l5u899LDIExTlKyS/view?usp=drive_link), [Том 2](https://drive.google.com/file/d/1st2oWXletinjxPOFMhq5J6eLuYPShUn1/view?usp=drive_link), 833 + 722 стр.
            
            - [ ]  **********.18%********** Лейси Н. “[Python, например](https://drive.google.com/file/d/1via9T_eNnrar0z0XrY6Z2e-GJy-5zKlQ/view?usp=drive_link)”, 192 стр.  с 30.11.23 **Закладка  стр. (1% в день)**
        - **Алгоритмы и структуры данных**
            
            [Кормен, Лейзерсон, Ривест: Алгоритмы. Построение и анализ](https://drive.google.com/file/d/1s2geqg3wAGP1krbPabsTqS9uHy_ItlAm/view?usp=drive_link) (Камиль Хадиев советует)
            
            [Кормен Томас : Алгоритмы. Вводный курс](https://drive.google.com/file/d/1C5wEWj3IWNNQpHIHS4bNGZP40d7M5km2/view?usp=drive_link) (Камиль Хадиев советует)
            
            Дэвид Сэломон “Сжатие данных, изображений и звука”
            
    - ********************Математика********************
        - ******************************************************************************Авхадиев Фарит Габидинович насоветовал:******************************************************************************
            
            [И. П. Натансон. Конструктивная теория функций](https://cloud.mail.ru/public/G2vN/6Nn1FDxmK?_ga=2.54499816.1552182271.1693810780-1408849439.1690880580).
            
            [Г. Е. Иванов. Слабо выпуклые множества и функции: теория и приложения](https://litportal.ru/avtory/grigoriy-ivanov/kniga-slabo-vypuklye-mnozhestva-i-funkcii-teoriya-i-prilozheniya-729857.html).
            
            [Н. В. Ефимов, С. Б. Стечкин. Некоторые свойства чебышевских множеств](http://www.mathnet.ru/links/31d3da6577383076b4a301a9e8134c01/dan22637.pdf).
            
            [А. И. Шерстнёва, О. В. Янущик, Е. Г. Пахомова, О. Н. Имас. Лекции по высшей алгебре](https://portal.tpu.ru/SHARED/y/YANUSCHIK/Leaningw/Reference/algebra.pdf).
            
            [Г. Г. Харди. Апология математика](https://avidreaders.ru/book/apologiya-matematika.html).
            
        
        [«Math for Game Programmers», Christopher Tremblay](https://drive.google.com/file/d/1lCgiZk4zdnWxSNmlk0gvHgEM3Oa4BAqM/view?usp=drive_link) (Андрей Володин советует)
        
        [Вернон Смит “Экспериментальная экономика”](https://www.litres.ru/book/vernon-smit/eksperimentalnaya-ekonomika-kompleks-issledovaniy-po-sovokupno-49787167/) (Александр Чабан советует)
        
        [Джон фон Нейман, Моргенштерн Оскар. “Теория игр и экономическое поведение](https://pandia.ru/422310/)” (Александр Чабан советует)
        
        Школа [Опойцева ссылка](https://oschool.ru/lectures/maths/V1Yr1-O2) (Николай Коргин советует)
        
        В. Опойцев. [Интуиция и математика](https://www.koob.ru/boss/intuicija_i_matematika) (Николай Коргин советует)
        
        Герман Вейль. [Симметрия](https://drive.google.com/file/d/1_edWrKJQ7g4oLhCvCJCEBpbO_paGL1nj/view?usp=drive_link) (Савватеев рекомендуэ)
        
        Элияху Голдратт. [Цель или процесс непрерывного совершенствования](https://mybook.ru/author/eliyahu-goldratt/cel-process-nepreryvnogo-sovershenstvovaniya/read/) (Николай Коргин советует)
        
        Киселев. [Арифметика](https://drive.google.com/file/d/1FPtgt_zh7OSAYpJBJ3hrdt5wJ8fiRL5N/view?usp=drive_link) (Савватеев рекомендуэ)
        
        Киселев. [Сборник задач по арифметике для 5-6 классов](https://drive.google.com/file/d/1weAQ4vOxKFsjH6TLO0foBRBTBAWE6Lfi/view?usp=drive_link) (Савватеев рекомендуэ)
        
        [Что такое математика? Элементарный очерк идей и методов](https://drive.google.com/file/d/1t3H_92mMYyYaWNg_wsU2FWSXfNYaU6W8/view?usp=drive_link) (Савватеев рекомендуэ)
        
        ***Литвак Н. [“Математика для безнадежных гуманитариев”](https://www.litres.ru/book/nelli-litvak/matematika-dlya-beznadezhnyh-gumanitariev-dlya-teh-kto-uchil-40600183/) (Савватеев рекомендуэ) - Прочитана***
        
        ***Боулер Джо [“Математическое мышление”](https://www.litres.ru/static/or4/view/or.html?baseurl=/download_book_subscr/44379662/52692344&art=44379662&user=315004159&uilang=ru&catalit2&track_reading&subscription) (Литвак Нелли рекомендует) - Прочитана!***
        
        - Кострикин. “Алгебра. Основы алгебры” (Савватеев рекомендуэ)
            
            [Кострикин. “Алгебра. Основы алгебры. Часть 1”](https://drive.google.com/file/d/1t3H_92mMYyYaWNg_wsU2FWSXfNYaU6W8/view?usp=drive_link) (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Линейная алгебра. Часть 2 (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Часть 3  (Савватеев рекомендуэ)
            
            Кострикин. Введение в алгебру. Основные структуры. Часть 3  (Савватеев рекомендуэ)
            
        - Гаусс “Арифметические исследования” (Савватеев рекомендуэ)
            
            [Lizana Antonio. Если бы числа могли говорить. Гаусс. Теория чисел - royallib.com.rtf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e4b37083-1cd7-4945-8dde-a02d47ba4504/Lizana_Antonio._%D0%95%D1%81%D0%BB%D0%B8_%D0%B1%D1%8B_%D1%87%D0%B8%D1%81%D0%BB%D0%B0_%D0%BC%D0%BE%D0%B3%D0%BB%D0%B8_%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D0%B8%D1%82%D1%8C._%D0%93%D0%B0%D1%83%D1%81%D1%81._%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%87%D0%B8%D1%81%D0%B5%D0%BB_-_royallib.com.rtf)
            
        - **************************************************************Савватеев А. “Математика для гуманитариев. Живые лекции**************************************************************
            
            [А. Савватеев. Математика для гуманитариев. Живые лекции.pdf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/72de3d71-0757-4d13-afbe-576d1517f319/%D0%90._%D0%A1%D0%B0%D0%B2%D0%B2%D0%B0%D1%82%D0%B5%D0%B5%D0%B2._%D0%9C%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0_%D0%B4%D0%BB%D1%8F_%D0%B3%D1%83%D0%BC%D0%B0%D0%BD%D0%B8%D1%82%D0%B0%D1%80%D0%B8%D0%B5%D0%B2._%D0%96%D0%B8%D0%B2%D1%8B%D0%B5_%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8.pdf)
            
        - Шень, Верещагин “Начала теории множеств” (Савватеев рекомендуэ)
            
            [Шень, Верещагин. Начала теории множеств.pdf](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22c94b95-39c8-427e-b02d-94f612415c80/%D0%A8%D0%B5%D0%BD%D1%8C_%D0%92%D0%B5%D1%80%D0%B5%D1%89%D0%B0%D0%B3%D0%B8%D0%BD._%D0%9D%D0%B0%D1%87%D0%B0%D0%BB%D0%B0_%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D0%B8_%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2.pdf)
            
    - **************************Деловые книги**************************
        - Джим Коллинг. От хорошего к великому (посоветовал С. Михайлов, гендир GetCource)
            
            [Джим_Коллинз_От_хорошего_к_великому (1).pdf](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/cccb669f-2c07-4910-b4f8-663f73a0aa89/%D0%94%D0%B6%D0%B8%D0%BC_%D0%9A%D0%BE%D0%BB%D0%BB%D0%B8%D0%BD%D0%B7_%D0%9E%D1%82_%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B5%D0%B3%D0%BE_%D0%BA_%D0%B2%D0%B5%D0%BB%D0%B8%D0%BA%D0%BE%D0%BC%D1%83_(1).pdf)
            
        - Стивен Кови. 7 навыков высокоэффективных людей (Андрей Володин советует)
            
            [Kovi_S._7_Navyikov_Vyisokoyeffekt.a4.pdf](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/ea2f99c1-7a2b-4d05-a15b-945340749b70/Kovi_S._7_Navyikov_Vyisokoyeffekt.a4.pdf)
            
        
        [Нил Рекхэм: СПИН-продажи](https://drive.google.com/file/d/1ZZuOdZePfBleCEcuGjsFwufw1jaJifdr/view?usp=drive_link) (Юрий Солодовников советует)
        
        [Александр Ведяхин. “Сильный искусственный интеллект на подступах к сверхразуму”](https://drive.google.com/file/d/1bpTC96JdbMoMJPTc8ByuxaWYUW-0kTIZ/view?usp=drive_link)  (Юрий Солодовников советует)
        
        [Даниэль Канеман “Думай медленно… решай быстро”](https://www.litres.ru/book/daniel-kaneman/dumay-medlenno-reshay-bystro-6444517/) (Максим Суркиз советует)
        
        [Ричард Фейнман: Вы, конечно, шутите, мистер Фейнман](https://www.litres.ru/book/richard-fillips-feynman/vy-konechno-shutite-mister-feynman-142044/) (Камиль Хадиев советует)
        
        [Норберт Винер “Кибернетика и общество”](https://www.litres.ru/book/norbert-viner/kibernetika-i-obschestvo-41339381/chitat-onlayn/) (Фуад Алескеров советует)
        
        Паронджанов В. [“Как улучшить работу ума”](https://drive.google.com/file/d/1J_X0QHCsblMVx8HCd7j0dFaCLm950pPD/view?usp=drive_link)
        
    - ************Другие************
        
        [Жан Бодрийяр. “К критике политической экономии знака”](https://www.litres.ru/book/zhan-bodriyyar/k-kritike-politicheskoy-ekonomii-znaka-68010589/) (Ларюшин Иван советует)
        
        [Лев Троцкий “Литература и революция”](https://www.litres.ru/book/lev-trockiy/literatura-i-revoluciya-68658901/) (Ларюшин Иван советует)
        
        [Герман Гессе “Степной волк”](https://www.litres.ru/book/german-gesse/stepnoy-volk-138905/) (Ларюшин Иван советует)
        
        [Иоганн Гете “Фауст](https://www.litres.ru/book/iogann-volfgang-fon-gete/faust-146095/)” (Ларюшин Иван советует)
        
        [Генри Олди “Черный баламут”](https://www.litres.ru/book/genri-layon-oldi/groza-v-beznachale-121586/) (Ларюшин Иван советует)
        
        [Филип Пулман. Серия “Темные начала”](https://www.litres.ru/serii-knig/temnye-nachala/) (Анастасия Топчинина советует)
        
        [Ник Горькавый. Серия “Астравитянка”](https://www.litres.ru/serii-knig/astrovityanka/elektronnie-knigi/) (Анастасия Топчинина советует)
        
        [Сергей Лукьяненко. Цикл “Глубина”](https://www.litres.ru/book/sergey-lukyanenko/glubina-labirint-otrazheniy-falshivye-zerkala-prozrachny-166292/) (Максим Суркиз советует)
        
        [Прохоров Александр. “Русская модель управления”](https://www.litres.ru/book/aleksandr-prohorov/russkaya-model-upravleniya-127587/) (Иван Кузнецов советует)
        
- **Приложения**
    - ************Notion************
    - **************Quizlet (Карточки смыслов)**************
        
        **************************************************************************************Подписка - 2,350 р/год (месячная - 690 р/мес)**************************************************************************************
        
    - ************************************Соло на клавиатуре************************************
        
        ************************************************************************Подписка. Безлимит - 5,000р навсегда************************************************************************
        
    - Puzzle English
- **********Ссылки**********
    - **Git**
        - Скринкаст от Ильи Кантора. [Весь плейлист](https://vimeo.com/showcase/5616060)
        - [Самоучитель Git](https://githowto.com/ru)
        - [GitHub: работа с ветками и коммитами](https://gb.ru/posts/github-rabota-s-vetkami-i-kommitami)
        - [Документация на английском](https://git-scm.com/docs)
        - [GitHub: настройка и первая публикация проекта](https://gb.ru/posts/github-nastrojka-i-pervaya-publikaciya-proekta)
        - [Как устроен и работает GitHub](https://gb.ru/posts/kak-ustroen-i-rabotaet-github)
        - [Руководство по Git на русском](https://git-scm.com/book/ru/v2)
        - https://www.gitkraken.com/
        - Git для новичков. [Часть 1](https://habr.com/ru/articles/541258/); [Часть 2](https://habr.com/ru/articles/542616/)
        - [Знакомство с Microsoft Learn](https://learn.microsoft.com/ru-ru/teamblog/microsoft-learn-tour)
        - [**Интерактивный учебник-тренажер по Git**](https://learngitbranching.js.org/?locale=ru_RU)
    - **********************************Биржи фрилансеров**********************************
        - [www.youdo.com](http://www.youdo.com)
        - 
    - **********Курсы**********
        
        [Онлайн-курсы Массачусетского технологического института](https://ocw.mit.edu/) (Николай Ермаков советует)
        
        [Онлайн-курсы Google](https://learndigital.withgoogle.com/digitalgarage/courses) (Николай Ермаков советует)
        
        **[Академия Яндекса](https://academy.yandex.ru/)**
        
        ******************************************************************************ФКН ВШЭ - дистанционные занятия ([Youtube-канал](https://www.youtube.com/@hse-cs-lectures/videos))**
        
    - ********************Математика********************
        - https://www.geogebra.org/calculator - Ресурс по визуализация математики
    - ******************Нейросети******************
        - [claude.ai](http://claude.ai)/chats
        - [Gerwin.io](http://Gerwin.io)
        - Плагин Transcribe & Summary
        - [ideogram.ai](http://ideogram.ai)
        - [deepl.com](http://deepl.com)
        - [Notion.so](http://Notion.so) - подписку можно купить через “Плати-маркет
    - ****************************Фильмы и Видео****************************
        
        [YouTube-канал Alex Skutarenko](https://www.youtube.com/c/AlexSkutarenko/featured) ********************************************************************************************************(Андрей Володин советует)
        
        [YouTube-канал ИПУ РАН](https://clck.ru/32Rxfp) (Иван Козицын советует)
        
        [YouTube-канал Алексея Савватеева](https://www.youtube.com/c/%D0%9C%D0%B0%D1%82%D0%BA%D1%83%D0%BB%D1%8C%D1%82%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82)  (Фуад Алескеров советует)
        
        [Youtube-канал Душкин объяснит](https://www.youtube.com/@dushkin_will_explain) (Юрий Солодовников советует)
        
        Фильм “Заплати другому” (Андрей Володин советует)
        
        Сериал “Темные начала” (Анастасия Топчинина советует)
        
        [Сериалы и фильмы про айтишников от Яндекса](https://academy.yandex.ru/journal/7-serialov-pro-ajtishnikov)
        
    
    [**Плагин Quokka**](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3c5X242ci0tSnF4UC1QdXVYU2N0WTVYeUFNd3xBQ3Jtc0trQWF3RkNPNF9mNHRHOUJCYVFQTW04TWZTSHhwblNWbjEtNTI5ZC1BcHJEOWZiUktBN3lObTlFRm5Zc2x4SmUyZ3pKYWpVaHF5Unl0bXdtdVFPYnhqT0ZXNFZEQWxObHlYbURDMFVHTnR4Y0dROXJaYw&q=https%3A%2F%2Fquokkajs.com%2F&v=Kg08L-GJeaw)
    
    **[Рейтинг языков программирования](https://www.tiobe.com/tiobe-index/)**
    
    [**Рабочая среда для Python**](https://www.onlinegdb.com/online_python_compiler)
    
    [**Редактор блок-схем](https://programforyou.ru/block-diagram-redactor); [Редактор блок-схем 2](https://app.diagrams.net/)**
    
    [**Телеграм канал Разработчик для студентов направления ИТ**](https://t.me/gb_developer_news)
    
    **• [Научная работа Ларюшина Ивана Дмитриевича](https://gbcdn.mrgcdn.ru/uploads/asset/4312535/attachment/4c5bd028e41ca77039d2afb9f9609a30.pdf)**
    
- ********************Упражнения********************
    - [Стрелка часов](https://secundomer.online/tajmery/strelochnye-chasy-onlajn)
        
        Хочу делать 2 минуты каждый день утром и вечером (перед работой)
        
    - Пальцы рук
        
        Хочу делать каждый день минимум 1 раз по 2 минуты (в идеале 2 раза в день)
        
    - https://www.codewars.com/ - решение задач
        
        **[Учимся программировать на codewars](https://www.youtube.com/watch?v=DLZ6IpxV6qU) (!!! Посмотреть !!!)**
        
    - https://leetcode.com/ - решение задач
    - [Головоломки](https://blockly.games/puzzle?lang=ru) (Даны на Семинаре 2. Решаем задачи с массивами)
        
        
    - [Программирование вечеринки](https://studio.code.org/s/dance-2019/lessons/1/levels/1) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Программирование Minecraft](https://studio.code.org/s/mc/lessons/1/levels/1) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Программирование маршрута и действий робота](https://online.piktomir.ru/) (Даны на Семинаре 2. Решаем задачи с массивами)
    - [Игра, где можно писать код](https://codecombat.com/) (Даны на Семинаре 2. Решаем задачи с массивами)
    - ******Git******
        
        [Интерактивный тренажер](https://learngitbranching.js.org/?locale=ru_RU) по Git
        
    - **********************************************************************************************************************************************************Читать код и ставить себя на место компьютера, прописывая (печатая) действия**********************************************************************************************************************************************************
- Последовательность действий
    - Список:
        1. Quizlet Касания
        2. 
    - **************Сегодня**************
        1. Упражнение                                            Пр+ЗР+
        2. Подпись               (1р / 10 движений)    
        3. Английский язык (3 минуты)                  
        4. Китайский язык   (3 минуты)                  
        5. Тайский язык (3 минуты)                        
        6. Урок в Notion      (7 минут)                    
        7. 200 шагов           (3 минуты)                  
        8. Чай, кофе, вэйп (1 минута)                    
        9. Домашнее задание. Блок-схема 1. Отработка навыка (10 минут) 
        10. Слова 1 - 25 Словосочетания (3 минуты)
        11. Quizlet Слова 26 - 50 (3 минуты)
        12. Слова 51 - 75 в Notion (2 минуты)
- ******************Житейские******************
    - ************************************************************************Примеры действий с разными видами сложностей. Раскладывать на составляющие************************************************************************
    (1. Необходимые, 2. Необязательные, 3. Случайные).

### Эмоции, переживания, записи

- **Хронометраж**
    - 3 страницы транскриба прочесть вдумчиво - **04:00**
    - Сделать данную запись в Notion, через разные языки, переключение, формирование мысли и всякое такое, всего лишь одна строчка, однако заняла - **00:55**
    - 14 минут видеоурока (для примера *урок 6. История изменений. Git. Базовый курс*) обработка в Notion - 41**:00 +** Обработка на практике **********30:00**********
    - 25 слов в словарь Notion - **08:30**
    - Шаблон - **:**
- **Чему я научился? И научился ли вообще???**
    1. Научился в Notion применять коды Markdown, что серьезно облегчает жизнь
    2. **Научился с клавиатуры переключаться между окнами, чтобы не терять время на мышку.**
    **Alt + Tab** - переключение на второе окно, нажимаем пробел или стрелочками, куда необходимо сдвинуть видео и затем быстро повторяем сочетание, чтобы вернуться к записям в Notion. Классная мелочь. Экономит вроде как доли секунды, однако ввиду крайне частого применения, думаю, сэкономит серьезное время + устраняет лишние телодвижения.
- **14.09.2023**
    
    Git. Склеивание коммитов - нихера не понял [про это](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
    
- **29.08.2023**
    
    ******************************Начался модуль “Введение в контроль версий”.****************************** Первый урок - Знакомство с контролем версий. И вот Преподаватель говорит, мол, вы уже наверное слышали за разные такие вещи. Но НЕТ!!! Я впервые это слышу. Никогда ранее о таком не слыхал. Надеюсь это не такая сложная штука, как линейное уравнение по математике, надо которым я бьюсь уже 4й день
    
    ****************************************************************************************************************Узнал про существование такой программы, как Git,**************************************************************************************************************** которую буду устанавливать на комп.
    
    **********************************************Введение в математику.**********************************************
    Этот ипаный алгоритм решения линейного уравнения. Я нихера не понимаю, как он устроен. Я почти уже зазубрил его, но не могу полноценно применять. Это какой-то слом башки. Чувствую себя дураком. Дети из 4 математического класса это умеют, а я нет!
    
- **28.08.2023**
    
    Скачал и установил Puzzle English. Попробовал. Тяжело, но блин!!! Отвал сцуко башки!!!
    
- ********************25.08.2023********************
    
    Скачал кучу книг по программированию на основе ролика “Книги, которые сделают из тебя хакера”.
    Когда их еще успевать читать? Ваще без понятия!!!
    
- **20.08.2023**
    
    На семинаре “Введение в программирование” скачал 5 ссылок на программирование, кодирование, головоломки и всякие полезные штучки
    
- **16.08.2023**
    
    Переформатировал всю Доску под новую недельную “расстановку” по типу Миро
    
- **10.08.2023**
    
    Узнал про Quizlet и карточки смыслов. 
    А также про Миро. Блин, сколько ж всего, чего я не знаю и даже не подозревал о существовании!
    
- **09.08.2023**
    
    Полностью перешел на ************Notion************. Вот уж поистине классная программа. Гораздо функциональнее Гугл Докс. 
    
- **08.08.2023**
    
    Узнал про упражнение “Пальцы рук”
    
- **06.08.2023**
    
    Начал Модуль “Умение учиться”
    Узнал про упражнение “Стрелка часов”
    
- **02.08.2023**
    
    Начал обучение на ГБ. Дух захватывает. Ничего не понятно, но оооочень интересно!!!
    

## Обучение

- **Программы обучения**
    - Программа обучения “Разработчик”. Специализация “Программирование”
        - Основной блок - 2 месяца
            1. Введение в программирование
            2. Введение в контроль версий + практикум
            3. Знакомство с языками программирования + практикум
            4. Знакомство с базами данных
            5. Итоги блока. Выбор специализации
        - Курсы по выбору
            1. Математика и информатика для программистов
            2. База данных в музее
        - Дисциплины по специализации - 7 месяцев
            1. Знакомство с языком Python
            2. Java: знакомство и как пользоваться базовым API
            3. Объектно-ориентированное программирование (ООП)
            4. Промежуточная аттестация
            5. Исключения в программировании и их обработка
            6. Операционные системы и виртуализация (Linux)
            7. Контейнеризация
            8. Базы данных и SQL
            9. Итоговая аттестация
        - Курсы по выбору
            1. Алгоритмы и структуры данных
            2. Контроль версий углубленно (Git)
            3. Компьютерные сети
            4. Гибкие методологии (Agile, SCRUM, Канбан и другие)
            5. Веб верстка html / css
            6. Вводный курс Big Data
            7. Искусственный интеллект
            8. Кибернетика умных устройств
            9. Data Science передовые технологии
            10. Основы информационной безопасности
            11. Парадигмы программирования и языки парадигм
        - Технологические специализации - 3 месяца
            - Веб-разработка на Java (Backend)
            - Frontend разработка на Angular.JS
            - Frontend разработка на Vue.JS
            - Веб-разработка на PHP Laravel
            - Веб-разработка на PHP Symphony
            - 

### Календарь учёбы /прописываем по понедельник включительно/

- **Текущее состояние (на сегодняшний день. Обновлять утром!) 14.09.2023**
    - [ ]  Составить данный список дел
    - [ ]  Секундная [стрелка](https://secundomer.online/tajmery/strelochnye-chasy-onlajn)
    - [ ]  Пальцы рук
    - [ ]  [Как изучать программирование](https://www.youtube.com/watch?v=Cser9bunQ7Q) - 31 мин
    - [ ]  [Путь программиста, который почти никто не вывозит](https://www.youtube.com/watch?v=BZ2Ee3HgIVY&t=486s) - 14 мин
    - [ ]  [Путь программиста с полного нуля до Дзен за 24 шага](https://www.youtube.com/watch?v=uOa7XtkK1vQ) - 25 мин Конспект и раскладка
    - [ ]  Как работать с битами. [Основы программирования](https://www.youtube.com/watch?v=qewavPO6jcA&t=1327s) - 25 мин
    - ************************************Самообучение. Чтение, Просмотр и Анализ************************************
        - **************English**************
            - [ ]  Puzzle English. Урок
            - [ ]  ********.0,9% - 39,640 слов******** Puzzle English. Добавление новых слов 280
            - [ ]  ********.0,7% - 39,720 слов******** Puzzle English. Тренировка новых слов 280
            - [ ]  Puzzle English. Тренировка созревших слов 360
            - [ ]  Puzzle English. Добавить незнакомые из А2 - T, U, V, W, X, Y, Z
            - [ ]  1,200  Из списка [“5,000 слов”](https://britlex.ru/5000_7000_English_words.pdf) добавить 15 слов. К 01.10.2024 будут добавлены все
            - [ ]  ******************.054 стр.****************** B. Shwartz “High Performance” 826 стр. **********************************Закладка 17 стр. (1 стр. в день)**********************************
        - **Python**
            - **Кирилл Панфилов. [Youtube - канал](https://www.youtube.com/channel/UCCC7ihYh4SNQZj26adlk2Kg)**
                - **Основы Python**
                    - [x]  Основы Python 1.1: [Представление данных, встроенные типы](https://www.youtube.com/watch?v=V9u3siTiNh0&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=1&pp=iAQB) - 18 мин 01.12.2023
                    - [x]  Основы Python 1.2: [Integer и Float](https://www.youtube.com/watch?v=tKArJcXrLHg&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=2&pp=iAQB) - 24 мин - 02.12.2023
                    - [x]  Основы Python 1.3: [String (Строки) часть 1](https://www.youtube.com/watch?v=yydEivzoam4&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=3&pp=iAQB) - 24 мин - 03.12.2023
                    - [x]  Основы Python 1.4: [String (Методы строк) часть 2](https://www.youtube.com/watch?v=3QenJXw34ww&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=4&pp=iAQB) - 27 мин - 04.12.2023
                    - [x]  Основы Python 1.5: [Boolean (логический тип данных, True и False)](https://www.youtube.com/watch?v=31_i9O81sKs&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=6&pp=iAQB) - 25 мин  - 05.12.2023
                    - [x]  Основы Python 2.1: [Оператор ветвления If (elif, else)](https://www.youtube.com/watch?v=97FqvEouqao&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=5) - 30 мин - 06.12.2023
                    - [x]  Основы Python 3.1: [Оператор цикла While](https://www.youtube.com/watch?v=HX0VGnsUMqE&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=7&pp=iAQB) - 28 мин - 07.12.2023
                    - [x]  Основы Python 3.2: [Оператор цикла For](https://www.youtube.com/watch?v=qEFPDTcD3aw&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=8&pp=iAQB) - 21 мин - 08.12.2023
                    - [x]  Основы Python 4.1: [Коллекции. Общее](https://www.youtube.com/watch?v=UdiOOsS4xSI&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=9&pp=iAQB) - 28 мин - 09.12.2023
                    - [ ]  Основы Python 4.2: [Списки (List). Общее](https://www.youtube.com/watch?v=FTb3ymAwqf0&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=10&pp=iAQB) - 23 мин - 10.12.2023
                    - [ ]  Основы Python 4.3: [Списки (List). Методы](https://www.youtube.com/watch?v=KESDflLpdT8&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=11&pp=iAQB) - 29 мин - 11.12.2023
                    - [ ]  Основы Python 4.4: [Кортежи (Tuple)](https://www.youtube.com/watch?v=Ni0bWILwvao&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=12&pp=iAQB) - 20 мин - 12.12.2023
                    - [ ]  Основы Python 4.5: [Множества (Set)](https://www.youtube.com/watch?v=4qr5oO8etXE&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=13&pp=iAQB) - 42 мин - 13.12.2023
                    - [ ]  Основы Python 4.6: [Словари (Dict)](https://www.youtube.com/watch?v=0RIusQhJ8hw&list=PLF1LtqdZG0ZGlm7DAVjlM_NM1p_y2eMdL&index=14&pp=iAQB) - 38 мин - 14.12.2023
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                    - [ ]  Основы Python
                - **Блоки кода**
                    - 001
                        
                        ```python
                        a = 4
                        b = a
                        c = 3
                        
                        print(type(a))
                        print(type(b))
                        print(type(c))
                        print(id(a))
                        print(id(b))
                        print(id(c))
                        
                        c += 1
                        
                        print(id(c))
                        print(c is a is b)
                        ```
                        
                    - 002
                        
                        ```python
                        a = 5
                        print(type(a))
                        
                        b = 5.67
                        print(type(b))
                        
                        a + b
                        a - b
                        a * b
                        a / b
                        a // b
                        a % b
                        a ** b
                        a < b
                        a <= b
                        a > b
                        a >= b
                        a == b
                        a != b
                        
                        a += b
                        a += 5
                        b += 2
                        a /= 2
                        a %= 2
                        a //= 2
                        
                        print(a)
                        print(b)
                        print(int(a))
                        print(int(b))
                        
                        import math
                        number = 1.3
                        
                        print(number)
                        print(round(number))
                        print(math.floor(number))
                        print(math.ceil(number))
                        ```
                        
                    - 003
                        
                        ```python
                        print((0.1 + 0.1 + 0.1 - 0.3) == 0)
                        print((1 + 1 + 1 - 3) == 0)
                        print(0.1 + 0.1 + 0.1 - 0.3)
                        
                        print(0.56)
                        print(0.56 * 100)
                        
                        from decimal import Decimal
                        
                        number = Decimal("0.56")
                        print(number * 10)
                        ```
                        
                    - 004
                        
                        ```python
                        some_one = 'word'
                        some_two = 'word'
                        some_three = 'wo\"rd'
                        print(some_three)
                        some_four = 'wo\'r\'d'
                        print(some_four)
                        print(type(some_two))
                        
                        string = 'word' + ' one more word'
                        print(string[3])
                        print(string[5:8])
                        print(id(string))
                        print(id(string[5:8]))
                        
                        string_slice = string[8:]
                        print(string_slice)
                        
                        string_slice2 = string[:-5]
                        print(string_slice2)
                        
                        string_slice3 = string[::2]
                        print(string_slice3)
                        
                        string_slice4 = string[::-1]
                        print(string_slice4)
                        ```
                        
                    - 005
                        
                        ```python
                        string = 'Грязный питон - охуенный питон - еще одна з'
                        
                        print(string.find('з'))  # 3
                        print(string.find('питон'))  # 8
                        print(string.split(' '))  # ['Грязный', 'питон', '-', 'охуенный', 'питон', '-', 'еще', 'одна', 'з']
                        print(string.split('пи'))  # ['Грязный ', 'тон - охуенный ', 'тон - еще одна з']
                        print(string.split('-'))  # ['Грязный питон ', ' охуенный питон ', ' еще одна з']
                        print(string.split())  # ['Грязный', 'питон', '-', 'охуенный', 'питон', '-', 'еще', 'одна', 'з']
                        
                        print(string.replace('п', 'П'))  # Грязный Питон - охуенный Питон - еще одна з
                        print(string.replace(' ', '|'))  # Грязный|питон|-|охуенный|питон|-|еще|одна|з
                        print(string.replace(' ', '|', 3))  # Грязный|питон|-|охуенный питон - еще одна з
                        
                        number = '67' + '1'
                        print(number.isdigit())  # True
                        print(string.istitle())  # False
                        
                        print(string.startswith('Гр'))
                        
                        print(string.count('п'))
                        print(string.count('о'))
                        
                        string2 = "- **************English**************- [ ]  Puzzle English. Урок- [ ]  Puzzle English. Тренировка новых слов 140- [ ]  Puzzle English. Тренировка созревших слов 140- [ ]  Puzzle English. Добавить незнакомые из А2 - T, U, V, W, X, Y, Z- [ ]  Английский язык. [Словарь Notion](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). 1,650 - 2,625 слов- [ ]  990  Из списка [“5,000 слов”](https://britlex.ru/5000_7000_English_words.pdf) добавить 15 слов. К 01.10.2024 будут добавлены все- [ ]  ******************.040 стр.****************** B. Shwartz “High Performance” 826 стр. **********************************Закладка 17 стр. (1 стр. в день)**********************************"
                        print(string2.count('*'))
                        print(len(string2))
                        print(string2.replace('*', ''))
                        
                        print(string2.strip())
                        ```
                        
                    - 006
                        
                        ```python
                        # try:
                        #     number = int(input('Enterthe number: '))
                        # except:
                        #     print('You entered not a number!')
                        
                        # number = input('Enter the number: ')
                        # if 0 < int(number) < 10 and number.isdigit():  # letters to int -> Error
                        #     print('You entered the number from 1 to 10')
                        
                        # number = input('Enter the number: ')
                        # if number.isdigit() and - 0 < int(number) < 10:  # lazy if - without the error
                        #     print('You entered the number from 1 to 10')
                        
                        number = input('Enter the number: ')
                        if number.isdigit() and int(number) != 0:
                            print(100 / int(number))
                        ```
                        
                    - 007
                        
                        ```python
                        number = int(input('Enter the number: '))
                        number = 'even' if number % 2 == 0 else 'odd'
                        print(number)
                        ```
                        
                    - 008
                        
                        ```python
                        number = 10
                        print(number % 2 == 0)
                        print(100 + (number % 2 == 0))
                        
                        print('not' * (number % 2 != 0) + 'even')
                        
                        print(bool(''))
                        print(bool(0))
                        print(bool([]))
                        print(bool({}))
                        print(bool(tuple()))
                        print(bool(None))
                        print(bool(set()))
                        print(bool(number))
                        
                        if number:
                            print(100 / number)
                        ```
                        
                    - 009
                        
                        ```python
                        m = 0
                        # while True:
                        #     n += 1
                        #     print('Huilow')
                        #     if n > 10:
                        #         print('Zaipalsa')
                        #         break
                        
                        # while m <= 10:
                        #     n = 0
                        #     while n <= 10:
                        #         n += 1
                        #         if n % 2:
                        #             continue
                        #         if n == m:
                        #             print('n == m')
                        #             break
                        #         else:
                        #             print('Huilow', n, m)
                        #     m += 1
                        # print('Zaipalsa')
                        
                        flag = True
                        while m <= 10 and flag:
                            n = 0
                            while n <= 10 and flag:
                                n += 1
                                if n % 2:
                                    continue
                                if n == m:
                                    print('n == m')
                                    flag = False
                                else:
                                    print('Huilow', n, m)
                            m += 1
                        print('Zaipalsa')
                        ```
                        
                    - 010
                        
                        ```python
                        lst = ['a', 'b', 'c', 'd']
                        for i in range(len(lst)):
                            if lst[i] == 'c':
                                lst[i] = 'C'
                        
                        print(lst)
                        
                        for i in range(len(lst)):
                            if lst[i] == 'd':
                                lst.remove('d')
                        
                        print(lst)
                        
                        b = [2, '5', True, 8.908, '@sutula', False]
                        for item in b:
                            print(item)
                        ```
                        
                    - 011
                        
                        ```python
                        from copy import deepcopy
                        
                        a = [1, 2, [3, 4]]
                        b = deepcopy(a)
                        print(a)
                        print(b)
                        
                        a.append(4)
                        print(a == b)
                        print(a is b)
                        print(a)
                        print(b)
                        a[2][1] = 'AAAA'
                        b.append('Я сильная и независимая')
                        print(a)
                        print(b)
                        print(id(a[0]))
                        print(id(b[0]))
                        
                        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                        print(matrix)
                        ```
                        
                    
                    ```python
                    
                    ```
                    
                    ```python
                    
                    ```
                    
            
            - [ ]  **.64%** Васильев А. “Python на примерах”, 430 стр. с 17.11.23 **Закладка 175 стр. (2% в день)**
            
            - [ ]  **.26% [Основы Python](https://education.yandex.ru/handbook/python) - Хендбук от АЯ, 20 пар, 260 задач. Закладка 2 пар. (1% в день)**
            - [ ]  **********************************Задачи - 42 (3 задачи в день)**********************************
            - [x]  Решения Задач. Видео 1:32:40
            
            - [ ]  ********************************************************************************************************************.49% -******************************************************************************************************************** [Python - Полный курс от Богдана, 15:40 с 16.11.23](https://www.youtube.com/watch?v=cfJrtx-k96U)********************************************************************************************************************. Закладка 01:24********************************************************************************************************************
            - [ ]  Python. [Roadmap](https://www.youtube.com/watch?v=i6n9-_oh_2E&t=520s) - 27 мин
        - **C#**
            - [ ]  **********.99%********** [Дрейер Мартин. С# для школьников](https://drive.google.com/file/d/1QgjLk2g9rG87jC5SoVS-SXF2EaKn1CRA/view?usp=drive_link). 128 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). ****************************Закладка 102 стр.****************************
            - [ ]  **.77% - 377 стр.** «[Программирование на C# для начинающих. Часть 1](https://drive.google.com/file/d/1iiEpF-ySsozaTzlZAycNwsYhaqLyp7f3/view?usp=drive_link)», Васильев А. 586 стр. ****************Закладка 302 стр. (1% в день)****************
            - [ ]  **.24,0%** «[C# Полное руководство](https://drive.google.com/file/d/1q1gFG89mbweMsNxQ_fjzOtG91gdc_JCp/view?usp=drive_link)», Шилдт Г. 1,056 стр. ****************Закладка 209 стр. (0,3% в день)****************
            - [ ]  **.24,0%** «[Разработка обслуживаемых программ на языке C#](https://drive.google.com/file/d/1OSyEwvwIodTLNlq6qOvXJApK_NlX3bUA/view?usp=drive_link)», Джуст В. 194 стр. ****************Закладка 39 стр.****************
            - [ ]  ******.11,7%** Троелсен Э. [“Язык программирования C#7](https://drive.google.com/file/d/1N7aTGyQwLVQP0ykN7x2aWkKEsLFy14m3/view?usp=drive_link)”. 1,330 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). **Закладка 64 стр**
            - [ ]  ******.11,7%** [Джеффри Рихтер. Программирование C#](https://drive.google.com/file/d/1pSCrd1lKnX2XOzdG8WsqQpUKZo69dD_U/view). 896 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21) **Закладка 50 стр.**
            - [ ]  **.24,0%** “[Unity и C#. Гейдев от идеи до реализации](https://drive.google.com/file/d/1A07H04R3g7kII1-k7wL34yY3hbPuMSCh/view?usp=drive_link)” 930 стр. ****************Закладка 65 стр. (0,3% в день)****************
            - [ ]  ******.16,5%****** “C# 7.0 Полное описание языка” Д. Албахари 1,026 стр.  **************************Закладка 31 стр. (0,3% в день)**************************
            
            - [ ]  **************.28% -************** [Курс C# с нуля. Степан Береговой](https://www.youtube.com/watch?v=hG1fTusZ_Lk&list=PL9dWBtRq5J0KoaUcSmEaklxKTwGKAeU68) - 25 уроков с 12.11.23. **********************************************************Закладка - (2 урока в неделю)**********************************************************
            
            - [ ]  **.77% - 7:48 мин** Курс 9-часовой [“Весь C# с нуля до профи”](https://www.youtube.com/watch?v=w8rRhAup4kg&t) с 01.10.2023 **Закладка (1% в день) - 5:42**
            
            - [ ]  **************.48% - 510 мин************** [Курс C# от новичка к профессионалу](https://www.youtube.com/watch?v=KyFWqbRfWIA&list=PLQOaTSbfxUtD6kMmAYc8Fooqya3pjLs1N&pp=iAQB) #SimpleCode 104 ур. - 1,500 мин **(1% в день). Закладка -**
        - **Git**
            - [ ]  **.75%** [Б. Штрауб “Git для профессионального программиста](https://gbcdn.mrgcdn.ru/uploads/asset/4245110/attachment/d4eb8c232f8f2bdf4e42ba7cb49e0c50.pdf) 496 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). **Закладка 236 стр.**
        - **Алгоритмы**
            
            
            - [ ]  **.32% “[Основы алгоритмов](https://academy.yandex.ru/handbook/algorithms)” - Хендбук от АЯ, 41 пар. Закладка 3 пар. (1% в день)**
            - [ ]  **.17%** “[Учебник по машинному обучению](https://academy.yandex.ru/handbook/ml)” **Хендбук от АЯ,** 35 пар. **Закладка  (1% в день)**
            - [ ]  **.12,2%** “[Анализ данных в социальных науках](https://academy.yandex.ru/handbook/data-analysis)” **Хендбук от АЯ,** 42 пар. **Закладка 3 пар.  (0,3% в день)**
            - [ ]  Ускорь свой код в миллион раз. [Алгоритмы](https://www.youtube.com/watch?v=cyIw3NKfdGw&t=1177s) - 33 мин
        - **Математика**
            - [ ]  ************.42%************ “Удовольствие от Х” С. Строгац, 293 стр. ****************************************Закладка 54 стр. (1% в день)****************************************
            - [ ]  ********.37%******** Уилкс Дж. “Математика в огне. Нескучный учебник”, 514 стр. **********************Закладка 30% (1% в день)**********************
            - [ ]  ********.11,1%******** Диксит А. “Теория игр. Искусство стратегического мышления”, 506 стр. ************************************************************Закладка 14 стр. (0,3% в день)************************************************************
        - **Общее развитие**
            - [ ]  **********.60%********** П. Палагин “Скорочтение на практике”, 290 стр. ************************************************Закладка 64% (1% в день)************************************************
            - [x]  **.50,0%** Деан С. “Сознание и мозг. Как мозг кодирует мысли” 417 стр.. А[нализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21). ****************Закладка стр. 251  (0,5% в день)****************
            - [ ]  **********.24,9%********** “Гении и аутсайдеры”. М. Гладуэлл. ****************Закладка 54% (0,3% в день)****************
            - [ ]  ******.29,7%****** “Как устроена экономика” Ха-Джун Чанг ****************Закладка 19% (0,3% в день)****************
        - **Художественная литература**
            - [x]  ******.02,4%****** “Темный лес” Лю Цысинь, 651 стр. 10.12.23 -  ****************(0,3% в день)****************
        - [ ]  Поиск книг Джеймса Чамберса
        - [ ]  Поиск книг Дэвида Пэкетта
        - [ ]  Поиск книг Саймона Тиммса
    - **************************Рутинные Ежедневные**************************
        - [x]  Подпись 10 раз. С 16.10.2022 по 22.09.2026
        - [ ]  Вакуум 210 раз
        - [ ]  Прыжки, 100 секунд
        - [ ]  Зарядка
    - БУФЕР
        - [x]  ******.08,5% “Сердце тьмы” Д. Конрад,****** 448 стр. ****************************************************************Закончено 22.11.23 (0,3% в день)****************************************************************
        - [x]  ******.24,3%****** “Русская модель управления” А. Прохоров, 496 стр. ****************Закончено 21.11.23 (0,3% в день)****************
        - [x]  **.25,8%** “Думай медленно, решай быстро” Д. Канеман, 710 стр. **Закончена 20.11.23 (0,3% в день)**
        - [x]  ********.10,5%******** Островский Н. [“Как закалялась сталь”](https://www.litres.ru/book/nikolay-ostrovskiy/kak-zakalyalas-stal-14128044/), 420 стр. **********************(0,3% в день с 13.11.23)**********************
        - [x]  ******.30,3%****** “Степной волк” Г. Гессе, 288 стр. ****************Закладка 33% (0,3% в день)****************
        - [x]  **************.93% - 150 мин************** Вебинар от ГБ: [Начни зарабатывать на нейросетях](https://www.youtube.com/watch?v=0vtNWki52Bk&t=3093s). **********************Закладка - 06:02 из********************** 06:02 [анализ, конспект](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
        - [x]  **.77%** НейроКазань. Конференция. Анализ. ****************************************************************Закладка (1% в день - 5 мин) - 08:07 из 08:07****************************************************************
        - [x]  ******.84%****** “Код. Тайный язык информатики” Ч. Петцольд, 445 стр.
        - [x]  **************.22,4%************** “Литература и революция” Л. Троцкий, 510 стр. 26.08 - 23.11.23 ****************(0,3% в день)****************
        - [x]  **********.12,9%********** Конрад Дж. “Сердце тьмы”, 284 стр. ************************************************************Закладка 03 стр. (0,3% в день)************************************************************
        - [x]  ******.84%****** “Занимательная экономика” А. Савватеев, 352 стр. 25.11.23
        - [x]  ******.26,1%****** “Фауст” И. Гете, 768 стр. ****************(0,3% в день)****************
        - [x]  ******.46,0%****** “Тонкое искусство пофигизма” М. Мэнсон, 192 стр.  ****************(0,5% в день)****************
        - [x]  **.76%** Албахари Б. “[C# 7.0 Карманный справочник](https://drive.google.com/file/d/1x7x7Pa9MfcnDvQgVetGiy4JX7fx_2Dy8/view?usp=drive_link)” 174 стр. ****************с 06.09 по 28.11.23 !!! (1% в день)****************
        - [x]  ******.26,4%****** “Задача трех тел” Лю Цысинь, 440 стр. ****************(0,3% в день)****************
        - [x]  ******.06,3%****** “Война и мир” Л. Толстой, 1,700 стр.  **************************(0,3% в день)**************************
        - [x]  ************.24,6%************ “Кибернетика и общество”. Н. Винер, 288 стр. ****************(0,3% в день)****************
        - [x]  ******.27,0%****** “Гроза в Безначалье” Г. Олди, 450 стр.  02.12.2023 ****************(0,3% в день)****************
        - [x]  ******.04,2%****** “Человек - непослушное дитя биосферы” Дольник, 352 стр.  В.Р. 07.12.2023 ****************(0,3% в день)****************
        - [x]  ******.04,2%****** “Преступление и Наказание” Ф.М. Достоевский , 730 стр.  ****************(0,3% в день)****************
        - [x]  ******.25,8%****** “Глубина” С. Лукъяненко, 850 стр. ****************Закладка 39% (0,3% в день)****************
        - [x]  ******.14%****** “На пенсию в 35 лет” Бабайкин, 180 стр, 09.12.2023 ****************(1% в день)****************
        - [x]  ******.14%****** “Фак ю мани” Бабайкин, 210 стр 10.12.2023 ****************(1% в день)****************
    - **********************СДЕЛАНО !!!**********************
        
        
        - [x]  **************************.100%************************** [Как стать программистом Middle+ уровня](https://www.youtube.com/watch?v=fhYd20oLYlE&list=WL&index=1&pp=gAQBiAQB) с 12.11.23  - 127 мин  ******************(25% в неделю)******************
        - [x]  **.100%**. [Бхаргава. “Грокаем алгоритмы”](https://drive.google.com/file/d/1xx40h84UYIWurnwHUnd7sVY_OKWDlHDp/view?usp=drive_link). 290 стр. [анализ.](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
        - [x]  **********.100%**********  Литвак Н. [Математика для безнадежных гуманитариев](https://subscription.litres.ru/static/or3/view/or.html?art_type=4&bname=%25D0%259C%25D0%25B0%25D1%2582%25D0%25B5%25D0%25BC%25D0%25B0%25D1%2582%25D0%25B8%25D0%25BA%25D0%25B0%2520%25D0%25B4%25D0%25BB%25D1%258F%2520%25D0%25B1%25D0%25B5%25D0%25B7%25D0%25BD%25D0%25B0%25D0%25B4%25D0%25B5%25D0%25B6%25D0%25BD%25D1%258B%25D1%2585%2520%25D0%25B3%25D1%2583%25D0%25BC%25D0%25B0%25D0%25BD%25D0%25B8%25D1%2582%25D0%25B0%25D1%2580%25D0%25B8%25D0%25B5%25D0%25B2.%2520%25D0%2594%25D0%25BB%25D1%258F%2520%25D1%2582%25D0%25B5%25D1%2585%252C%2520%25D0%25BA%25D1%2582%25D0%25BE%2520%25D1%2583%25D1%2587%25D0%25B8%25D0%25BB%2520%25D1%258F%25D0%25B7%25D1%258B%25D0%25BA%25D0%25B8%252C%2520%25D0%25BB%25D0%25B8%25D1%2582%25D0%25B5%25D1%2580%25D0%25B0%25D1%2582%25D1%2583%25D1%2580%25D1%2583%2520%25D0%25B8%2520%25D0%25BF%25D1%2580%25D0%25BE%25D1%2587%25D1%2583%25D1%258E%2520%25D0%25BB%25D0%25B8%25D1%2580%25D0%25B8%25D0%25BA%25D1%2583&art=40600183&user=315004159&uuid=8bbc9843-2e12-11e9-be98-0cc47a5f3f85&uilang=ru&trial=1). 270 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21).
        - [x]  **.100%** Боулер Д “[Математическое мышление](https://www.litres.ru/static/or4/view/or.html?baseurl=/download_book_subscr/44379662/52692344&art=44379662&user=315004159&uilang=ru&catalit2&track_reading&subscription)”. 400 стр. анализ.
        - [x]  **.100%** [Кормен Т. “Алгоритмы. Вводный курс”](https://drive.google.com/file/d/1C5wEWj3IWNNQpHIHS4bNGZP40d7M5km2/view?usp=drive_link). 208 стр. [анализ](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21).
    - **********Видео**********
        - [ ]  Буткемп. [Продакт-менеджер](https://gb.ru/lessons/375308). Урок 2
        - [ ]  Буткемп. [Проджект-менеджер](https://gb.ru/lessons/375246). Урок 2
        - [ ]  Буткемп. [Аналитика](https://gb.ru/lessons/375096). Урок 2
        - [ ]  Буткемп. [Программирование](https://gb.ru/lessons/375186). Урок 1
        - [ ]  [Реферальная программа GeekBrains](https://gb.ru/chapters/33360). Урок 1
        - [ ]  [Стартовое обучение наставников](https://gb.ru/chapters/20328). Урок 1
        - [ ]  ****GeekSpeak_Разработчик.**** [Урок 5](https://gb.ru/lessons/256896) ********00 - 30 мин из 40 мин Ознакомиться
            - [ ]  Команда ИТ. [Урок 6](https://gb.ru/lessons/352778) 28.09.2023 [Урок 7](https://gb.ru/lessons/352779) 04.10.2023
            - [ ]  ********GeekSpeak_DigitalMaster&Geek.******** [Урок 15](https://gb.ru/lessons/299112) ********20.10.2023********
            - [ ]  Канал [Code Blog](https://www.youtube.com/playlist?list=PLIIXgDT0bKw6i4jQkHVgIrnsP-DcvBieq). CLR via C#. [Видео.](https://www.youtube.com/watch?v=m_nvUAXdbOY&list=PLIIXgDT0bKw6i4jQkHVgIrnsP-DcvBieq) Глава 2. Модель выполнения кода в среде CLR 15 - 30 мин
        - [x]  ****************CS50**************** [Лекция 4](https://www.youtube.com/watch?v=ej3EA451m2c)****************. Гарвард. 15**************** - 30 - 53 мин из 53 мин. Ознакомиться
    - ********************************************Факультативы и Касания********************************************
        - [ ]  Факультатив. [Самоучитель Git.](https://githowto.com/ru/creating_a_branch) Часть 31. [Раздел (чтоб не искать)](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)
            - [ ]  Факультатив - Касание. [Упражнения по Git](https://learngitbranching.js.org/?locale=ru_RU).
            - [ ]  Факультатив - Касание. git-scm. Руководство. 1.1 Введение - [Ссылка](https://git-scm.com/book/ru/v2/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9)
            - [ ]  Факультатив - Касание. Atlas. Станьте гуру в Git. [Материал 1](https://www.atlassian.com/ru/git/tutorials/what-is-version-control) - Изучение и анализ
            - [ ]  Факультатив - Касание. [Git. Vimeo.](https://vimeo.com/showcase/5616060) Видео курс. Урок 1.1 из 72
        - [ ]  *Превентивно!* Знакомство с базами данных. [Лекция 1](https://gb.ru/lessons/370768)
            - [x]  [Транскриб](https://gbcdn.mrgcdn.ru/uploads/asset/4353003/attachment/fea2d5fc63798963884d43dd915a3988.pdf). Стр 13 - 14 из 14 Оформление и Анализ. **************************Закл - стр 14**************************
            - [ ]  [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3937498/attachment/f766e8412c307419774221800f2a3f00.pdf) 1. Стр 01 - 03 из 19. Анализ
            - [ ]  [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3589193/attachment/77636f965911bfa22e6273b81dc2da5f.pdf) 2. Стр 01 - 16 из 55
            - [ ]  [Видео](https://www.youtube.com/embed/3oE1o-MqgBg;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479) Лекции. 00:30 из 01:07
            - [x]  Ознакомиться с [Youtube каналом “Душкин объяснит”](https://www.youtube.com/@dushkin_will_explain)
    - [ ]  Знакомство с языками программирования. [Лекция 7](https://gb.ru/lessons/362976) Лекция. ****************************Закладка 09:11****************************
    - [ ]  Знакомство с языками программирования. [Семинар](https://gb.ru/lessons/362983) 7
    - [ ]  Знакомство с языками программирования. Семинар 7. **[Домашнее задание](https://gb.ru/lessons/362983/homework)**
        - [ ]  Задача 1
        - [ ]  Задача 2
        - [ ]  Задача 3
    - [ ]  Сходить на Тренировку
        - [x]  Заказать переходник
        - [x]  Заказать манго
        - [x]  Заказать чай, 3 кг
        - [x]  Заказать швабру самую крутую
    - [x]  Знакомство со специализациями. ******************************Домашняя работа******************************
- **Текущие приоритеты, хвосты, незавершенки, срочняк!!!**
    - Чат ********************************GPT !!! Что это?******************************** Как ИИ помогает решать задачи. Выяснить!!!

### Подготовка

### Модуль: Умение учиться. 06.08 - 16.08.2023

## ********************************Цели и Задачи КУРСА (очень ВАЖНО !)********************************

1. **Понять, как мозг запоминает информацию и создает Навыки**
2. **Научиться запоминать быстро и надолго**
3. **Правильно планировать учебу, как Проект, избегая ментальные ловушки**
4. **Изучить инструменты эффективного обучения, чтобы достигать Цели**

<aside>
☝ **********************************************************************************************************************Тренируемся создавать Чанки на темах и Итогах уроков курса**********************************************************************************************************************

</aside>

### 4 Темы

1. **Нейронауки и Обучение.** Как мозг воспринимает и обрабатывает новое
2. **Учеба как Проект.** Планирование, Задачи и контроль Прогресса
3. **Память, фрагментация и блоки смыслов.** Рабочая и долговременная Память. Блоки смыслов - чанкинг. Другие инструменты запоминания
4. **Прокрастинация и ментальные ловушки.** Как учиться быстро, не делая бесполезного

### 4 Касания нового

1. **Конспекты на листах**
2. **Облако знаний**
3. **Синопсис**
4. **Домашние задания**

### Результаты КУРСА

Вы научитесь:

1. **Планировать и управлять своей учебой**
2. **Выводить синопсис информации и формировать устойчивые блоки знаний**
3. **Правильно настраивать мозг на обучение и поддерживать энергию для учебы**
- **Урок 1. Вводный 06.08.2023**
    
    **********Умение учиться. Как эффективно приобретать новые знания и навыки**********
    
    - Преподаватель: ******************************Игорь Васильев-Распопов******************************
        - Учитель
        - Мыслитель
        - Исследователь жизни
        - Специалист по созданию образовательной среды
        - Методолог и методист
        - Руководитель проектов и продуктов
        
        Знакомимся ближе. Я - ваш Наставник и Советник, а не “спикер у доски”. 
        Учимся по методу Peer-2-Peer
        
        **********************Опыт и Навыки:**********************
        
        - Руководитель спецпроектов в Группе развития ГБ
        - Более 30 лет в бизнесе, обучении и управлении Проектами
        - Сферы: образование, спорт, путешествия, строительство, развитие детей
        - Живу в Италии. Работаю в Швейцарии, Австрии и онлайн по всему миру
        - Инструктор по яхтингу и айкидо
        - Говорю на английском и итальянском
        - Отец 3-х сыновей
        
        **************************************************Мои наука и исследования:**************************************************
        
        - Андрагогика и педагогика
        - Дизайн образовательной среды и программ обучения
        - Нейронауки в обучении
        - Образование, ориентированное на учащихся
        - Эмоциональный интеллект
        - Адаптивность и методы развития навыков
        - Прикладная философия для детей и взрослых
        - Благополучие и счастье
        - Работаю над новой философией эволюции в интеллектуальной лаборатории ПРИЗМА
        
        ****************************************************Адвокат жизни как Познания****************************************************
        
        - Московский Государственный Строительный Университет МГСУ (Москва, РФ)
        - Инженерная школа Джеймса Кларка Университета Мэриленда (США)
        - Университет Калифорнии (США)
        - Центр эмоционального интеллекта Йельского университета (США)
        - Институт управления проектами PMI (США)
        - Университет Эдинбурга (Шотландия). Факультет религии, философии и лингвистики
        - Международный тренинговый центр парусного мастерства IYT (Канада)
        - Школы айкидо и фехтования
        - Центр обеспечения личной безопасности и прикладных единоборств Ашита (Израиль)
        
        <aside>
        ☝ **************************************************************************************************************Учитель - это Наставник и Советник, а не спикер у доски**************************************************************************************************************
        
        </aside>
        
    - ************************************************Учиться - это Привилегия************************************************
        
        Учение - это жизненно важная привилегия. Зачем нам “за парту” в 21 веке?
        ******В Древней Греции в школу ходили только те, у кого были ВРЕМЯ и ДЕНЬГИ.
        Учеников приглашали в школу ПЕРСОНАЛЬНО !
        Образованный человек становился уважаемым гражданином.******
        Древняя Греция заложила основы современной науки и культуры.
        
        **************************************************Знания - это Достояние.************************************************** 
        Сила знаний много раз изменяла ход истории человечества
        
        **************************************************************************Советники ценились не менее рыцарей.**************************************************************************
        Знания помогали управлять и покорять страны и континенты.
        Писарям платили за количество букв
        
        ****************************************************************************************Умение учиться - это жизненно важный навык.****************************************************************************************
        В стремительном 21 веке без овладения новыми навыками и технологиями есть риск безвозвратно отстать от жизни и прогресса.
        
        ************************************************************************************************************************************Уметь познавать новое - навык современного лидера и профессионала************************************************************************************************************************************
        Мы живем во время информационной революции.
        Сейчас человечество имеет возможности, никогда ранее не существовавшие в истории.
        
    - **********************Как учимся?**********************
        - Теория трех касаний
        - Фрагментация знаний
        - Закрепление на практике
        
        ******************************************************************На каждом уроке новый слой знаний******************************************************************
        
        - ****************************************Спиральная модель -**************************************** на каждом слое более глубокое погружение в тему
        - ******3Д****** измерение каждого вопроса при рассмотрении с разных сторон
        - Каждая **************************************************************встреча с темой - это Касание,************************************************************** помогающее запоминать
        
        ******************Три категории осмысления итогов уроков******************
        
        - ************Знания************
        - ************Умения************
        - ******************Установки******************
        
        **************************Инструменты обучения**************************
        
        1. ************************Конспекты -************************ пишем от руки на отдельных листах (!) для стимулирования переноса
        2. ******************************Облако знаний****************************** в Ноушн или на Гугл Диске
        3. ******************Синопсис****************** по темам без подсматривания в материалы
        4. ******************************************Практические задания****************************************** без проверки, чтобы обеспечить касание новых знаний
        
        ******************************************Четыре касания нового******************************************
        
        1. ****************************************Конспекты на листах**************************************** включают все типы памяти и заставляют перенести данные в облако
        2. ********************************Облако знаний -******************************** это повторение и сохранение
        3. ******************Синопсис****************** активирует память и укрепляет понимание
        4. ****************Задания**************** закрепляют знания на практике
        
        ************Шаблон конспекта.************ Метод конспектирования Корнелла
        
        1. Возьмите отдельный лист бумаги А4
        2. Расположите его вертикально и разбейте на 3 части (1/3 от левого края - эта часть для основных мыслей и вопросов; и 1/3 от нижней части - это под Итоги; Основная часть для Заметок по теме урока)
        3. В заголовке напишите Тему урока. Дата. Лист 1”
    - **************************Итоги урока 1**************************
        
        ************Знания************
        
        - Зачем учиться в 21 веке
        - Теория 3-х касаний
        - Спиральная модель обучения
        
        ************Умения************
        
        - Составлять конспект по методу Корнелла
        
        ******************Установки******************
        
        - Умение учиться - это жизненно необходимый навык
- **Урок “Мозг - это супер-машина” 06.08.2023**
    
    ********************************************************************************************************************************************************************Мозг - это супер-машина. Он никогда не спит и работает в двух режимах.
    Память и все вокруг - это нейронные связи. Как действие побеждает прокрастинацию.********************************************************************************************************************************************************************
    
    - ****************************Сегодня на Уроке 1. План:****************************
        
        **********************************************************Тема №1. Нейронауки и Обучение**********************************************************
        
        - В чем уникальность мозга как органа и инструмента
        - Новые знания - это новые нейронные связи
        - Сфокусированный и рассеянный режимы работы мозга
        
        **************Тема №2. Учеба как Проект**************
        
        - Зачем нам перерывы
        - Почему учеба - это Проект?
        - Какие ресурсы нужны для обучения?
        
        **************************************************************Тема №3. Память и блоки смыслов**************************************************************
        
        - Память как процесс
        - Рабочая и долговременная память
        - Нейромеханика и ценность повторений
        
        **************************************************************************************************Тема №4. Прокрастинация и другие ловушки мышления**************************************************************************************************
        
        - Что такое прокрастинация и ее корни
        - Научная хитрость для избегания прокрастинации
        - Техника “Помодоро”
    - ******************************************************************************************************************************************************Тема №1: Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое?******************************************************************************************************************************************************
        - В чем уникальность мозга, как органа и инструмента?
        - Новые знания - это новые нейронные связи
        - Особенности и отличия сфокусированного и рассеянного режимов работы мозга
        
        ************************************************************Мозг - это система с самой высокой комплексностью известной человеку.************************************************************
        Научно-техническая революция и открытия нейронаук начала 2000-х изменили представление о том, как работает мозг
        
        ******************************************************************************Мозг человека - уникальный орган и инструмент******************************************************************************
        
        1. **********************************************************************************************************************************************Около 80 млрд нейронов и до 15 тысяч связей у каждого нейрона с другими**********************************************************************************************************************************************
        В мозге больше нейронных связей, чем известно звезд во Вселенной
        2. **********************************************************************************************************************Мозг в 10 раз мощнее, на единицу веса, чем любой орган тела**********************************************************************************************************************
        Занимая 2% от веса тела он потребляет до 20-30% всей энергии организма
        3. ******************************************************************************************************************Опыт для мозга - это буквально все, что с нами происходит******************************************************************************************************************
        Что мы видим, слышим, говорим, думаем, едим, где находимся, что делаем. В настоящем и прошлом.
        Опыт создает аффективную нишу.
        
        <aside>
        ☝ ******Способности человека мыслить, чувствовать и создавать образы компьютеры пока повторить не могут******
        
        </aside>
        
        > **************************************************************************************************************Мозг - это предиктивная машина прогнозирования мыслей, поведения и ощущений**************************************************************************************************************
        Буквально всю жизнь без остановки под влиянием аффективной ниши и опыта мозг выбирает самое подходящее следующее наше действие и поведение
        > 
        
        ****************************************************Мозг предсказывает и планирует постоянно****************************************************
        
        1. ****************************************24/7/365 дней в году****************************************
        буквально всю жизнь мозг собирает, анализирует все, что с нами происходит, прогнозирует и планирует наши мысли, ощущения и действия.
        2. ******************************************************************************Миф о “стимуле - отклике” опровергнут******************************************************************************
        Сетям мозга не нужны внешние воздействия или сигналы, чтобы включаться. Мы видим то, во что верим, а не наоборот.
        3. ****************************************************************************************************На прогнозы и выбор мозга влияет аффективная ниша****************************************************************************************************
        Изменение аффективной ниши - нашего стиля мышления и жизни - ведет к изменению работы мозга.
        
        <aside>
        ☝ **************************************************************Управлять мозгом и своим поведением можно через изменение аффективной ниши**************************************************************
        
        </aside>
        
        **************************************************************************************************Новые знания - это новые нейронные связи в мозге**************************************************************************************************
        Любая новая информация или действия приводят к физиологическим изменениям в структуре мозга
        
        ************************************************************Как мозг создает новое Знание?************************************************************
        
        1. ****************************Возникновение****************************
        Между нейронами через синапсы протекает ток, и возникает новая нейронная связь
        2. **********************Укрепление**********************
        Связь крепнет в процессе повторного использования, для этого требуется несколько касаний
        3. ****************************************Превращение в тракт****************************************
        Чем чаще используется связь, тем она прочнее, обрастает белковой массой и становится трактом - навыком и привычкой.
        
        <aside>
        ☝ ********************************************************************************************************************************************************Повторение и практика делают из нейронной связи тракт и сохраняют новые Знания********************************************************************************************************************************************************
        
        </aside>
        
        > ******************************************************************************************Мозг работает мощнее, когда мы “не думаем”******************************************************************************************
        Изобретение технологии fMRT позволило переосмыслить “рассеянный” режим работы мозга. Это - революция
        > 
        
        ************************************************Два режима работы мозга:************************************************
        
        1. **********************В фокусе -********************** привычный
        2. **************************Рассеянный -************************** вне сознания
        
        > **************************************************************Мозг работает всегда. Переход в рассеянный режим работы подключает больше зон мозга к работе.
        Мозг более активен, когда человек отдыхает**************************************************************
        Мы осознаем только часть работы мозга. Большой объем операций скрыт от сознания, но не менее эффективен.
        Подсознательные процессе в мозге влияют на мышление, память, эмоции
        > 
        
        <aside>
        ☝ ****************************************В фокусе мысли бьются в привычных рамках.
        В рассеянном режиме они движутся без барьеров.****************************************
        
        </aside>
        
        - **************************Итоги по Теме №1: Нейронауки и обучение**************************
            - ************Знания************
                - ************************************************************************************************************************************************************************Мозг - комплексный мощный инструмент. Он работает постоянно, как предиктивная машина************************************************************************************************************************************************************************
                - Все новое - это нейронные связи
                - Рассеянный режим мощнее фокусного
            - ************Умения************
                - Делать регулярные перерывы в любой деятельности без стресса и страха “потерять” время
            - ******************Установки******************
                - Управлять своей жизнью можно через изменение работы мозга
                - Перерывы - это не потеря времени, а переключение режимов работы мозга
        - ********************************Вопросы и Ответы********************************
            
            **************************************************************************Что значит “высокая комплексность?”**************************************************************************
            
            Это когда все элементы Системы связаны между собой.
            Пример и аналогия: система международных перевозок пассажиров, по которой вы можете добраться из любого места на Планете в любое другое. Все аэропорты, так или иначе связаны между собой. Система мозга имеет самую высокую, известную на сегодня человеку, комплексность.
            
            **********************************Не понятно, на основании чего мозг выбирает действия?**********************************
            
            В каждый момент времени мозг задает себе вопрос: “В прошлый раз в подобной ситуации, когда внутри организма были схожие ощущения, какое следующее действие я предпринял?
            Он опирается на опыт. Если происходит что-то новое, то опыт корректируется и включается в следующий предиктивный прогноз.
            
            ****************************************************************************************************А если не повторять что-то, то оно точно пропадет?****************************************************************************************************
            
            Навсегда может и не сотрется, но обратиться к такому навыку или знанию будет точно сложнее. Даже если вы хорошо знали иностранный язык, но 5 лет его не использовали, для реактивации потребуются значительные усилия и время.
            Чем интенсивнее вы запоминали и дольше практиковали в начале, чем лучше “прописали в мозг” новое, тем легче будет им воспользоваться в будущем.
            
- **Урок 2. “Чанк - меч самурая знаний…” 08.08.2023**
    
    **Сегодня на Уроке 2:**
    
    Техника Йяйдо. “Молниеносная первая атака”
    
    ************************************************Техника Йяйдо - это ЧАНК************************************************
    
    - **Что получите сегодня на Уроке 2. План**
        - **Знания**
            - Сон очищает мозг, помогает учиться и решать Задачи
            - Что такое “чанк”, и в чем его ценность?
            - Что такое иллюзия знания и избыток обучения
        - **Умения**
            - Ставить Цели по СМАРТ и декомпозировать
            - Определять “чанки”
            - Эффективно работать в группе
            - Тренировать внимание и память
        - **Установки**
            - Знания устойчивы, когда соединены смыслом
            - Важно создавать свои мысли
            - Нужно учиться вместе с сокурсниками
            - Сон - важный процесс в учебе
    - **Тема №1: Нейронауки и обучение. Как мозг воспринимает и обрабатывает новое?**
        - Важность сна для обучения.
        
        **Во сне мозг очищает и активно работает!**
        
        Сон - это важный процесс обучения
        
        ******************************************************Что делает ваш мозг во сне?******************************************************
        
        1. “Вымывает токсины из пространства между нейронами.
        Они создаются в процессе протекания тока по нейронным связям. Сон - единственное время, когда происходит чистка.
        2. Выключает внимание. 
        Происходит переключение из фокусного в рассеянный режим работы.
        Активируются обширные зоны мозга, КПД повышается.
        3. Работает над задачами и повторно обращается к новым нейронным связям.
        Он делает то, на что в сознательном состоянии нужны дополнительная энергия и ресурсы времени и внимания.
        
        ********************************************************************************Сон - это часть процесса познания и решения Задач********************************************************************************
        
        ********************************************************************Мозг - можно и нужно тренировать.******************************************************************** Нейропластичность - доказанное наукой свойство мозга изменяться на протяжении всей жизни.
        
        - Упражнения для внимания и концентрации
        1. **************************************************Для концентрации внимания “Стрелка часов”**************************************************
        Смотрите 2 минуты внимательно, не отрываясь на стрелку часов.
        Если мысли “улетают”, возвращайте их к стрелке
        Это нормально, если отвлекаетесь, в возвращении и есть тренировка.
        2. **************************************************Для переключения внимания “Пальцы руки”**************************************************
        За переключение отвечает межполушарное взаимодействие.
        Соедините большой палец руки последовательно со всеми остальными, образуя кольцо.
        Делайте это в разных направлениях на разных руках 1-3 минуты.
        3. ******************************************Для тренировки памяти “Натюрморт”******************************************
        Возьмите изображение со множеством элементов, например, натюрморт.
        Посмотрите на него внимательно 10 секунд.
        По памяти перечислите все предметы. Проверьте себя.
        
        ********************************************************************************************************************************************Только регулярные повторения нейроворкаутов гарантируют Результаты !!!********************************************************************************************************************************************
        
        - **********************************************************Что получили сегодня по Теме №1 ?**********************************************************
            
            ************Знания************
            
            - Сон очищает мозг, помогает учиться и решать Задачи
            
            ************Умения************
            
            - Тренировка внимания и памяти
            
            ******************Установки******************
            
            - Сон - важный процесс в учебе
    - **Тема №2: Учеба как Проект**
        - Модель СМАРТ для Целей
        - Принципы декомпозиции
        - Ценность групповой работы: техники “от равного к равному” и “совет директоров”
        - Техники “peer-2-peer” (от равного к равному) и “совет директоров”
        
        <aside>
        💡 **Удовлетворение жизнью приносит только наличие Цели, и именно она способствует улучшению здоровья, долголетию, а также воодушевляет вас в трудную минуту.** *Стив Джобс*
        
        </aside>
        
        - **Постановка Целей по методике SMART**
            - **S - Specific (Конкретная).** 
            Шаг 1. ******************************************************Конкретная. Глагол действия -****************************************************** Создать, сделать, провести …
            - **M - Mesurable (Измеримая)**
            Шаг 2. **********************************************************Измеримая. Существительное -********************************************************** Проект, программа, поездка …
            - **A - Attainable (Достижимая)**
            Шаг 3. ****************************************************************Достижимая. Понятные критерии -**************************************************************** 1000 шт, набор из 10 блоков, пять стран …
            - ********R - Relevant (Значимая)********
            Шаг 4. ************Значимая. Для чего это вам?************ Чтобы стать разработчиком, получить возможности …
            - ********T - Time Based (Ограниченная по времени)********
            Шаг 5. ******************************************************Ограничение по времени. К какой дате в будущем?****************************************************** Через год, с 1 января 2023, в 2030 году …
            
            Примеры: *В течение года пройти программу обучения в ГБ.
            Сдать экзамен, получить профессию и сертификат, чтобы больше зарабатывать и путешествовать.*
            
            > **На Эверест не запрыгивают, а поднимаются, шаг за шагом.**
            Ваши сокурсники или единомышленники - уникальный ресурс для эффективного обучения.
            > 
            
            <aside>
            💡 ****************************************************Слона едят по частям…,**************************************************** как Цели и Концепции делят на простые и достижимые части - это ************************ДЕКОМПОЗИЦИЯ************************
            
            </aside>
            
            - Шаг 1. ******************************************************************************************************************Разбить на части, чтобы можно было “потрогать руками”.****************************************************************************************************************** У вас не должны “опускать руки” при виде мини-задачи. Все должно быть понятно и просто.
            - Шаг 2. ************************Приоритеты.************************ То, что важнее и сложнее, обычно, делается сначала, но системная зависимость элементов тоже важна.
            - Шаг 3. **********************************План и Действия.********************************** Описанные четко шаги, техники работы с прокрастинацией и контроль Результатов
            
            > ********************************************************************************************Обмен пониманием и мнениями закрепляет знание********************************************************************************************
            Ваши сокурсники или единомышленники - уникальный рерурс для эффективного обучения.
            > 
        - **********************************Две техники групповой работы**********************************
            - ****************Peer-2-Peer.**************** От равного к равному. Обучение через научение
                1. ****************************************************Важно подготовить вопросы****************************************************
                Ваши вопросы должны стимулировать визави к глубокому пониманию темы.
                2. **********************************************************************Дружеское общение и советы равного**********************************************************************
                Вы равны. Нет учителя и ученика, есть два равных человека, которые пытаются разобраться вместе с чем-то инверсным.
                3. ************************Смена ролей************************
                Сначала вопросы задает один участник, потом другой. Тот, кто задает вопросы не отвечает на них, а помогает наводящими вопросами и просьбами уточнить и пояснить.
            - ******************Совет директоров.****************** Без модератора, на основе Плана и Тезисов
                1. **************************Нет главного**************************
                На совете собираются равные участники, объединенные едиными целями.
                Мнение каждого имеет равный вес.
                2. **********************************************************Нет фасилитатора и секретаря**********************************************************
                Каждый полностью отвечает за подготовку и тайминг своих выступлений, не перебивает и сам ведет записи.
                3. ************Короткое выступление с аргументацией и дискуссия************
                Перед встречей по темам и брифу все участники готовят короткие выступления.
                Важно быть готовым слушать и слышать других участников в процессе дискуссии.
            
            Правильная подготовка к групповой работе - залог успеха и проявление уважения к коллегам.
            
            > ****************************************************************************************************************************************************************************************************Peer-2-Peer и Совет директоров развивают интеллектуальную самостоятельность и навыки коммуникаций.****************************************************************************************************************************************************************************************************
            > 
        - ****************************************************************Что получили сегодня по Теме №2****************************************************************
            - ************Знания************
                - Техники Р2Р (от равного к равному) и Совет директоров.
            - ************Умения************
                - Эффективно работать в группе.
            - ******************Установки******************
                - Нужно учиться вместе с сокурсниками
    - **Тема №3: Память, фрагментация и блоки смысла**
        - Введение в понятие “чанки” - блоки смысла
        - Глубокое понимание процесса чанкинга
        - Техника синопсиса
        - Нейромеханика и ценность повторений
        
        > ************************************************************************************Чанк (chunk) - блок элементов информации, объединенных смыслом или действием, который быстро извлекается из памяти.************************************************************************************
        Чанки могут быть простые и комплексные.
        Масштаб и уровень комплексности отличаются.
        ********************Чанкинг (chunking) - это мыслительный процесс соединения частей по смыслу********************
        Ментальный скачок, который позволяет собрать целостный пазл нового знания.
        > 
        
        <aside>
        ☝ **************************************************************************************************************Быстрота доступа к Чанку - одно из его ключевых свойств**************************************************************************************************************
        
        </aside>
        
        <aside>
        ☝ **********************Техника “Йяйдо” - сложный комплексный чанк физического действия**********************
        
        </aside>
        
        **************************************************************************У вас работал рассеянный режим мозга**************************************************************************
        С начала урока информация о технике Йяйдо соединилась с другим знанием и приобрела новый смысл.
        
        ******************************Отдельный элемент информации не дает полного понимания******************************
        Поэтому только объединенные смыслом элементы информации несут устойчивое знание
        
        **********************************************************************************Отдельный элемент не дает полной картины**********************************************************************************
        Соединяясь с другими элементами информация приобретает смысл.
        ****************************************************************************************************************************************************************Множество элементов вместе - не просто их сумма! Это новый смысловой блок. Чанк.****************************************************************************************************************************************************************
        
        ************************************Особенности чанков************************************
        
        1. **********************В разных сферах разные чанки и процессы**********************
        В истории, химии или спорте чанки имеют различное наполнение, масштаб и процессы формирования.
        2. **********************************************************************************Для физической и ментальной деятельности**********************************************************************************
        Контекст применения влияет на принципы и работу по формированию чанков.
        3. **************************************************Алгоритм создания единый**************************************************
        Процессы работы мозга с информацией одинаковы
        
        **********************Пример. Чанк в Йяйдо:**********************
        
        - Приготовить ножны. Занять правильное положение
        - Выхватить меч
        - Нанести удар
        Все вместе - техника нанесения быстрого упреждающего смертельного удара.
        
        ****************************************************************Пример. Чанк в английском языке:****************************************************************
        
        **********************What’s up? - Как дела? Что случилось?**********************
        Устойчивое сочетание речи, имеющее определенный смысл, используемое в разговорной речи.
        ******В чанке “What’s up?” смысл целого отличен от смысла отдельных элементов******
        
        ********Чанкинг освобождает слоты рабочей памяти******** и делает вас в целом продуктивнее, а учебу эффективнее - это каскад положительных последствий
        
        **********************************************************************В начале вся рабочая память кипит.********************************************************************** Задействованы все 4 слота памяти для обработки и осмысления новой информации. Нейронные связи только создаются, они не четкие и непрочные.
        
        ****************После Касаний становится легче.**************** Слоты памяти постепенно освобождаются, Чанк формируется. Прокладывается тракт связи с долговременной памятью.
        
        ************************************************************************************************Доступный Чанк требует минимум ресурсов памяти.************************************************************************************************ Извлечение происходит практически бессознательно, легко и быстро. Информация быстро проходит по одному прочному тракту.
        
        <aside>
        ☝ **********************************************************************************Осмысленный Чанкинг делает вас эффективней во всем!**********************************************************************************
        
        </aside>
        
        ************************************************************************Что мы получили сегодня по Теме №3:************************************************************************
        
        - ************Знания************
            - Что такое “Чанк”
        - ************Умение************
            - Определять Чанки
        - ******************Установки******************
            - Знания устойчивы, когда соединены смыслом или действием
    - **Тема №4: Прокрастинация и другие ловушки.** Как учиться быстро, не делая бесполезного?
        - Прокрастинация и память
        - Другие способы с ней бороться
        - Ловушки мышления: иллюзия компетентности и избыток обучения
        
        > **********************************************************************************************Прокрастинация мешает знаниям закрепляться в памяти**********************************************************************************************
        Она убивает время и регулярность, необходимые для передачи знаний в долговременную память и создание чанков.
        > 
        
        <aside>
        ☝ ******************************************************************Обучение - как кладка кирпичиков******************************************************************
        Каждый элемент информации должен найти свое место, включиться в блок и закрепиться. ******************************************************************Этот процесс требует времени и Регулярности******************************************************************
        
        </aside>
        
        <aside>
        ☝ **************Без Системы и Регулярности ваши знания похожи на груду кирпичей и раствора. Здание само не получится!**************
        
        </aside>
        
        <aside>
        ☝ ********************************************************************************************************************************************************************Только на надежном основании, слой за слоем создается прочный фундамент глубоких знаний, а кирпичики - это разные по размеру и сложности Чанки.********************************************************************************************************************************************************************
        
        </aside>
        
        > ************************************************************************************************************************Прокрастинация может быть одним, но мощным убийцей добрых начинаний и Планов!************************************************************************************************************************
        > 
        
        **************************************************************Прокрастинация напоминает зависимость.**************************************************************
        Мозг делает все, чтобы получить временное облегчение от иногда скучной реальности
        
        ********************************************************Как работает прокрастинация?********************************************************
        
        1. **************************************************Активируются центры боли**************************************************
        Опасность дискомфорта и напряжение, неизбежных при учебе, активирует центры боли.
        Мозг реагирует как предписано эволюцией - спасается и оберегает.
        2. ****************************************************************************************************************Включается режим “сбегание во временное удовольствие”****************************************************************************************************************
        Именно в этом прокрастинация похожа на зависимость, игровую, наркотическую и т.п.
        Мозг рассказывает сам себе странные истории, в которые искренне верит.
        3. ******************************************************************************С каждым разом возвращаться все сложнее******************************************************************************
        На первичную “боль” накладывается новый страх, как например, “я уже устал”, “теперь я точно не успею” и тд
        
        > ************************************************************************************************************************Прокрастинация - как яд мелкими дозами, который может подорвать здоровье!************************************************************************************************************************
        > 
        - **********************************************Иллюзия компетентности**********************************************
        ”Вау! Я понял…” таит опасность. Вы читаете и понимаете чужие мысли, но знания создаются только на основе **********ваших********** собственных
            
            ****************************В чем суть иллюзии компетентности?****************************
            
            1. ****************************************************************Больше читаешь и смотришь - больше знаний получаешь.****************************************************************
            Объем информации нельзя путать с новыми знаниями и глубоким пониманием.
            2. **************************************************Я прочитал и понял, значит - знаю!**************************************************
            Вы читаете чужие мысли. 
            **Знания формируются из своих!**
            3. ********************************************************************Много подчеркиваний и выделений - крепче новые знания!********************************************************************
            На эту работу тратятся ментальная энергия и внимание, которые нужны для создания собственных мыслей и чанков
            
            ************************************Как избежать иллюзию компетентности?************************************
            
            1. ******************************************************************Техника воспроизведения (recall)******************************************************************
            Сразу после прочтения, просмотра повторить своими словами, что прочитал и понял.
            2. ********************************************************************************************Не подчеркивать и не выделять много в текстах********************************************************************************************
            Не больше одного выделения на странице.
            Пишем конспекты своими словами.
            3. ****************************************************Mind-map слабо эффективна****************************************************
            Без устойчивого фундамента рисовать схему - все равно, что решать шахматную задачу до конца не понимая, как ходят фигуры.
            
            > **************************************************************************************************************************************Воспроизведение (recall) эффективнее подчеркиваний и майнд-карт !!!**************************************************************************************************************************************
            > 
        - **********************************************************Ловушка избыточного обучения**********************************************************
        Больше читать и смотреть не значит больше знать!
            
            ******************************************************************Как избегать избыточное обучение?******************************************************************
            
            1. ********************************************************************************************************************Проводить само-тесты, выявлять ошибки и работать над ними********************************************************************************************************************
            Вместо того, чтобы повторять уже понятое или просто зубрить, находим слабые места и их переосмысливаем.
            2. **********************************************************************************************Применять технику воспроизведения и синопсиса.**********************************************************************************************
            Когда вы формируете новые мысли своими словами, мозг не зубрит, а создает мысли!
            3. ****************************************************Менять форматы и окружающую среду.****************************************************
            Это перезагружает внимание и приучает пользоваться новыми знаниями в любой обстановке.
            
        
        ******************************************************************Что получили сегодня по Теме №4:******************************************************************
        
        - ************Знания************
            - Прокрастинация нарушает память
            - Воспроизведение и Синопсис эффективнее подчеркиваний и майнд-карт
        - ************Умения************
            - Как избегать иллюзию компетентности и избыточное обучение
        - ******************Установки******************
            - Важно формировать собственные мысли
            - Прокрастинация может разъедать как зависимость!
    - **Итоги Урока 2. “Чанк - меч самурая знаний…”**
        - ************Знания************
            - Сон очищает мозг, помогает учиться
            - Что такое “Чанк”, и в чем его ценность?
            - Как эффективно работать в группе
            - Как прокрастинация может все “убить”
        - ************Умения************
            - Ставить цели по СМАРТ и декомпозировать
            - Определять Чанки
            - Тренировать внимание и память
            - Избегать ловушки мышления
        - ******************Установки******************
            - Сон - важный процесс в учебе
            - Нужно учиться вместе с сокурсниками
            - Знания устойчивы, когда соединены смыслом
            - Важно создавать свои мысли
    - **Домашние задания и Практика**
        - ****************************************************Дневник и Практики здорового сна****************************************************
            - В Облаке знаний записывайте 14 дней каждое утро общее состояние после сна
            - Фиксируйте, что делали из практик здорово сна накануне
            
            **********************************Практики здорового сна:**********************************
            
            - Не пользоваться девайсами за 30 минут до сна
            - Засыпать не позже 23:00
            - Не есть ближе, чем 1,5 часа до сна
            - Не работать и не смотреть кино в кровати
            - Затемнять спальню полностью заранее
        - **************************************************************************************************************Расписать свои личные Цели по СМАРТ на курс Разработчик**************************************************************************************************************
            1. В Облаке знаний прописать стратегические Цели
            2. Декомпозировать Цели на первые 3 месяца
            3. Декомпозировать 3-х месячные Цели в еженедельные задачи. Они могут быть рутинные и повторяющиеся.
            
            На этапе 3 использовать удобный и привычный календарь - планировщик.
            
        - ************************************Описать Чанки на курсе Умение учиться 1.0************************************
            1. В Облаке знаний своими словами описать 3 Чанка по темам пройденных курсов.
            2. Перед ДЗ выполнить упражнения из МайндБрейк, которые проходят на уроках и на концентрацию внимания “Стрелку часов”.
            3. Не подсматривать в свои конспекты и Облако знаний перед выполнением задания.
- **Урок 3. “Как Гоголь поможет учиться…”**
    - **Сегодня на Уроке 3. План:**
        
        ********************************************Тема 1. Нейронауки и Обучение********************************************
        
        - Знания: как работает консолидация Памяти
        - Умения: определять этапы запоминания
        - Установки: важно уточнять знания при каждом Касании. Сон - супер важен
        
        ******************************************Тема 2. Учеба как Проект******************************************
        
        - Знания: матрица анализа стратегий и чек-лист мониторинга процесса
        - Умения: выбирать стратегии и эффективно оценивать работу
        - Установки: акцент на успехах важен
        
        ************************************************************Тема 3. Память и блоки смыслов************************************************************
        
        - Знания: алгоритм создания чанков и контекста применения, ошибки
        - Умения: создавать чанки, и где их применять
        - Установки: мы недооцениваем пользу повторений из-за непонимания
        
        ****************************************************************Тема 4. Прокрастинация и ловушки****************************************************************
        
        - Знания: метод Гоголя; ловушки образа мысли и “удушья”
        - Умения: начинать работу через микро-шаги
        - Установки: “open mind” и любопытство помогут создавать новые знания
    - ****************************************************************************************Тема №1: Нейронауки и обучение. Как мозг воспринимает и обрабатывает новое?****************************************************************************************
        
        Сегодня в Теме №1:
        
        - **************************Гипокампус -************************** центр прописывания информации в память
        - ************************Астроциты -************************ вторые по важности клетки мозга
        - **************************************************Схема консолидации памяти**************************************************
        
        ********************Гипокампус - зона консолидации памяти.******************** 
        Имеет форму “морского конька” и назван греческими словами: гиппос - конь, кампос - морской монстр.
        Без него невозможно хранить новые данные в коре головного мозга.
        Процесс консолидации памяти может занять годы
        
        ************************************************************************************************************************При удалении гипокампуса пациент НМ потерял способность запоминать.************************************************************************************************************************
        У него возникла полная амнезия. Он утратил способность консолидировать и передавать в долговременную память информацию. Через минуту он забывал собеседника, и о чем они говорили
        
        <aside>
        ☝ ****************************************************************************************Консолидация памяти - Процесс перевода первичных отпечатков (энграмм) памяти в стабильную Долговременную Память****************************************************************************************
        
        </aside>
        
        **************************************************************************Консолидация памяти. Схема процесса:************************************************************************** 
        При каждом использовании информации происходит повторное прописывание в памяти с изменениями:
        
        - ******************************Консолидация -****************************** первичное запоминание с созданием новых синапсов
        - ****************************Реактивация -**************************** “сборка” воспоминания
        - ****************Реконсолидация -**************** повторная запись в памяти
        
        <aside>
        ☝ ******************************************Консолидация и Реконсолидация протекают активно во сне.******************************************
        Еще одно подтверждение важности сна для обучения.
        ************При реконсолидации воспоминание укрепляется, но и изменяется!************
        
        </aside>
        
        ****************************Астроциты - вторые важные клетки мозга!
        Человеческие астроциты, внедренные в мозги мышей, радикально усиливали их способность к обучению.****************************
        
        - Астроциты - один из типов клеток белковой глии (изоляции нейронов)
        - Астроциты питают нейроны и участвуют в восстановлении зон мозга при повреждениях
        - Поддерживают ионный баланс вне клеток и обеспечивают протекание электрических сигналов
        
        <aside>
        ☝ ********************************************************************************Чем мозг Эйнштейна отличался от мозга других людей?
        Мозг Эйнштейна отличался только большим количеством астроцитов.********************************************************************************
        ***************Все сферы влияния белковой субстанции глии на работу мозга только изучается, но значимость клеток астроцитов уже не вызывает сомнений***************
        
        </aside>
        
        > **************************************************************************************************************************************************************************Астроциты обеспечивают питание нейронам и среду для электрических сигналов между ними**************************************************************************************************************************************************************************
        > 
        
        ****************************************************Итоги по Теме №1. Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое:****************************************************
        
        - ************Знания************
            - Астроциты - вторые важные белковые клетки мозга
            - Схема процесса консолидации памяти
        - ************Умения************
            - Определять этапы формирования записей в памяти
        - ******************Установки******************
            - Важность сна подтверждена еще раз
            - Важно уточнять знания при каждом касании
        
        ******Вопрос №1. Если все постоянно меняется, то почему же мы помним все почти одинаково?******
        Ответ. Во-первых, мы редко осознанно фиксируем в деталях одни и те же воспоминания в разные периоды, поэтому говорить об “одинаковости” воспоминаний нужно осторожно. Мы знаем наверняка, что они одинаковые. 
        Во-вторых, все зависит от контекста и вашей аффективной ниши в момент повторного обращения. Если они не изменились, то и информация не поменяется. И наоборот.
        
        ****************************************************************************Вопрос №2. Как правильно питать мозг?****************************************************************************
        Ответ. Нужно самому питаться сбалансированно и осознанно. Мозг и тело - единая Система. Энергия, которая вырабатывается в желудке питает и мозг. Чем она качественнее, тем мозг эффективнее. Обратный эффект заметен очень ярко. Попробуйте начать есть всякую “жесть”, и ваша работоспособность резко снизится.
        Существуют проверенные медициной добавки и препараты для стимулирования мозговой активности, но применяйте их ******************************************************только по назначению врача.******************************************************
        
        ********************************************************************************************Почему учеба влияет на количество астроцитов?********************************************************************************************
        Ответ. Учеба - это второй по затратам энергии процесс для мозга. В нем задействовано много сетей, и работают они очень активно. Создание новых связей и их использование требует от мозга обеспечения всех необходимых условий. Только рост астроцитов, пропорционально количеству новых нейронных связей и их использованию, позволяет этой активной деятельности происходить. Мозг это понимает и делает.
        
    - **Тема №2: Учеба как Проект. Планирование, Задачи и контроль Прогресса**
        
        ************************************Сегодня в Теме №2:************************************
        
        - ************************************************Матрица оценки стратегий************************************************
            
            <aside>
            ☝ ********************************************************************************************************************************************************************************************************************************************Стратегия без тактики - это самый медленный путь к победе.
            Тактика без стратегии - это просто суета перед поражением.********************************************************************************************************************************************************************************************************************************************
            **********Сунь Цзы.**********
            
            </aside>
            
            ****************************************************Матрица оценки стратегий.**************************************************** Для выбора максимально эффективного движения к Цели.
            
            Вопросы матрицы оценки стратегий:
            
            1. ************************************Как использовать?************************************ 
            Глубоко понять основные принципы и приложить на себя
            2. ****************************************Когда использовать?****************************************
            Выявить ситуации, когда стратегия эффективна
            3. ****************************************Зачем использовать?****************************************
            Определить Результаты и сравнить с Целями
            
            Пример матрицы оценки Стратегий чтения. 
            Задача понять, когда именно применять определенную стратегию развивающего чтения М. Адлера
            
            ![Стратегия чтения.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a830d69-d5d5-4813-8fc7-65eb02a49ffb/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F.png)
            
            > ****************************************************************************************************Оценка стратегий - как прокладка курса корабля !!!****************************************************************************************************
            > 
            
            ******************************************************************************************************************************************************************************************************************************************************************************Я иду медленно, но никогда не двигаюсь назад! “I am a slow walker, but I never walk back.”************************************************************************************************************************************************************************************ Авраам Линкольн*
            
        - ************************************************************Чек-лист мониторинга прогресса************************************************************
            
            ********Чек-лист мониторинга процесса.******** Визуализация результатов - отличный мотиватор.
            ********************************************************************************Вопросы чек-листа мониторинга прогресса:********************************************************************************
            
            1. **********************************Что было хорошо?********************************** Фиксация на Достижения и Успехи
            2. ********************************************Что могло быть лучше?******************************************** Ошибки и зоны роста
            3. **********************Идеи и План Действий.********************** Продолжение Пути и новые мысли
            
            **********************************************************************************Матрица быстрой ретроспективы от MIRO.********************************************************************************** Синтетическая оценка проделанной работы за неделю и планирование. 
            Можно делать как на листе А4, так и в приложении.
            
            <aside>
            ☝ **********************************************************************************************************************Фиксация на успехах не менее важна, чем работа над ошибками**********************************************************************************************************************
            
            </aside>
            
        - ************************************************Итоги по Теме №2. Учеба как Проект. Планирование, Задачи и Контроль прогресса:************************************************
            - **Знания**
                - Матрица оценки стратегий
                - Чек-лист прогресса
            - ************Умения************
                - Определять подходящие стратегии
                - Эффективно подводить итоги недели и планировать работы
            - ******************Установки******************
                - Акцент на Успехах не менее важен, чем анализ ошибок.
        - ********************************Вопросы и Ответы********************************
            
            **************Вопрос №1. Если изменились обстоятельства нужно ли, и как именно менять стратегию?**************
            Ответ. Да, менять стратегию нужно, тем более в сегодняшнем мире, который меняется очень быстро. Это непросто, для этого планируйте несколько стратегий “на берегу”. По методике Agile Focus нужно запланировать 5 стратегий: одну основную, две запасные и две второстепенные. Если наступит момент, то вам будет легко переключиться.
            
            **********************Вопрос №2. Как часто нужно делать чек-лист мониторинга прогресса?**********************
            Я рекомендую делать не реже одного раза в две недели. В период интенсивной работы - каждую неделю.
            
    - **Тема №3: Память, фрагментация и блоки смысла**
        
        ************************************Сегодня в Теме №3:************************************
        
        - ****************************************Как создаются Чанки?****************************************
            
            > ****************************************************************************************************************************************************************************************************************************Чанк - блок элементов информации, объединенных смыслом или действием, который быстро извлекается из Памяти.****************************************************************************************************************************************************************************************************************************
            Чанки могут быть простые и комплексные.
            Масштаб и уровень комплексности отличаются
            > 
            
            **************************************Особенности Чанков:**************************************
            
            1. **************************************************В разных сферах разные Чанки и процессы**************************************************
            В истории, химии или спорте Чанки имеют различное наполнение, масштаб и процессы формирования.
            2. ******************Для физической и ментальной деятельности******************
            Контекст применения влияет на принципы и работу по формированию чанков
            3. **************************************************Алгоритм создания единый**************************************************
            Процессы работы мозга одинаковы
            
            <aside>
            ☝ ******************************************************************************************Урок на курсе - комплексный Чанк информации !******************************************************************************************
            
            </aside>
            
            ****************************************************Из каких трех типов Чанков меньшего масштаба состоит чанк урока?****************************************************
            1. Чанки топиков внутри тем
            2. Чанки тем
            3. Чанки итогов: Знания, Умения, Установки
            
            > **************************************************ВНИМАНИЕ. ПОНИМАНИЕ. КОНТЕКСТ - три кита создания Чанка**************************************************
            Это алгоритм эффективен для создания Чанков любого типа, масштаба и комплексности.
            > 
            
            ************Алгоритм создания Чанка:************
            
            1. **********Фокусировка внимания**********
            Информация должна быть изучена и понята
            2. ******************************Понимание сути******************************
            Основная идея должна быть ясна и изложена своими словами
            3. ********************************************Определение контекста********************************************
            сферы применения знаний и навыков для эффективного запоминания
            
            <aside>
            ☝ ************************Понимание - это супер-клей, соединяющий в единое целое отдельные отпечатки в памяти************************
            Оно создает широкий взгляд на различные следы в памяти (энграммы), которые могут связываться с другими.
            
            </aside>
            
            **************Ошибки:**************
            
            - Ошибка 1.
            **************************************Фокус только на шагах, без понимания их связи**************************************
            Важно понимать, почему именно этот шаг идет за предыдущим. Это формирует комплексное понимание.
                
                <aside>
                ☝ **********За деревьями можно не увидеть леса**********
                
                </aside>
                
            - Ошибка 2. 
            ****************************************************************************Формирование Чанка без глубокого понимания****************************************************************************
            Заучивание без понимания не пропишет информацию в долговременную память. Это похоже на “зубрежку” перед экзаменом. Знания быстро улетучатся.
                
                <aside>
                ☝ **********************************************Можно ли создать Чанк без понимания? Да, можно, но … это бесполезно!**********************************************
                
                </aside>
                
            
            <aside>
            ☝ ************************************************************************************************************************Контекст определяет КОГДА использовать знания и решения
            Чанкинг определяет КАК использовать знания и техники решения************************************************************************************************************************
            
            </aside>
            
            **************************************************************************************************************************От практики к контексту (Bottom Up)
            Как применять ту или иную практику или знания для решения задачи:**************************************************************************************************************************
            
            - Отсеивать неподходящие чанки
            - Закреплять нужные
            
            **************************************************************************************************************************От масштаба к контексту (Top Down)
            Через понимание большой картины ситуации. “Big Picture” может быть определена через:**************************************************************************************************************************
            
            - Изучение оглавления книг и статей
            - Через схемы, таблицы, карты концепций, инфографику
            - Достоверные Веб-источники
            - Общение с действующими лицами
                
                <aside>
                ☝ **Big Picture - это ИДЕЯ художника. 
                Чанкинг - его ХОЛСТ и КРАСКИ.
                Две неотъемлемые части процесса**
                
                </aside>
                
        - ******************************************************Техника “Карточки смысла”******************************************************
            
            ********************************************************************************************Карточки смыслов для интервальных повторений.********************************************************************************************
            Простая и эффективная техника
            
            ******************************Карточка смысла******************************
            
            Чанк (лицо)
            
            Текст Чанка: описание, объяснение, ответ на вопрос и тд. (оборот)
            
            Любой удобный формат: Облако знаний, Quizlet или вообще бумажные
            
            - ********************************************************Работа с карточками смыслов:********************************************************
                1. ****************************Создайте наборы карточек****************************
                Тематику определяйте как вам удобно. Ставьте дату создания набора. Это поможет планировать интервал
                2. ********************************************************Обращайтесь в течение дня********************************************************
                Найди слот времени на работу. 5 мин - это ок.
                3. ******************************************Повторяйте перед сном или сразу после пробуждения******************************************
                Вы ближе всего к рассеянному режиму работы памяти в эти моменты
                4. **********Откладывайте, что выучили**********
                Это осознанная практика работы над ошибками и избегания избыточного обучения
                5. **********************************************Увеличивайте интервалы**********************************************
                Второе касание через 2-4 дня, по мере запоминания увеличивайте интервалы
                6. **************************************************************************************************Привлекайте коллег к работе**************************************************************************************************
                Это интересная кооперация. Темы и карточки могут быть разные для каждого участника.
                
                ******************************************************************************************************************************По какому принципу вы бы создавали карточки смыслов для уроков?******************************************************************************************************************************
                
                1. Урок 1 / Тема 1-4
                2. Тема 1 / Урок 1-4
                
                ************************[Quizlet.com](http://Quizlet.com) - приложение для работы с карточками смыслов**
                
                - Создание папок и наборов карточек
                - Прогресс результатов и напоминания
                - Поиск по темам среди всех пользователей программы
                - Разные интерактивные режимы повторений
                - Напоминания и доска прогресса
            - ******************************************************************************Мини-практикум в Ноушн. Карточка смысла******************************************************************************
                
                ************************************************Создаем карточку смысла:************************************************
                
                - Создайте в облаке знаний в уроке закладку “Тема 3. Карточки смысла”
                - Придумайте короткий заголовок или вопрос для карточки на тему: “Два способа создания Биг Пикчер контекста”. Эффективно придумывать что-то необычное: “ВПК создания чанков” - это запоминающаяся игра слов.
                - Напишите ответ или объяснение своими словами, сохраняя смысл понятий
                - **Quizlet**
                    
                    Приложение для работы с карточками смыслов и прокачки своих мозгов.
                    
        - **************************************************Итоги по Теме №3 Урока 3. Память и блоки смыслов**************************************************
            - ************Знания************
                - Алгоритм создания чанков
                - Схема определения контекста их применения
                - Техника “Карточки смысла”
            - ************Умения************
                - Формировать чанки
                - Определять контекст их применения
                - Работать с карточками смыслов
            - ******************Установки******************
                - Без понимания чанки бесполезны
                - Мы недооцениваем эффективность повторений, потому что путаем их с зубрежкой
        - ********************************Вопросы и Ответы********************************
            - **********************Как для физической деятельности использовать карточки смысла? Зачем?**********************
                
                Глубокое понимание деталей и смысла важны в любом процессе. Работая с карточками, мозг прогоняет ток по тем же нейронным связям, которые будут задействованы в реальных действиях. Эффективно чередовать работу с карточками смысла и саму физическую деятельность.
                Создается 3Д картинка, и отработка действий ускоряется.
                
            - **********************************************************************************************************************************************Как именно не потерять общую картину и не залипнуть на отдельных шагах?**********************************************************************************************************************************************
                
                Я рекомендую спиральную модель изучения многоголовых комплексных чанков:
                1. Изучайте все шаги для понимания общей картины
                2. Создаете карточку смысла по процессу со всеми шагами
                3. Углубляетесь в каждый шаг, периодически возвращаясь к сводной карточке смысла по процессу
                4. Создаете карточки по каждому шагу и прорабатываете их в наборе с карточкой по процессу
                
            - ******Как определить достоверность источника информации?******
                
                Нужно развивать медийную грамотность. 
                Гигиенический минимум - всегда изучать в деталях автора материалов перед началом работы с материалом. Сегодня эта информация буквально на расстоянии двух кликов.
                
    - **Тема №4: Прокрастинация и другие ловушки.** Как учиться быстро, не делая бесполезного?
        
        **************************************Сегодня в Теме №4:************************************** 
        
        - **********************************Метод Н.В. Гоголя**********************************
            
            <aside>
            ☝ Чем знаменит Николай Васильевич Гоголь?
            ********************************************************************Николай Гоголь ВСЕГДА сдавал рукописи ВОВРЕМЯ !!!********************************************************************
            
            </aside>
            
            ****************************************************************************Как Гоголь боролся с прокрастинацией?****************************************************************************
            Включение в работу через **МИКРО-ЗАДАЧИ
            Метод** ********Гоголя. Когда нужно просто начать…********
            
            1. **************************************************Поточи перо и сложи стопку чистых листов бумаги**************************************************
            Это же не писать? Легко!
            2. ****Сядь за рабочий стол и посиди****
            Просто посиди. Ничего не делай.
            3. ********************************************************************************************************Напиши строку буквы “а”, потом “б”, слово, предложение…********************************************************************************************************
            Не заметишь, как войдешь в ритм.
            
            <aside>
            ☝ ****************************************************************************************************************************************************Метод Гоголя работает через фокус на ПРОЦЕСС и погружение в среду ДЕЙСТВИЯ****************************************************************************************************************************************************
            
            </aside>
            
        - ****************************************Обзор других ловушек****************************************
            
            > ****************************************************************************Эйнштенллунг. Ловушка образа мышления****************************************************************************
            ”Einstenllung” в переводе с немецкого “отношение, настройка”
            **********************************************************Привычные концепции и шаблоны могут блокировать мышление**********************************************************
            Это как поставить много дорожных блоков на пути новой мысли
            > 
            
            <aside>
            ☝ ****************************************************************************************Интеллектуальная автономность и “Опен Майнд” открывают путь к новым мыслям****************************************************************************************
            
            </aside>
            
            > **************Удушье. “Choking”**************
            В переводе с англ. - удушение, задыхаться, подавиться
            ****************************************************************************************************************Решение Задач без подготовки порождает стресс и неудачи****************************************************************************************************************
            Это как начать делать ДЗ без изучения учебника и материала, посещения лекций, просмотра вебинаров или даже без разговора с кем-то знающим.
            > 
            
            <aside>
            ☝ **************************Для новых Знаний нужно Время и поэтапное Погружение !!!**************************
            
            </aside>
            
        - ******************************Итоги по Теме №4 Урока 3. Прокрастинация и другие ловушки мышления******************************
            - ************Знания************
                - ********************************************************************Метод Гоголя против прокрастинации********************************************************************
                - **************************************************************************Суть ловушек образа мышления и “Удушья”**************************************************************************
            - ************Умения************
                - **************************************************************Начинать работу как Н.В. Гоголь**************************************************************
                - **********************************************************************************************Не загонять себя в стресс и неудачи с заданиями**********************************************************************************************
            - ******************Установки******************
                - **************************************************Важно развивать “Опен майнд” и любопытство**************************************************
        - ********************************Вопросы и Ответы********************************
            
            **************************************************************************************************************Точно ли метод Гоголя работает не только для писателей?**************************************************************************************************************
            
            Да, точно. Потому что в его основе нейропсихология. Его принципы совпадают с движущимися маховиками метода “Помодоро”, и они обоснованы нейропсихологией. Любая деятельность может быть разбита на простые, выполнимые Задачи.
            
            **********************************************************************************************Что такое “интеллектуальная самостоятельность”?**********************************************************************************************
            
            Способность составлять собственное мнение, особенно по сложным и неоднозначным вопросам. Не лениться в поиске ответов. Уметь определять достоверные источники информации и автором. Задавать вопросы себе и автору в процессе изучения темы, и находить на них ответы. Уметь обосновывать и защищать свои суждения и умозаключения.
            
            ****************А как быть если нужны деньги, и хочется сделать работу, которую еще не очень хорошо умеешь делать?****************
            
            Это отчасти ваш ответ на философский вопрос ответственности за свои действия и качества своего труда. Нужно здраво оценивать вероятность ошибки и последствия своих ошибок для других людей. 
            Два способа точно помогают:
            1. Супер-быстро получить недостающий навык, если возможно и/или
            2. Нанять профессионала в партнеры, честно поделившись заработком. 
            В паре с профи можно быстро научиться.
            
    - **************************************************Итоги Урока №3 “Как Гоголь поможет учиться…”**************************************************
        - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
            - **************Знания:************** как работает консолидация памяти; значимость астроцитов и гипокампуса
            - **************Умения:************** определять этапы консолидации памяти
            - **********************Установки:********************** важно уточнять знания при каждом касании; жертвовать сном неэффективно
        - ************************************************Тема 2. Учеба как Проект************************************************
            - **************Знания:************** почему стратегия так важна; матрица анализа стратегий; чек-лист мониторинга процесса
            - **************Умения:************** определять оптимальные стратегии; быстро подводить итоги и планировать действия
            - **********************Установки:********************** важно всегда идти вперед, пусть и маленькими шагами; акцент на успехах не менее важен, чем анализ ошибок
        - ********************************************Тема 3. Память и блоки смыслов********************************************
            - **************Знания:************** как создавать чанки; схема поиска контекста их применения; ошибки при чанкинге; “Карточки смыслов”: методика и принципы
            - **************Умения:************** создавать чанки, находить контекст их применения; работать с карточками смыслов
            - **********************Установки:********************** без понимания чанки бесполезны; не следует недооценивать эффективность повторений
        - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
            - **************Знания:************** как и почему работает метод Гоголя; суть ловушек образа мышления и “удушья”
            - **************Умения:************** применять метод Гоголя; не загонять себя; развивать интеллектуальную автономность и “open mind”
            - **********************Установки:********************** в учебе очень важна подготовка
    - ******************************************************Домашние задания и Практика******************************************************
        
        ********************************************************************************************************Сформируйте дерево тем по Урокам 1-3 в Облаке знаний********************************************************************************************************
        
        - Разверните закладку Урока дальше: Урок / Тема / Топики в теме / Ваше видение
        - Самостоятельная формулировка топиков помогает осмысливать материал
        - Начните с тех, которые кажутся максимально сложными и непонятными
        
        ******************************************************************************************************************Создайте по одному набору карточек на каждую тему Урока 3******************************************************************************************************************
        
        - Распишите темы Урока 3
        - По каждой теме составьте набор из 2-х карточек
        - Используйте пример практикума из урока
- **Урок 4. “Рушим мифы…”**
    - **Сегодня на Уроке 4. План**
        
        ********************************************Тема 1. Нейронауки и Обучение********************************************
        
        - Что нас мотивирует?
        Нейромодуляторы и мотивация, поведение, внимание
        - Как стать эффективным учеником? 
        Нейрофизиология учебы и знаний
        
        ******************************************Тема 2. Учеба как Проект******************************************
        
        - Метакогнитивные процессы
        - Метакогнитивный чек-лист
        - Как встраивать учебу в повседневную жизнь?
        
        ************************************************************Тема 3. Память и блоки смыслов************************************************************
        
        - Визуально-пространственная память
        - Метафоры и аналоги как инструмент запоминания
        - Техника “Дворец памяти”
        - Техника перемежения (интерливинг)
        
        ****************************************************************Тема 4. Прокрастинация и ловушки****************************************************************
        
        - Концепция гениальных достижений
        - Меняйте мысли - меняйте жизнь
        - Обзор техник
    - ******************************************************Тема №1: Нейронауки и Обучение. Как мозг воспринимает и обрабатывает новое?******************************************************
        
        ****************************************************************************************************Красный ходовой огонь всегда расположен на левом борту по ходу движения.
        Сердце и улица красных фонарей.
        Зачем? Какая связь?..****************************************************************************************************
        
        **********План по Теме №1:**********
        
        - **Что нас мотивирует?**
        Нейромодуляторы и мотивация, поведение, внимание
            
            > ************************************************************Легко учить то, что ИНТЕРЕСНО !!!************************************************************
            Отсутствие интереса усложняет обучение
            ********************************************************************************Интерес влияет на способность учиться********************************************************************************
            ”******************************Мне интересно!” -****************************** учиться легко
            ****************************”Не интересно…” -**************************** учиться тяжело
            Осознанное развитие эмоции “Интерес” пробуждает любознательность и помогает эффективно учиться
            > 
            
            ******************Что на мотивирует?******************
            Нейромодуляторы - это химические соединения определенных нейронов, влияющие на мотивацию, внимание и социальное поведение
            
            > ************************************************************************************************************************************************************Нейромодуляторы несут информацию о важности опыта и ценности его для будущего************************************************************************************************************************************************************
            Нейроны обрабатывают и передают содержание опыта
            > 
            
            <aside>
            ☝ ****Опыт для мозга - это ВСЕ, что происходит с нами.
            Все, что мы слышим, видим, знаем, чувствуем, едим и пьем и т.д.****
            
            </aside>
            
            **********Ацетилхолин, Допамин и Серотонин - основные нейромодуляторы
            Зоны влияния нейромодуляторов затрагивают весь мозг
            Они влияют на Мотивацию, концентрацию Внимания и социальное Поведение**********
            
            <aside>
            ☝ **********************************************************************************************************************************************************Нейромодуляторы регулируют, как быстро нейроны передают информацию друг другу**********************************************************************************************************************************************************
            
            </aside>
            
            **********Ацетилхолин -********** Формирует синоптические связи нейромодуляторов с корой мозга (кортексом), влияет на Долговременную память и концентрацию Внимания.
            
            ********Допамин - это НЕ “гормон” и НЕ “счастья” !********
            Миф о “гормоне счастья” - это яркий пример иллюзии компетентности и разницы между узнаванием и знанием
            ****************************************************************Активируется наличием вознаграждения, немедленного или отложенного во времени.
            Влияет на Мотивацию, принятие Решений и Обучение****************************************************************
            Вырабатывается в нейронах, расположенных в основании нервного столба
            
            <aside>
            ☝ ************************************************************************************************************************************************************Мотивация контролируется Допамином - химической субстанцией, а не силой воли************************************************************************************************************************************************************
            
            </aside>
            
            > ****************************************************************************************************************************************Больше риска и мало эмпатии в поведении при низком уровне серотонина****************************************************************************************************************************************
            У осужденных за насилие самый низкий серотонин
            > 
            
            ****************************Серотонин - отвечает за социальное поведение. У альфа-самцов обезьян самый высокий уровень серотонина в клане.****************************
            Вырабатывается в нейронах серотонина
            
            > ****************************************************************************************************************************Эмоции зависят от биохимии организма и вашей аффективной ниши****************************************************************************************************************************
            Аффективная ниша - это все, что на вас влияет снаружи и внутри. 
            Аффективную нишу можно изменять.
            > 
            
            ********************************************************Эмоции влияют на обучение !********************************************************
            Доказано, что эмоции связаны с когнитивными функциями и влияют на восприятие и внимание.
            Зависят от аллостасиса - взаимодействия различных систем и процесса распределения ресурсов внутри организма
            
            <aside>
            ☝ ******************************Мы создаем свои Эмоции, не они нами управляют******************************
            
            </aside>
            
        - **Как стать эффективным учеником?**
        Нейрофизиология учебы и знаний
            
            > **************************************************************************************************************************************************В префронтальной коре мозга идут процессы обучения, планирования и языка**************************************************************************************************************************************************
            Мозг - это система высокого уровня комплексности, в которой связи частей сильно переплетены между собой
            > 
            
            ****************************************************************************************Префронтальная кора головного мозга - это зона сетей принятия решений, планирования, обучения и языковой активности****************************************************************************************
            Нейронные связи переплетены, развитие одних нейронов в сети обязательно влияет на другие.
            
            <aside>
            ☝ **********************************************************************Когда вы учитесь, улучшаются принятие решений, планирование и способности к языкам**********************************************************************
            
            </aside>
            
            **********************************************************Физические упражнения сохраняют новые нейронные связи и активируют гипокампус на создание и укрепление нейронных связей.**********************************************************
            Забота об организме - это забота о мозге, потому что они в единой системе.
            
        - **********Итоги по Теме №1. Нейронауки и Обучение**********
            - ************Знания************
                - Как и на что влияют основные нейромодуляторы: ацетилхолин, допамин и серотонин
                - Физкультура помогает работе гипокампуса и укрепляет нейронные связи
            - ******************Установки******************
                - Мотивация зависит от состояния мозга, а не от силы воли
    - ******************************************************Тема №2: Учеба как Проект. Планирование. Задачи и контроль Прогресса******************************************************
        
        ******************************План по теме:******************************
        
        - ************************************************Метакогнитивные процессы************************************************
            
            > ************************************************Метакогнитивные процессы - это “знание о знании”, “мышление о мышлении”, “осознание об осознании”.************************************************ Основоположник подхода греческий философ Аристотель (384 - 322 до н.э.)
            > 
            
            <aside>
            ☝ ********************************************************Я знаю, что ничего не знаю********************************************************
            Так сказал философ Сократ (469 - 399 до н.э.)
            Это тоже метакогнитивный подход.
            **************************************************************************************************************Понимание своего знания дает мощный инструмент развития**************************************************************************************************************
            
            </aside>
            
        - ************************************************Метакогнитивный чек-лист************************************************
        Для выбора максимально эффективного движения к Цели
            
            > ****************************************************************************************************************************************Метакогнитивный чек-лист экономит время и помогает двигаться вперед****************************************************************************************************************************************
            Три этапа: планирование, мониторинг, оценка
            > 
            1. ************************Планирование************************
                1. Почему задача возникла?
                2. Какова точная точка Б?
                3. Где мне взять информацию?
                4. Сколько ресурсов нужно?
            2. ********************Мониторинг********************
                1. Четко ли я понимаю, что делаю?
                2. Приближаюсь ли я к Цели?
                3. Нужны ли изменения?
            3. ************Оценка************
                1. Достиг ли я Цели?
                2. На сколько в %, в долях, 3/4, половина?
            
            <aside>
            ☝ ******************************************************************************************************************************************Регулярный взгляд на себя и процесс со стороны повышает эффективность******************************************************************************************************************************************
            
            </aside>
            
        - **********Как встраивать учебу в повседневную жизнь**********
        Обучение - это набор множества элементов разного масштаба и значимости.
            
            > ************************************************************************************************************На Эверест не запрыгивают, а поднимаются шаг за шагом************************************************************************************************************
            Для формирования новых знаний и навыков нужно время
            > 
            
            ****************************************************************Как интегрировать учебу в жизнь?****************************************************************
            
            1. ****************************************Планировать на ночь****************************************
            Ночью мозг активно поработает над решением Задач.
            Ставь Задачи на неделю или на день, как удобно.
            2. ****************************************************************Разнообразить и делать перерывы****************************************************************
            Помодоро через 22 мин…
            На перерывах отключайся
            3. ******************************************************************************************Устанавливать время окончания учебы и работы******************************************************************************************
            Важно, чтобы оставалось время на отдых, хобби и развлечения
            
            <aside>
            ☝ ******************************************************************Учеба должна стать частью жизни !******************************************************************
            
            </aside>
            
            ************************************************************************************************************************************Только на надежном основании слой за слоем создается прочный фундамент глубоких знаний! Постоянство гарантирует Результат!************************************************************************************************************************************
            
            <aside>
            ☝ ******************************************************************Прогресс в учебе идет этапами.
            Сначала сложно - потом скачок !******************************************************************
            
            </aside>
            
        - **********************************************************Итоги по Теме №2. Учеба как Проект**********************************************************
            - ************Знания************
                - Что такое метакогнитивные процессы
                - Метакогнитивный чек-лист
            - ************Умения************
                - Проверять движение к Цели
                - Встраивать учебу в жизнь
            - ******************Установки******************
                - Прогресс в учебе требует времени
    - **Тема №3: Память, фрагментация и блоки смысла**
        
        ************************************Сегодня в Теме №3:************************************
        
        - **************************************************************Визуально-пространственная память**************************************************************
            
            > ****************************************************************************************************************************************************************************************************************************Визуально-пространственная память эффективная для переноса в долговременную****************************************************************************************************************************************************************************************************************************
            Метафоры и аналогии, техника “Дворца памяти”
            > 
            
            ****************************************************************************************************************************************************************************************************************************************************************Красный ходовой огонь всегда расположен на левом борту по ходу движения. 
            Сердце и улица красных фонарей
            Зачем это? Какая связь?
            
            Фонарь, сердце и “красные фонари” - красные.
            Сердце слева. Сердце - символ любви, а проституция - антитеза любви.****************************************************************************************************************************************************************************************************************************************************************
            Чем необычнее метафора, тем лучше для памяти.
            
            <aside>
            ☝ **************************************Хомо Сапиенс гораздо раньше начали помнить места и запоминать образы, чем научились говорить**************************************
            
            </aside>
            
        - ******************************************************************************************Метафоры и аналоги как инструмент запоминания******************************************************************************************
            
            ************************Метафоры************************
            Чем ярче впечатление, тем проще запоминание
            
            ************************************Метафоры в физике************************************
            Катионы - положительно заряженные частицы. 
            Анионы - отрицательные
            Метафоры и аналогии создают крючки в памяти на основе существующих знаний.
            
            ******************Аналогии******************
            Важно связывать с известным и понятным: процессы, даты, образы.
            
            ******************************************************************Аналогия для электрического тока******************************************************************
            Ток - это поток воды. Напряжение - как давление столба воды при перепаде. Важна связь с существующим пониманием или представлением.
            
            **********************************Аналогии в химии**********************************
            Двойные связи обезьян хвостами - бинарные связи. Сцепленные лапы - обычные. (Из немецкого научного журнала о химии начала 20 века)
            
        - **************************************************Техника “Дворец памяти”**************************************************
            
            Найдите знакомое в деталях помещение или пространство и разместите в нем образы новых знаний
            
            **********************************“Дворец памяти” - знакомое помещение или пространство**********************************
            Дворцы можно менять и создавать для разных направлений.
            
            **************************************************Техника “Дворец памяти”**************************************************
            
            1. **************************************************Найдите пространство и помещение, которое вы хорошо помните**************************************************
            Свой дом, офис или парк. Это станет вашим “дворцом”.
            2. ****************************************************************************************************************************************Расположите образы новых знаний в необычном контексте во “дворце”****************************************************************************************************************************************
            Сердце бьющееся на журнальном столике, кошка, жующая лук на диване.
            3. **************************************************************************************************************************Прогуляйтесь мысленно по дворцу и встретьте ваши новые знания**************************************************************************************************************************
            Чем необычнее метафоры или образы, тем ярче будет впечатление и след в памяти.
            
            <aside>
            ☝ **************************************************************************Учеба развивает креативность через навык создания образов и метафор**************************************************************************
            
            </aside>
            
        - ******************************************************************Техника перемежения (интерливинг)******************************************************************
            
            ****************************Перемежение (Interleaving) - малоизвестная, непростая, но очень эффективная техника формирования знаний****************************
            
            > ******************************************************************************Интервальные повторения и практика формируют устойчивые чанки******************************************************************************
            Создаем основу знания
            ****************Перемежение развивает гибкость и креативность****************
            Учимся применять знания максимально эффективно
            > 
            
            ******************************************************************************************************************************************************************************************************************************************************************************************************Перемежение - это изучение двух или более связанных концепций или навыков, вместо того, чтобы фокусироваться исключительно на чем-то одном за раз.******************************************************************************************************************************************************************************************************************************************************************************************************
            Вы можете смешивать разные темы и примеры, или переключаться с одной темы на другую несколько раз в процессе занятия.
            
            > ************************************************************************Классический подход изучения тем - Одна за одной с последовательным фокусом.
            Перемежение позволяет сравнивать и искать взаимосвязи между темами.************************************************************************
            > 
            
            ********************************************************Когда эффективно перемежение********************************************************
            
            1. ******************************************************************************************Когда темы связаны похожими методами решений******************************************************************************************
            Изменение объема разных фигур, изучения времен в языке, которые легко перепутать.
            2. ****************************************************************************************Когда вы уже как-то знакомы с каждой из тем****************************************************************************************
            Почитали три главы и теперь работаете с ними тремя вместе.
            3. ********************************************************************************************Когда вы хотите найти связи в разных областях********************************************************************************************
            Перемежение привело к множеству научных открытий.
            
            <aside>
            ☝ ********************************************************************************************************************************************************Перемежение делает вас мастером владения знания и создает глубокое понимание********************************************************************************************************************************************************
            
            </aside>
            
        - **************************************************Итоги по Теме №3 Урока 4. Память и блоки смыслов**************************************************
            - ************Знания************
                - Значимость метафор, аналогий для памяти
            - ************Умения************
                - Строить “Дворец памяти” из метафор и аналогов
                - Эффективно учить за раз несколько тем
            - ******************Установки******************
                - Учеба развивает креативность
    - ******************Тема №4: Прокрастинация и другие ловушки мышления******************
        
        ************************************Сегодня в Теме №4:************************************
        
        - **************************************************************Концепция гениальных достижений**************************************************************
            
            **Santiago Ramon y Cajal - отец нейронаук**
            Сантьяго Рамон Кахаль считал своим основным даром умение слушать других, менять мнения и признавать ошибки.
            До 20 лет он был хулиганом и попадал в тюрьмы.
            Решил начать изучать медицину после 22 лет и стал Нобелевским лауреатом.
            
            ************Charles Darwin был сначала священником************
            Чарльз Дарвин смог по-новому посмотреть на известные в его время теории развития геологических пластов и принципы классификации.
            Родился в 1809. Работу опубликовал в 1859. Умер в 1882
            
            > ******************************Занятия музыкой укрепляют нейронные связи******************************
            Не нужно быть Моцартом. Просто побренчать на гитаре лучше, чем не бренчать. Выбор огромен, можно найти свое решение.
            > 
        - **********************************************************Меняйте мысли - меняйте жизнь**********************************************************
            
            **************************************************************Меняйте мысли - меняйте жизнь!**************************************************************
            Образ мышления и мировоззрения - инструменты вашего развития
            
            <aside>
            ☝ ****************************************Мысли формируют Намерения
            Намерения - Действия
            Действия ведут к Результату****************************************
            
            </aside>
            
        - ************************Обзор техник************************
            
            **************************************************Саммари по прокрастинации**************************************************
            
            - Техника Помодоро
            - Метод Гоголя
            - Иллюзия компетентности
            - Избыточное обучение
            - Эйнштейнлунг. Ловушка образа мысли
            - “Удушье”
        - **********************************************Итоги по Теме №4 Урока 4. Прокрастинация и другие ловушки**********************************************
            - ******************Установки******************
                - Важно понимать Цель и быть проактивным в ее достижении
                - Поздно для начала не бывает
                - Мысли формируют Результаты
    - **************************************************Итоги Урока №4 “Рушим мифы…”**************************************************
        - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
            - **************Знания:************** как работают нейромодуляторы и на что они влияют; физкультура помогает гипокампусу и укрепляет нейронные связи
            - **********************Установки:********************** мотивация зависит от состояния мозга, от допамина, а не от силы воли
        - ************************************************Тема 2. Учеба как Проект************************************************
            - **************Знания:************** что такое метакогнитивные процессы и метакогнитивный чек-лист
            - **************Умения:************** анализировать развитие Проекта с мета позиций; встраивать учебу в жизнь
            - **********************Установки:********************** прогресс в учебе - это время
        - ********************************************Тема 3. Память и блоки смыслов********************************************
            - **************Знания:************** значимость визуально-пространственной памяти
            - **************Умения:************** создавать метафоры и аналогии; техники “Дворец памяти” и “Перемежение”
            - **********************Установки:********************** учеба развивает креативность; можно эффективно учить несколько тем сразу
        - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
            - **********************Установки:********************** важно понимать Цель и быть проактивным в ее достижении; для начала “поздно” не бывает; мысли формируют Результаты
- ********************************************************************************************************************************************************************Мини-практикум. Обучение в Notion. Как группировать материалы и строить план повторений********************************************************************************************************************************************************************
    - **************************************Сокращения и условные обозначения**************************************
        
        Касания указываются в начале строки в круглых скобках, например (2)
        
        Номер урока указывается просто цифрой после категории, через запятую
        
        Категории итогов (ЗУмУс): Знания (З), Умения (Ум), Установки (Ус)
        
        Тема №1: Нейронауки и Обучение - Нейронауки
        
        Тема №2: Учеба как Проект - Проект
        
        Тема №3: Память, фрагментация и блоки смыслов - Память
        
        Тема №4: Прокрастинация и другие ловушки мышления - Прокрастинация
        
    - ************************************************************************По Темам / Категории итогов / Уроки************************************************************************
        
        Нейронауки / ЗУ / 1,2
        
        Нейронауки / Ум / 1,2
        
        Прокрастинация / ЗУмУс / 1-4
        
        и т.д. как удобно
        
    - **********************************************************************По Категориям итогов / Тема / Уроки**********************************************************************
        
        Знания / Нейронауки / Уроки 1,2
        
        Знания / Нейронауки / Уроки 3,4
        
        Знания / Нейронауки / Все уроки
        
        ЗУс / Нейронауки / Урок 3
        
        и т.д.
        
    - ********************************************************************По Уроки / Темы / Категории итогов********************************************************************
        
        Урок 1 / Нейронауки / ЗУмУс
        
        Уроки 1-4 / Нейронауки / Установки
        
        Уроки 2,3 / Проект / Умения
        
    - ******************************************************************Группировка помогает спланировать******************************************************************
    - **********************************************************************************Сгруппируйте как вам удобно и Действуйте!**********************************************************************************
- **ИТОГИ КУРСА**
    - **********************************************************Тема 1. Нейронауки и Обучение**********************************************************
        - ******Знания******
            - О структуре курса
            - У нас 3 формата занятий: уроки, практикум и сессия вопросов и ответов, плюс - задания
            - Четыре темы изучаются послойно на каждом уроке по спиральной модели
            - Все новое - это нейронные связи в мозге
            - Мозг никогда не спит, он работает в фокусном и рассеянном режимах
            - Сон очищает мозг, помогает учиться и решать Задачи
            - Как работает консолидация Памяти
            - Значимость Астроцитов и Гипокампуса
            - Как работают Нейромодуляторы и на что они влияют
            - Физкультура помогает гипокампусу и упрепляет нейронные связи
        - ************Умения************
            - Вести конспект по методу Корнелла с тремя полями: в центре - для заметок, слева - для вопросов и мыслей, внизу - для выводов
            - Тренировать мозг, развивая внимание и концентрацию
            - Определять этапы консолидации Памяти
        - ******************Установки******************
            - Возможность учиться - это  привилегия
            - Образование - это достояние
            - Умение учиться - жизненно-важный навык человека 21 века
            - Перерывы - это не потеря времени, а переключение режимов работы мозга
            - Сон - важный процесс в Учебе
            - Важно уточнять Знания при каждом Касании
            - Жертвовать сном неэффективно
            - Мотивация зависит от состояния мозга, от допамина, а не от силы воли
    - ************************************************Тема 2. Учеба как Проект************************************************
        - ******Знания******
            - Для учебы нужны Ресурсы: ********************************************************************************Время, Внимание, Энергия. Они ОГРАНИЧЕНЫ********************************************************************************
            - Перерывы нужны для перезарядки энергии и внимания
            - Методика СМАРТ для Целей и Задач
            - Почему стратегия так важна?
            - Матрица анализа Стратегий
            - Чек-лист мониторинга процесса
            - Что такое метакогнитивные процессы
            - Что такое метакогнитивный чек-лист
        - ************Умения************
            - Создавать Облако знаний
            - Работать в группе по методике Р2Р и “Совет директоров”
            - Определять оптимальные стратегии
            - Быстро подводить итоги и планировать действия
            - Анализировать развитие Проекта с мета позиций
            - Встраивать учебу в жизнь
        - ******************Установки******************
            - Учеба - это Проект, в нем есть Цели, Ресурсы и Результаты
            - Облако знаний помогает работать с информацией и делает ее ценной
            - Нужно учиться с коллегами
            - На Эверест не запрыгивают, а поднимаются шаг за шагом - Цели достигаются поэтапно
            - Важно всегда идти вперед, пусть и маленькими шагами
            - Акцент на Успехах не менее важен, чем анализ ошибок
            - Прогресс в учебе - это время
    - ************************************************************Тема 3. Память и блоки смыслов************************************************************
        - ******Знания******
            - Для учебы важны Рабочая и Долговременная Память
            - У нас всего +/- 4 слота Рабочей Памяти
            - Новое может рассеиваться
            - Что такое Чанк и как работает Чанкинг
            - Чанкинг помогает освобождать слоты Рабочей памяти
            - Как создавать Чанки
            - Схема поиска контекста их применения
            - Ошибки при чанкинге
            - Карточки смыслов: Методика и Принципы
            - Значимость визуально-пространственной памяти
        - ************Умения************
            - Применение интервальных повторений
            - Определять и формировать Чанки
            - Создавать Чанки, находить контекст их применения
            - Работать с карточками смыслов
            - Создавать Метафоры и Аналогии
            - Техника “Дворец памяти”
            - Техника Перемежения
        - ******************Установки******************
            - Воспоминания создаются в моменте
            - Повторять важно с интервалами
            - Для сохранения новое следует перенести в Долговременную Память
            - Знания устойчив, когда соединены смыслом
            - Без понимания Чанки бесполезны
            - Не следует недооценивать эффективность повторений
            - Учеба развивает креативность
            - Можно эффективно учить несколько тем сразу
    - ************************************************************************************************Тема 4. Прокрастинация и другие ловушки мышления************************************************************************************************
        - ******Знания******
            - Прокрастинация - это защита от экстра-затрат энергии
            - При защите от экстра-затрат энергии включаются центры боли
            - Действия выключают центры боли
            - Прокрастинация нарушает Память
            - Recall и синопсис эффективнее подчеркиваний и майнд-карт
            - Как и почему работает метод Гоголя
            - Суть ловушки образа мышления
            - Суть ловушки “Удушья”
        - ************Умения************
            - Техника “Помодоро”
            - Избегать иллюзию компетентности
            - Избегать избыточное обучение
            - Применять метод Гоголя
            - Не загонять себя
            - Развивать интеллектуальную автономность и Open Mind
        - ******************Установки******************
            - Действие выключает прокрастинацию
            - Важно формировать собственные мысли
            - Прокрастинация похожа на зависимость
            - В учебе очень важна Подготовка
            - Важно понимать Цель и быть проактивным в ее достижении
            - Для начала “поздно” не бывает
            - Мысли формируют Результаты
    
    ****************************Узнав, что Мозг - супер-машина, вооружившись мечом самурая знаний - Чанком, призвав в помощники Гоголя и разрушив вредные мифы, вы вышли на путь познания новой профессии и мира 21 века.****************************
    Вы можете честно гордиться своим достижением. 
    Инвестиции в умение учиться окупятся сторицей.
    
    <aside>
    ☝ **********************************************************************************В жизни всегда есть место новой профессии**********************************************************************************
    
    </aside>
    
    <aside>
    ☝ **********************************************************************Дорогу осилит идущий. Удачи в пути!**********************************************************************
    
    </aside>
    

### Модуль: Курс компьютерной грамотности. 10.08 - 17.08.2023

******************Преподаватель: Елена Бредова******************

### Урок 1. Компьютер и его базовые настройки

- **********Вступление**********
    
    Привет!
    Сейчас вы находитесь в специальном курсе, который создан для новых студентов ГБ. Этот курс будет полезен тем, кто только погружается в сферу современных технологий.
    Например, если вы не знаете, как устроен компьютер, какие горячие клавиши сделают вашу работу за ним проще и быстрей - этот курс будет полезен для вас.
    
    ************************************************Что внутри этого курса?************************************************
    Внутри - базовые вещи о компьютерной грамотности. Их нужно знать каждому. Вы можете изучить план курса в левом меню. Выбирайте для себя то, что вам непонятно.
    Если большая часть информации для вас новая - это нормально. Посмотрите курс - знания из него сделают ваше обучение легче.
    
    ******************************************************************************Кому точно можно пропустить этот курс?******************************************************************************
    Если вы знаете, что такое VPN, как компьютер устроен внутри, как работать с файлами в облачных хранилищах - вам можно смело пропустить этот курс.
    
    **************************Здравствуйте!**************************
    Сегодня урок посвящен компьютеру, и из чего он, собственно, состоит. Прежде чем мы об этом поговорим, я немного представлюсь.
    
    Меня зовут Елена Бредова, я в сфере ИТ примерно с 1999 года. Хотя в принципе раньше. Почему я сегодня рассказываю вам про эту тему? С компьютером я столкнулась в далеком 97 году, буду студенткой, когда мне понадобилось собрать собственный компьютер. Тогда это были древние 286, 386. Как вы понимаете, денег у студентов нет, поэтому я его собирала по запчастям. Это был увлекательный опыт, он позволил мне разобраться, из чего состоит компьютер и каким образом его можно модернизировать. Сегодня я вам об этом расскажу. Поехали?
    
- ************************План занятия************************
    
    Что мы сегодня разберем?
    Мы разберем как устроен компьютер, как можно подключить к нему внешние устройства, такие как мышка, монитор и другое. Узнаем, как найти на компьютере файлы и программы, и разберемся в самом важном аспекте - что же влияет на работоспособность нашего компьютера. Т.е. как заставить его работать быстрее.
    
- **********************************************************************Что такое компьютер? Виды компьютеров**********************************************************************
    
    **Что такое компьютер?**
    Компьютер - это устройство, которое помогает нам выполнять различные задачи от самых простых, например, набора текста, обработки фотографий или монтажа видео, до каких-то суперсложных. Я думаю, что вы, так или иначе, уже с ним сталкивались.
    
    **************************************************************************************************Какие же бывают компьютеры, как мы могли бы их с вами разделить?**************************************************************************************************
    
    - ************************************************************Настольный, стационарный компьютер************************************************************
    Состоит из системного блока, монитора и мыши и клавиатуры. Это обычный набор. ПК
        
        **************Плюсы:**************
          - Проще модернизировать, т.е. увеличить производительность.
        
        ****************Минусы:****************
         - Нельзя взять с собой
        
    - ****************************************************************Ноутбуки, переносные компьютеры****************************************************************
    Они намного компактнее и напоминают скорее большую книжку.
        
        ****************Плюсы:**************** 
         - Легко брать с собой и работать из любой точки мира, т.е. мобильность.
        
        ****************Минусы:****************
         - Увеличивать производительность ноутбука проблематично
         - Время работы от батареи недостаточно долгое
        
    
- ********************************************Как устроен компьютер?********************************************
    
    Мы поговорим именно о стационарном компьютере. Потому что с ноутбуком более или менее понятно, там единый блок. А что же касается такого компьютера?
    Оно состоит из системного блока, это мозг компьютера, главная часть внешних устройств, которые к нему подключаются.
    Что же это за внешние устройства? 
    Я уже говорила, что наш компьютер состоит из двух частей.
    
    **********************************Системный блок -********************************** это мозг и сердце нашего компьютера. Из чего он состоит? Есть основные части - это материнская плата. Она - фундамент оборудования, которое мы встраиваем в Системный блок. Но фундамент бывает разные, мы можем поставить какой-то легкий фундамент и поставить садовый домик, или поставить мощный фундамент и вырастить небоскреб. 
         Также важна материнская плата. Мы обязательно об этом поговорим. 
    Еще внутри системного блока прячется процессор, оперативная память, жесткий диск, а иногда бывает, что и не один жесткий диск, а так называемая карта расширения. К которому относится видеокарта, звуковая карта, сетевая карта. Чтобы питать эту систему, есть блок питания и порты, через которые мы и подключаем внешние устройства.
    
- ************************************Внешние устройства************************************
    
    А что же это за внешние устройства?
    Внешние устройства - это все устройства, которые не входят во внутренний состав нашего системного блока. Мы их еще называем устройствами ввода и вывода информации в компьютер. И их тоже можно поделить на 3 группы:
    
    1. **Устройства ввода информации**
    Клавиатура (с помощью нее набирается текс), мышь (является манипулятором, вы перемещаете курсор по экрану и совершаете какие-то действия) или классический планшет (помогает создавать рисунки, которые будут сразу появляться на экране).
    2. **Устройства вывода информации**
    Экран (монитор) демонстрирует результат работы компьютера (вывода информации). Проектор, который можно подключить к системному блоку или принтер, также колонки, наушники и тд.
    3. **Устройства хранения информации**
    Внешние жесткие диски или более маленькие носители - флешки.
- **************************************************************************Способы подключения устройств. Порты.**************************************************************************
    
    Как же подключить устройства ввода-вывода информации или, если говорить простым языком мышь, клавиатуру, наушники?
    Все достаточно просто. Если вы посмотрите на системный блок с обратной стороны, то увидите блок разъемов. Они будут разделены по типам. 
    Устройство, которое вы будете подключать к этим портам опять же, имеют определенные штекеры. И все задумано так, чтобы вы практически не могли ошибиться. А некоторые порты даже подписаны.
    Если вы обратите внимание, то, например, порты рс2, с помощью которых подключается мышка и клавиатура даже подписаны, на них есть иконки.
    На одном мышь, на другом клавиатура, чтобы вы не ошиблись с выбором.
    А круглые разъемы отвечают за звук. Причем, красный блок за ввод звука (микрофон), а зеленый и синий отвечают за вывод звука, туда мы можем подключить колонки или какой-то сабвуфер.
    
    Но чаще всего мы пользуемся именно USB портами. Они бывают нескольких типов, и мы сейчас разберемся, какие именно и почему они бывают разных цветов. Вы знали, что цвет разъема USB портов говорит нам о его серии?
    
    Белый - это USB первой версии, он позволял нам передавать данные до 12 МБ в секунду. Версия на самом деле уже устаревшая, и вы практически не встретите такие порты, но тем не менее они могут вам попадаться.
    
    Черный - это USB 2 версии, он позволяет передавать данные уже с большей скоростью до 480 Мб в секунду. Но все равно это недостаточно много.
    
    После USB 2.0 у нас появился порт USB 3.0, такие порты обозначаются синим цветом и позволяют нам передавать информацию со скоростью до 5 Гб в секунду. Обратите внимание, какая разница появилась в скоростях.
    
    Красный и желтый порты, их тоже можно встретить, говорят, что разъем не будет отключаться от питания даже если компьютер будет в режиме сна или ожидания. Например, вы можете поставить на зарядку свой телефон.
    
    Если цвет порта бирюзовый - это уже версия 3.1 USB с еще большей скоростью передачи данных до 10 Гб в секунду. Но есть тонкость. Обратите внимание на штекер, который вы будете вставлять в этот порт. Если, например, у вас USB-порт синего цвета с возможность передачи данных до 5 Гб, а вы будете подключать разъем, в котором есть такое же обозначение, то шнур, например, белого цвета такую скорость поддерживать не будет.
    Обращайте внимание, пожалуйста, на совпадение цветов.
    
- ******************************Шнуры и разъемы******************************
    
    Теперь, когда мы заговорили про шнуры и разъемы, давайте посмотрим, а что у нас сейчас есть? Какие разъемы существуют? 
    Есть так называемый Type-A, они самые обыкновенные и распространенные, подходят для флешек, мышек, клавиатуры.
    Существует разъем Type-B, который обычно бывает у принтеров. Я думаю, что вы встречали, например, принтеры или сканеры. Есть mini Type-B, он относится  к цифровым камерам, модемам, кардридерам. Есть еще и микро Тип-Б и ему на смену пришел самый новый такой разъем, уже достаточно распространенный на сегодняшний момент это Type-C.
    Type-C новый и наиболее перспективный вид. Он поддерживает стандарт 3.1, это достаточно высокая скорость передачи данных.
    
- ****************************************************************************************Как включить, выключить, перезапустить компьютер****************************************************************************************
    
    Мы немного разобрались с тем, какие порты и разъемы бывают, теперь обратимся к тому, как нам включить и выключить компьютер.
    Есть несколько способов
    
    1. Первый самый простой - воспользоваться кнопкой, которая находится на системном блоке. Она обычно достаточно заметная. Вы просто ее нажимаете и компьютер включается. 
    2. Если мы говорим о ноутбуке, то обычно она находится в верхнем либо правом, либо левом углу, и она специально обозначена, чтобы был виден значок именно питания. Нажмите и компьютер включается.
    
    Как выключить компьютер?
    Сейчас ОС позволяет при помощи кнопки выключать компьютер. Но правильнее будет, конечно, это делать через меню. В правом нижнем углу нажимаете и выбираете, что именно вы хотите сделать (завершить работу или перезагрузить)
    
    Что же такое режим сна?
    Например, вы не пользуетесь компьютером и не хотите, чтобы он зря работал, то можете компьютер как бы усыпить. Конечно, он сам через какое-то время погружается в режим сна, это тоже можно настроить, но вы можете это сделать принудительно при помощи этого пункта меню. 
    
- ******************************************************************Как найти на компьютере файлы или программы?******************************************************************
    
    Еще один важный аспект. Как найти на компьютере файлы или программы?
    Все очень сильно зависит от вашей ОС. В Виндоус для этого нам нужен проводник. В нижнем меню находите желтый значок папки, нажимаете, и перед вами открывается список жестких дисков, которые подключены к вашему компьютеру. 
    Жесткий диск может быть не один, а несколько. А может быть так, что один жесткий диск разделен на несколько частей. Допустим, Диск С и Диск Д.
    Щелкнув по жесткому диску, вы видите свои файлы, программы, которые установлены и т.д. Я рекомендую всегда разбивать жесткий диск хотя бы на 2 части. И первую часть - Диск С отдать полностью, если мы говорим про Виндоус, под ОС. А файлы с фотографиями, архивами и тд хранить на другой части жесткого диска, например, на диске Д. Физически это один диск, просто он фигурально разбит на 2 части.
    Для чего нужно поступать именно так? Например, чтобы случайно не повредить ОС или если нам понадобится удалить или переустановить ОС, чтобы наша информация не была затерта.
    
    Как нам найти программы, установленные на компьютере?
    Обычно при установке ОС, будь то Виндоус или МакОС в комплекте идет определенный пакет программ. Чтобы увидеть, что уже установлено на компьютере, вы всегда может нажать внизу на значок “Пуск”, он выглядит как окошки, и во всплывающем меню вы увидите список установленных программ. Увидеть все программы можно, нажав на кнопку “Все приложения”, тогда вы увидите полный список установленных программ.
    
- **************************Параметры компьютера и их влияние на его работоспособность?**************************
    
    Какие параметры есть у компьютера и как они влияют на его работоспособность?
    Что может повлиять на скорость компьютера?
    
    Я уже говорила, что фундаментом нашего системного блока является материнская плата. Чем мощнее материнская плата, тем больше мы можем иметь возможности увеличивать мощность нашего компьютера. 
    Также на работоспособность влияют: микропроцессор, оперативная память, видеокарта, жесткий диск и количество одновременно запущенных приложений. Но об этом мы сейчас поговорим поподробнее.
    
    ************************************Материнская плата является основой.************************************ К ней мы подключаем и микропроцессор, и оперативную память и все, что есть в системном блоке. Поэтому это самый важный и основной элемент. Не зря он называется материнская плата.
    
    **********************************Микропроцессор -********************************** его еще называют центральный процессор, и это одна из составляющих, которая отвечает за производительность компьютера. Есть два параметра: тактовая частота и количество ядер. Чем выше тактовая частота, тем больше операций производит наш компьютер за секунду. А ядра позволяют расширять эту мощность. Получается, что для дома или офиса, если вам не нужно решать какие-то суперзадачи, то достаточно двухядерного процессора, двух поточного с частотой 2-3 ГГц (гигагерц)
    
    Следующая составляющая оказывающего влияние на производительность - ****************************************оперативная память.**************************************** 
    Что такое оперативная память? По сути, оперативная память - это запоминающее устройство, которое кратковременно хранит данные о том, какие вычисления производятся, какие действия происходят и так далее. Отвечает за хранение всех системных процессов. Поэтом, чем больше оперативной памяти, тем быстрее работает и обрабатывает запросы ваш компьютер.
    Один из важных факторов - это ****************************************************объем оперативной памяти,**************************************************** а второй параметр - ********************************быстродействие,******************************** потому что оперативная память бывает разной. 
    Измеряется она в наносекундах. 
    Что нам понадобится для обычной работы, офиса или дома? 
    В принципе достаточно, конечно, будет 4-8 ГБ, но я бы порекомендовала поставить не меньше 16. А если вы увлекаетесь играми, обрабатываете фотографии или работаете с графикой, то нужно расширять оперативную память до 32 Гб, я думаю, это будет оптимальный вариант.
    
    Еще одна составляющая - ************************видеокарта.************************ Самый важный элемент для нашего компьютера или графической станции. 
    Видеокарта отвечает за вывод видео и графики на экран. Если мы гвоорим про домашний или офисный компьютер, то можно обойтись без внешней видеокарты.
    Есть встроенные в материнскую плату и их должно хватить. Но если вы любите поиграть в игры или занимаетесь обработкой видео графики, то видеокарта - немаловажный элемент, на который стоит обратить внимание при покупке. Я думаю, что вас всегда могут проконсультировать в магазине. Еще эту информацию можно найти в сети.
    
    ****************************Жесткий диск.**************************** 
    Без жесткого диска тоже никуда. Если без внешней видеокарты мы обойдемся, то без жесткого диска никак. На жестком диске хранится все, что относится к софту: файлы ОС, ваши личные файлы и тд. 
    В настоящее время существует три типа жестких дисков. Основные - HDD, SDD, про третий я расскажу позже.
    На что стоит обращать внимание?
    Конечно же на размер жесткого диска. Чем больше информации, которую нужно хранить, тем больше нужен жесткий диск. 
    А еще на что мы должны обращать внимание?
    На размер свободного пространства, которое остается после того, как мы загрузили на компьютер все, что хотели. Это важный параметр, который влияет на производительность. Чем меньше свободного пространства остается, тем меньше возможностей у ОС или программ, которые вы запускаете и тем больше компьютер будет тормозить.
    Универсальная рекомендация - это оставлять не меньше 15-20% свободного пространства, чтобы у вас не было проблем с производительностью. Но для дома и офиса в принципе подойдет диск 256 Гб.
    Я бы рекомендовала иметь отдельный диск, который внешне подключается для хранения архивов. На случай если что-то случится с вашим основным диском или, например, с ноутбуком, чтобы вся информация у вас обязательно сохранилась. Основную архивную информацию старайтесь хранить на внешних дисках.
    
- **********************************************Какая разница между HDD и SSD?**********************************************
    
    Разберем, какие есть типы жестких дисков и почему они по-разному называются?
    Какова разница в устройстве HDD, SSD?
    
    **Что из себя представляет диск, который относится к типу HDD?**
    Это пластины, их может быть несколько, которые находятся на общей оси. Внутри этого диска также существует считывающая головка, которая записывает информацию на диск и считывает с него. Если мы вскроем его, то увидим, как он выглядит изнутри. 
    
    **********************************А как выглядит изнутри диск другого типа?**********************************
    Он называется твердо накопительный и представляет собой просто ряд пластинок, как флешка, только больше.
    
    ****************************************************************************************************Какие различия и преимущества есть у каждого типа?****************************************************************************************************
    Начнем с HDD. Он дешевле его более нового собрата, за счет технологий. 
    Один из плюсов - это достаточно большой объем памяти, можно найти до 20 Тб. А у SSD - максимальный объем 8 Тб, технологии пока не позволяют сделать больше.
    Преимуществом HDD также является то, что при необходимости мы почти всегда можем восстановить потерянную информацию при помощи специальных утилит или специальных мастерских. 
    Еще одно преимущество дисков этого поколения в том, что при отсутствии питания с ними ничего не случится. Если же SSD полежит без питания год, а некоторые вообще пару недель, то есть вероятность, что наша информация затрется.
    
    Теперь про преимущества SSD дисков. Так как это практически микросхема, в них нет механических частей (головок, крутящих элементов), поэтому они практически бесшумны и потребляют значительно меньше энергии. Их используют в ноутбуках для увеличения производительности, чтобы вы могли обходиться без сети достаточно долго. 
    Конечно, они работают значительно быстрее, и мы быстрее получим доступ к информации. Опять же из-за того, что у нас нет механики.
    
    У каждого типа есть плюсы и минусы. Какой именно жесткий диск выбрать, решать вам. Но так как технологии не стоят на месте, минусы и плюсы объединили, таким образом появился третий тип жестких дисков - гибридные диски SSHD, эта аббревиатура сложения обеих технологий.
    Внутри такого диска находится традиционный диск, при этом некоторая часть отдана для быстрой памяти. У них средняя скорость, но тем не менее это хороший компромиссный вариант.
    
    Последний параметр, который очень влияет на скорость работы компьютера - это количество одновременно открытых программ. Есть программы, которые потребляют достаточно много оперативной памяти и занимают практически ее полностью. Например, браузер Хром. Поэтому, если вы видите, что компьютер притормаживает, посмотрите, можно ли что-то закрыть? И вы увидите, как изменится работа.
    
- **********Итоги**********
    
    Подведем итоги.
    Мы поговорили о том, что такое компьютер. 
    Разобрались немного, как он устроен, поговорили о подключении внешних устройств и их параметрах.
    В заключение я бы хотела сказать, наверняка у вас возникнет вопрос, как же разобраться во всех параметрах, как их посмотреть?
    
    **************Параметры,************** которыми обладает компьютер, всегда доступны. В физическом магазине их можно увидеть на карточке, которая выставлена рядом с ноутбуком или компьютером. Там перечислены все параметры, о которых мы говорили: количество оперативной памяти, объем жесткого диска и тд.
    А в интернет-магазине эта информация всегда есть в карточке товара. 
    И в самом компьютере можно увидеть, если открыть информацию о системе и посмотреть конфигурацию нашего компьютера. 
    
    Производительность - это всегда разумное сочетания нескольких элементов. Сочетание оперативной памяти, жесткого диска, материнской платы и тд. Поэтому я желаю вам успехов в освоении данного направления.
    Я верю у вас все получится. И до новых встреч в эфире.
    

### Урок 2. Управление окнами

- ************************************************Вструпление и План урока************************************************
    
    Здравствуйте!
    Сегодня мы поговорим с вами об управлении окнами. Прежде чем углубляться в теорию и немного практики, давайте познакомимся. Меня зовут Елена Бредова, я работаю в ИТ-сфере с 1999 года. За это время успела накопить достаточно большой и разнообразный багаж знаний, которыми с удовольствием поделюсь с вами.
    Посмотрим, что будет на уроке:
    мы с вами поговорим про виды окон, как ими управлять, как перемещать их на рабочем столе, как сделать скриншот и запись экрана.
    
- ******************Что такое окно?******************
    
    Для начала разберемся, собственно, а что такое окно?
    Окно - это прямоугольная область экрана, в который вы видите либо содержание дисков, либо содержимое программы, либо какие-то служебные сообщения, документы.
    
    Наверняка вы открывали на компьютере, например, Ворд, почту, Ватсап, еще проводник, чтобы посмотреть файлы и другие программы. 
    Операционные системы многозадачны, и вы можете работать одновременно со многими приложениями. Но это приводит к захламлению экрана, окна заслоняют друг друга. Сегодня мы узнаем, как сделать работу с окнами удобнее, чтобы быстрее решать задачи.
    
- **************************************Элементы управления**************************************
    
    Теперь разберемся, что такое элементы управления - они есть у каждого окна. Окна программ или проводника для просмотра файлов обычно содержат три элемента: “свернуть окно”, “развернуть окно” и “закрыть окно”. В разных операционных системах внешний вид этих значков может отличаться - мы обязательно посмотрим, как это выглядит.
    
    Итак, как мы можем управлять, повелевать окнами в ОС Виндоус?
    Запустим проводник. Вот эта прямоугольная область, которая открылась с содержимым нашего жесткого диска, и называется окном. Кстати, окно вы видите и, например, при очистке корзины. Выбираем “очистить корзину”, и вот это маленькое всплывающее окошко - тоже окно со своими элементами управления.
    
    Окно мы нашли. Где же элементы управления им?
    В правом верхнем углу - три значка. При наведении на них мышкой мы получаем подсказку системы, что выполняет тот или иной значок. 
    Первый - это “свернуть”, при нажатии на него окошко спрячется вниз в панель задач.
    Горящий значок под этой программой означает, что она не закрыта, а свернута и работает в фоновом режиме. Чтобы развернуть окно обратно, мы снова нажимаем на него.
    
    Следующий элемент похож на прямоугольник. При нажатии на него окно разворачивается во всю ширину - иногда это нужно для рассмотрения деталей в большем объеме информации. 
    Чтобы свернуть окно обратно, нажимаем на этот же значок. Для разворачивания окна на весь экран можно также щелкнуть по заголовку окна два раза ЛКМ. 
    Двойной щелчок по заголовку окна поможет и вернуть окно к исходным размерам.
    
    Последний значок в этом ряду - это “закрыть”, изображенный в виде крестика. При нажатии на него окно закрывается.
    
- **************************************************************************************************************************Размещение нескольких окон на рабочем столе, переключение между окнами**************************************************************************************************************************
    
    Мы разобрались, как свернуть, развернуть и закрыть окно. Что еще мы можем делать мы с окнами?
    
    Окна мы можем:
    
    - Перемещать
    - Менять их размер
    - Упорядочивать
    - Переключаться между ними
    
    Предварительно посмотрим на клавиатурные сокращения, чтобы облегчить работу с окнами.
    Это клавиатура для работы с ОС Виндоус, ее отличительная черта - в наличии кнопки с иконкой Виндоус, которая называется Вин.
    Какие кнопки нам пригодятся?
    Кнопка Esc, которая находится в левом верхнем углу.
    Tab - для переключения между окнами
    Alt - для выбора сочетания клавиш
    Ну, и стрелочки вверх, вниз, влево, вправо - чтобы упорядочить окна.
    
- ****************Практика****************
    
    Перейдем от теории к практике.
    Посмотрим, как можно работать с окнами в ОС Виндоус.
    Что мы можем делать с окнами? **********************Перемещать.********************** Для чего это может понадобиться?
    Представьте, что у меня уже открыто одно окно, я запустила еще программу - и вот окно программы закрыло предыдущее окно. Я могу ЛКМ зажать заголовок окна и, не отпуская клавишу, переместить его в нужное мне место. Окон может быть много, но активное только одно. Это то окно, где мы совершаем какие-то действия: вводим текст, перемещаем курсор. Перемещать мы можем только активное окно - в данном случае мы поменяем его местами с другим.
    
    Что еще мы можем делать с окнами?
    Да, мы их переместили, но из-за больших размеров невозможно разместить два окна рядом, чтобы было видно их содержимое. Мы можем поменять размеры окна!
    Итак, переместим окно, чтобы было удобнее с ним работать, зажав левую кнопку мыши. Теперь для увеличения окна в ширину наводим курсор на его край, пока вместо курсора не появится значок со стрелочками влево, вправо. Далее мы зажимаем ЛКМ и тащим этот край на нужное расстояние. Мы можем окно как расширить, так и уменьшить в размере.
    
    А как увеличить его в высоту?
    По тому же принципу. Подводим курсор к нижнему краю окна, пока не появятся знакомые стрелочки, только теперь вверх, вниз. Зажимаем ЛКМ и не отпускаем, пока окно не станет нужного нам размера. Тащим его либо вниз, либо вверх, увеличивая или уменьшая окно по высоте. Так получилось довольно симпатичное окошко, с которым удобно работать.
    
    Есть еще один способ сразу увеличить окно и по ширине и по высоте. Для этого нам понадобится угол окна: подводим к нему курсор и видим третий тип стрелки “диагональный вверх, вниз”. Это значит, что мы можем зажимать ЛКМ и тянуть это окно настолько, насколько нам необходимо. И оно будет увеличиваться или уменьшаться пропорционально по высоте и ширине. Идем дальше.
    
- **************************************Упорядочивание окон**************************************
    
    Мы также можем окна упорядочивать.
    Разберемся, что это такое и как работает? Запустим какую-нибудь еще программу, допустим, браузер. У нас уже три окна на рабочем столе. И это не предел. Мне нужно их расставить так, чтобы видеть все окна сразу. Я, конечно, могу подогнать их по размеру, сделать одно меньше, другое больше.
    Но есть более простой способ упорядочивания окон. Наведем мышку на элемент управления “развернуть”. Появляются варианты расположения окон: двух рядом, одно из которых занимает 2/3 экрана; трех узких в одном ряду; трех окон с одним широким, находящимся посередине.
    
    Решим, куда разместить проводник. Чтобы задать его местоположение на рабочем столе, нужно выбрать схему расположения окон. Я просто щелкну по этому прямоугольнику, чтобы показать системе, куда нужно встроить окно. И вот проводник оказался на своем месте. Теперь разместим два оставшихся окна. Белым помечена область, которая будет больше и слева. Белый прямоугольник отвечает за область, которая расположена справа, она поменьше. Пусть браузер будет в этом окне, а архиватор расположится здесь. Буквально за несколько секунд мы расположили окна на рабочем столе так, что видим содержимое каждого окна и можем спокойно работать: перетаскивать файлы, сверять содержимое. Это очень удобный вариант работы с окнами.
    
    Конечно, данный вариант доступен для Виндоус 11. 
    При работе с Виндоус 10 для упорядочивания окон пригодятся клавиатурные сокращения Вин + стрелочка вверх, вниз, влево или вправо, чтобы указать, как окно должно располагаться на экране.
    
- ************************************************Перемещение между окнами************************************************
    
    Последний пункт, который хотелось бы рассмотреть, - это перемещение между окнами. Итак, у нас есть два окна, и нам нужно обращаться то к одному, то к другому. Как мы можем между ними лавировать?
    Первый и самый простой способ - это клик по окну.
    Мы с вами уже разбирали, что есть активное окно, оно всегда одно. Щелкнув по окну, мы делаем его активным, и система ждет наших действий с ним.
    
    Следующий вариант перемещения - нажать на соответствующий значок в панели задач, чтобы активировать это окно. Я нажимаю, и активным окном снова становится проводник.
    
    Как еще мы можем переключаться между окнами?
    Для этого пригодится сочетание клавиш Alt + Tab.
    
    Можно использовать не только клавиатурные сокращения, но и иконку на панели задач. Мы вызываем рабочий стол и выбираем, какое окно будет активным.
    
- ********************************************************Как сделать скриншот экрана?********************************************************
    
    Следующая распространенная задача - как сделать скриншот и запись экрана?
    Скриншот - это снимок экрана. Для чего он может понадобиться? Например, вам нужно объяснить, где находится та или иная кнопка на экране. Можно просто сделать скриншот этой кнопки, т.е. мгновенный снимок экрана.
    
    Разберемся, как сделать снимки и запись экрана. Но перед этим посмотрим на клавиатуру и найдем волшебную кнопку, чтобы быстро и легко делать скриншоты в ОС Виндоус. Эта кнопка PrintScr, при нажатии на которую и делается снимок экрана. Он будет закинут в буфер обмена, в память компьютера. А дальше можно вставить эту картинку через сочетание клавиш Ctrl + V в любой документ, например, в Пэйнт.
    
    Снимок экрана можно сделать и путем нажатия клавиш Вин + ПринтСкр. Система сохранит рисунок в формате .пнг самостоятельно, а найти его можно в папке “Изображения” (Мой компьютер / Изображения / Снимки экрана).
    
    Сочетание клавиш Alt + PrintScr, сделает скриншот не всего экрана, а только активного окна. Дальше снимок закидывается в буфер обмена, и его можно вставить в любой документ.
    
    Также есть специальная программа-утилита, которая позволяет делать набросок на фрагменте экрана. Для запуска нужно нажать три клавиши: Win + Shift + S.
    
    Посмотрим, как работают скриншоты в действии. Запустим какие-нибудь окна - пусть это будут браузер и проводник.
    
    Попробуем сделать скриншот нажатием на PrintScr,
    Сфотографировалось все содержимое экрана. Что делать дальше с этим скриншотом? Как я уже говорила, система закидывает его в буфер обмена, и дальше его можно вставить в любую программу.
    
    Следующий способ, который был озвучен - это сочетание клавиш Вин + PrintScr. Система делаем снимок всего экрана, в который попадают все окна, рабочий стол, и сохраняет его в папку “Изображения” (Снимки экрана).
    
- ********************************************Универсальные средства********************************************
    
    Ну, и куда без универсальных средств, которые будут работать на всех ОС!
    Что у нас есть в арсенале?
    Есть программы, которые позволяют делать скриншоты экранов, есть дополнения к браузеру, расширяющие его возможности, также есть онлайн-сервис для записи видео.
    
    Итак, программы.
    Lightshot - ее можно скачать как для Виндоус, так и для МакОС, поставить на компьютер как отдельную программу и делать с ее помощью скриншоты. Есть аналог Клип2Нет - это тоже программа, которую необходимо ставить на компьютер.
    
    А есть другое семейство - дополнения к браузеру, тот же Лайтшот. Установить его можно через главное меню (вкладка с дополнениями). В браузере появится фирменный ярлык дополнения Лайтшот, при нажатии на который можно выбрать область для сохранения и зафиксировать ее мышкой. При необходимости обязательно снимем отдельный видеокурс по установке дополнений.
    
- **************************************************Как сделать видео экрана?**************************************************
    
    Для записи видео в любой ОС можно использовать универсальный онлайн-сервис Screen Capture. Единственное ограничение в бесплатной версии - водяной знак, который невозможно убрать.
    Если запись не профессиональная, то такой вариант вполне подойдет. Нажимаем на запись экрана. Сервис запрашивает, какой экран записывать. Записываем вкладку браузера. Запись экрана пошла. После окончания записи нажимаем на клавишу “Стоп”. Видео можно сохранить на компьютер.
    
- **********Итоги**********
    
    Подведем итоги.
    Мы разобрали, что такое окно, как оно выглядит, и какие у него есть элементы управления. 
    Также мы узнали, что можем делать с этими окнами: перемещать, увеличивать, уменьшать, упорядочивать и переключаться между ними. 
    И, что немаловажно, разобрались, как сделать скриншот и запись экрана.
    Надеюсь, этот урок был для вас понятным и полезным. А я прощаюсь с вами. До новых встреч!
    

### Урок 3. Базовая безопасность при работе с компьютером

- **************************************Вступление и План урока**************************************
    
    Сегодня мы погрузимся в важную тему - базовую безопасность при работе с компьютером
    
    На занятии поговорим про:
    
    - ****************************************************************************************************************************пароли - какими они должны быть, как их хранить и использовать****************************************************************************************************************************
    - **************************************вирусы и антивирусы**************************************
    - ******VPN - что это, и зачем нужно******
- ********************************Пароли для входа********************************
    - ******************О паролях******************
        
        Представьте ситуацию: аккаунт Ольги в ОК взломали, весь урожай из Фермы собрали и вывезли, а друзьям поставили единицы. Теперь на встрече одноклассников Ольге не рады. История смешная, но показательная: мошенничество преследует нас не только в обычной офлайн-жизни, но и онлайн. Нужно быть внимательными, чтобы не потерять личные данные, деньги, репутацию и даже технику.
        
        Разговор о базовой безопасности начнем с паролей. 
        Они должны быть сложными: из букв (заглавных и строчных), цифр и спецсимволов (#, $, & и тд). 
        ************Длина************ еще важнее сложности: пароль из 7 символов компьютер подберет за несколько часов, а пароль из 10 символов - за несколько лет. Поэтому минимальная длина пароля - 8 символов, но чем больше, тем лучше.
        
        Не используйте в качестве пароля личные данные (например, дату рождения, номер СНИЛС или фамилию). Такие пароли легко запомнить, но они уязвимы, их можно быстро раскрыть с помощью некоторых баз.
        
        Для каждого сайта создавайте отдельный пароль. Иногда базы с личными данными на разных сервисах попадают в открытый доступ - среди них могут быть и пароли. Если ваш общий пароль для разных сайтов станет известен, вы можете потерять доступ ко всем из них.
        
    - ************************************************************Как придумать надежный пароль?************************************************************
        
        Есть лайфхак - можно взять стихотворение, которое вы помните наизусть, или запомнившуюся фразу и зашифровать их: заменить буквы на понятные символы.
        
        > ******************************************************Я помню чудное мгновенье - I_p0Mny|_4ydn0e_Mg№0veniE******************************************************
        > 
        
        Фраза остается читаемой, и запомнить такой пароль легко
        
        Другой способ придумывать надежные пароли - сервис для их генерации. Таких программ в интернете много, вы можете выбрать ту, которая вас устраивает. Все достаточно просто и не приходится ломать голову над тем, как сделать пароль сложным.
        
    - ******************************************Как запомнить пароль?******************************************
        
        Мы уже обговорили, что пароли должны быть разными для разных сайтов. 
        Как же запомнить, где какой используется?
        Можно создать сложный пароль и добавить к нему зашифрованное название ресурса. Шифр с названием сервиса можно добавить к паролю через спецсимвол, точку, тире - как удобнее.
        
        Чтобы не запутаться в паролях, нужно определиться с порядком цифр и букв, с их размером (когда заглавные, а когда сточные). Т.е. нужно придумать систему шифрования и никому о ней не рассказывать.
        
    - **************************************Где хранить пароли?**************************************
        
        Если паролей много, и они сложные, хранить их в голове не получится - можно забыть. Есть два других варианта:
        
        1. ********************************************Записать в блокноте -******************************************** не самый безопасный вариант, если блокнот хранится на видном месте. Придется убрать его в закрытый ящик или сейф, чтобы защитить от посторонних.
        2. **************************************Менеджер паролей -************************************** это программа для хранения паролей. Доступ к ним можно получить только введя мастер-пароль - пароль от всех паролей.
        
        Менеджеров паролей много. Один из самый популярных - [Kaspersky Password Manager](https://www.kaspersky.ru/password-manager). Но есть и другие программы. Выберите удобный для вас инструмент, но лучше избегайте зарубежных сервисов и менеджеров паролей в браузерах.
        
        Еще одна рекомендация - уберите автозаполнение форм (когда браузер запоминает информацию и подставляет ее), чтобы ваши данные не хранились в браузере.
        
        **************Выводы:**************
        
        - Не храните информацию о паролях и логинах на зарубежных сайтах
        - Не храните пароли на бумаге. Или убирайте блокнот с паролями в надежное место.
        - Отключите автозаполнение форм.
        - Проверьте параметры восстановления пароля. Например, если вашу почту взломают, у вас должна быть возможность восстановить пароль с помощью мобильного или резервной почты. Иначе доступ можно потерять безвозвратно.
        - Используйте двухфакторную авторизацию, т.е. двойную систему защиты: сперва вводите пароль, затем код подтверждения, который приходит на телефон, указанный при регистрации. С двухфакторной авторизацией взломать аккаунт гораздо сложнее.
        - Регулярно менять пароли. В мире все ненадежно: базы вскрываются, серверы сливают информацию, происходят утечки данных. Следите за информацией в СМИ, чтобы вовремя узнать об утечке данных, и раз в 3 месяца меняйте пароли. Чтобы не запутаться, в пароле можно зашифровать дату смены по принципу названий сайтов.
- **************************************Вирусы и антивирусы**************************************
    - ******************О вирусах******************
        
        Вирусы не попадают на смартфоны или компьютеры воздушно-капельным путем. Любой вирус запускает сам пользователь. Например, когда загружает бесплатную программу вместе с вирусом, использует зараженную флешку или переходит по ссылке из письма со спамом.
        Виндоус особенно подвержен атакам, поэтому будьте внимательны. Чтобы обезопасить свой компьютер, не открывайте письма от неизвестных отправителей, не скачивайте из них файлы и не переходите по ссылкам.
        
        Иногда мошенники маскируются под известные сайты. Письмо выглядит также, как и другие, которые присылала компания. Но ссылка ведет не на страницу оплаты домена, а на пополнение электронного кошелька мошенников.
        
        Перепроверяйте информацию, прежде чем совершить какое-либо действие.
        
    - ********************************************************Меры предосторожности в сети********************************************************
        
        Залог безопасного исследования сети - сочетание здравого смысла и программы-антивируса.
        
        Не передавайте свои персональные данные незнакомым. Иногда мошенники запрашивают сканы документов, а потом продают их или используют против пользователей. Проверяйте, от кого приходит просьба предоставить персональную информацию. Если есть возможность, позвоните или напишите официальной службе поддержки сервиса или сайта.
        
        Внимательно относитесь к ссылкам и игнорируйте спам. Если вам пришло письмо об умершем в Африке дядюшке, который оставил вам наследство, это мошенническая схема. Будьте внимательны.
        
    - ******************************Как определить, что компьютер заражен?******************************
        
        Есть явные и неявные признаки. 
        Пример явного - на экране появляется баннер, который не дает ничего сделать. На нем написано, куда отправить деньги, чтобы разблокировать систему. Иногда в таких случаях спасает только полное форматирование диска.
        
        Но вирусы не всегда явно видны. Компьютер может начать подвисать, могут появиться проблемы с доступом к папкам, клавиши могут менять свои роли, а сайты - не открываться (в первую очередь вирусы блокируют сайты компаний, которые продают антивирусное ПО).
        
        Все это - звоночки, что с вашим компьютером что-то не то.
        
    - ********************************************Антивирусные программы********************************************
        
        ************************Антивирус -************************ программа для борьбы с вредоносным ПО: уничтожает вирусы и помогает восстановить поврежденные файлы. Известные антивирусы - Касперский, ЕЗЕТ, Доктор Веб
        
        На что обратить внимание при выборе антивируса?
        
        - ************************************************************************************Регулярное обновление антивирусной базы -************************************************************************************ время от времени появляются новые вирусы, ваш компьютер должен быть от них защищен.
        - ************************************************Восстановление файлов -************************************************ пригодится, если важные документы повреждены вредоносным ПО.
        
        Обычно у антивируса есть бесплатная версия, если ее функционала хватает, платную можно не покупать.
        
        Для примера рассмотрим функционал антивируса Доктор Веб:
        
        - ******************************************************Обновление вирусной базы -****************************************************** если она актуальна, программа подскажет, что обновление не требуется.
        - ************Режимы проверки:************ быстрая и полная.
        - ********************************Фоновый режим -******************************** антивирус отслеживает любые действия на устройстве. Если вы сохраняете файл, программа сканирует его на лету: если есть вирус, вы получите уведомление.
- ******VPN******
    - ******VPN******
        
        (Virtual Private Network) - виртуальная частная сеть. 
        Задача технологии - защитить персональные данные (сайты не могут их собирать) и обходить блокировки. Например, в Китае запрещены сервисы Гугл: просто так не получится открыть ни Ютуб, ни Гугл-документы, а с VPN - получится.
        
        Еще одно преимущество технологии - защита от доступа третьих лиц в общественных сетях. Например, подключаясь к бесплатному вай-фай в метро или кафе, мы становимся более уязвимы: через такое соединение хакер может получить доступ к перепискам, данным карт или другой информации. VPN шифрует данные и значительно усложняет задачу.
        
        **Как же работает VPN?**
        
        - Когда мы выходим в сеть без VPN, компьютер обращается к интернет-провайдеру, и через него мы получаем доступ в интернет. Сайты, на которые мы переходим, получают данные о местонахождении и других характеристиках: например, поле и возрасте. Они могут использовать их для навязчивой рекламы.
        - VPN-клиенты шифруют данные. Можно стать другой личностью в сети, чтобы узнать о настоящих характеристиках было невозможно.
    - **Какой VPN выбрать?**
        
        VPN можно установит на телефон, компьютер или как расширение для браузера. Чтобы выбрать подходящий, обратите внимание на параметры:
        
        - **************Удобство использования,************** чтобы не пришлось разбираться в функциях и настройках. Принцип хорошего VPN - включил и работает.
        - **********************************Скорость работы.********************************** Некоторые VPN замедляют скорость интернета, из-за этого страницы открываются подолгу.
        - ****************************Безопасность.**************************** VPN-сервисы ********************************даже бесплатные, ее гарантируют - личные данные не будут передаваться сайтам.
        - **********************Стоимость.********************** Есть бесплатные сервисы, а есть платные с дополнительными бонусами. Цены начинаются от 5 долл
        - **********************************Универсальность.********************************** Если вы часто путешествуете, важно, чтобы VPN работал во всех странах без потерь качества.
        - **********************************************Есть служба поддержки.********************************************** Если вы платите за сервис, а он сбоит, здорово иметь возможность быстро получить ответ и решение от поддержки.
        
        Важный вопрос - законно ли использовать VPN?
        Да, законодательство этого не запрещает. 
        
        У платных и бесплатных VPN есть свои плюсы и минусы:
        
        - ******************У платных****************** высокая скорость, нет навязчивой рекламы, усиленная защита персональных данных, помощь техподдержки.
        Недостаток - придется платить.
        - **************************У бесплатных************************** есть лимиты по скорости, из-за которых VPN придется включать и отключать, когда он не нужен. Есть реклама.
        
        Но бесплатные сервисы не так уж плохи. Один из них - [Kaspersky Secure Connection.](https://www.kaspersky.ru/secure-connection)
        Его можно установить на разные ОС, как на смартфон, так и на компьютер. А можно зайти на официальный сайт и купить версию для 5 устройств за 1,790 рублей в год.
        
        Для компьютеров на Виндоус ищите и скачивайте VPN только на официальных сайтах. Для айфонов и МакОС - в Аппстор, для Андроидов - в Плэй Маркет. Набирайте в поиске VPN, смотрите на оценки, читайте отзывы и нажимайте Загрузить, когда нашли подходящий сервис.
        
- **********Итоги**********
    
    Сегодня мы коснулись трех важных тем:
    
    - Пароли - как их придумывать и хранить
    - Вирусы и как от них защищаться
    - VPN - что это, и зачем пригодится в жизни.
    
    Надеюсь, этот урок был для вас полезным. До новых встреч в эфире!
    

### **************Урок 4. Интернет и регистрация**************

- **************************На этом уроке**************************
    
    Сегодня на уроке мы:
    
    - Узнаем, что такое интернет
    - Поймем, как искать в нем информацию
    - Научимся регистрироваться и авторизовываться на сайтах
- **************************************Что такое интернет?**************************************
    
    Сперва интернет был военной технологией, потом инструментом для университетов. Сейчас он так глубоко проник в нашу жизнь, что представить ее без интернета уже нельзя.
    
    **********************Интернет -********************** это глобальная компьютерная сеть, объединяющая множество компьютеров, на которых хранится информация. 
    
    ****************************************Компьютерная сеть -**************************************** два или несколько компьютеров, объединенных для обмена информацией.
    Компьютерные сети могут быть локальными: например, соединенные компьютеры в офисе. Две локальные сети на расстоянии - это уже глобальная сеть.
    Получается: ********************************************************************************Интернет - глобальная компьютерная сеть.********************************************************************************
    
- ****************************************************************Что мы можем делать в интернете?****************************************************************
    
    Самая частая задача в интернете - поиск информации.
    Сегодня, когда у нас появляется вопрос, первым делом мы достаем телефон и заходим в поисковую систему. Кроме того, в интернете можно работать: ИТ-специалист, живущий в Таиланде, может выполнять задачи для заказчика из любой точки мира. 
    Другие варианты - поиск людей, общение в мессенджерах, покупки, обучение и развлечения: онлайн-кинотеатры и другие ресурсы, которые занимают наше свободное время.
    
- **********************************Поисковые системы**********************************
    - ****************************************О поисковых системах****************************************
        
        Давайте разбираться, как искать информацию в интернете. 
        Точка входа в интернет - **********браузер,********** инструмент для поиска информации - **************************поисковая система.**************************
        
        Поисковая система - веб-узел или сайт, который выдает информацию в ответ на запрос. Например, Яндекс и Гугл.
        
        Как же работают поисковые системы?
        У них есть роботы-пауки (web-crawler), которые ходят по сайтам, анализируют информацию, собирают ее в базу данных и хранят.
        В ответ на запрос они находят в базе те сайты, которые подходят, и выдают их пользователю. Все просто и сложно одновременно.
        
        Главный элемент поисковых систем - ****************************строка поиска.****************************
        Сюда вводятся запросы. Чтобы они были эффективными, их лучше упрощать и формулировать правильно. В ответ на запрос поисковая система предложит выдачу из нескольких страниц. Выберите среди них сайт, который подходит лучше всего.
        
        Можно искать не только текст, но и картинки, видео или другие категории информации. У поисковых систем есть специальные разделы, посвященные разным направлениям.
        Например, у Яндекса есть сервис Яндекс.Маркет для поиска товаров и онлайн-покупок и Яндекс.Карты для поиска адресов.
        
        Если вы не нашли информацию, например, в Яндексе, можно поискать ее в Гугл.
        
    - **********************************************************Поиск разного типа информации**********************************************************
        
        Теперь рассмотрим, как искать другие типы информации на примере Яндекса и Гугл. Разделы расположены под поисковой строкой: Видео, картинки, новости, карты, еще
        
        Если переключимся на вкладку “Видео”, перейдем на страницу с видеозаписями по запросу.
        Так мы фильтруем информацию - даем поисковой системе понять, что хотим посмотреть именно видеорецепты. Так же можем найти картинки, новости или отфильтровать информацию с помощью других вкладок.
        
- **********************Регистрация**********************
    
    Регистрация позволяет получить расширенный доступ к функциям сайта. Нужна один раз: ввели свои данные, подтвердили регистрацию, получили личный кабинет - готово.
    В личном кабинете можно смотреть историю заказов, получать бонусы и персональные предложения. Т.е. зарегистрированным пользователям даются дополнительные возможности.
    
    Для регистрации используются разные данные: логин, телефон или почта, а также пароль.
    
    Некоторые сайты дают за регистрацию бонус, потому что этот этап требует небольших усилий и времени. На некоторых сайтах регистрация не нужна.
    
- **********************Авторизация**********************
    
    После регистрации на сайте нужно будет авторизоваться - войти по указанным логину и паролю:
    
    - ****************Логин -**************** уникальное имя. Должно отличаться от других имен на сайте, чтобы система вас узнавала.
    - ******************Пароль -****************** секретный набор символов. Его нужно аккуратно хранить и не передавать другим людям, иначе злоумышленники могут получить доступ к вашему личному кабинету. Придумывайте сложные пароли и храните в надежном месте.
- ****************Практика****************
    
    Посмотрим на практике, как выглядит процесс регистрации и авторизации. Для примера возьмем интернет-магазин обуви [Zenden.](https://zenden.ru/)
    
    Регистрация - процесс трудозатратный, поэтому хорошие магазины стараются ее облегчить: помогают сориентироваться с помощью понятных иконок и подсказок. Кнопка регистрации и входа на сайт часто изображается в виде человечка.
    При нажатии на ее мы можем войти (если уже зарегистрировались), зарегистрироваться или получить доступ к программе лояльности. Сперва зарегистрируемся. 
    
    Для регистрации понадобится номер телефона. Когда мы его введем, появится кнопка “Получить код”. Это нужно, чтобы система убедилась, что телефон наш и у нас есть к нему доступ. После нажатия кнопки на телефон придет СМС с кодом - уникальным паролем для входа на сайт. На этом регистрация на сайте закончена - все легко и просто.
    
- **********Итоги**********
    
    На уроке мы узнали, что такое интернет, научились искать информацию, регистрироваться и авторизоваться на сайтах. А также закрепили знания на практике.
    

### **************Урок 5. Основные производители цифровой техники и их особенности**************

- ********************План урока********************
    
    Сегодня на уроке мы:
    
    - Поговорим об основных производителях компьютеров и ноутбуков
    - Узнаем о плюсах и минусах основных производителей смартфонов
    - Разберем отличия между ОС iOS и Android
    
    Давайте начинать!
    
- **************************************************************************Производители компьютеров и ноутбуков**************************************************************************
    
    Представьте: вам нужно подобрать компьютер. Вы заходите в магазин и видите огромный выбор - тут недолго растеряться. Сейчас на рынке множество производителей и множество форматов компьютеров: стационарные, ноутбуки, мини-версии. 
    Что же выбрать?
    
    Прежде всего нужно ответить себе на несколько вопросов:
    
    1. Для чего нужен компьютер? Для офисных задач или игр?
    2. Он может быть стационарным или вы хотите брать его с собой?
    3. Какой бюджет заложен на покупку?
    
    Исходя из этих вводных можем принимать решение о выборе производителя и компьютера. 
    На вопрос “Какой производитель лучше?” однозначного ответа нет - здесь все субъективно. Мне, например, нравится Эппл. Для меня это лучший производитель, но для других - нет.
    
    Производители как звезды в космосе: появляются и исчезают. Поэтому, чтобы быть в курсе, нужно следить за ежегодными рейтингами, читать и смотреть обзоры - они помогут принять взвешенное решение.
    
    Теперь пройдем по основным производителям на рынке.
    
    - ********Acer********
        
        Крупная компания из Тайваня. Предлагает большой выбор компьютеров под разные задачи. Чтобы было проще ориентироваться, у них есть линейки. Например:
        
        - ************Nitro************ - линейка для геймеров, которым важна мощность компьютера
        - ******************ConceptD******************  - для создателей контента.
        
        Главная особенность производителя - широкий выбор в области профессиональных и игровых компьютеров.
        Операционные системы, которые можно установить на компьютеры производителя - Виндоус или Линукс. Здесь на ваше усмотрение.
        
    - **********Apple**********
        
        Американская компания. Производит не только компьютеры, но и цифровую технику, в т.ч. мобильные телефоны.
        
        Линейки достаточно ограничены. Есть:
        
        - **********************Mac mini********************** - компактный системный блок.
        - ************iMac************ - моноблок, т.е. системный блок и монитор, объединенные в одном устройстве.
        - **************MacBook************** - ноутбуки.
        
        Эппл не затачивает свои компьютеры под игры. МакОС с одной стороны стороны дает безопасность, а с другой несколько ограничивает. Чтобы обойти ограничения, в качестве второй ОС можно поставить Виндоус, но полноценно играть на таком устройстве все же не получится. Это компьютеры для дизайнеров, для профессиональных задач.
        ОС - МакОС
        
    - **********Assus**********
        
        Корпорация, производящая компьютерную технику: материнские платы, мониторы, ноутбуки и т.д. - спектр очень большой.
        
        У Асус тоже есть линейки. Например:
        
        - ******ROG****** - максимальная производительность, то, что нужно для компьютерных игр.
        - ****ROG Strix**** - компактные мощные игровые системы.
        
        Асус производят комплектующие, поэтому у них нет проблем с совместимостью элементов. Компания держит высокий уровень сборки, а ее материнские платы для своих компьютеров используют многие мировые бренды.
        
        ОС - Виндоус и Линукс.
        
    - **Intel**
        
        Американская компания, крупнейший в мире производитель компонентов для компьютеров. Микропроцессоры Интел используют для своих ПК многие известные производители.
        
        Специфика бренда - мини-станции, которые подходят для фото- и видеоконтента, видеомонтажа и просмотра фильмов в формате 4К. Их нельзя назвать геймерскими, но для сложных задач они вполне подходят.
        
        ОС - Виндоус и Линукс.
        
    - **Lenovo**
        
        Компьютерный гигант, который занимает практически 20% рынка. Производит стационарные ПК, ноутбуки, моноблоки, рабочие станции.
        
        Ассортимент разделен на линейки. Например:
        
        - ************Legion************ - для игр
        - **********IdeaCentre********** - для творчества
        
        Как отмечают эксперты, особенности Леново - отличное качество сборки, тщательный отбор комплектующих и оперативная поддержка пользователей.
        
        ОС - Виндоус и Линукс
        
    - **Dell**
        
        Один из крупнейших и старейших производителей родом из США. Выпускает ПК, ноутбуки, рабочие станции и серверы. В модельном ряду есть множество решений для дома и офиса. 
        
        Линейки:
        
        - **G** - высокая производительность для новичков и игроков с ограниченным бюджетом.
        - ********************Allienware******************** - более дорогая линейка со стильным дизайном и логотипом в виде головы инопланетянина.
        
        Особенности - дизайн и легкость ноутбуков.
        
        ОС - Виндоус и Линукс.
        
    - **Hewlett-Packard (HP)**
        
        Вы наверняка встречали оргтехнику под этим брендом: принтеры, сканеры, мониторы. Также производитель создает и компьютерную технику.
        
        Линейки:
        
        - **************HP Omen************** - ноутбуки и настольные персональные компьютеры.
        - ****************************Pavilion, Omen**************************** - линейка с высокой мощностью, подходит для геймеров.
        
        Производитель выпускает компьютеры не только для игр, но и для более сложных задач: проектирования и трехмерного моделирования. И, конечно, для дома и офиса.
        
        Особенности - внимание к дизайну.
        
        ОС - Виндоус и Линукс.
        
    - **MSI**
        
        Производитель из Тайваня с широким ассортиментом ноутбуков, моноблоков, станций и даже игровых башен.
        
        Особенности - производит комплектующие для своих ПК, гарантирует хорошее качество сборки, совместимость деталей и высокую производительность. Еще одна фишка - высокая стоимость, но за качество нужно платить.
        
        ОС - Виндоус и Линукс.
        
    - **Gigabyte**
        
        Компания известна своими материнскими платами и видеокартами, но производит не только комплектующие, но и ПК.
        
        Специализация - мини-ПК, т.е. маленькие системные блоки с интересным дизайном и настраиваемой подсветкой. Производитель делает акцент на дизайне и размере своих устройств.
        
        ОС - Виндоус и Линукс.
        
    - **IRU**
        
        Российский производитель, существует с 2002 года. Специализируется как на технике для дома, так и для крупных корпораций.
        
        Линейки:
        
        - ********Home******** - компьютеры для повседневных задач
        - ********Game******** - игровые компьютеры более высокой мощности
        
        Компания входит в топ-5 производителей компьютеров в РФ
        
        ОС - Виндоус и Линукс.
        
    - **Softline**
        
        Еще один российский бренд. Ведет свою историю с 1993 года и до сих пор успешно работает. В линейке есть компьютеры для дома, офиса, игр.
        
        Фишка Софтлайн в том, что они являются глобальными партнерами компании Майкрософт, поэтому их компьютеры уже поставляются с предустановленной ОС Виндоус.
        
        ОС - Виндоус и Линукс.
        
    - **HYPERPC**
        
        Российская компания, основанная в 2009 году. Предлагает модели в обычном корпусе и с оригинальным дизайном.
        
        - ********Volt******** - необычная игровая серия, запоминающаяся дизайном корпусов. У нее есть отличие, которого не найти среди других пользователей - с помощью конфигуратора на сайте можно выбрать дизайн, подсветку, наклейки и тд. Т.е. сделать свой компьютер не только мощным, но и красивым.
        
        ОС - Виндоус и Линукс.
        
        Компьютеры дорогие, но это удовольствие для истинных фанатов.
        
    - **OLDI Computers**
        
        Российский бренд, существует на рынке более 25 лет и выпускает широкую линейку компьютерной техники, четко разделенную по функциям:
        
        - ************Office************ - недорогие, но качественные компьютеры для простых повседневных задач
        - ********Home******** - для дома
        - ********Game******** - линейка для игр.
        
        Преимущества: сочетание цены и качества, сбалансированная система. Уделяют внимание дизайну корпусов, среди них можно встретить интересные экземпляры.
        
        ОС - Виндоус и Линукс.
        
    - **Razer**
        
        Вернемся к зарубежным компаниям. О Рэйзор вы могли слышать как о производителе всевозможной периферии: мышек, клавиатур и тд. Некоторое время назад компания стала специализироваться на производстве ноутбуков.
        
        Есть игровая линейка и линейка для повседневных задач.
        
        ОС - Виндоус и Линукс.
        
    - **Microsoft**
        
        Знаменитая компания, которая выпускает ноутбуки, ультрабуки и трансформеры под брендом Surface. Фишка девайсов в том, что в них сделан упор на передовые технологии, качество и дизайн.
        
        Бренд премиальный, но позволяет работать с последними достижениями в области компьютерных технологий. Например, с ноутбуками с сенсорным экраном или ноутбуками, которые легко превращаются в планшеты. Техника хорошо подходит для тех, кто делает упор на дизайн и графику.
        
        Главная фишка производителя ноутбуки-трансформеры с сенсорным экраном.
        
        ОС - Виндоус и Линукс.
        
    - **Huawei**
        
        Производитель ворвался на рынок компьютерной техники относительно недавно - раньше он специализировался на смартфонах.
        
        Линейки четко определяют функции устройств:
        
        - ********************MateBook D******************** - линейка с большим выбором на любой вкус и кошелек
        - ********************************MateBook X / Pro******************************** - премиальная линейка с упором на дизайн, компактность, легкость.
        
        Фишка Хуавей - я думаю, некоторое подражание Эппл. Есть общая экосистема с телефоном той же компании и устройства с сенсорным экраном, как у Майкрософт. Компьютеры предназначены для игр, но достаточно легких. Для более ресурсозатратных лучше обратить внимание на других производителей.
        
        ОС - Виндоус и Линукс.
        
    - **Honor**
        
        Еще один производитель, который долгое время делал упор на телефоны и планшеты, но решил расширить ассортимент и начал выпускать ноутбуки.
        
        Линейки:
        
        - ******************MagicBook****************** - для работы с изображениями и легких игр
        - **************************MagicBook Pro************************** - для более сложных задач, например, для 3Д-рендеринга
        
        Так как производитель занимался телефонами, среди его устройств можно организовать общую среду для обмена данными. Еще одна фишка - сенсорные экраны. Компьютеры не предназначены для тяжелого гейминга, но для легких игр подойдут.
        
        ОС - Виндоус и Линукс.
        
    - **********Итоги**********
        
        Стационарные компьютеры и ноутбуки - совершенно разные устройства с принципиальными отличиями в размере и мобильности, производительности и энергопотреблении.
        
        Стационарные компьютеры более удобны в плане модернизации. Например, если вы хотите увеличить память или поменять жесткий диск, это значительно проще, чем в ноутбуках. Другой важный аспект - возможность подключения периферийных устройств, устройств ввода-вывода.
        
        Преимущество ноутбуков - бесперебойность. Если у вас, допустим, отключили свет, ноутбук позволит какое-то время оставаться на связи и сохранить данные.
        
        Поэтому, как я и говорила в начале, перед выбором производителя нужно определиться с тем, какой компьютер нужен. Чтобы принять взвешенное решение, почитайте рейтинги, реальные отзывы, поговорите с консультантами. Где-то на стыке информации вы увидите ПК, который подойдет для решения ваших задач.
        
- ********************************Производители смартфонов********************************
    
    Про компьютеры мы поговорили, теперь поговорим про телефоны. Чтобы было проще систематизировать производителей, я разделила их по категориям. Начнем с крупнейших.
    
    - **Apple**
        
        Я считаю, что Эппл производит самые качественные смартфоны в мире - iPhone. Проверила это на собственной практике: они действительно долговечны, если не смотреть на то, что технологии со временем устаревают.
        
        В плане безотказности iPhone - телефон №1. 
        Это единственное устройство, которое работает на операционной системе компании-производителя iOS. Все приложения будут только официальными, потому что у Эппл есть пунктик в плане безопасности. Кроме того, Эппл всегда задавал планку для остальных производителей в плане дизайна.
        
        ************Плюсы:************
        
        - качество сборки
        - передовые разработки
        - хорошие камеры
        - мощные процессоры
        - большой объем памяти
        
        **************Минусы:**************
        
        - высокая стоимость
        - малое кол-во моделей в линейках
        - не всегда смартфоны совместимы с аксессуарами других производителей
        
        Операционная система - iOS
        
    - **Samsung**
        
        Еще один производитель-гигант. Компания лидирует в области производства смартфонов нового поколения. Отличается множеством моделей и линеек. Самая популярная, наверное Galaxy S, которая по праву считается лучшей в мире.
        
        Самсунг держит руку на пульсе и оснащает смартфоны передовыми технологиями, обновляя и обновляя модели.
        
        ************Плюсы:************
        
        - большой выбор моделей: от простых до премиальных
        - хорошее качество сборки
        - качественные экраны
        - мощные процессоры
        - отличные камеры
        - интересное и обновляемое ПО
        - дизайн
        
        **************Минусы:**************
        
        - высокая цена даже на простые линейки
        - смартфоны мощные, но заряда батареи надолго не хватает
        
        Операционная система - Android
        
    - **Huawei**
        
        Новичок в мире смартфонов, умудрившийся взорвать рынок. Предлагают интересные модели уровня А-брендов, но по цене почти в 2 раза ниже. Устройства обычно оснащены хорошими камерами, экранами и процессорами, достаточно мощными для игр.
        
        ************Плюсы:************
        
        - производит собственные процессоры для телефонов, что и помогает держать низкие цены
        - большой ассортимент
        - стильный дизайн
        - своевременное обновление системы
        
        **************Минусы:**************
        
        - телефон служит 2-3 года
        - из-за того, что новые модели выходят быстро, старые не успевают обновлять
        
        Операционная система - Android
        
    - **Asus**
        
        Открывает следующую категорию смартфонов - камерофоны
        
        Специализация компании - компьютеры, но все же они расширили ассортимент смартфонами. Стремятся сделать из телефона качественный компьютер.
        
        ************Плюсы:************
        
        - упор на производительность и дизайн
        - начинка смартфонов с геймерским уклоном
        - первоклассные камеры
        - встроенная система охлаждения (важно, когда играешь в игры)
        - умные датчики и сканеры
        
        **************Минусы:**************
        
        - ограниченная линейка
        - высокие цены за счет технологического оснащения смартфонов
        
        Операционная система - Android
        
    - **One Plus**
        
        Дочерняя компания ВВК, созданная для производства смартфонов. Тоже делает упор на камеры - смартфоны могут снимать в формате 4К, есть множество датчиков, помогающих во время съемки. Еще одно отличие - ************************************************ультрасовременный дизайн************************************************
        
        ************Плюсы:************
        
        - камеры
        - мощная батарея
        - крупные экраны
        - крутые стереодинамики
        - объем памяти для быстрой работы
        
        **************Минусы:**************
        
        - небольшой выбор (он же плюс - выбрать проще)
        - сервисные центры в Китае (но ситуация может измениться)
        
        Операционная система - Android
        
    - **Sony**
        
        Как производитель фотоаппаратов, Сони всегда специализировалась на фото- и видеотехнике. Не удивительно, что смартфоны Сони отличаются первоклассными камерами и позволяют снимать практически профессиональное видео. Они оснащены тройными модулями с минимальной диафрагмой и дают возможность снимать в темное время суток.
        
        ************Плюсы:************
        
        - камеры с высоким разрешением
        - хорошие стереодинамики
        - защита от падения и влаги
        - большой ассортимент
        
        **************Минусы:**************
        
        - слабые батареи - придется носить с собой ЗУ или внешний аккумулятор
        - несвоевременные обновления
        
        Операционная система - Android
        
    - **Xiomi**
        
        Бюджетные доступные смартфоны с высоким качеством фото- и видеосъемки. Есть флагманские модели, которые оценил рынок: Mi 8 Pro, серия Микс
        
        Производит гаджеты (часы, наушники и тд), с которыми можно соединять смартфон, создавая экосистему.
        
        ************Плюсы:************
        
        - регулярное обновление устаревших моделей
        - большой ассортимент
        - продвинутые датчики для качественных фото и видео
        - яркие и четкие дисплеи
        - дизайн
        - доступные цены
        
        **************Минусы:**************
        
        - иногда страдает качество сборки
        - слабая батарея
        
        Операционная система - Android
        
        Мы отмечали, что мощность у телефонов большая, а батарейка слабая. Теперь рассмотрим производителей, которые делают упор именно на батарею - ее емкость и длительность работы. Если для вас это важно, обратите внимание на этих производителей.
        
    - **Vivo**
        
        Производитель делает упор не только на батарею, но и на стильный дизайн, а также хорошие экраны. Они первые ввели сканер отпечатка пальца.
        
        ************Плюсы:************
        
        - качество сборки всегда на высоте
        - мощная батарея - телефон долго держит заряд
        - компания не стоит на месте - исследования и разработки помогают совершенствовать устройства
        - низкая стоимость
        
        **************Минусы:**************
        
        - из-за упора на емкость батареи другие стороны могут страдать - например, процессоры недостаточно мощные
        - динами снизу - это не всегда удобно
        
        Операционная система - Android
        
    - **Meizu**
        
        Еще один китайский производитель. Предлагает широкий ассортимент качественных телефонов за небольшие деньги. 60 моделей смартфонов плюс гаджеты образуют общую среду.
        
        ************Плюсы:************
        
        - неплохие камеры
        - неплохой функционал
        - качество сборки
        - большой выбор при доступных ценах
        
        **************Минусы:**************
        
        - уступают в дизайне другим производителям
        
        Операционная система - Android
        
    - **ZTE**
        
        Главное отличие - собственные исследовательские центры, где разрабатывают новые технические фишки и внедряют их в свои устройства. Хорошее сочетание цены и качества.
        
        ************Плюсы:************
        
        - емкость батареи
        - улучшенный беспроводной доступ к сети
        - множество функций
        - хороший экран
        
        **************Минусы:**************
        
        - иногда хромает качество сборки
        - слабые процессоры
        - средняя производительность
        - мало встроенной памяти
        
        Операционная система - Android
        
        Итак, мы разобрали флагманов рынка, производителей с классными камерами и с мощными батареями. Последняя подборка - производители защищенных смартфонов. С ними можно делать что угодно: ронять в воду или на землю - ничего не случится.
        
    - **Blackview**
        
        Специализируется на производстве защищенных смартфонов. В линейке есть множество вариантов дизайна: от брутальных с шестиугольной окантовкой до достаточно простых. Главный минус - процессор. Чудес не бывает: если упор сделан на что-то одно, другие функции страдают.
        
        Смартфоны производителя сделаны из металла и пластика. Корпусы защищены по стандарту IP68
        
        ************Плюсы:************
        
        - надежная защита от внешних воздействий - телефоны можно давать маленьким детям и не бояться, что они их разобьют
        - широкий выбор моделей
        - запас оперативной памяти
        - емкость батареи
        - доступная цена
        
        **************Минусы:**************
        
        - проседает производительность из-за маломощных процессоро
        - есть ограничения по функциям: отпечатку пальца и тд
        
        Телефоны бренда подойдут людям с узконаправленным запросом.
        
        Операционная система - Android
        
    - **Ulefone**
        
        Еще один производитель неубиваемых телефонов. Это новичок в мире смартфонов, который уже успел покорить покупателей за счет мощной батареи и хороших экранов.
        
        ************Плюсы:************
        
        - акцент компании на дизайне - он стильный и современный
        - максимальная защита
        - полноценный функционал
        
        **************Минусы:**************
        
        - низкая производительность за счет слабых процессоров
        - качество камер
        
        Операционная система - Android
        
    - **Doogee**
        
        Молодая китайская компания, которая уже несколько лет занимает высокие позиции на рынке. Почему?
        Их смартфоны достаточно бюджетные, но при этом мощные, производительные, с хорошими экранами и необходимым набором функций.
        
        ************Плюсы:************
        
        - хорошая защита от ударов и воды
        - мощная батарея
        - современный дизайн
        - широкий спектр возможностей
        
        **************Минусы:**************
        
        - слабые процессоры
        - слабые камеры
        
        Операционная система - Android
        
- ********************************************************************************Android - iOS: чему отдать предпочтение?********************************************************************************
    
    Я несколько раз упоминала операционные системы Android и iOS, и вы, наверное, задались вопросами: “Что лучше? Что выбрать? Кому отдавать предпочтение?” Давайте разбираться.
    
    Война между поклонниками Android и iOS, как мне кажется, будет вечной. Каждая сторона старается доказать, что их ОС лучше.
    
    - **************************************Сперва об Apple iOS**************************************
        
        Ключевая особенность ОС в том, что ее код закрыт, потому что Эппл делает упор на безопасность и сохранение данных. Так что не получится что-то настроить, адаптировать или поменять в системе самостоятельно. Но это ограничение обеспечивает безопасность.
        
        АйОС разработана под телефоны Эппл. Она хорошо заточена под них, поэтому дает высокую производительность при минимальном количестве сбоев и багов.
        
        ********************Плюсы iOS:********************
        
        - риск вирусов минимален - это касается операционных систем на всех устройствах Эппл: компьютеров, ноутбуков, планшетов.
        - Работает стабильно
        
        ********************Минусы iOS:********************
        
        - невозможно работать с библиотекой файлов
        - сложно и дорого разрабатывать программы под эту платформу, поэтому выбор приложений меньше, чем на Андроид
        - урезанный функционал Блютуз - нельзя обмениваться файлами с телефонами других производителей из соображений безопасности.
        - нельзя сделать откат на прошлую версию ОС - если старый телефон обновился на новую версию, он может начать “задыхаться”
    - **************Android**************
        
        Основан на модифицированном ядре Линукс и открыт к изменениям. Компания Гугл выпускает всевозможные инструменты, чтобы разработчики могли выпускать софт и поощряет их в этом направлении. Нет проблем с тем, чтобы скачать приложение из Гугл Плэй Маркет или из сторонней платформы. Но в этом есть и подводные камни.
        
        **************************Плюсы Андроид:**************************
        
        - открытый код - можно свободно писать приложения
        - бюджетная система - на платформе работает множество недорогих производителей
        - открытая файловая система - можно работать с внутренними файлами, интерфейс настраивается
        
        ******************************Минусы Андроид:******************************
        
        - открытый код - из-за внесенных изменений даже новые версии могут работать нестабильно
        - уязвимая система - есть случаи кражи персональных данных, нужен антивирус
        - при покупке смартфона нужно выяснить, какая версия ОС доступна, можно ли обновиться до последней
        - предустановленные программы иногда сложно удалить.
    
    Сравнивать эти ОС объективно сложно. Минус айОС в том, что она заточена только под смартфоны Эппл - выбор смартфонов, доступных на этой ОС ограничен.
    Андроид более массовый, он стоит практически на всех телефонах в мире, так что выбор моделей гораздо шире. Выбирайте, тестируйте и принимайте решения, что больше подходит вам.
    
- ********************Заключение********************
    
    У любого производителя есть свои сильные и слабые места: высокая или низкая производительность, современный или устаревший дизайн и так далее. Самое классное - мы можем сделать взвешенный выбор на основе обзоров, рейтингов и отзывов покупателей.
    
    На сегодняшнем занятии мы разобрали производителей компьютерной техники и смартфонов, познакомились с особенностями операционных систем Андроид и айОС.
    
    Надеюсь, вы узнали для себя что-то новое и полезное. Желаю вам всего хорошего и до новой встречи в эфирах.
    

### **************Урок 6. Особенности использования разных ОС. Виндоус**************

- ********************План урока********************
    
    О чем мы с вами сегодня поговорим:
    
    - Что такое Виндоус и какие особенности имеет эта ОС
    - Как работать в Виндоус
    - Про директории, файлы, программы
    - Про установку, переустановку и обновления программ
    
    Надеюсь, вы готовы. Поехали!
    
- **********************************************Краткая история Виндоус**********************************************
    
    Давайте заглянем немножечко в историю. Виндоус появилась впервые в 1985 году как графическая оболочка. Это была версия 1.0.
    А уже в 1990 году появилась версия 3.0, и за первые полгода было продано более миллиона копий этой ОС.
    Что же происходило с Виндоус дальше?
    С тех пор выходили разные версии: кто-то называет их удачными, кто-то неудачными, но сегодня актуальна версия Виндоус 11. С ней мы и будем разбираться на этом уроке.
    
- ********************************************************Основные особенности Виндоус********************************************************
    
    В же особенность Виндоус?
    Наверное, самая главная особенность Виндоус в том, что эта ОС может работать на компьютерах разных производителей, в отличие от МакОС, работающей только на компьютерах фирмы Эппл. И, конечно же, как любая современная ОС, Виндоус обладает многозадачностью: мы можем работать в нескольких программах, выполнять параллельно несколько действий. 
    Есть поддержка мультимедийных технологий, видео и аудио, и красивая удобная оболочка, радующая глаз и работающая по принципу “бери и тащи”.
    
- ********************************Работа в Виндоус********************************
    
    Как же работать в Виндоус 11? Из чего состоит интерфейс Виндоус?
    Если условно его делить, то на рабочем столе, который мы с вами видим, основную часть занимают программы, файлы, корзина, линейка, меню и информационное меню.
    
    Давайте посмотрим на это вживую. Вот рабочий стол. На нем располагаются иконки программ. Здесь могут располагаться файлы, но это нежелательно, конечно, - лучше их хранить в папках. Корзина. Линейка с меню, нижняя серая панель и в правом нижнем углу - информационное меню. 
    Основная главная кнопка - это кнопка меню Пуск, через которое мы с вами можем запускать программы, выключать, перезагружать или переводить в спящий режим компьютер. Также на панели меню располагается строка поиска, чтобы быстро искать программы и файлы. Еще у нас есть возможность работать с несколькими рабочими столами.
    
    Что такое рабочий стол?
    Представьте, что у вас несколько мониторов. Мы с вами можем расположить какие-то программы на одном рабочем столе, а другие - на другом, чтобы они не мешали. И таких рабочих столов мы можем сделать бесчисленное множество. 
    С помощью кнопки Представление задач легко переключаться между рабочими столами. Другая важная кнопка - Проводник. Она помогает работать с файлами. Здесь мы видим папки, расположенные на жестком диске. И при помощи двойного щелчка мы можем посмотреть, что находится в папках. О проводнике мы с вами еще поговорим чуть позже.
    
    Что еще у нас с вами есть?
    Информационное меню. В правом нижнем углу переключения языка, сейчас у нас активен русский. Если вы работаете с ноутбука, отображается уровень заряда, ну и, конечно же, время и календарь. Чтобы работать в Виндоус быстро и легко, желательно выучить горячие клавиши. 
    Возможно, вы уже какими-то из них пользуетесь: например, сочетания Ctrl + С и Ctrl + V позволяют копировать и вставлять информацию из буфера обмена. Это получается намного быстрее, нежели при использовании мышки.
    
- ******************************Горячие клавиши******************************
    
    Давайте посмотрим, какие еще горячие клавиши Виндоус облегчат работу с этой ОС. Вернее, не облегчат даже - ускорят.
    Для быстрого открытия меню Пуск достаточно нажать на клавиатуре клавишу Вин. Она представлена в виде такого флажка из четырех окошек. 
    Вин + Таб позволяет переключаться между программами.
    Вин + Д сворачивает все окна и показывает рабочий стол.
    Также мы с вами при помощи горячих клавиш можем управлять окнами Виндоус. Например, разворачивать окна на весь экран, сворачивать, ставить их рядом. Для этого есть сочетания клавиши Вин и курсорных стрелок. Стрелки у нас располагаются в правой части клавиатуры. А чтобы разделить экран пополам и одно окно поместить с одной стороны, а с другой стороны - другое, мы можем использовать сочетание клавиш Вин + Шифт + стрелка
    
- **********************************************************************************Директории, расширения и работа с файлами**********************************************************************************
    
    Теперь, как я обещала, давайте разберемся, каким образом мы можем работать с файлами, директориями и искать программы. 
    Наш проводник в мир файлов и директорий так и называется Проводник. Или Файл Эксплорер. Это приложение для управления файлами. 
    Мы с вами говорили про горячие клавиши: Проводник можно запустить либо при помощи клика мыши по иконке, либо нажав Вин + Е. И, конечно же, когда заговорили о файлах, мы не можем обойти тему расширения файлов.
    
    Что такое расширение файла? - спросите вы.
    Это то, что вы видите в названии файла после его имени и точки. Дальше идет некая аббревиатура, которая называется расширением.
    Зачем файлу расширение?
    Чтобы ОС понимала, где мы можем открывать этот файл, какие программы могут помочь его отредактировать и тд.
    Например, думаю, вы сталкивались с таким расширением, как .дос - с файлами этого типа работает Ворд.
    Расширений много, но в них зашито как раз название программы, которая, собственно, их создает, редактирует и поддерживает. Дело в том, что некоторые расширения универсальны, и вы можете работать с этими файлами как в Виндоус, так и МакОС или другой ОС.
    Но есть расширение, присущее только Виндоус - это расширение ехе. Это исполняемые файлы программ, установщиков и тд.
    
    Давайте рассмотрим Проводник поближе. Запустим его, нажав на иконку в меню. Запустив Проводник, мы видим содержимое нашего жесткого диска. 
    Чтобы у нас был порядок, файлы разложены по папкам: есть системная папка, в которой находятся файлы, относящиеся к системе Виндоус, а есть файлы, которые создали или загрузили мы. 
    Чтобы попасть в папку или директорию, как ее еще называют, достаточно нажать два раза ЛКМ: вы увидите содержимое этой директории.
    Папки могут содержать в себе еще папки, в которых могут содержаться файлы или другие папки. Вложенность и порядок устанавливаете вы.
    Что позволяет делать Проводник?
    Первое, с чего бы я начала - это внешнее представление наших файлов и папок. Мы можем отображать их как в виде списка, так и, например, в виде больших иконок. 
    Чтобы переключить режим, в правом нижнем углу достаточно нажать на иконку отображения элементов в виде крупных эскизов. И мы поулчим такой вариант.
    Либо, если нам неудобен такой вид отображения, переключимся в режим списка. В левой части мы видим содержимое нашего жесткого диска, те папки, которые есть внутри. Нажав на стрелочку, мы можем развернуть структуру диска и посмотреть, а что находится в каждой из директорий. 
    Также для быстрого поиска у нас в правом верхнем углу есть поисковая строка. И здесь мы можем задавать, если помнитм, например, имя файла, которй нм необходим. 
    Мы можем ввести имя файла и найти его. Мы запускаем поиск, Проводник нашел наш файл, и мы можем его теперь открыть.
    
    Давайте посмотрим, из чего состоит верхняя панель. Она позволяет создавать папки, директории. 
    Ярлык - это ссылка на папку, картинку или просто текстовый документ. Нам достаточно нажать на Создать папку, задать имя новой папки, допустим, “111”, и нажать Ввод. Новая папка создана - мы можем туда перемещать наши файлы. 
    Как перемещать файлы?
    Мы можем взять и зажать ЛКМ файл. Здесь используется технология “бери и тащи”. Перетаскиваем файл на эту папку, и вот он перемещен в папку “111”, которую мы с вами только что создали.
    
    Что еще есть в Проводнике?
    Ножницы. При наведении на любую иконку обязательно будет всплывать подсказка с пунктов Вырезать. 
    Что значит вырезать?
    Если вы не хотите перемещать файлы с помощью “бери и тащи” - допустим, вам это неудобно - вы можете взять и вырезать файл: выделить его ЛКМ, один раз щелкнув по нему, нажать на Вырезать и выбрать какую-то другую папку, которую вы хотите. 
    Папку можно выбрать как из списка папок слева, так и, например, через “хлебные крошки”, чтобы проще было ориентироваться, где именно мы с вами находимся. Я перемещаюсь обратно в папку Видео, и теперь мне нужно вставить файл, который я переместила в буфер обмена. Навожу на иконку Вставить и файл вставляется обратно, аккуратно в папку видео. 
    Рядом с Ножницами у нас есть другая кнопка - Копировать. 
    А в чем же разница?
    Когда мы выбираем режим Вырезать, файл из одной директории (папки) вырезается и переносится в другую папку. 
    Если мы выбираем Копировать, получаем копию файла. 
    
    Ну что ж, с этим разобрались. 
    Четвертая иконка - Переименовать. Я назвала папку 111 и хочу ее переименовать. Каким образом это сделать?
    Я могу нажать на эту кнопку либо ПКМ вызвать контекстное меню. Здесь у нас точно также под рукой есть знакомые иконки, т.е. я могу сделать все и через ПКМ. Более того, контекстное меню позволяет мне совершать еще ряд действий с файлом. Итак, давайте переименуем нашу папку. 
    Выбираем папку - Переименовать - 222 - Ввод. 
    Разобрались, как переименовать.
    
    Теперь мы хотим удалить папку. За это отвечает иконка Корзина.
    Я нажимаю Удалить, но удаление происходит в два этапа: сначала файл или папка перемещается в корзину на рабочем столе. Мы можем 2 раза щелкнуть ЛКМ по корзине и увидеть, что мы туда с вами сбросили. 
    Иногда бывает, что мы ошиблись и нужно восстановить эти файлы обратно, вместо того, чтобы окончательно удалить. 
    Как восстановить файлы из Корзины?
    Мы выбираем директорию, которую только что удалили, нажимаем ПКМ и выбираем Восстановить. Теперь Корзина опустела, а в директории снова появилась знакомая папка. 
    Как же удалить папку окончательно и бесповоротно?
    Снова выбираем папку ПКМ, пользуемся контекстным меню и выбираем Удалить. Директория переместилась в Корзину. Теперь мы можем, не заходя в Корзину, щелкнуть по ней ПКМ и выбрать Очистить корзину.
    Ради безопасности система спросит, точно ли мы хотим удалить эту папку, потому что действие необратимо. Т.е. пока файл в корзине, он подлежит восстановлению, а после очистки корзины так просто его уже не вернуть.
    Мы подтверждаем действия, и корзина пустеет. Если мы ее откроем, увидим, что в ней больше ничего нет. Разобрались с корзиной и с удалением файлов и папок. Точно так же, кстати, мы удаляем и файлы.
    
    Далее - кнопка Сортировать. За что же она отвечает?
    Нам иногда нужно отсортировать папки или файлы по имени. Мы можем нажать Сортировать и выбрать, по какому параметру: по имени, по дате изменения, по типу, по возрастанию или по убыванию. 
    
    Следующий элемент вам уже знаком: мы можем выбирать, как отображать наши папки и файлы. Это могут быть огромные значки, мелкие значки, таблица или список. 
    Вы настраиваете отображение папок и файлов так, как вам удобно. 
    Причем для каждой папки можно настроить свой вид. Здесь также спрятаны дополнительные свойства. Мы можем выделить все наши файлы, можем обратиться к свойствам, к параметрам и так далее. 
    Ну что же, с Проводником мы немножко разобрались. Надеюсь, что вам теперь понятно.
    
- ****************************************Работа с программами****************************************
    
    Давайте двигаться дальше. Теперь, когда мы познакомились с файлами, давайте разберемся, как работать с программами: ставить их удалять и обновлять.
    Все это мы делаем при помощи уже знакомой кнопки Пуск.
    Через ее меню мы находим программу и удаляем. Либо через поиск мы можем найти приложение и удалить. 
    Давайте рассмотрим, каким образом мы можем удалить установленные программы. Потом я расскажу, как поставить новые программы на ваш компьютер.
    
    Чтобы открыть раздел Программы, необходимо кликнуть по иконке Пуск, и мы увидим список закрепленных приложений. Что значит “закрепленное приложение?”
    Мы можем управлять списком, чтобы отображать те программы, которыми пользуемся достаточно часто. Как это сделать?
    Мы можем щелкнуть по иконке программы ПКМ и выбрать Закрепить на начальном экране. Теперь приложение Яндекс.Браузер у нас будет отображаться среди закрепленных программ.
    Если мы хотим какую-то программу удалить из закрепленных, мы нажимаем ПКМ и выбираем пункт Открепить от начального экрана. Эта программа больше в списке отображаться не будет. 
    
    Теперь давайте разберемся, как удалить программу.
    Если программа, которую вы хотите удалить, не закреплена, вы можете перейти к просмотру всех программ, нажав на кнопку Все приложения.
    Далее, найдя программу, кликните ПКМ и выберите пункт Удалить - программа будет удалена с компьютера.
    
    Как еще можно удалить? 
    Самый простой, наверное, метод: в строке поиска при меню Пуск набрать Установка и удаление программ.
    Это раздел, посвященный именно установке и удалению. Здесь перечислены все-все-все программы, которые установлены в ОС.
    Мы выбираем программу для удаления, нажимаем на три точки с правой стороны и выбираем пункт Удалить. 
    Программа удаляется с компьютера. Все достаточно просто. 
    С удалением разобрались - немножко места освободили. Теперь давайте разберемся, как поставить программу.
    
- ************************************Установка программ************************************
    
    Чтобы установка программ была простой и безопасной… Что я подразумеваю под безопасностью?
    Для безопасности в плане вирусов был придуман магазин приложений Майкрософт Стор - там вы можете скачать программы от проверенных разработчиков. Более того, магазин будет отслеживать и загружать обновления к программам.
    Давайте посмотрим, как открыть этот магазин приложений, найти программу и установить ее.
    Для запуска воспользуемся поиском.
    Начнем набирать Стор: это приложение установлено в ОС по умолчанию. Запускаем его, кликнув ЛКМ. Отлично.
    Магазин приложений запущен.
    Кстати, чтобы оставить магазин в линейке меню, мы можем нажать на значок приложения ПКМ и выбрать Закрепить на панели задач.
    Теперь, даже если мы закроем приложение, оно останется у нас под рукой. В любой момент, если мы передумаем, мы щелкнем ПКМ - Открепить от панели задач, и значок магазина исчезнет. А теперь давайте снова запустим его.
    
    В данном магазине есть приложения на любой вкус, любую задачу и тд.
    Есть поиск, при помощи которого можно найти любую программу. Например, какой-нибудь сканер. По запросу Сканер мы увидим множество приложений.
    При выборе приложения можно ориентироваться на отзывы, количество звезд и, например, количество скачиваний, которое тоже указано рядом со звездами.
    Приложения бывают как бесплатные, так и платные.
    Чтобы установить приложение, достаточно щелкнуть, “провалиться” в раздел этого приложения и нажать на кнопочку Гет.
    После этого приложение будет установлено на ваш компьютер.
    Все достаточно просто. Конечно, вы можете устанавливать программы не только из Стора, вы можете загружать их из интернета, но я хотела бы обратить ваше внимание на то, что важно быть внимательными: вместе с программой вы можете скачать вирусы. Поэтому рекомендую обязательно ставить какую-нибудь антивирусную программу.
    
    Переустановка программ.
    Чтобы переустановить программу, нужно сначала удалить ее одним из способов, которые мы разбирали до этого, а затем снова ее установить. Здесь все достаточно просто.
    
    И в завершении давайте поговорим про обновление программ.
    Производители приложений периодически выпускают обновления, чтобы улучшить приложение, обезопасить его, повысить производительность и так далее. Мы можем поручить обновление наших программ Стору.
    Для этого обязательно убедитесь, что у вас установлена опция автоматического обновления. Как это определить?
    Давайте посмотрим. Нам нужно зайти в нашу учетную запись, выбрать апп сеттингс и проверить, что здесь активен флажок апп апдэйтс.
    Тогда приложение, программа, которую вы устанавливаете из Стора, будут автоматически обновляться. Если же вы установили программу, скачав откуда-то из интернета, вам нужно будет переходить обязательно в раздел Справка, Обновления или О программе и выбирать пункт обновления, т.е. вручную отслеживать этот момент. 
    Конечно, установка приложений через Стор гораздо удобнее.
    
- ****************************Подведем итоги****************************
    
    Мы с вами сегодня немного познакомились с Виндоус, рассмотрели Проводник и его возможности, увидели, где находятся файлы и директории, поговорили про установку, удаление и обновление программ.
    Виндоус - достаточно простая программа, ориентированная на то, чтобы сделать вашу работу простой и легкой.
    
    Надеюсь, что у вас все получится, а я с вами прощаюсь. До встречи в эфире.
    

### **************Урок 7. Особенности использования разных ОС. МакОС**************

- ********************План урока********************
    
    Ну что, давайте вернемся к теме. О чем мы с вами будем сегодня разговаривать?
    Мы разберемся с ОС МакОС, ее особенностями. 
    Мы посмотрим, как можно работать в этой ОС, разберем интерфейс, элементы интерфейса, также посмотрим, как устроена иерархия файлов документов, папок, что немаловажно. И также посмотрим, как поставить, удалить, обновить программу. Тоже важная задача. Ну что, вы готовы?
    Вперед.
    
- ********************************Что такое МакОС?********************************
    
    Какие же все-таки у МакОС есть особенности по сравнению с другими системами?
    Прежде чем говорить об особенностях МакОС, давайте разберемся, что такое МакОС - это сокращение от трех слов: Macintosh Operating System. 
    Т.е. это операционная система для компьютеров фирмы Эппл.
    Ведущим разработчиком данной системы был Джеф Раскин. 
    Ходит легенда о том, что Макинтош - это любимый сорт яблок Раскина, и это легло в основу названиия ОС. А дальше название сократили. 
    Современная линейка система МакОС начинается с версии МакОС Х. 
    Все думают, что это икс, а на самом деле это римская цифра 10.
    Т.е. линейка начиналась с 10 версии, а впоследствии приставка Мак отпала, потому что появились ОС Эппл для часов, телевизионной приставки, телефонов айПад, а звучание МакОС Х напоминало все-таки о компьютерах. 
    ОС для гаджетов назывались в зависимости от устройств, для работы с которыми предназначено: watchOS, TVOS и тд
    
    Теперь немножечко истории.
    Эппл использует МакОС с 1984 года, когда и появился первый компьютер этой компании. 
    Что же было внутри этой ОС в 1984 году?
    Вообще она была революционной: имела графический интерфейс, т.е. мы могли управлять ею и совершать какие-то действия внутри этой операционной системы без ввода команд. 
    Управление можно было осуществлять мышкой, что тоже было очень удобно, и тогда впервые появилась многозадачность. Т.е. система была достаточно революционной для того времени.
    В Виндоус все эти функции появились спустя только 6 лет, когда вышла в свет ОС Виндоус 3.0
    А что же сейчас?
    
- ********************************Особенности МакОС********************************
    
    Чем эта ОС такая особенная? Давайте разберемся.
    
    ********************Удобство.******************** 
    Если вы и посмотрите на интерфейс МакОС - на внешний вид, если говорить по-русски, - вы увидите лаконичность элементов, продуманность и удобство их расположения. Не сомневаюсь, что буквально через полчаса вы будете с удовольствием работать в этой ОС
    
    **************************Стабильность.**************************
    Наверняка вы сталкивались с тем, что после установки Виндоус, ее приходится переустанавливать через год, если не раньше. 
    При установке МакОС вы с такой проблемой не столкнетесь точно - я вам скажу на собственном опыте. Вы ее получите установленной при покупке компьютера и дальше забудете, что такое переустановка. Ну только в крайнем каком-нибудь случае она может понадобиться.
    
    ******************Отсутствие вирусов.******************
    
    Не совсем полное, но вирусов под Мак минимум, поэтому переживать за свой компьютер абсолютно не стоит.
    
    **************************************************************************Расширенный набор штатных приложений.************************************************************************** 
    
    Что это значит? Это значит, что при установке ОС у вас будет достаточно приложений для полноценной работы: мессенджер, карты и тд. И вы можете просто брать и приступать к работе, не ставя ничего дополнительно. Это тоже немаловажно. Вы получаете готовую удобную среду для работы.
    
    ********************************************************************************************************Повышенная безопасность, защита персональных данных.********************************************************************************************************
    
    Этот пунктик у Эппл стоит отдельной, очень важной строкой. 
    В чем безопасность?
    Ваши файлы шифруются. Отслеживаются все действия, все установки программ сторонних разработчиков, - чтобы вы не потеряли свои данные. Поэтому, с одной стороны, есть некоторые сложности с установкой приложений не из официального магазина приложений АппСтор, с другой стороны, вы и ваш компьютер полностью защищены и в безопасности.
    
    ******************************************************************************************МакОС поддерживает файлы и программы Виндоус.******************************************************************************************
    
    Тоже немаловажный момент. Что это значит?
    Например, Ворд, Ексель и другие привычные нам программы есть и для этой ОС, и вы абсолютно без каких-либо проблем можете переносить файлы с одной ОС на другую.
    С Виндоус на Мак и обратно.
    
    ********************************************************Простота установки программ.********************************************************
    
    Здесь все практически элементарно: мы с вами об этом поговорим дальше, и вы, конечно, убедитесь в этом сами.
    
    ************************Экосистема.************************ 
    
    Эппл стремилась объединить все свои устройства, такие как часы, телефоны и компьютеры в единую систему. И у вас есть возможность делиться файлами между устройствами, синхронизировать, передавать файлы с помощью ЭйрДроп, что очень удобно. Такой функции в Виндоус пока нет
    
    ************************************************************Инструменты для разработчиков.************************************************************
    
    МакОС буквально заточена под то, чтобы разработчики комфортно могли создавать приложения для разных устройств и разных ОС компаний Эппл.
    
    А теперь, когда мы с вами увидели все особенности и преимущества этой системы, давайте посмотрим, как в ней работать.
    
- ******************************Интерфейс МакОС******************************
    
    Интерфейс МакОС достаточно прост и лаконичен. Я уже об этом говорила. Компания Эппл уделяет большое внимание именно дизайну, его продуманности: чтобы интерфейс был удобен и прост в использовании. Не зря компания является таким флагманом в области дизайна. Достаточно зайти на их сайт. Он всегда является примером для подражания дизайнеров.
    
    Из чего состоит интерфейс рабочего стола?
    Там мы можем увидеть программы, рабочий стол, линейку, информационное меню и тд, но картинки картинками - давайте посмотрим, как выглядит эта ОС вживую, и как эти элементы могут быть использованы.
    
    Итак, перед вами интерфейс МакОС. Давайте разбираться, что тут на экране и из чего этот интерфейс состоит. В нижней части вы увидите панель быстрого запуска или, как еще она называется, Док.
    В этой панели размещаются программы, которые мы можем быстро запускать, их сюда можно добавлять и отсюда удалять. 
    Как удалить программу? Наводим на значок ПКМ, щелкаем Параметры и выбираем пункт Удалить из Док. Все, значок программы исчез. Она нам больше на этой панели не мешает.
    
    Следующий элемент - это файлы. Часто используемые файлы можно также здесь размещать. И здесь постоянно находится папка Загрузки. О ней мы тоже поговорим отдельно, зачем она нужна и как используется.
    
    Следующий элемент - рабочий стол, на котором видны подключенные накопители. Что такое накопители?
    Это, например, наш жесткий диск, который расположен внутри компьютера или ноутбука. Или это флешка, которую мы подключили, или какой-то съемный диск - все это будет отображаться у нас здесь на рабочем столе. 
    Кроме того, мы можем создавать здесь папки и размещать файлы. 
    Вот сейчас я создала папку% нажала ПКМ, выбрала Новая папка. и папка готова.
    
    Немаловажный элемент - это, конечно, корзина. 
    Она всегда располагается в нижней панели быстрого запуска. Чтобы удалить файлы и даже программы, достаточно перетащить объект в корзину, и он будет удален. Чтобы отменить удаление, вы должны нажать на клавиатуре Комманд + Зет
    Наша папка вернулась на рабочий стол. Также мы можем ее удалить при помощи щелчка ПКМ. Щелкаем по директории и выбираем пункт Переместить в корзину. Наша папка оказалась в корзине.
    Вообще корзина - это отдельное пространство, куда складываются ненужные нам файлы, папки, программы. И они хранятся какое-то время, какое именно, вы можете настроить сами. Корзину, конечно, нужно периодически чистить, чтобы она не захламляла ваш жесткий диск, занимая лишнее место.
    
    Следующий элемент, на котором бы я хотела остановиться, - это линейка меню. Она располагается в верхней части слева. И в ней появляются пункты той программы, которая у нас сейчас активна. 
    Посмотреть, какая программа сейчас запущена и активна, мы можем опустив взгляд на панель быстрого запуска, или Док. 
    Мы видим, что горит маленький беленький такой значок под программой, и именно ее пункты управления мы сейчас и видим. В правой части располагается информационное меню: оно нам может показывать часы, уровень зарядки аккумулятора, качество сигнала вай-фай и, например, подключенные устройства. Также здесь могут располагаться значки программ, запускаемых при старте системы.
    
    Очень важный элемент, который существует в МакОС - так называемый Прожектор (если по-русски) или Спотлайт. Это имя поисковой системы вашего Мак, и оно появляется в плавающем окне. 
    Давайте нажмем на элемент Лупа в верхнем меню и увидим поисковую строку. Для чего нам эта утилита? 
    Мы можем ввести здесь какой-то запрос. Например, сконвертировать валюту, искать какие-то файлы, запускать приложения, выполнять какие-то расчеты, получать сайты, определенные записи из Википедии и многое другое. Возможности достаточно широки. Очень полезная функция - рекомендую.
    
    Файндер - это стандартное приложение для управления файлами в ОС. Как и Проводник в Виндоус, Файндер позволяет просматривать содержимое нашего жесткого диска и других подключенных устройств. Мы можем запустить Файндер простым нажатием ЛКМ, и вот у нас уже открылась папка с документами. С этой системой поиска мы разберемся более глубоко чуть позже, а теперь давайте перейдем к системным настройкам.
    
    Вы можете настроить достаточно много функций в МакОС под себя. Где же располагаются системные настройки?
    Кстати, мы можем об этом спросить и наш Прожектор. 
    Также системные настройки всегда можно открыть из панели быстрого запуска: вот такая иконка с шестеренкой. ЛКМ нажимаем на нее и получаем достаточно внушительный список настроек экрана, безопасности и тд.
    С системными настройками немного глубже разберемся: их достаточно много, но я пройдусь по основным. Что нам с вами доступно?
    
    Например, давайте разберемся с жестами. Здесь также существует поиск: если вы какого-то пункта не видите, а он вас интересует, вы можете просто набрать ваш запрос в верхнем правом углу.
    Ноутбуки Эппл оснащены трекпадом, который позволяет более удобно, чем с помощью мышки работать в этой ОС. И давайте посмотрим, какие жесты нам с вами доступны.
    Я только начала набирать запрос Жесты, и в общем-то мне уже выдали несколько вариантов подсказок. Меня интересуют жесты трекпада.
    Выбираю - данный раздел позволяет настроить жесты, которые мы можем использовать на трекпаде. Например “смахивание” страниц. Для этого достаточно подвести сюда мышь, нажать на иконку стрелочки и выбрать, каким образом, нам будет удобно смахивать страницы: двумя пальцами, тремя или обоими способами.
    
    Прокрутка и масштабирование. Мы можем увеличивать масштаб, поворачивать элементы - все это тоже здесь настраивается. Выбор нажатия, прокрутка страницы, имитация ПКМ, если на трекпаде вам необходима эта функция и тд. Как видите, список достаточно большой. Я предлагаю вам спокойно посмотреть, попробовать и настроить трекпад по вашему усмотрению, чтобы вы могли воспользоваться такой удобной функцией, как жесты.
    
- ************iCloud************
    
    Следующий элемент, на который я хотела бы обратить внимание, - приложение айКлауд, которое есть в МакОС. Вы его будете часто встречать, поэтому очень важно, чтобы вы поняли, что вообще это такое.
    айКлауд - это универсальное имя для обозначения облачных сервисов компании Эппл.
    Давайте посмотрим, что нам предлагает айКлауд. Для этого нам нужно перейти в нашу учетную запись.
    Вы увидите вот такую информацию: айКлауд позволяет делать резервные копии данных, которые хранятся на компьютере или телефоне.
    Единственный минус - что стандартно Эппл нам предлагает около 5 Гб, что в принципе достаточно мало, поэтмоу вы всегда можете взять более расширенные пакеты и больше не беспокоиться о том, что ваши данные пропадут, если, допустим, устройство сломается или вы его потеряете. 
    Ваши данные всегда будут надежно сохранены в облаке, и вы всегда сможете к ним обратиться. Более того, это позволяет синхронизировать данные между устройствами. Вы всегда сможете, например, зайти с другого гаджета на свой облачный диск.
    
- ********Сири********
    
    Еще один классный элемент, который есть в МакОС, это Сири.
    На компьютере это наш персональный ассистент, который помогает решать разные задачи. 
    Чтобы запустить ассистента, справа в верхнем меню мы должны нажать на значок Сири. Теперь помощница нас слушает - мы можем давать ей определенные команды. 
    Например, вы можете дать команду “Позвони Виктории по фэйстайм” или “Покажи фотографии за вчерашний день”, “Найди ближайшую кофейню” или запустить любую программу или приложение. Очень удобно.
    
    Мы с вами немножко разобрались в том, как выглядит интерфейс МакОС, из каких элементов состоит и какие полезные приложения существуют.
    
- ****************************************************Работа с файлами и папками****************************************************
    
    А теперь давайте разбираться с файлами, папками и директориями.
    Я уже рассказывала о том, что Файндер - наша с вами исходная точка, с которой мы начинаем вообще работу с файлами и папками.
    Давайте поговорим о том, что такое общее расширение файла и какие расширения существуют только для МакОС.
    Вообще, расширение файла - это набор букв, который идет после точки в имени файла. До точки идет название файла, а после точки - расширение.
    Есть расширение, которое вы встретите только в МакОС. например .арр - это файл программы, не пугайтесь. Также есть расширение .dmg, которое указывает, что данный файл - дистрибутив программы. 
    Что такое дистрибутив? Это набор файлов для установки программы в нашей ОС. Сокращение .dmg расшифровывается как disk image или “образ диска”. 
    И еще вы можете встретить такое специфичное расширение как .pages - это файл, созданные в одноименной программе, которая есть только в МакОС.
    Во всем остальном МакОС хороша тем, что поддерживает файлы, которые вы встречали в Виндоус. И вы спокойно можете перемещать их с одной системы в другую.
    
    Ну а теперь давайте посмотрим на иерархию папок и снова вернемся к нашему Файндер. Хочу отметить, что МакОС заметно строже относится к расположению файла в файловой системе, и практически каждый файл имеет свое заранее определенное место. Для файлов разного типа и назначения определены разные стандартные места, поэтому не рекомендуется сохранять файлы в произвольных местах и без необходимости перемещать или переименовывать. 
    Я запустила Файндер и по умолчанию он показывает недавние файлы, с которыми я работала. Окно Файндер, - а мы сейчас видим именно его - служит для организации и доступа практически ко всем объектам, которые хранятся на вашем компьютере Мак. Слева у нас есть меню быстрого доступа - боковое меню для удобного перехода в папки, которые нам нужно иметь под рукой.
    
    Давайте посмотрим, как настроить это меню, чтобы быстро переходить к необходимым рабочим или личным файлам. 
    Как мы можем вынести сюда папку?
    Давайте зайдем в Загрузки, создадим здесь какую-то новую папку. Я расширю окно, кликну ПКМ, выберу Новая папка, и пусть она у нас будет называться Тест. 
    Я хочу, чтобы при запуске Файндер мне было удобно сразу переходить в эту папку. Я выбираю папку, зажимая ее ЛКМ и перетаскиваю в эту панель. Теперь, когда я буду запускать окно Файндер, у меня папка Тест будет всегда под рукой, т.е. я могу нажать на эту папку и перейти внутрь к тем файлам, которые мы здесь создадим и разместим. Удалить папки отсюда, из меню быстрого доступа, тоже очень просто: щелкаем ПКМ и выбираем Удалить из бокового меню.
    Вы можете хранить здесь самое необходимое, перемещать элементы по вашему усмотрению и организовывать работу с файлами так, чтобы вам было удобно. Самый главный вопрос, который всегда возникает: использовать папки или нет. Вообще папки существуют, чтобы правильно организовать ваши файлы, чтобы они не были разбросаны по всему рабочему столу и тд. Я уже показывала, что создать папку достаточно легко.
    Я сейчас покажу как. Например, в папке Загрузки мы создаем новую папку через ПКМ - Новая папка 2 -  и простым перетаскиванием, зажав ЛКМ файл, мы помещаем его в папку.
    Теперь наше пространство организовано, мы можем нашу папку обозвать Картинки и хранить в ней какие-то изображения по нашему усмотрению. 
    Чем лучше вы организуете структуру ваших папок, тем проще вам будет найти какую-либо информацию. 
    Вот, порядок наведен!
    
    Вообще, для организации файлов мы можем еще использовать и теги.
    Давайте посмотрим, что это такое. 
    Зайдем в папку с картинками, щелкнем правой кнопкой на нашей картинке и увидим здесь несколько цветных кружочков. Это так называемые теги, которые мы можем присваивать каким-то файлам, чтобы группировать их не только по папкам. Особенно это актуально, если они разбросаны в разных папках, но относятся, например, к одному какому-то проекту или какой-то одной теме. Выбрав один тег, например, красный, мы увидим значок слева от названия файла. Чтобы нам было удобнее фильтровать / находить файлы с одним и тем же тегом, мы можем также вывести теги в боковое меню нашего Файндера.
    
    Теперь я хотела бы остановиться еще немножечко на интерфейсе Файндер, чтобы показать, как мы можем менять отображение папок внутри папок и информации. 
    В верхней панели мы всегда видим название папки, в которой находимся, а внизу отображается путь, потому что перед этим мы зашли на жесткий диск, перешли в такую-то папку, в этой папке еще другая папка, куда мы тоже нырнули. Т.е. мы прошли практически 4 уровня. 
    В верхней части мы сейчас видим, что активная иконка, которая состоит из 4 квадратиков…
    Всегда при наведении ОС нам подскажет, что это за иконка - у них же нет подписи. И мы видим, что эта иконка отображает нам объекты в виде значков. Если мы выберем следующий режим, то объекты будут отображаться в виде списка или галереи. Настраивайте внешний вид окна, как вам удобно.
    Также мы можем всегда отредактировать эту панель и расположение элементов. Нам достаточно щелкнуть ПКМ по верхней панели и выбрать пункт меню “Настроить панель инструментов”. Теперь достаточно перетащить ту или иную иконку сюда в панель или, например, иконку, которая здесь есть, убрать простым перетаскиванием в этом поле. Мы также можем настроить нашу панель под запросы. 
    Например, вот у нас есть Править теги. Давайте вынесем эту иконку сюда. У нас появилась новая иконка. Или вынести функцию быстрого просмотра файлов - тоже очень удобная история. Как только мы с вами настроили панель, нажимаем на кнопочку Готово. И все. Мы можем теперь легко и просто воспользоваться, например, быстрым просмотром. Нажимаем и быстро просматриваем содержимое файла.
    
    В начале урока я говорила о том, что Эппл заботится об экосистеме: чтобы все устройства были собраны в одном пространстве и было легко передавать файлами и другую информацию между ними. 
    Для этого есть функция ЭйрДроп. С ее помощью мы можем отправить файл на устройство, которое находится поблизости и работает под управлением той же ОС или на компьютер Мак прямо из нашего Фандер. Как это сделать?
    Давайте попробуем на примере все той же картинки. Нажимаем на ее ПКМ. Допустим, я хочу ее отправить на другое устройство. Выбираем Поделиться - у нас появляется несколько вариантов, в т.ч. ЭйрДроп. Выбираем этот пункт. Сейчас ЭйрДроп должна определить устройство, которое находится поблизости и с которым я могу поделиться. Вот мы уже видим здесь телефон и, выбрав это устройство, тут же отправляем картинку на телефон.
    
    Также хочу отметить, что, конечно же, мы можем переименовывать файлы, папки, диски - все, что угодно. Как это сделать?
    В принципе, самый быстрый способ - один раз щелкнуть на файл, чтобы его выбрать и еще раз щелкнуть по имени файла. Теперь мы можем задать ему то имя, которое захотим. Как только мы закончили ввод нового имени файла, мы щелкаем по любому свободному пространству рядом, и наш файл переименован. 
    То же самое касается папок, но у нас тут есть безымянная какая-то новая папка, давайте мы ее тоже как-то назовем. 
    Еще один способ переименования файлов и папок - это вызвать контекстное меню ПКМ и выбрать пункт Переименовать. Это дает нам точно такие же возможности: мы можем ввести здесь какое-то новое имя. 
    
    Что важно отметить?
    При переименовании вы можете использовать практически любые символы, но нельзя использовать двоеточие или, например, начинать имя с точки. 
    Давайте попробуем провести эксперимент: добавим в начало имени папки точку и попробуем нажать Ввод. Мы получили предупреждение от ОС о том, что имя не должно начинаться с точки, которая стоит после имени файла. 
    Система, чтобы не путаться, где расширение, а где имя, воспринимает точку как разделитель, поэтому мы не можем ставить этот символ в начало имени нашего файла или папки. Еще мы не можем использовать символы двоеточие и косая черта. Эти символы нам недоступны в имени, а все остальное мы можем использовать, например, тире.
    
    Существует ряд объектов, которые мы переименовывать не должны, и которые вообще трогать не следует. Да, это все файлы и объекты, которые входили в комплект папки библиотеки. Здесь находятся служебные файлы, и лучше не заниматься их удалением, переименовыванием и тд - ради стабильной работы системы.
    
    Давайте еще раз обратим внимание на то, как можно удалить объекты и как их можно восстановить после этого. Если мы хотим удалить один объект, мы его выбираем и, например, при помощи сочетания Комманд + Дел мы можем переместить файл в корзину. Также можем сделать это через меню, вызываемое правой кнопкой. Можем просто перетащить объект прям в корзину. Не важно, каким образом вы будете удалять объект, главное - чтобы это было для вас просто и быстро.
    Переместить в корзину - таким образом мы с вами удалили один объект. А если их несколько? 
    Если мы хотим удалить несколько объектов, мы можем, зажав ЛКМ, выделить их и затем отправить в корзину. Кстати, я специально вывела иконку корзины в верхнее меню Файндер, чтобы можно было легко и быстро удалять объекты при необходимости. Если нам нужно для удаления выделить выборочно объекты, мы выбираем какой-то один, зажимаем клавишу Комманд и щелкаем мышкой по другому. Таким образом, мы можем с вами выборочно помечать объекты, над которыми будем работать. Дальше мы можем их удалить, переименовать и так далее.
    
    Теперь давайте посмотрим, а что у нас находится внутри корзины.
    Щелкаем по корзине - у нас открывается еще одно окно Файндер. Мы видим надпись Корзина. Это значит, что мы находимся внутри этой корзины, и внутри этой корзины у нас есть папка, которую мы удаляли ранее. 
    Как работать с корзиной?
    Мы можем объекты здесь как полностью удалять, так и восстанавливать, если эти объекты были удалены ошибочно.
    
    Как восстановить объект из корзины, если вы случайно его туда смахнули?
    Мы выбираем папку ПКМ и нажимаем на Восстановить. 
    Либо мы можем удалить его немедленно и безвозвратно. Чтобы очистить корзину, не заходя в нее, нужно ПКМ щелкнуть по корзине и выбрать Очистить корзину. 
    Вне зависимости от того, сколько там объектов находится: папок, программ и тд - все это будет очищено.
    Система нас спросит обязательно, точно ли нужно очистить корзину. Не ошиблись ли мы клавишей. Мы подтверждаем. И корзина наша с вами пуста.
    
- ****************************************Работа с программами****************************************
    
    Мы с вами поговорили о директориях, папках, файлах и о том, что мы можем найти на нашем жестком диске, где располагаются файлы. А теперь давайте перейдем к программам. Запрос к поисковой системе о том, как поставить программу на Мак, займет гораздо больше времени, чем сама установка программ. Есть целых 3 способа поставить новую программу на Мак.
    
    **********************Первый способ -********************** при помощи файлов с расширением .дмг, которые мы скачиваем с официального сайта разработчика или еще откуда-то. Это образ диска, в котором содержатся все файлы, необходимые для установки нашей программы.
    Также есть **способ ручной установки**. Это более сложный способ для более сложных программ, требующих запуска скриптов, доступа к ядру системы и тд. Пакеты для ручной установки имеют расширение .пкг или .мпкг. 
    И самый ****************************************простой и безболезненный способ -**************************************** это, конечно же, использовать АппСтор, магазин приложений для Мак от компании Эппл.
    
    А как мы можем удалять программы?
    Мы говорили, что можем их ставить, но тогда нам необходимо уметь какие-то программы и удалить. Здесь все достаточно просто. Также, как и в случае с файлами, вы можете перетащить программы в корзину, и - вуаля - программы больше нет. Но я бы не рекомендовала использовать данный способ. Почему?
    За время своей работы программа может создавать какие-то временные файлы в служебных папках, и при удалении они останутся и будут засорять вашу систему. 
    Для удаления программ я бы рекомендовала использовать специальные программы, которых достаточно много. Вы можете выбрать любую удобную для вас, например, АппКлинер. 
    В нее мы просто перетаскиваем файл с программой, она находит все временные файлы. которые относятся к этой программе и вычищает из нашей системы полностью программу без следа. 
    Это, наверное, самый лучший способ удаления программ.
    
    Но что делать, если программу нужно переустановить?
    Мы можем скачать версию программы, которую необходимо переустановить, запустить ее для установки, и система сама определит, что у нас уже установлена эта программа, и спросит нас, нужно ли ее заменить или оставить вторую версию. 
    В основном мы используем именно замену, чтобы старую версию заменить на новую, для чего и занимались переустановкой. Ну и четвертый аспект, касающийся программ - это обновление. 
    Любая программа со временем нуждается в обновлении: выходят какие-то новые фишки для устранения уязвимостей, стабилизации работы и тд.
    Тут тоже есть два метода, при помощи которых мы можем обновлять программы. При помощи магазина АппСтор, зайдя в соответствующую программу, или при помощи ручного управления.
    
- ****************Практика****************
    
    Но картинки картинками, а теперь давайте посмотрим, как это работает вживую.
    Давайте разберемся, каким образом мы можем установить программу. 
    Ну начнем с самого простого способа при помощи приложения АппСтор, которое есть на Маке и изначально устанавливается вместе с ОС.
    Нажимаем значок АппСтор внизу в панели быстрого запуска (Док).
    Далее нам доступны различные тематики. Можем найти какую-то конкретную программу, вбив в поиск, допустим, АппКлинер.
    И мы видим список программ, доступных для установки.
    Теперь достаточно просто нажать на кнопочку, загрузить, установить и программа пошла устанавливаться.
    Конечно же, система обязательно запросит подтверждение того, что мы действительно хотим установить эту программу. Она может попросить ввести пароль администратора или отсканировать отпечаток пальца. Подтверждаем. Программа установилась. Нажимаем Открыть, и вот программа запущена, установлена, видим иконку внизу в Док, и саму программу.
    
    Что мы можем сделать с этой программой?
    Давайте попробуем ее удалить. 
    Заходим в программу. Через АппСтор мы удалить ее не можем. Помните, я говорила о том, что для удаления программы нам достаточно перетащить ее просто в корзину. Если программа не отображается здесь, в панели быстрого запуска, вы ее здесь не оставляли.
    А как ее оставить? - спросите вы.
    Да очень просто: если вы уже запускали эту программу, она у вас здесь отображается, и вы нажмете на нее ПКМ и через Параметры можете выбрать пункт Оставить в Док. Вот эта часть отведена только для программ, которые мы запускали не так давно, и каждая новая программа будет вытеснять предыдущие. 
    Мы можем оставить ее здесь навсегда, если выберем Оставить в Док, и вот она попадет в стройный ряд. Если хотим удалить ее, щелкаем ПКМ и выбираем Удалить из Док. Но мы же хотели ее удалить.
    Где нам теперь искать эту программу? Мы ее установили, как ее найти?
    Если помните, у нас была папка Программы. Перейдем в нее и найдем программу, которую не так давно установили. Если программ много и вы сразу не видите искомую, можно справа в верхнем углу попытаться набрать название программы, и вот уже в поиске мы видим программу.
    Теперь я могу прямо из поиска взять и перетащить ее в корзину, таким образом ее удалив.
    Опять же, система попросит подтвердить наши действия. И программа была удалена, однако, мы говорили о том, что это не совсем правильный способ. 
    А еще программа, которая у меня установлена дополнительно, предупредила, что это не не самый правильный способ. 
    Давайте вернем программу через Комманд + З и удалим ее правильно. 
    Удалять будем при помощи другой специальной программы. 
    Запускаем АппКлинер. Теперь нам нужно просто перетащить программу, которую мы только что установили, в это окошко.
    Видите, как много мусора осталось бы, если просто перетащили это приложение в корзину. Нажимаем Ремонт, вводим наш пароль и программа удалена. Отлично.
    Мы разобрались, как удалять программы и разобрались, как это делать правильно.
    
    Теперь давайте разберемся с установкой и ручной установкой, для этого я сейчас попробую скачать какую-нибудь программу и поставить ее. 
    Найдем программу, которая позволяет удалять правильно программы с нашего компьютера. В поисковой системе набрала АппКлинер для Мак. 
    Переходим на сайт разработчика и скачиваем дистрибутив. Сразу хочу отметить, мы видим в браузере, что файл скачался. Как узнать, где теперь находится этот архив в нашей файловой системе?
    Все, что вы скачиваете через браузер и другие приложения, находится в папке Загрузки. 
    Либо мы можем щелкнуть по вот этой иконке архива ПКМ и выбрать пункт Показать в папке. И нас сразу перебросит в папку Загрузки, файлы всегда скачиваются именно в эту папку.
    Теперь достаточно распаковать архив, и вот уже наша программу установлена. Единственное, - ей совершенно не место в Загрузках, поэтому, чтобы было все правильно организовано на компьютере, я ее перенесу в то место, где она должна жить, т.е. в папку Программы.
    Для этого я просто захвачу ее левой кнопкой мыши и туда ее перенесу. В боковом меню у меня уже есть папка Программы, она закреплена, поэтому под рукой. Все, теперь программа в нужной папке.
    
    А как же нам, допустим, установить что-то, скачав образ диска?
    Мы касались уже расширения .дмг. Как, например, восстановить приложение из образа диска?
    Давайте поставим не менее полезную программу Пунто Свитчер: найдем ее и скачаем. 
    Предварительно убедитесь, что это версия для Мак, потому что ниже у нас есть ссылочка на версию для Виндоус. Файл скачался. ПКМ - Показать в папке - разархивируем. Мы видим файл с расширением .пкг. Берем и двойным щелчком запускаем его. Открылоь диалоговое окно, где мы по шагам пройдем этапы установки приложения. Достаточно нажимать кнопку Продолжить, дождаться установки и, опять же, ввести пароль. Все.
    Не прошло и минуты, как мы установили новую программу.
    Закрыть. Система предлагает нам исходный установочный файл, который мы скачали, переместить в корзину, чтобы он не захламлял нашу систему. Хорошо, отправляем его в корзину. Отлично. Вот мы установили Пунто Свитчер, и он у нас появился в верхнем меню. Это, кстати, программа, которая позволяет быстро переключать раскладку, если вы забыли и начинаете печатать латиницей вместо русского.
    
    Программы мы поставили. Теперь давайте посмотрим, как мы можем их обновлять.
    Все программы рано или поздно требуют обновлений.
    Первый, способ, как я уже рассказывала - через магазин ЭпплСтор. Запускаем и последним пунктом идут все обновления, которые необходимо загрузить для программ. 
    Мы видим, что некоторые программы были недавно обновлены, но одна требует нашего внимания. Здесь все достаточно просто. Нажимаем для программы, которая требует обновления, кнопку Обновить. 
    Все, программа обновлена. И список наш пополнился еще одной корректно работающей программой, которую мы только что обновили с помощью АппСтор.
    
    Но что делать, если вы устанавливали программу не через АппСтор, а как мы до этого делали, когда скачивали с сайта разработчика и устанавливали в ручном режиме?
    Достаточно запустить программу и посмотреть, есть ли к ней обновления. 
    Давайте запустим АппКлинер, который не так давно поставили.
    Программы - АппКлинер. Видим сейчас предупреждение. 
    Не пугайтесь, дело в том, что для безопасности системы и сохранения ваших данных Эппл отслеживает статус разработчика, и, если он не входит в список доверенных разработчиков, одобренных и т.д, у вас всегда будут возникать такие предупреждения. Дальше уже ваша ответственность, открывать это приложение или нет.
    Ничего страшного нет, нажимаем Открыть. И теперь давайте посмотрим, требует ли наша программа каких-либо обновлений. Как это увидеть?
    Нам достаточно перейти в верхнее меню программы. Каждый раз при запуске программы, если я переключусь на Файндер, у нас будет одно меню, а если переключилась на АппКлинер - другое меню. 
    И здесь мы выбираем пункт либо на русском Проверить обновления, либо на английском. Выбираем этот пункт, и он проверяет, нужно ли обновлять эту программу. Нет, выяснилось, что эту программу обновлять не стоит, потому что мы ее не так давно установили и она достаточно свежая. Значит, наша задача решена.
    
- **********Итоги**********
    
    Итак, мы немного погвоорили о МакОС, коснулись разных аспектов. Конечно, об этой ОС можно говорить бесконечно долго: там много полезных фишек и функций. Это был краткий экскурс. Я работают с этой традиционной системой с 2007 года, когда у меня впервые появился собственный Мак, и хочу вам сказать, что за эти годы я не разочаровалась в данной системе. Надеюсь, вам она тоже понравится, и вы будете получать удовольствие от работы с ней. 
    

### **************Урок 8. Архивирование и разархивирование в МакОС и Виндоус**************

- ********************План урока********************
    
    Итак, сегодня на уроке:
    
    1. Узнаем, что такое архив
    2. Выясним, какие бывают архивы
    3. Научимся архивировать и разархивировать файлы.
    
    И для начала разберемся в терминологии, чтобы нам было проще говорить на одном языке.
    
- ********************************Что такое архив?********************************
    
    Наверняка вы сталкивались с ситуацией, когда друзья с отдыха присылают вам фотографии на почту. Вы открываете письмо и вместо кучи фотографий видите один файл в непонятном формате. Как его смотреть, открывать, и где, собственно, фотографии? Скорее всего, вы получили архив. 
    Выясним, что это такое, и разберемся, как с этим работать.
    
    Официально архив - это файл, который содержит в себе один или несколько файлов, папки, а также метаданные: дату изменения, размер, уровень сжатия и прочее. Опишем архив простыми словами.
    
    Представьте такую ситуацию, с которой вы наверняка уже сталкивались, переезд.
    У вас масса вещей. Если переносить каждую вещь по одной, это займет довольно много времени и очень неудобно. При переезде мы берем коробку и складываем туда вещи. Коробку запаковываем и несем в машину.
    Так выглядит и архив. Мы также укладываем туда необходимые файлы, только они еще там и сжимаются, уменьшаются в размере, чтобы спокойно, без каких-либо ограничений, пересылать их по почте, отправлять на сайт и тд.
    
- **********************************************************************Что такое архивирование и архиватор**********************************************************************
    
    Архивирование - это как раз процесс упаковки, сжатия наших файлов, когда мы их собираем в один контейнер и сжимаем, превращая в архив. 
    Разархивирование - обратный процесс - распаковка нашей коробки с вещами, когда открываем ее и начинаем что-то оттуда доставать.
    
    Архиватор - программа, которая помогает нам в этом процессе. Она как раз предназначена для упаковки файлов, их сжатия и прочего. Мы можем запаролить наш файл с архивом и выбрать посредством архиватора уровень сжатия. 
    Архиваторы бывают разные, мы рассмотрим самые популярные, но чуть позже.
    
- ****************************************Какие бывают архивы?****************************************
    
    Узнаем, какие бывают архивы. При переезде коробки бывают разные: бумажные, пластиковые, деревянные ящики или даже металлические контейнеры. Так и архивы бывают разных форматов и разных назначений.
    
    Например, для системы Виндоус используется формат .ехе, это самораспаковывающийся файл. Вы дважды кликаете на него мышкой и в мгновение ока файлы распаковываются.
    
    Есть и многотомные архивы. Когда архив большой, т.е. большой объем, например, мы переезжаем из квартиры или загородного дома, нам надо распределить вещи по коробкам. Получается многотомный архив. Т.е. распределяем архив по файлам определенного размера, который задаем. И далее, запуская один файл, разархивируем весь наш контейнер с файлами.
    
    Для безопасности мы также можем устанавливать пароль на архив. Например, если наш архив попадает в чужие руки, его было бы невозможно открыть и посмотреть. Опять же, о том, как сделать такие архивы, поговорим позже.
    
- **********************************************************************************Как архивировать и разархивировать файлы?**********************************************************************************
    
    Разберемся, как архивировать разархивировать файлы. 
    Для этого есть три способа. 
    Первый способ - воспользоваться встроенной в ОС программой, утилитой, которая там уже есть по умолчанию. 
    Второй вариант - поставить на свой выбор специальную программу-архиватор. Они отличаются по функциям и интерфейсу, поэтому мы можем подобрать любую удобную нам программу. 
    И третий способ - когда мы не привязываемся к установленной у нас системе, а используем онлайн-сервис.
    
    Теперь узнаем, какие архиваторы наиболее популярны для ОС Виндоус.
    В тройку лидеров входят ВинРАР, ВинЗип и 7-Зип. Это программы, которые обладают достаточно широкой функциональностью и удобным интерфейсом, что немаловажно.
    
    А сейчас перейдем от теории к практике. Посмотрим, какие же форматы файлов и архивов вы можете встретить, чтобы знать, как с ними работать.
    
    1. Первый формат, он же самый распространенный и популярный - формат ЗИП. с ним работают практически все архиваторы.
    2. Второй формат - это РАР, тоже очень распространенный.
    3. Третий формат - 7-Зип, с ним работают не все архиваторы, это менее распространенный формат.
    4. Формат ехе - это самораспаковывающийся формат, но только для Виндоус. МакОС его не поддерживает. Для его открытия достаточно двойного щелчка по файлу, и файлы, которые содержатся в этом архиве, самораспакуются. Поэтому он называется самораспаковывающимся файлом.
- **************************************Практика. Способ №1**************************************
    
    Перейдем к первому способу для архивирования и разархивирования файлов.
    Чтобы заархивировать файлы, представьте, что вас попросили заархивировать файлы и прислать их по почте. Или вам надо заархивировать документы и прикрепить их к какому-то заявлению, например, в Госуслугах.
    Первый способ сделать это - воспользоваться встроенной утилитой, программой, которая уже есть в вашей ОС.
    Для этого выделяем все файлы, зажав их ЛКМ, нажимаем ПКМ по выделенным файлам и выбираем пункт Сжать в зип-файл - буквально за секунду появился архив. Зададим ему любое понравившееся название и нажмем Ввод - наш архив готов. Все очень просто.
    
    А теперь разархивируем получившийся архив.
    Чтобы эти файлы не мешали, удалим их. Потому они нам не нужны и находятся внутри файла с архивом. Теперь они упакованы в коробку.
    Можно дважды нажать на этот файл, и он распакуется, либо ПКМ вызвать контекстное меню и выбрать пункт Извлечь все. Нажимаем. Он спрашивает нас, а куда именно нам распаковать содержимое. Не будем менять местоположение, сейчас это нужная нам папка.
    Но если потребуется распаковать папку в определенное место, нажимаем на Обзор и выбираем необходимую папку для распаковки наших файлов. Теперь, когда мы указали путь, где будут лежать распакованные файлы из архива, нажмем на кнопку Извлечь - наши файлы на месте.
    Все, что мы упаковали, разархивировалось. Это первый способ.
    
- **************************************Практика. Способ №2**************************************
    
    Второй способ - воспользоваться программами-архиваторами. 
    Мы говорили о популярной программе, которая называется ВинРАР. 
    Запустим ее. Разберемся, как здесь упаковать свои файлы, что для этого требуется, и каким образом новичку начать быстрее работать с архивами.
    
    Выбираем Меню - Мастер - Создать новый архив, т.к. нам надо заархивировать файлы, папки и создать новый архив.
    Далее система нас спрашивает, где взять собственные файлы. Выбираем папку, где лежат наши файлы. И выбрав первый элемент, папку с файлами, зажимаем Шифт и щелкаем мышкой по последнему файлу. Таким образом, мы покажем программе, что нам нужны все файлы, которые здесь есть.
    
    ********************Внимание! **************************************************************************************Там находятся файлы разных форматов: это и картинки и пдф-файл, а также папка, где лежат файлы. Для архивации абсолютно неважно, что вы упаковываете. В любом случае он сделает из этого архив.****************************************************************************************
    
    Выбрали файлы. Мы можем выбрать все, только один файл или два файла. Вернемся к исходной позиции, выберем все и нажмем Ок. Теперь система сросит, как же назвать наш новый архив. Назовем его Способ №2.
    Нажав на кнопку Обзор, укажем программе-архиватору, куда именно положить архив. Посмотрим - он планирует положить все в папку Архивы и архиваторы. Попросим его положить все в папку Способ №3 и нажмем Сохранить. Путь указали, теперь снова нажмем Далее.
    
    Мастер хорош тем, что проводит нас как бы за ручку по всем этапам. 
    Выбрали файлы, назвали архив, определили путь, куда положить архив. Далее идут дополнительные настройки. Он может удалить файлы, которые у нас были. Их мы архивируем при архивации. Поставим галочку и посмотрим, что произойдет - можем создать самораспаковывающиеся файлы в формате .ехе. Запомним, что этот формат используется только для ОС Виндоус.
    
    **************Важно! ***************************************Не рекомендуется делать самораспаковывающиеся архивы, потому что иногда почтовые клиенты или антивирусы не пропускают такие файлы из-за содержащихся в них угроз.*****************************************
    
    Мы выяснили, что такой формат есть, но лучше использовать наиболее распространенные формате - ЗИП или РАР.
    
    Можно дополнительно защитить наш архив от посторонних глаз.
    Поставим пароль, например, 111 и нажмем Ок. Еще мы можем разбить наш архив на несколько архивов, если он большой и не помещается в один, не принимается почтой, а там есть ограничения до 10 Мб. Его можно “порубить” по кускам, разложить на отдельные коробочки - на отдельные архивы. Эту опцию выбирать не будем, потому что архив у нас малюсенький, но такая возможность здесь тоже есть. Теперь все готово - нажимаем кнопку Готово. Файлы, которые были в этой папке, из-за поставленной нами галочки удалились. Теперь они находятся внутри нашего архива Способ №2.
    
    Архив мы создали. Он весит довольно мало, и теперь его можно смело отправлять по почте, записывать на флешку, в общем, делать с  ним все, что захотим.
    
    А сейчас посмотрим, как его разархивировать. Это обратный процесс. Опять же, выбираем **********мастер.********** Теперь нам надо все распаковать.
    
    Если ранее мы архивировали файл, то сейчас будем его разархивировать. 
    Нажимаем на эту опцию и выбираем, какой именно файл хотим разархивировать. Выбираем Способ №2 и нажимаем Далее. 
    Он говорит, что файл найден, но не знает, куда распаковать содержимое этого файла. Здесь указан путь. Если путь не устраивает, опять же, через кнопку Обзор его можно поменять.
    
    Например, нас предложенный вариант не устраивает. Немного его подкорректируем. Для этого потребуется папка Способ №2. Выбираем папку и нажимаем кнопку Готово. Но все не так просто.
    Ранее мы устанавливали пароль на архив 111. При попытке распаковать этот архив он просит нас ввести пароль. И если ввести пароль неправильно, допустим 1111, и нажать Ок, он выдаст ошибку, что пароль неверный. Т.е. посмотреть содержимое этого архива мы не сможем. Введем правильный пароль, чтобы распаковать его - 111, и вуаля, наши файлы снова свободны от архива. Архив остался, а все, что содержалось внутри него, выгрузилось в папрку Способ №2.
    
    Теперь посмотрим, как работает другая программа, не менее популярная. 
    Она называется ВинЗип. У нее несколько другой интерфейс. Поэтому обычно мы и выбираем программу, которая нам ближе и понятнее. Итак, разберемся, как же с ней работать.
    
    У ВинЗип в меню есть инструменты для быстрого создания файлов. Но сейчас мы не будем усложнять задачу, делая самораспаковывающийся или многотомный файл. Просто возьмем все наши файлы из этой папки и выделим их мышкой. Зажмем ЛКМ, выделим все файлы и перетащим их в серединку, в белое поле. Затем развернем это поле, чтобы все стало понятнее. Перед нами возникли файлы, которые мы перетащили. 
    Теперь можем выбрать опции, удалить файлы после создания архива, чтобы не путаться в архивированных и не архивированных файлах, а также уменьшить их и тд. Достаточно. Нажимаем Сохранить как и выбираем, куда архиватору надо положить созданный архив. Чтобы не возникло путаницы, выберем Способ №2. Нажимаем Сохранить. Наш архив готов.
    
    Однако, он нас не спросил, как его назвать, но файл достаточно просто переименовать ПКМ. Переименуем наш файл и назовем его Архив. 
    Архив готов, мы создали его, воспользовавшись программой ВинЗип.
    
    А теперь посмотрим, как посредством этой программы распаковать наш архив. Итак, возвращаемся к нашей программе и выбираем файл. Выбрать файл можно через Меню - Файл, либо через боковое меню. Выбираем Этот компьютер, созданную нами папку - Способ №2, и опцию Открыть файл зип. Программа предложит выбрать:
    
    1. Распаковать файлы в текущую папку
    2. Распаковать файлы в документы
    3. Распаковать в ту папку, которую выберем
    4. Не распаковывать файлы.
    
    Выберем Распаковать в ту же папку, откуда мы их взяли, а именно в папку Способ №2. Видим, что наш архив распаковался в выбранную папку - Способ №2. Перед нами - наша папка, где лежат три фотографии и пдф-документ. 
    Окей, мы разобрали два способа, посредством которых можем запаковать и распаковать файлы.
    
- **************************************Практика. Способ №3**************************************
    
    Теперь разберем третий, универсальный способ - онлайн-сервис. 
    Чтобы найти онлайн-сервис, который нас устроит, достаточно набрать в поисковой строке в Яндексе “Архиваторы онлайн”. Вам заранее не сказано, каким именно онлайн-архиватором надо пользоваться, потому что эти сервисы то появляются, то снова исчезают. Поэтому всегда лучше иметь под рукой актуальную информацию.
    
    Берем первый в списке онлайн-архиватор, который у нас появился. Здесь достаточно выбрать и перетащить файлы, и файл сохранится на наш компьютер. Далее открываем наши файлы. 
    Единственный минус онлайн-архиваторов - неумение работать с папками. Т.е. они могут упаковать множество файлов, но если среди файлов есть еще папка с файлами, архиватор не справится с этой задачей, поэтому имейте ввиду. В новом списке с файлами папки, как видите, больше нет.
    
    Теперь выделим все файлы, которые хотим заархивировать и, зажав их ЛКМ, перетащим в область, где написано Перетащите или Выберите файлы здесь. 
    Можно нажать на кнопочку Выберите файлы и указать подходящую папку или сделать все быстрым перетаскиванием. Файлы перенеслись, и мы видим, что готовый файл с архивом скачался. Буквально секунда, и архив готов.
    Применяем это, если у нас нет специальных программ, и в нашу ОС не встроена утилита архивирования.
    
- ********************Заключение********************
    
    Подведем итоги.
    Мы поговорили о том, что такое архив, архивирование и разархивирование.
    Узнали, кто такой архиватор, и то, зачем он нужен. Далее разобрались с форматами архивов и даже разобрали три способа, посредством которых можно как создать архив, так и распаковать имеющийся.
    

### **************Урок 9. Организация рабочего пространства**************

- ********************План урока********************
    
    Сегодня на уроке:
    
    1. Узнаем, что такое Notion
    2. Разберемся, какие задачи решаются этой программой
    3. Научимся создавать собственные документы внутри
    4. Выясним, как пользоваться шаблонами, что такое блоки, какими они бывают
- ********************************Что такое Notion********************************
    
    Представьте ситуацию: у вас есть закладки интересных сайтов, непрочитанные книги, список непрочитанных книг, которые вы где-то храните. Есть заметки, списки дел, например. Вас окружает большой объем информации, масса, и вы храните ее в разных приложениях. И эта масса приложений, масса информации создают тревогу и стресс, когда вдруг что-то требуется найти.
    
    Notion - программа, задуманная разработчиками для замены ряда программ, чтобы вы не мучились перескакивать с программы на программу, а хранили все в одном месте. И предполаагалсь она как рабочий инструмент для ведения личных дел и заметок. 
    При необходимости она, конечно, может заменить ту же Еверноут, программу для заметок или, к примеру, Трелло.
    Трелло используется для отслеживания статуса задач. Или, например, программу Гугл Докс, которая позволяет работать с таблицами и документами, хранить там информацию. Все это в себе объединил Notion
    
- ********************************Какие задачи решает Notion********************************
    
    Мы можем хранить в Notion документы, информацию, картинки и видео. 
    Создавать, например, собственную базу данных или базу знаний. 
    Допустим, вы обучаетесь чему-то, собираете материал и можете сохранять все это в Notion. Ввести тот порядок, который вам удобен и понятен, управлять задачами, рабочими и личными, и проектами.
    Можно создавать таблицы различного назначения. И, опять же, что немаловажно, в Notion удобно хранить ссылки из браузера. Все это можно систематизировать и хранить так, как удобно.
    
- ********************************Плюсы и минусы Notion********************************
    
    Конечно же, как у любой многофункциональной программы, у Notion есть свои плюсы и минусы. Разберемся, что в ней есть положительного и не очень.
    
    ************Плюсы:************
    
    1. Первое положительное качество Notion - это, конечно, многофункциональность.
    Когда вы заглянете внутрь, то удивитесь, сколько возможностей предоставляет эта программа. Но это считается и минусом, т.к. иногда кажется, что функций слишком много, и от них просто идет кругом голова.
    2. Еще один плюс - быстрый импорт файлов. Т.е. мы можем подключаться к различным сторонним сервисам и выгружать файлы оттуда прямо в нашу рабочую среду в Notion.
    3. Гибкость этой программы - Notion заточен под решение разных задач. Т.е. вы можете не только работать в нем, но и вести какие-то личные заметки, проекты и так далее. Эта программа очень гибкая в этом плане.
    4. Еще один немаловажный плюс - простой дизайн. Заглянув внутрь, мы увидим, что Notion похож на белый лист, чтобы ничто не отвлекало от решения задач.
    
    Теперь перейдем к ******************минусам.****************** Они, конечно же, тоже есть
    
    1. Слишком много функций, я об этом уже сказала. Но рекомендую не пытаться охватить сразу все, попробуйте разобраться в каком-то одном направлении, например, создать, какой-нибудь список, чек-лист и поработать с ним, или заметки. Постепенно расширяйте список своих возможностей.
    2. Второй момент - нет русскоязычной версии. Но, с другой стороны, это тоже плюс, потому что для нас это прекрасная возможность немного прокачать английский.
    3. Третий минус - программа платная для командной работы. Но в принципе для решения каких-то личных задач она вполне подходит. Вы можете делиться своими отдельными документами по выбору с кем-то без проблем в рамках бесплатной версии.
    
    Теперь разберемся, как же в Notion работать.
    
- ********************************Как начать работать в Notion********************************
    
    Чтобы начать работать в Notion, есть несколько вариантов.
    Мы можем зайти на официальный сайт и скачать программу, установить ее на свой компьютер, программа поддерживает платформы Виндоус и МакОС. 
    Можно скачать мобильное приложение либо ничего не ставить и работать просто через браузер. Чтобы я порекомендовала?
    
    Notion работает по принципу единой учетной записи. Это значит, что вы регистрируетесь и потом работаете с любого устройства под личной записью. Поэтому для удобства можете установить программу на компьютер или поставить приложение на телефон. Если что-то срочное, телефон с приложением всегда под рукой. Не всегда компьютер находится так близко, поэтому идеальный вариант - установленное на телефон приложение. Если работаете не со своего компьютера, где Notion не установлен, можете работать с этой программой через браузер. Как раз третий вариант я вам и покажу.
    
    Первые шаги, чтобы приступить к работе с Notion - это, конечно же, зайти на официальный сайт и зарегистрироваться. Я говорила, что принцип - это единая учетная запись. Далее заполняем информацию о себе и говорим, как будем использовать программу: это будет личное использование или командная работа. Напомню, для командной работы Notion - платный. Посмотрим, каким образом осуществляется регистрация.
    
    Переходим на официальную страницу Notion. 
    Справа в верхнем углу есть кнопка Гет стартед. Чтобы начать работать, нажимаем на эту кнопку и вводим данные. 
    Если у вас есть аккаунт в Гугл, то регистрация довольно простая. Т.е. мы просто кликаем на Зарегистрироваться при помощи Гугл. Таким образом, множество шагов нам проделывать уже не потребуется. Если аккаунта Гугл или Эппл нет, можете просто ввести свой мэйл и нажать на кнопку Продолжит с мэйлом. Далее система попросит ввести код, который придет на вашу почту, указанную при регистрации.
    
    На почту нам пришло письмо с кодом, который находится в серой зоне.
    Копируем этот код и вводим его, чтобы завершить регистрацию. Нажимаем кнопку Создать новый аккаунт. Отлично, код мы ввели. Теперь система просит нас ввести свое имя и пароль - вводим. 
    У Notion есть еще несколько вопросов к нам, ответим и на них.
    
    Первое, о чем спрашивает нас система - для чего мы собираемся ее использовать. Вы можете выбрать произвольную тему. Нас спрашивают, в какой роли мы будем в Notion - выбирайте, если используете для личного использования, последний пункт.
    Еще программа спрашивает, что мы планируем делать в Notion - просто ставим галочку и нажимаем Продолжить. 
    Теперь идет важный момент - мы должны выбрать, каким образом будем использовать Notion: работать в команде или использовать лично. 
    Выбираем Для личного использования, потому что работа команды, как вы помните, платная. 
    Поздравляю, вы зарегистрировались.
    
- ******************Онбординг******************
    
    Теперь разберемся со страницей, которая у нас открылась - это первая страница.
    Стартовая страница в Notion предназначена для более быстрого ознакомления с возможностями этой прекрасной программы.
    Здесь есть список, чек-лист, по которому вы должны пройти, попробовать все функции и поставить галочку, что ознакомились.
    К некоторым пунктам чек-листа прилагается видео, чтобы, опять же, упростить свою задачу. 
    Итак, посмотрим, что же нам предлагает сделать программа. Можете пройтись по всем чек-листам, если будет время, и в спокойном режиме все посмотреть, а я пока познакомлю вас с интерфейсом.
    
    Как я уже говорила, интерфейс Notion похож на белый лист, чтобы ничего не отвлекало вас от важных задач. 
    В левой части есть дерево страниц, которые уже созданы в этой системе. Они здесь для примера. Это разные типы страниц для решения задач. 
    Например, movie-лист. Развернем раздел Персонал хоум и нажмем на муви-лист. Посмотрим, что это за страница.
    Программа показывает нам, как можно хранить список фильмов, которые хотели бы посмотреть. И если мы что-то из списка уже посмотрели, то всегда можем перенести этот фильм в просмотренные. 
    Пусть вас не пугают английские заголовки, вы всегда можете что-то переименовать. О том, как работать с этими блоками, поговорим чуть позже. А сейчас продолжим знакомство с интерфейсом.
    
    Есть также страница с рецептами, ссылками на конкретный файл с рецептом и тд. Например, есть страница с задачами и журнал с записями. Эти страницы сделаны, чтобы помочь вам увидеть все возможности программы Notion.
    Если они мешают, и вы уже готовы создавать собственные страницы, всегда можете их удалить. Для этого достаточно навести курсор в левой части экрана на конкретный пункт, нажать на три точки и выбрать delete - страница окажется в корзине.
    
    Последний пункт в левой части меню - корзина.
    Это очень удобный элемент, потому что удаление страниц происходит в два этапа.
    Сначала страница попадает в корзину. Если мы вдруг по ошибке нажали на удаление, но передумали удалять страницу, то всегда сможем вернуть ее, нажав на стрелочку, и страница вернется на место.
    В этом меню мы можем также менять страницы местами - достаточно зажать ЛКМ страницу и перетащить ее в дереве документов на то место, куда хочется.
    
    В правой верхней части есть Share. Этот пункт позволяет делиться документами с коллегами, друзьями и так далее. Нажимаем на этот пункт, ставим галочку “Поделиться веб” и получаем ссылку, которую планируем отправить, чтобы поделиться именно этой страницей. Как видите, при наведении на пункты всплывают подсказки, т.е. система информирует, что будет если нажать на тот или иной пункт.
    
    В верхнем левом углу как раз находится наш аккаунт. Мы можем изменить наш тарифный план, разлогиниться, т.е. выйти из учетной записи или создать новый аккаунт. Как видите, все достаточно просто.
    
- **********************Работа с шаблонами**********************
    
    Теперь разберемся с шаблонами. Мне кажется, вы уже готовы перейти к этому шагу.
    
    ********************Шаблоны -******************** это страницы, которые специально созданы заранее для решения той или иной задачи. Их можно скопировать к себе, отредактировать на свое усмотрение либо использовать как есть, если все устраивает. 
    Шаблоны делятся на 2 группы: бесплатные и платные.
    Полный список можно посмотреть на сайте разработчика Notion. 
    А теперь посмотрим, где именно шаблоны располагаются внутри интерфейса программы.
    
    В левом меню один из трех предпоследних пунктов так и называется - темплэйтс. Нажмем на него и посмотрим, что будет.
    Открылось окно, где отображаются доступные нам шаблоны, причем шаблоны специально разделены на группы. 
    Например, для дизайнера, студентов или маркетинга. Т.е. чтобы быстрее найти необходимый шаблон, надо просто пройтись по нужной группе. Чтобы посмотреть все шаблоны, надо нажать на последнюю ссылку, находящуюся в правом меню - Browse more templates, и перейти на сайт разработчика Notion
    Так мы увидим весь список шаблонов.
    
    Для удобства пользователей шаблоны разделены на группы, и есть предпросмотры, чтобы посмотреть, что это за шаблон. Шаблоны бывают платными и бесплатными. 
    Если шаблон платный, мы увидим стоимость шаблона.
    Для бесплатных никакой пометки не будет. 
    Посмотрим что-нибудь из раздела Education (обучение), например, доску для студентов.
    
    Чтобы посмотреть, как выглядит шаблон, просто щелкаем по нему ЛКМ. 
    Здесь есть скриншоты для просмотра всей функциональности этого шаблона. И если он подходит под наши задачи, выбираем, куда его продублировать. 
    Он предлагает нам нашу доску. Нажимаем на Duplicated template, чтобы продублировать шаблон на свое рабочее пространство в Notion.
    Таким образом, достаточно легко и быстро, в один клик, мы скопировали понравившийся шаблон к себе в рабочее пространство.
    
    Обратите внимание, что в нашем списке страниц, которые появились после регистрации в Notion, прибавилась еще одна страница, которая так и называется - student dashboard. 
    Здесь есть масса страниц под различные задачи, блоки Музыка и Фильмы.
    Все, что нам не понадобится, мы всегда сможем удалить, вспомните три точки.
    Выбираем и нажимаем delete. Посмотрим, что представляет собой этот шаблон.
    Здесь есть информация по курсам, календарь с основными событиями, проекты и личная информация про музыку, клубы и прочее.
    
    Теперь, если какая-то страница больше не понадобится, можно ее удалить, а саму скопированную страницу переименовать на свое усмотрение. ПКМ, ренейм и вводим название - допустим, “Моя первая страница”.
    
- **********Блоки**********
    
    Мы подошли к редактированию шаблона. И у нас появляется такое понятие, которое присуще Notion - блоки.
    Разберемся в том, что такое блоки и какими они бывают, чтобы довести этот шаблон до ума.
    
    Блок в Notion - это любая часть содержимого, которая стоит на нашей странице. Это может быть текст, ссылка, список, элемент чек-листа, картинка, иконка и все что угодно. По сути, в Notion страница как раз и состоит из таких блоков, которые мы упорядочиваем по своему усмотрению.
    
    Посмотрим, какие блоки нам доступны. Есть несколько типов блоков в Notion. Базовые:
    
    1. Inline
    2. Database - блоки, связанные как раз с формированием базы данных
    3. Media - для подключения видео
    4. Embeds - блок для интеграции сторонних приложений, которые мы можем также прикреплять к Notion и использовать их функции
    
    Разберем на практике, что такое блоки и как отредактировать шаблон, который мы скопировали из библиотеки Notion.
    Первый блок, который вы видите на странице - картинка.
    Можете ее изменить при наведении на картинку курсора - у вас появится всплывающее меню, предлагающее изменить обложку страницы. 
    Нажимаем на него и используем любое изображение из библиотеки, которое предлагает нам Notion. Либо выбираем второй пункт и загружаем какую-то картинку с нашего компьютера или используем бесплатный фотобанк unsplash. 
    В поиске можно ввести, например, что-то связанное с компьютером, и получить выборку фотографий. Выберем соответствующую картинку. На нее достаточно нажать и обложка изменится.
    
    Следующий блок, который всегда есть на каждой странице - иконка самой страницы. Здесь мы тоже можем ее поменять - достаточно кликнуть и выбрать из списка эмодзи либо загрузить какую-то свою иконку.
    
    Далее первым пунктом всегда идет заголовок страницы. 
    Чтобы добавить блоки, надо навести курсор на следующий блок, первый блок с заголовком неизменный, и отредактировать его на свое усмотрение, допустим, поставить большую букву М
    
    Следующий блок - описательный. 
    Если мы хотим добавить какой-то блок после заголовка, надо навести курсор на этот блок, он текстовый и нажать плюсик. Получаем меню с доступными блоками в Notion.
    Либо можем нажать, например, слэш и начать вводить название какого-то блока. Допустим, list - получим пример ту-ду лист. Это список, где можно ставить галочки по выполнению того или иного пункта.
    Добавим еще какой-нибудь блок, нажмем на плюсик и посмотрим на все блоки в выпадающем списке. 
    Итак, первый блок - это базовые блоки, он содержит блок с текстом. Т.е. если хотите разместить какой-то текст, блок со ссылкой на страницу, заголовки, таблицу, нумерованные или маркированные списки, разделители и тд, это базовые блоки, часто используемые в Notion.
    
    Следующий раздел - Inline. 
    Посредством этого блока мы можем встраивать какую-то стороннюю информацию.
    
    Далее идет блок Database. 
    Все, что связано с сохранением информации в определенную базу данных, различные варианты, таблицы, галереи, списки, вы найдете здесь.
    
    Следующий достаточно большой блок - Медиа. 
    Если надо вставить картинку, кликаем на блок Имэйдж и выбираем картинку.
    Либо загружаем ее с компьютера кнопкой choose on image или выбираем из бесплатной фотобиблиотеки любую картинку, которую можем свободно использовать. Выбираем картинку - появилась фотография.
    
    Теперь посмотрим, что еще здесь есть. 
    Мы можем встраивать закладки, видео- и аудиофайлы, вставлять код в специальное обрамление и давать ссылки на загружаемые файлы.
    
    Последний и менее важный блок с блоками - Embeds.
    Это то, что встраивается из сторонних сервисов. Мы можем встроит, например, Гугл Док из Гугл Драйв, Твиттер, карты и даже интегрироваться с фирмой. 
    Здесь довольно большой список приложений. с которыми можем соединить наш Notion.
    
- **********************************Создание страницы**********************************
    
    Теперь создадим нашу первую страницу.
    Я показала, как можно изменить шаблон, допустим, изменив блоки, добавив блоки или удалив какие-то ненужные блоки. Т.е. чтобы удалить блок, наводим курсор на блок, нажимаем на появившиеся 6 точек и выбираем delete - блок удалился.
    Либо можно просто выделить блок, зажав его ЛКМ, нажать на компьютере клавишу Бэкспейс или Делит и удалить лишнюю информацию со страницы. Все довольно просто.
    
    Еще блоки можно перемешать.
    Мы говорили, что страница в Notion - не что иное, как набор блоков, упорядоченных определенным способом. Перенесем эту картинку выше к заголовку.
    Для этого надо навести курсор на блок с картинкой, нажать на 6 точек ЛКМ и, не отпуская, перетащить этот блок выше. Таким образом, мы меняем порядок блоков на странице.
    
    Теперь поэкспериментируем и создадим страницу. Для этого свернем все страницы, чтобы они нас не отвлекали.
    Перед нами - пункт создания новой страницы. Нажимаем на него - появился белый лист. Можем начать творить.
    
    Любая страница начинается с заголовка. 
    Озаглавим ее. Для красоты можно добавить обложку нашей страницы, чтобы не было так много белого места, но это необязательно. Подводим курсор к верхней части и выбираем Добавить обложку. 
    Notion случайным образом добавляет картинку, кликаем на уже знакомый пункт “Изменить обложку” и выбираем что-нибудь из цветов. У нас будет нейтральный фон. Можем добавить иконку или комментарий к этой странице.
    Заголовок есть, теперь набросаем блоки.
    
    Чтобы добавить блок на нашу страницу, щелкаем под заголовком.
    Появился блок, он будет по умолчанию текстовый. Уже можно вводить текст.
    Щелкая после этого блока, автоматически добавляем следующий блок.
    И, опять же, по умолчанию он предназначен для хранения текста до следующего абзаца.
    Если мы не ошиблись, и, например, нужен не просто текст, а подзаголовок, нажимаем на 6 точек слева от блока и вызываем дополнительное меню и выбираем пункт, который позволяет менять тип нашего блока. Пусть это будет заголовок третьего типа. Отлично. Был текст - стал заголовок. Добавим еще какой-нибудь текст.
    Посмотрим, как еще можно работать с текстом. 
    Например, нам надо, чтобы заголовок был цветным. 
    Для этого просто выделим весь текст, после чего появляется всплывающее меню с помощником. Он как раз позволяет быстро изменить тип нашего блока - например, заголовок третьего типа на второй, или сделать из него элемент списка или ссылку на страницу и т.д.
    
    Поменяем на заголовок побольше. Можно сделать заголовок более жирным, наклонным и изменить его цвет. 
    Это меню помогает быстро работать с конкретным блоком. 
    Добавим еще какой-нибудь блок для примера. После блока надо добавить текст, у нас будет таблица.
    Появилась простенькая табличка, состоящая из двух колонок и трех строк, которую мы можем всегда расширить, нажав на плюсик или удалив лишнее. 
    Мы готовы вводить текст в таблицу. 
    Как видите, все просто.
    Вы сами творите свою таблицу, а инструменты по оформлению и изменению типа блока - всегда под рукой.
    
    Вспоминаем, что блоки можно менять местами, если хотите представить информацию по-другому. Просто зажимаем 6 точек от конкретного блока и тащим его выше или ниже в зависимости от задумки. 
    Это был легкий экскурс в Notion.
    
    Я уже говорила, что Notion - многофункциональная программа.
    Рассказывать о ней можно часами. Но я предлагаю вам начать с простого. Подумайте:
    
    - Для каких задач вам может понадобиться Notion
    - Хотите ли вы хранить там статьи, лекции, фотографии или список задач
    
    Опробуйте эту функцию, а дальше - расширяйте свои возможности.
    
- ********************Заключение********************
    
    Подведем черту под тем, какие все-таки задачи решаются в Notion.
    
    Если вы студент, можете хранить конспекты лекций, составлять расписание и ставить дедлайны. Например, когда вам надо сдать ту или иную работу в срок, воспользуйтесь календарем в Notion. Можно также вести личный блок, закрытый от посторонних глаз, или ежедневник.
    
    Если работаете в команде, Notion прекрасно подойдет для составления дорожной карты по движению Проекта с указанием этапов, крайнего срока и прочего. Можете делиться с командой документами, у вас будет единая рабочая среда. В Notion можно прикреплять документы из сторонних сервисов, т.е. интегрировать их, к примеру, из Гугл Докс и так далее.
    
    Если преподаете, можете, опять же, хранить свои лекции в Notion, систематизировать их, хранить информацию о студентах, учениках и составлять свое онлайн-расписание. Notion поможет и в этом.
    
    Теперь подведем итоги:
    
    1. Мы познакомились с Notion
    2. Посмотрели, для каких задач подходит эта программа
    3. Узнали, как зарегистрироваться и работать внутри этой программы
    4. Разобрались с шаблонами и блоками, которые предлагает нам Notion
    
    Надеюсь, это занятие было для вас полезным, и вы будете использовать представленный инструмент в работе. До новых встреч.
    

### ****************Урок 10. Слепая печать****************

- ********************План урока********************
    
    Сегодня на уроке:
    
    1. Поговорим про полезность метода слепой печати, иначе зачем нам вообще его осваивать?
    2. Узнаем, что такое слепая печать, и как этот метод освоить
- ************************************************************************************Полезность обладания навыком слепой печати************************************************************************************
    
    А теперь поговорим про полезность обладания этим навыком. Посмотрим, чем он поможет в реальной жизни.
    
    В современном мире умение быстро печатать - важный навык. 
    Мы, так или иначе связаны с клавиатурой. Она есть на компьютере и на смартфонах. Способ ввода текста, при котором мы не смотрим на клавиатуру и используем все наши 10 пальцев для печати, как раз и называется методом слепой печати.
    Результаты исследования скорости печати показали, если при скорости примерно 40 слов в минуту вы повышаете ее хотя бы до 70 слов в минуту, экономите целых четыре дня за год своей жизни.
    
    Представьте четыре дня. Так зачем же нам осваивать этот метод?
    Конечно же, после усвоения метода увеличится скорость набора текста. Вы сможете быстрее отправлять сообщения, выполнять работу и общаться с друзьями, коллегами и т.д.
    Этот метод позволит вам делать меньше ошибок и опечаток в тексте. Вы будете меньше уставать от работы за компьютером, потому что появится возможность не сосредотачиваться и не смотреть на клавиатуру и монитор. 
    Это требует в 2 раза больше усилий. Еще вы сможете набирать текст даже в плохо освещенной комнате. И, конечно же, метод слепой печати позволяет сохранить здоровье - сберечь зрение и тонус шеи, сохранить осанку при использовании всех 10 пальцев. Это благотворно влияет на суставы.
    Надеюсь, я вас убедила, что метод слепой печати стоит освоить.
    
- ********************************************************************Как научиться методу слепой печати********************************************************************
    
    Разберемся, как научиться этому методу.
    
    Сначала мы должны начать с принятия правильной позы. Для этого надо сесть прямо, ровно держа спину. и согнуть локти под прямым углом. Мы должны расслабиться, эта поза благотворна для всего нашего тела. Такая поза способствует здоровой спине, шее и остальному. Поэтому начинаем с принятия правильно позы.
    
    Шаг второй, который делаем навстречу методу слепой печати - занимаем стартовую позицию наших пальцев.
    Это исходная позиция, с нее начинаем и всегда к ней возвращаемся - такая линия старта и финиша. Называется она основной строкой.
    Кладем 4 пальца левой руки и правой руки на букву, указанные в иллюстрации, и занимаем стартовую позицию. На клавишах А и О можете нащупать некоторую выпуклость. Это некий сигнал, что вы правильно заняли позицию, пальцы располагаются правильно - клавиши находятся под указательными пальцами.
    Большие пальцы, если не знаете, куда их день, лучше расположить на пробеле.
    Если заняли стартовую позицию, тогда двигаемся дальше.
    
    Третий немаловажный шаг заключается в изучении клавиатуры. 
    Согласно методу слепой печати, у каждого пальца левой и правой рук есть своя зона клавиш. На иллюстрации показаны важные правила:
    
    1. Мы должны нажимать на указанные клавиши только теми пальцами, за которым они закреплены.
    2. Мы всегда должны возвращаться в исходную позицию на основную строчку
    
    Пока набираем текст, стараемся не смотреть на клавиатуру, а представлять расположение клавиш. Нам также поможет установленный ритм - не торопитесь, выберите тот ритм, в котором будет удобно работать.
    
    Следующий шаг - скорость печати. Новички почти всегда делают одну и ту же ошибку - пытаются сразу печатать с большой скоростью. Это приводит к ошибкам, использованию не тех пальцев и т.д.
    Не стремитесь ускориться, скорость возрастет сама по себе, поэтому нет смысла наращивать ее вначале. 
    На первом месте стоит качество, а не скорость.
    
    Старайтесь также проглядывать на одно-два слова вперед.
    Если чувствуете, что устали или раздражаетесь, стало появляться много ошибок, сделайте паузу.
    **************************************Самое важное в освоении этого метода - РЕГУЛЯРНАЯ ПРАКТИКА.**************************************
    Если мы хотя бы раз в день будем заниматься по 15-20 минут, возникнет эффект мышечной памяти, и этот навык закрепится и станет срабатывать автоматически.
    
    В США и Англии метод слепой печати преподается как отдельный предмет, поэтому большой процент населения обладает этим навыком. Чтобы немного себе помочь, заклейте клавиши, например, скотчем. Или положите распечатанный вариант этой схемы, к примеру, рядом с цветами, чтобы ориентироваться и вспоминать клавиши, пока не запомните.
    
- **********************************************************Онлайн-сервисы для тренировки**********************************************************
    
    Раз мы заговорили про практику, важно, чтобы она не была однотонной и мучительной. Хотя мы и взрослые, нам всегда интересно поиграть. Для лучшего освоения этого метода предлагают воспользоваться онлайн-сервисами.
    
    Есть программы, которые устанавливаются на компьютер, а можно вообще ничем не пользоваться и просто ежедневно практиковаться. Но интереснее воспользоваться каким-то сервисом, который стимулирует к дальнейшему прохождению, постепенно наращивая сложность. Предлагаю рассмотреть несколько таких сервисов. В любом случае протестируем все и остановимся на более удобном.
    
    Первый сервис - Typerun. 
    Это очень минималистичный и удобный интерфейс, в нем ничего не отвлекает, есть словами для изучения иностранных языков, в том числе языков программирования. Тайпран позволяет тренировать метод слепой печати. Это бесплатный онлайн-сервис.
    
    Еще один сервис - ****************************Typingstudy.**************************** Обучение происходит на 108 языках, и можно проверить скорость печатания. Есть игры, которые позволяют немного разнообразить наше обучение. Обучение идет от простого к сложному, т.е. постепенно наращиваются уровни. 
    Это бесплатный онлайн-сервис, рекомендую попробовать.
    
    Есть отечественный и довольно знаменитый онлайн-тренажер в этой сфере, который называется **********************************************“Соло на клавиатуре”.********************************************** Из плюсов:
    
    - перед глазами - клавиатура с раскрашенными в разные цвета клавишами
    - можно устраивать гонки по клавиатуре и даже получить за это электронный сертификат
    
    У нас есть 5 занятий, которые доступны бесплатно. Думаю, этого достаточно, чтобы оценить, удобно вам или нет работать в этом сервисе. 
    
    Я не могла обойти стороной еще один сервис, который называется “Клавогонки”. Это не совсем онлайн-тренажер слепого метода печати, скорее, тренажер формата онлайн-соревнований. Тренажер подходит, когда вы уже более менее освоили метод слепой печати, и вам надо его отшлифовать. Здесь мы можем посоревноваться с соперниками. Это бесплатный  сервис, но можно оформить премиум-аккаунт, что расширит ваши возможности.
    
    И еще один сервис, довольно своеобразный, потому что разработан специально для программистов - [typing.io](http://typing.io) 
    Это значит, что вы будете набирать код на разных языках программирования, какие выберете. Если вы программист и хотите ускорить набор кода, этот сервис точно для вас. Есть анализ опечаток, реальный код, реальная практика и бесплатная версия. Поэтому, если у вас есть подходящие задачи, рекомендую этот сервис.
    
- ********************************************Что мы получим в итоге********************************************
    
    Мы рассмотрели метод слепой печати. Принцип достаточно простой, как вы уже поняли: главное - соблюдать правила и постоянно тренироваться. 
    Этот метод приведет нас к снижению психической утомляемости, мы перестанем сильно уставать от компьютера, сохраним правильную осанку и зрение, т.к. не будем смотреть на клавиатуру, опустив голову. Делая это постоянно, сохранится здоровье нашей спины, а также увеличится наша производительность, что немаловажно.
    
    Чтобы действительно освоить этот навык, потребуется тренироваться 2-3 раза в день. По времени - на ваше усмотрение, но суммарно - не менее 15-20 минут в день
    
    Попробуйте разные варианты по освоению слепой печати: закрывайте клавиши, распечатайте клавиатуру, используйте онлайн-тренажеры. Подберите тот вариант закрепления навыка, который будет вам удобен. 
    Все, что вам поможет - это практика, и только она.
    
    Онлайн-тренажеры созданы, чтобы ускорить освоение вашего навыка и сделать его более интересным. У всех сервисов есть свои недостатки. Я предлагаю попробовать каждый и выбрать наиболее подходящий. Обратите внимание, насколько вам комфортен тот или иной интерфейс, достаточно ли вам функций и так далее.
    Выбирайте, тренируйтесь и закрепляйте.
    
- ********************Заключение********************
    
    Подведем итого того, о чем сегодня говорили:
    
    1. Мы рассмотрели метод слепой печати
    2. Я убеждала вас, что метод слепой печати принесет вам реальную пользу
    3. Поговорили о том, что собой представляет метод слепой печати
    4. Узнали, как научиться этому методу и закрепить его.

### Модуль: Центр карьеры GeekBrans: как мы помогаем студентам в поиске работы. 09.08.2023

- ****************************************Урок 1. Вводный урок. 09.08.2023****************************************
    
    Важное объявление!
    
    Всем привет! Вы на вводном курсе Центра карьеры.
    
    Мы записали семь коротких видеокурсов, где объясняем, как мы помогаем студентам в поиске работы. 
    
    Этот урок - первый. Здесь руководитель Центра карьеры ГБ Глеб Дрягун расскажет, почему этот курс важно посмотреть каждому студенту.
    
- ****************Урок 2. Что такое гарантия трудоустройства. 09.08.2023****************
    - **************************************Важное объявление!************************************** В этом видео вы узнаете, что такое гарантия трудоустройства. Здесь мы рассказали о том, как распределяются роли в этом процессе:
        - что необходимо сделать студенту, чтобы получить гарантию
        - что со своей стороны делаем мы
    - **********************************************************************************Помощь с поиском работы от Центра карьеры**********************************************************************************
        
        Рассказываем, как получить помощь от [Центра карьеры](https://gb.ru/career/employment) и как мы помогаем студентам искать работу.
        
    - ****************************************Регистрация в карьеру****************************************
        
        Чтобы получить доступ к программе “Карьера”, нужно пройти курс “Регистрация в карьеру”. Вы найдете его в подготовке к основному обучению.
        
        Курс состоит из двух уроков:
        
        1. ************************************************Регистрация в карьеру -************************************************ пройдите его в начале обучения. Вопросы, на которые нужно ответить, помогут вам сформировать свои ожидания от будущего места работы, а нам - понять ваши пожелания и выбрать актуальный для вас план профессионального развития.
        2. ********************************************************************Запись на программу “Карьера” -******************************************************************** пройдите его после того, как выберете специализацию по вашей основной программе обучения.
        
        Когда заполните анкету, вам на почту придет письмо с подтверждением, а в личном кабинете, под основным обучением, появится раздел “Карьера”. Там найдете курс “Подготовка к поиску работы”. Мы сразу запишем вас в ближайший свободный поток.
        
        Внимательно изучайте полезные материалы, выполняйте домашние задания и следуйте рекомендациям карьерных консультантов. Поиск работы - важный процесс. Вместе мы сможем сделать его интересным и результативным.
        
    - ******************************************************************Курс “Подготовка к поиску работы”******************************************************************
        
        Курс “Подготовка к поиску работы” состоит из четырех онлайн-вебинаров с карьерными консультантами. Они расскажут, как сделать поиск работы эффективным и результативным.
        
        После каждого урока есть обязательное домашнее задание, которое поможет закрепить материал и освоить инструменты поиска работы.
        
        На протяжении всего курса вы будете вести рабочую тетрадь, отмечая в ней ваши Цели, Навыки и прогресс поиска работы. На ее основе карьерные консультанты дадут рекомендации.
        
        - ************************************************Урок 1. Стратегия поиска************************************************
            
            Это первый урок, который поможет начать поиск работы. На вебинаре вы узнаете:
            
            - Что такое стратегия поиска работы, как ее построить
            - Как поставить карьерную Цель
            - Как анализировать рынок
            - Какие бывают этапы поиска работы
            - Как работать со сложностями в процессе поиска работы
            
            После занятия вам предстоит определить для себя карьерную Цель и проанализировать рынок. Карьерный консультант даст свои рекомендации и при необходимости задаст вопросы, которые помогут вам определиться с Целью и двигаться дальше.
            
        - ****************************************Урок 2. Карта поиска****************************************
            
            На этом вебинаре мы продолжим работать со стратегией поиска работы. Вы узнаете, как составить карту поиска, а также освоите новые инструменты:
            
            - Анализ своих навыков
            - Составление карьерных траекторий
            - Каналы поиска вакансий, стажировок и проектов для портфолио
            
            Вам предстоит проанализировать весь свой опыт, определить свои сильные стороны и рассмотреть разные пути достижения карьерной Цели через карту поиска.
            
        - ****************************************Урок 3. Подготовка резюме****************************************
            
            Вебинар, посвященный подготовке резюме и сопроводительного письма. В прямом эфире мы вместе составим резюме и обсудим:
            
            - Как отразить в резюме учебный опыт в ГБ
            - Как описать релевантный и нерелевантный опыт работы
            - Что писать в разделе “О себе”
            - Что писать в сопроводительном письме
            
            Во время этого урока вам предстоит составить резюме с нуля или отредактировать уже существующее. Его проверит карьерный консультант и даст рекомендации. Аналогично предстоит проработать и сопроводительное письмо.
            
        - ********************************************************************Урок 4. Подготовка к собеседованию********************************************************************
            
            На этом вебинаре вы сможете потренироваться отвечать на вопросы рекрутера в формате открытого собеседования, а также узнаете:
            
            - Какие вопросы могут ждать вас на интервью и как к ним подготовиться
            - Как и что рассказать о себе
            - Какие вопросы задать рекрутеру
            - Как обсуждать условия работы
            
            Вам предстоит написать текст самопрезентации для интервью и ответы на самые распространенные вопросы от рекрутера. Со своей стороны мы дадим комментарии по выполненному заданию.
            
        - ******************************************************************************************Что вы получите при успешном завершении курса******************************************************************************************
            - Построите свою стратегию поиска работы: поставите карьерную Цель, проанализируете рынок и свой опыт.
            - Составите карту поиска и разработаете несколько вариантов достижения карьерной Цели.
            - Составите резюме и получите по нему обратную связь от карьерного консультанта.
            - Научитесь отвечать на вопросы рекрутера и рассказывать о себе на собеседовании.
    - ****************************Студенческое сообщество “Карьера ГБ”****************************
        
        После первого урока вы сможете вступить в сообщество “Карьера ГБ”.
        
        Его участники - студенты и выпускники ГБ со всех направлений, которые обратились в Центр карьеры за помощью в поиске работы. Кто-то из них уже нашел работу в новой сфере, кому-то это только предстоит. В чате можно обмениваться опытом прохождения собеседований, откликов на вакансии, общения с работодателями и трудоустройства.
        
        По пятницам карьерные консультанты отвечают на вопросы студентов. Мы всегда остаемся на связи и готовы помогать после завершения курса.
        
    - ****************************************************************Полезные материалы для студентов****************************************************************
        - ********************************Видеокурс “Как найти работу: путь от резюме до первого офера”********************************
            
            Внутри [курса](https://gb.ru/chapters/18653) видео, в которых карьерные консультанты рассказывают:
            
            - Как выглядит поиск работы со стороны компании
            - Как составить резюме и сопроводительное письмо
            - Как подготовиться к первому разговору с работодателем
            - Где искать вакансии, какую компанию стоит выбрать
            - Как работать с эмоциональными сложностями в процессе поиска работы.
        - ************Библиотека рекомендаций по поиску работы************
            
            В разделе [Помощь](https://gb.ru/faq) вы найдете Базу знаний от Центра карьеры, а в ней профильные рекомендации и дополнительные материалы по подготовке и самому процессу поиска работы.
            
        - ********************************************************Канал “Как найти работу [gb.ru](http://gb.ru)**
            
            [Канал](https://t.me/career_gb) с советами и рекомендациями на тему карьеры и поиска работы, где карьерные консультанты периодически проводят прямые эфиры: отвечают на вопросы, делятся своим опытом и кейсами из личной практики.
            
        - ******************************************Вакансии от партнеров******************************************
            
            Вакансии, проекты и стажировки размещаем на нескольких ресурсах.
            
            ******************Портал ГБ******************
            
            В разделе [“Поиск работы”](https://gb.ru/career) вы можете найти вакансии, стажировки и проекты от компаний, которые готовы рассматривать студентов и выпускников ГБ.
            
            Мы модерируем этот раздел и убираем неактуальные вакансии. Ваш отклик попадет напрямую к работодателю.
            
            ****************************************************************************************Канал с вакансиями “Работа для студентов ГБ****************************************************************************************
            
            [Здесь](https://t.me/vacancies_gb) мы публикуем предложения от работодателей, которые обратились напрямую в Центр карьеры.
            
            Если откликнетесь на конкретную позицию через нас, мы порекомендуем вас. Мы также можем помочь отредактировать резюме под конкретную вакансию, чтобы повысить шансы на успех.
            
- **************Урок 3. Как Центр карьеры помогает с трудоустройством. 09.08.2023**************
    
    Из этого видео вы узнаете, что команда Центра карьеры делает, чтобы помочь студентам выстроить процесс поиска работы и прийти к желаемому результату - трудоустройству в новой профессиональной области.
    
    - ******************************************************************************************Как Центр карьеры помогает с трудоустройством******************************************************************************************
        
        Чтобы студенты смогли найти новую работы, мы разработали программу “Карьера”, на которой:
        
        - Помогаем составить стратегию и карту поиска, отредактировать резюме, оформить сопроводительные письма, подготовиться к собеседованию
        - Учим студентов расширять воронку поиска и самостоятельно искать вакансии в разных источниках, общаться с рекрутерами и нанимающими менеджерами
        - Постоянно расширяем список компаний-партнеров, чтобы рекомендовать наших студентов напрямую
    - ********************Что входит в программу “Карьера”. Основной блок помощи в трудоустройстве********************
        - ****************Онлайн-курс “Подготовка к поиску работы”****************
        4 практических вебинара, которые посвящены подготовке к поиску работы. На каждом из этапов карьерный консультант даст обратную связь и рекомендации.
        - ******************************************************************Поддержка карьерных консультантов******************************************************************
        Карьерные консультанты остаются на связи после подготовки к поиску работы и готовы ответить на ваши вопросы или помочь скорректировать поиск, если у вас будут сложности.
        - **********Партнерские вакансии в телеграм-канале “Работа для студентов ГБ”**********
        Здесь мы публикуем предложения от работодателей, которые обратились напрямую в Центр карьеры и готовы рассматривать студентов и выпускников ГБ. Если появляется конкретная позиция, на которую вы откликаетесь через нас, мы можем дать дополнительные рекомендации по резюме под конкретный запрос, чтобы ваши шансы на положительный ответ увеличились.
        И если у вас есть вакансия или проект, который вы хотите предложить студентам, можно опубликовать его в канале.
    - **************************************************************************************Как получить доступ к программе “Карьера”**************************************************************************************
        
        Для получения помощи в трудоустройстве и доступа к программе “Карьера” необходимо пройти курс “Регистрация в карьеру”. Он находится в подготовке к обучению и состоит из двух уроков:
        
        - ************Урок 1
        Первый шаг. Регистрация в карьеру************
        Его необходимо пройти в начале обучения.
        Вопросы, которые ждут вас при регистрации, помогут вам сформировать свои ожидания от будущего места работы. А нам - понять ваши пожелания, чтобы лучше сориентироваться по актуальным планам профессионального развития и помочь достичь Цели
        - ************Урок 2
        Второй шаг. Запись на программу “Карьера”************
        Его необходимо пройти после того, как вы завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения. Для программ, которые длятся менее 9 месяцев - после завершения обучения.
        После записи на программу вам на почту придет письмо с подтверждением, а в вашем личном кабинете под основным обучением появится раздел “Карьера”. Там вы сможете найти курс “Подготовка к поиску работы”. Вы будете записаны в ближайший свободный поток.
- ************Урок 4. Что вас ждет на курсе “Подготовка к поиску работы” 09.08.2023************
    
    Этот урок проводит Злата Арефьева - старший карьерный консультант ГБ.
    Вы узнаете, что внутри курса “Подготовка к поиску работы”: программа, практические задания. индивидуальная обратная связь от карьерных консультантов.
    В этом уроке есть презентация. В ней основная информация в текстовом формате.
    
    **********************************************************************Курс “Подготовка к поиску работы”**********************************************************************
    
    Курс состоит из четырех онлайн-вебинаров с карьерным консультантом. На каждом вебинаре есть теоретическая и практическая части. В них карьерные консультанты рассказывают и показывают на конкретных примерах, как сделать поиск работы эффективным и результативным.
    
    После каждого урока у студентов есть обязательное домашнее задание на проработку материала и освоение инструментов.
    
    На протяжении всего курса студент ведет рабочую тетрадь, которую может посмотреть карьерный консультант и дать полезные рекомендации.
    
    ****************************************************************************************Программа курса “Подготовка к поиску работы”****************************************************************************************
    
    - ****************************Урок 1. Стратегия поиска****************************
    На этом уроке вы узнаете, что такое стратегия поиска работы и как она строится, инструменты анализа рынка, как поставить карьерную Цель и этапы поиска работы.
    - ******************************************Урок 2. Карта поиска******************************************
    На этом уроке мы продолжим работать со стратегией поиска работы. Вы узнаете, как составить карту поиска, проанализируете свои навыки, составите разные карьерные траектории и узнаете, какие бывают каналы поиска вакансий, стажировок и проектов для портфолио.
    - ****************************************************Урок 3. Подготовка резюме****************************************************
    Этот урок посвящен подготовке резюме и сопроводительного письма. Вместе с вами мы будем составлять резюме в прямом эфире и обсудим, как описать в резюме учебный и прошлый опыт работы, что писать в разделе “О себе”, а также для чего нужно сопроводительное письмо и как его составить.
    - **********************************************************Урок 4. Подготовка к собеседованию**********************************************************
    На этом уроке вы сможете потренироваться в ответах на вопросы рекрутера в формате открытого собеседования, а также узнаете, какие вопросы могут ждать вас на интервью и как к ним подготовиться, как и что рассказать о себе, своих достижениях и проектах и какие вопросы стоит задать рекрутеру.
- ********Урок 5. Полезные материалы от Центра карьеры. 09.08.2023********
    
    ****************************************Полезные материалы от Центра карьеры****************************************
    
    Помимо практического курса “Подготовка к поиску работы” мы делимся полезными материалами для студентов в разных форматах.
    
    Внимательно изучайте полезные материалы, выполняйте домашние задания практического блока и следуйте рекомендациям карьерных консультантов.
    
    Поиск работы - важный процесс. Вместе мы сможем сделать его эффективным и результативным.
    
    ************************************************************************************************************************Что входит в программу “Карьера”. Дополнительные материалы************************************************************************************************************************
    
    - ******************************************************************************Вебинарный курс “Как найти работу. Путь от резюме до первого офера”******************************************************************************
    8 теоретических вебинаров обо всем, что вам необходимо знать о поиске работы: как выглядит поиск работы со стороны компании, как составить резюме и сопроводительное письмо, как подготовиться к первому разговору с работодателем, где искать вакансии, какую компанию стоит выбрать и как работать с эмоциональными сложностями в процессе поиска работы
    - ********************************************************************************[Библиотека рекомендаций по поиску работы](https://www.notion.so/f759f9d0db884b97ba7b3555309c4976?pvs=21)**
    Статьи и дополнительные материалы для студентов на самые важные темы по поиску работы.
    - ************************************************************[Канал “Как найти работу ГБ”](https://t.me/career_gb)**
    Канал с советами и рекомендациями на тему карьеры и поиска работы, где карьерные консультанты проводят прямые эфиры, отвечают на вопросы и делятся своим опытом.
    - ****************[Партнерские вакансии на портале ГБ](https://gb.ru/career)**
    Вакансии, стажировки и проекты от компаний, которые готовы рассматривать студентов и выпускников ГБ. На платформе отклики идут напрямую к работодателю, и они самостоятельно их отсматривают.
- ************Урок 6. Что необходимо делать студенту для успешного трудоустройства. 09.08.2023************
    
    Для успешного трудоустройства студенту необходимо работать совместно с Центром карьеры.
    
    Чтобы поиск работы принес результаты, вам необходимо пройти практический курс “Подготовка к поиску работы” и сдать все домашние задания в срок. Так, вы сможете получить обратную связь по вашей стратегии и карте поиска в целом, а также по резюме, сопроводительному письму и ответам на вопросы с собеседований. Это поможет скорректировать поиск таким образом, чтобы вы смогли добиться своей карьерной цели и найти работу по новой специальности.
    
    **************************************************************************************************************Следуйте основным рекомендациям карьерных консультантов**************************************************************************************************************
    
    - Отредактируйте резюме в соответствии с обратной связью от карьерного консультанта
    - Оформите портфолио из проектов и заданий, которые могут продемонстрировать ваши навыки
    - Пишите понятные и информативные сопроводительные письма к откликам
    - Откликайтесь на вакансии партнеров Центра карьеры
    - Активно ищите вакансии в разных источниках и делайте не менее 10 откликов каждый день
    - Соблюдайте этические нормы при взаимодействии с потенциальными работодателями и карьерными консультантами
    - Готовьтесь к техническим собеседованиям и к ответам на вопросы HR-специалистов
    - Активно участвуйте в собеседованиях
- ************Урок 7. Ответы на часто задаваемые вопросы к Центру карьеры 09.08.2023************
    
    Это заключительный урок курса. В этом видео Дарья Тельнова, операционный менеджер Центра карьеры ГБ, отвечает на вопросы, которые нам задают чаще всего.
    
    - **************************************************************************************Если я не выполнил условия гарантии, Центр карьеры может мне помочь с трудоустройством?**************************************************************************************
    Если студент длительных программ обучения не попадает под условия гарантии трудоустройства, Центр карьеры все равно может помочь с поиском работы в течение всего периода обучения. Для этого необходимо пройти Первый шаг - Регистрацию в карьеру и второй шаг - Запись на программу “Карьера”.
    - ********************Может ли Центр карьеры помочь мне устроиться в конкретную компанию?********************
    Мы постараемся сделать все, чтобы вы попали в компанию мечты, но обещать, что вы точно попадете в эту компанию после обучения, мы не можем по объективным причинам. Мы не создаем искусственно рабочие места. На момент вашего выпуска в данной конкретной компании может не быть открытой вакансии по вашему направлению. В любом случае, мы поможем с дальнейшим поиском, а также вы можете откликаться на вакансии наших партнеров.
    - ************************************************************************************************************************Можно ли сделать перерыв между обучением и трудоустройством?************************************************************************************************************************
    Мы рекомендуем не затягивать с поиском работы после завершения обучения, т.к. технические знания быстро забываются без постоянной практики и шансы успешно пройти собеседование будут ниже, а также рынок постоянно меняется, и если делать большой перерыв, найти работу будет сложнее.
    - **********************************************************************Какой процент студентов находит работу после обучения?**********************************************************************
    Более 75% студентов, которые успешно проходят обучение, находят работу по новой специальности.
    - **************************************************************************************************************************************************************************************************************************************Если после выбора специализации я еще не готов искать работу, до какого момента я могу к вам обратиться за помощью?**************************************************************************************************************************************************************************************************************************************
    По условиям гарантийного сопровождения вы можете обратиться в Центр карьеры не позднее 3-х месяцев с конца обучения. Например, если вы закончили обучение 1 января, дедлайн, когда вы можете обратиться в Центр карьеры - 1 апреля.
    - ********************************************************************************************************************Если я начал учиться по программе “Карьера”, но понял, что еще не готов к поиску работы, что делать?********************************************************************************************************************
    В этом случае вы можете перезаписаться на курс “Подготовка к поиску работы” тогда, когда это будет для вас актуально. Потоки стартуют каждый месяц.
    Для этого необходимо написать своему куратору или в техническую поддержку. При этом доступ к остальным материалам программы “Карьера” у вас сохранится.

### Модуль: Итоговые документы об обучении - старт учебы. 08.08.2023

- **Урок 1. Введение в курс**
    
    Привет!
    
    Это специальный курс, цель которого - рассказать об итоговых документах об обучении в ГикБрэйнс и условиях, необходимых для их получения. В первом уроке мы расскажем, почему важно посмотреть курс на старте, и что вам нужно сделать в ближайшее время.
    
    **Как устроен курс?**
    
    В начале вы узнаете о видах документов об обучении и условиях их получения, а далее подробно разберем, какие документы и в каком формате вам нужно предоставить для их подготовки.
    
    **Обязательно ли его смотреть?**
    
    Да! Во-первых, чтобы понимать, на какие документы вы можете претендовать об окончании обучения.
    
    Во-вторых, загрузить все необходимые документы, которые потребуются для подготовки документов на вас как студента (приказ о зачислении, итоговый диплом и др.)
    
    **Куда загружать документы?**
    
    **https://gb.ru/b/s29**
    
    Для корректного заполнения используйте информацию, полученную в видео и материалах курса.
    
    **Если у вас возникнут вопросы, напишите в поддержку студентов -**
    
    **https://t.me/geekbrains_studybot**
    
- **Урок 2. Электронные сертификаты и свидетельства**
    
    **Важное объявление!**
    
    В этом уроке мы расскажем о двух видах документов об обучении - свидетельство и электронные сертификаты за курсы.
    
    **Электронный сертификат**
    
    После прохождения курса выдается электронный сертификат
    
    **Условия получения сертификата:**
    
    1. Просмотреть более 75% уроков, если курс не содержит практических заданий
    2. Успешно сдать промежуточную или итоговую аттестации, если они предусмотрены в курсе
    3. Сдать более 75% практических заданий, если в курсе нет промежуточной или итоговой аттестаций
    4. Успешно пройти финальное тестирование, если оно предусмотрено
    
    **Как его получить на портале?**
    
    1. Зайдите на платформу Гикбрэйнс
    2. Перейдите в раздел “Мое обучение”
    3. Выберите курс, который вы прошли
    4. Нажмите на кнопку “Получить сертификат”
    5. Поставьте оценку и отзыв курсу
    
    Если условия для получения не выполнены, вы не сможете получить сертификат, но у вас будет возможность оценить курс - для этого нажмите на кнопку “Оставить отзыв”.
    
    **Важно:** имя и фамилия в сертификатах будут такими же, как и на портале. Данные всегда можно отредактировать в профиле.
    
    **Свидетельство об обучении**
    
    **Свидетельство -** это документ, который подтверждает, что вы прослушали программу дополнительного образования, освоили новые знания и умения. Его можно получить, если вы приобрели обучение после 26.01.2017 и успешно прошли учебную программу.
    
    **Особенности свидетельства:**
    
    - Формируется только на русском языке и в электронном виде
    - Указывается названием программы и список пройденных курсов
    - Нет приложения с баллами и количеством академических часов
    
    **Что нужно для оформления?**
    
    - ФИО
    - Актуальный адрес электронной почты
- **Урок 3. Диплом о профессиональной переподготовке**
    
    **Важное объявление!**
    
    На уроке мы познакомимся с характеристиками диплома о профессиональной переподготовке и условиями, необходимыми для его получения.
    
    **Диплом о профессиональной переподготовке**
    
    Диплом подтверждает, что вы успешно прошли программу профессиональной переподготовки и сдали итоговую аттестацию. Выдается, если вы приобрели обучение после 03.12.2019
    
    **Условия, необходимые для получения диплома:**
    
    1. **Диплом о высшем или среднем профессиональном образовании**
    2. **Прохождение всех курсов программы обучения. Они будут считаться пройденными, если вы сдали по ним промежуточные аттестации. Ей может быть одно из заданий курса или тест.**
    3. **Успешная сдача итоговой аттестации. Она может состоять из одной или нескольких активностей:**
        1. тестирование или контрольная по темам
        2. защита индивидуального проекта, диплома, портфолио
        3. защита командного проекта
        4. собеседование с преподавателем
    
    **Особенности диплома:**
    
    - выдается только на русском языке
    - есть твердая обложка или фирменная папка
    - есть титульный лист с названием программы и присвоенной квалификацией
    - есть приложение со списком курсов и зачетами
    - есть количество академических часов
    - информация о документе передается в “Федеральный реестр документов об образовании” (ФИС ФРДО)
- **Урок 4. Пакет документов: паспорт и СНИЛС**
    
    **Важное объявление!**
    
    В этом уроке вы узнаете, почему для получения документа о дополнительном образовании нужны паспорт и СНИЛС, и в каком формате они необходимы.
    
    **Пакет документов: паспорт и СНИЛС**
    
    **Паспорт**
    
    Паспорт нужен, чтобы мы проверили ФИО и правильно указали его в документе. А еще, чтобы подтвердить - диплом о высшем или среднем профессиональном образовании принадлежит именно вам.
    
    Что нужно прислать?
    
    Скан или фотографию паспорта - главный разворот и страницу с регистрацией.
    
    Если у вас нет российского паспорта и информация в вашем документе не дублируется на русском языке, понадобится нотариально заверенный перевод.
    
    **Страховое свидетельство обязательного пенсионного страхования (СНИЛС)**
    
    СНИЛС нужен, чтобы подать данные в “Федеральный реестр сведений о документах об образовании”.
    
    **Что нужно прислать?**
    
    Фотографию или скан СНИЛС - просто номер или скриншот из Госуслуг не подойдет. Фамилия в документе должна соответствовать фамилии в паспорте.
    
    Если СНИЛС нет, вместо него подойдет АДИ-РЕГ. Получить его можно в формате ПДФ в личном кабинете на сайте Пенсионного Фонда России. Иностранным студентам без СНИЛС можно отправить фото или скан ИД-карты, если она есть.
    
- **Урок 5. Пакет документов: диплом о высшем или среднем профессиональном образовании**
    
    **Важное объявление!**
    
    В этом видео мы расскажем, почему для получения документа о дополнительном образовании нужен диплом о высшем или среднем профессиональном образовании, в каком формате он необходим, а также особенности, связанные с иностранными документами.
    
    **Пакет документов: диплом о высшем или среднем профессиональном образовании**
    
    Документы о дополнительном образовании можно получить, если у вас уже есть диплом о высшем или среднем профессиональном образовании.
    
    **Что нужно прислать?**
    
    Скан или фотографию разворота титульного листа и всех приложений к диплому.
    
    В дипломах старого образца часто нет приложения - в этом случае важно, чтобы была читабельная печать. Иногда блок приложений может называться “Выписка”.
    
    **Что делать с дипломом иностранного государства?**
    
    Если вы получали образование не в России, может потребоваться процедура признания - оценка диплома на соответствие одному из уровней российского образования: среднему профессиональному или высшему.
    
    **Процедура признания не нужна, если:**
    
    - между странами есть соглашение на основе [международного договора](https://nic.gov.ru/ru/docs/foreign/confirmation).
    - образовательная организация есть в [перечне иностранных научных и образовательных организаций](https://nic.gov.ru/ru/docs/russian/government/557), которые выдают документы об ученых степенях и ученых званиях, признаваемых в РФ.
    
    Чтобы понять, нужно признание документа или нет, можно провести [экспресс-анализ](https://nic.gov.ru/ru/help/analyze).
    
    Любой диплом, который признается в России, должен быть легализован и переведен на русский язык. Процедура поможет подтвердить его подлинность и позволит использовать его для трудоустройства или обучения.
    
    Проверьте, нужна ли вам [легализация документов](https://nic.gov.ru/ru/proc/lega) - для дипломов разных стран действуют разные условия.
    
    Если диплом не на русском языке, нужно отправить фото или сканы нотариально заверенного перевода. Перевод диплома не равен процедуре признания.
    
- **Урок 6. Пакет документов: контактные данные**
    
    **Важное объявление!**
    
    В этом уроке вы узнаете, какие контактные данные необходимы для получения документа об обучении в ГикБрэйнс
    
    **Контактные данные**
    
    Если ФИО в паспорте отличаются от данных в дипломе, нужна копия документа о смене ФИО: например, свидетельство о заключении брака или справка о смене имени.
    
    Из документа должно быть понятно: фамилия из диплома изменилась на фамилию из паспорта. Иногда фамилия меняется несколько раз - в этом случае понадобится несколько документов.
    
    Если такого свидетельства у вас нет, его нужно запросить в отделе ЗАГС.
    
    **Что еще нужно для отправки документов?**
    
    - корректные адрес и индекс
    - контактный номер мобильного телефона
    
    После отправки вы получите трек-номер для отслеживания
    
    Если вместо вас документ будет получать кто-то другой, потребуется доверенность. Ее можно составить в свободной форме и не заверять у нотариуса.
    
- **Урок 7. FAQ: частые вопросы**
    
    **Бонус-урок!**
    
    Отвечаем на часто задаваемые вопросы, связанные с форматом, сроками и доставкой итоговых документов.
    
    1. **Вы оформляете документы на английском?**
    Нет, документы выдаются только на русском языке
    2. **Котируются ли дипломы в других странах?**
    За рубежом тоже есть особенности признания иностранных образовательных документов. Точнее узнать о них можно на официальном сайте Министерства образования нужной страны.
    3. **У документов будет электронная версия?**
    В электронном виде выдаем свидетельство об обучении. Сканы дипломов и удостоверений доступны после того, как их подпишут.
    4. **Вы выдаете удостоверения государственного образца?**
    Нет, наши удостоверения установленного образца.
    Дипломы государственного образца выдают образовательные организации, которые прошли аккредитацию. Обычно - это высшие учебные заведения, присваивающие степени и квалификации.
    Учебные заведения дополнительного профессионального образования могут не аккредитовываться. Поэтому наши дипломы установленного образца. Но такие документы выдаются на основе соответствующей образовательной лицензии. Она подтверждает, что программы соответствуют образовательным стандартам.
    5. **Я еще не получил диплом о высшем или среднем профессиональном образовании. Могу получить документ диплом у вас позднее?**
    Да, когда вы получите диплом о высшем или среднем профессиональном образовании, мы выдадим документ о дополнительном образовании - просто обратитесь в поддержку студентов. До тех пор мы можем подготовить свидетельство об обучении.
    6. **Как долго готовятся документы?**
    Подготовка свидетельства занимает до 10 рабочих дней. Диплом будет отправлен в течение 30 дней после проведения итоговой аттестации.
    7. **Можно ли доставить документы в другую страну?**
    Да, документы об образовании отправляем по России и в другие страны.
    8. **За доставку нужно платить?**
    Нет, она бесплатная.
- **Урок 8. Хочу получить диплом**
    
    **Чек-лист для получения диплома о профессиональной переподготовке**
    
    **Как получить?**
    
    - Предъявить диплом о высшем или среднем профессиональном образовании
    - Пройти все курсы программы и сдать промежуточные аттестации
    - Успешно сдать итоговую аттестацию
    
    **Какие документы понадобятся для оформления?**
    
    - Паспорт: главный разворот и страница с регистрацией
    - Диплом о высшем или среднем профессиональном образовании: разворот титульного листа и всех приложений к нему
    - СНИЛС
    - Свидетельство о заключении брака или о смене имени, если в паспорте и дипломе разные ФИО
    - Почтовый адрес с индексом
    - Контактный номер телефона

### Модуль: Регистрация в карьеру. 06.08.2023

- **Урок 1. Первый шаг. Регистрация в карьеру**
    
    **Важное объявление!**
    
    Привет!
    
    Регистрация в карьеру - это обязательный первый шаг для каждого студента, который хочет найти работу вместе с нами.
    
    Чтобы пройти регистрацию, переходите по **[ссылке](https://gb.ru/b/s30)**.
    
    Мы рекомендуем проходить регистрацию на старте обучения. Но вы можете вернуться сюда в любое время.
    
    Регистрация поможет вам сформировать ожидания от будущего места работы. Нам - узнать вашу карьерную Цель. Так мы сможем вместе двигаться к достижению вашей Цели.
    
    Важно, что после регистрации вам не нужно ждать обратной связи. Мы получим ваши ответы и проанализируем их.
    
    Вы можете получить помощь в поиске работы от Центра карьеры после того, как завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения.
    
    Для программ, которые длятся менее 9 месяцев - после завершения обучения.
    
    Для доступа к программе “Карьера”, переходите ко второму шагу в следующем уроке.
    
    Если вы пока не готовы заняться подготовкой к поиску работы - проходите первый шаг, а ко второму вернитесь, когда для вас помощь в поиске работы от Центра карьеры будет актуальна.
    
- **Урок 2. Второй шаг. Запись на программу Карьера**
    
    **Важное объявление!**
    
    Привет!
    
    Вы можете получить доступ к программе “Карьера” после того, как завершите обучение по специализации основной программы или спустя 9 месяцев с момента старта обучения.
    
    Для программ, которые длятся менее 9 месяцев - после завершения обучения.
    
    Чтобы получить доступ к программе “Карьера”, пройдите [анкету](https://gb.ru/b/s32) и ответьте всего на один вопрос - нужна ли вам помощь в поиске работы от Центра карьеры.
    
    Если вам нужна помощь и вы готовы к поиску работы, мы откроем доступ к программе и запишем вас на ближайший свободный поток практического курса “Подготовка к поиску работы”.
    
    Если вам нужна помощь в поиске работы, но не сейчас, вернитесь к этому шагу позднее, когда это будет актуально.
    
    Если вы уверены, что вам не нужна помощь, мы поделимся полезными материалами для поиска работы. Вы всегда можете вернуться к этому шагу, если ваше решение изменится. Обратиться в Центр карьеры за помощью можно не позднее трех месяцев с конца обучения.
    
    После записи на программу у вас на почте будет письмо с подтверждением, а в вашем личном кабинете под основным обучением появится раздел “Карьера”. Там вы сможете найти курс “Подготовка к поиску работы”. Вы будете записаны в ближайший свободный поток.
    

### Модуль: Полезные советы для старта обучения 04.08 - 05.08.2023

- **Студенческая инструкция. Как учиться в ГикБрэйнс**
    - **Введение**
        
        Поздравляем, вы стали студентом ГикБрэйнс! Решение освоить новую профессию ответственное и непростое. Мы уважаем его и поможем дойти до Цели.
        
        В этой инструкции мы собрали базовую информацию про учебный процесс и другие возможности, которые перед вами открыты.
        
        Если у вас останутся вопросы или вы захотите поделиться обратной связью, напишите куратору в [телеграм-бот для студентов](https://t.me/geekbrains_studybot).
        
        А теперь давайте начинать.
        
    - **Учебный процесс**
        
        **Мы используем разные форматы обучения.** Вас ждут лекции и практикумы, групповые занятия и индивидуальные консультации, вебинары и записанные уроки, интервью с предпринимателями и учеными. Программы регулярно обновляются - мы следим за новостями в индустрии, чтобы вы получали актуальные знания.
        
        **Обучение длится от 2,5 до 60 месяцев -** все зависит от выбранной программы. В процессе формируется ваша образовательная траектория: после основного блока вы сами выбираете специализацию и инструменты, которые пригодятся в работе.
        
        **Залог успешного обучения - ваша внутренняя Дисциплина.** Следите за расписанием и посещайте занятия вовремя. Выполняйте практические задания, чтобы закреплять теорию. Участвуйте в групповых проектах, чтобы учиться работать в команде.
        
        **Итог обучения - документ об образовании и трудоустройство.** Чтобы их получить, нужно приложить усилия: посещать занятия, вовремя сдавать домашние задания, промежуточные и итоговые аттестации.
        
        **Форматы уроков**
        
        Сейчас в ГикБрэйнс около 40 форматов занятий. Самые популярные: лекции, семинары, практикумы и консультации. Вы можете встретить не все - форматы зависят от программы курса.
        
        **Лекции -** теоретический блок. Преподаватель рассказывает теорию и показывает примеры. Занятия проходят по расписанию, в формате вебинара или в записи.
        
        **Семинары -** практический блок. Преподаватель делает упор на прикладные знания, помогает закрепить теорию практикой, отвечает на вопросы студентов. Занятия проходят по расписанию в формате вебинара, но их можно пересмотреть в записи. Советуем заниматься очно, чтобы не копить вопросы.
        
        **Практикумы -** занятия для ответов на вопросы. Обычно их проводят после сложных тем. Например, на Разработчике практикумы есть после курсов Введение в контроль версий и Знакомство с языками программирования. Занятия идут по расписанию в формате вебинара.
        
        **Консультации -** индивидуальные занятия преподавателя со студентом. Студент может попросить о консультации, если у него набралось много вопросов, он хочет подтянуть или углубить знания в какой-то теме. Это дополнительная возможность за рамками основной программы. Она оплачивается отдельно.
        
        **Форматы практических заданий**
        
        Практические задания помогают закрепить знания, учат искать информацию самостоятельно и решать задачи, которые будут встречаться в работе.
        
        В ГикБрэйнс около 60 форматов домашних заданий: от написания кода и ревью до эссе и исследований. В рамках обучения вы можете встретить не все, но точно не заскучаете с однотипными ДЗ.
        
        Практические задания группируются в три основных типа:
        
        **Регулярные домашние задания -** практика после урока. Помогает поэтапно осваивать материал курса.
        
        **Промежуточные аттестации -** тесты или проекты после крупных блоков программы. Позволяют проверить знания, понять, что стоит повторить и на чем сделать акцент в дальнейшем обучении.
        
        **Итоговые аттестации -** защита проекта перед комиссией. Главный результат обучения и основа портфолио студента.
        
        - **Правила сдачи домашних заданий**
            
            Чтобы получить положительную оценку и обратную связь от преподавателя, нужно соблюдать несколько условий.
            
            - **У домашних заданий есть дедлайны. Их можно продлить, если вы не успеваете сдать работу. *Изначально у вас есть 7 дней, чтобы сдать практическое задание. Затем появится кнопка “Продлить дедлайн” - если ее нажать, срок сдачи увеличится на 14 дней с момента первого дедлайна. Получается максимальный срок сдачи ДЗ после урока - 21 день.* Исключение - промежуточные аттестации. Их можно сдать на проверку в любое время.**
            - **Сдавайте ДЗ по теме урока. Не прикладывайте к уроку старые задания, которые не успели сдать вовремя. Их не проверят, а выполнение не зачтется в ваш прогресс.**
            - **Сдавать ДЗ лучше сразу после урока или на следующий день. Свежие знания легче закрепить практиков.**
            - **ДЗ можно пересдать, если преподаватель поставил оценку “не сдано”. Вам откроется автоматическая пересдача - в рамках дедлайна можно будет прикрепить обновленную работу.**
            - **Задавайте вопросы. Если вам что-то непонятно, спросите одногруппников или преподавателя. Правильно задавать вопросы - ценный навык, который точно пригодится в работе.**
        - **Перепрохождение курсов**
            
            В ГикБрэйнс можно перезаписаться на курс и пройти его заново, если при первом прохождении вы сдали **меньше 50% домашних заданий.**
            
            Это полезно, если у вас не было времени на учебу, а затем оно появилось. Напишите в поддержку, чтобы перепройти тот же курс в онлайне с другим потоком.
            
            Если вы прошли курс и сдали больше 50% домашних заданий, перезаписаться в другой поток нельзя. Но вы сможете пересматривать записи ваших занятий, если что-то захочется повторить.
            
        - **Сложности в обучении**
            
            Учиться сложно и это нормально. В школе и университете вы регулярно тренировали навык обучения: приходили на занятия, слушали учителя, вели конспекты, а дома закрепляли знания на практике. Обучение было привычкой.
            
            Сейчас большинство наших студентов - люди, которые решили сменить профессию. Многим заново приходится учиться учиться. Мы понимаем и учитываем это, когда разрабатываем образовательные программы. И просим вас нам доверять.
            
            - Если у задания есть дедлайн, выполняйте его вовремя - вы получите обратную связь, увидите свои ошибки и не будете допускать их в будущем.
            - Если вы получаете дополнительный контент, найдите время и изучите его. Невозможно разобрать все нюансы на уроке. Профессиональная литература и интервью с экспертами - тоже важная часть обучения.
        - **Обучение в видеоформате**
            
            Если через несколько месяцев после старта обучения вы понимаете, что не успеваете учиться в темпе программы, можно перевести обучение в видеоформат и смотреть записи уроков в комфортное время.
            
            Вернуться к онлайн-обучению тоже можно, но раз в 3 месяца.
            
            Чтобы перейти из одного формата в другой, напишите в студенческую поддержку.
            
        - **Команда обучения**
            
            В ГикБрэйнс вы будете общаться с преподавателями, кураторами и специалистами поддержки. Здесь расскажем, кто есть кто, и к кому с какими вопросами лучше обращаться.
            
        - **Преподаватели**
            
            Преподаватели ГикБрэйнс - это специалисты-практики из разных сфер: владельцы бизнеса, руководители, менеджеры, ученые и сотрудники университетов. Они ведут лекции и семинары, отвечают на вопросы студентов, помогают с домашними заданиями и консультируют индивидуально.
            
            Вопросы по теме урока лучше задавать во время онлайн-вебинара - преподаватель ответит либо сразу, либо в конце занятия. Написать в личные сообщения тоже можно, но вам могут ответить не сразу или не ответить вообще.
            
            - Самый надежный способ получить ответ на вопрос - задать его во время онлайн-занятия.
            
            Не перебивайте преподавателя. Выключайте микрофон, чтобы посторонний шум не мешал вести занятие.
            
        - **Вам может не понравиться преподаватель**
            
            Может случиться, что преподаватель, который ведет курс, вам не понравится по каким-либо причинам: возможно, вас не устроит темп речи или манера подачи информации. Это решаемо - напишите куратору, и мы постараемся вам помочь.
            
            Но перевести студента получается не всегда, и это нормально. Например, курс ведет только один преподаватель. Или группы других преподавателей уже заполнились, а старта нового потока придется долго ждать. В этом случае выбор за вами: вы можете подождать старта новой группы или продолжить учиться у текущего преподавателя. Подумайте, что важнее для вашей образовательной Цели.
            
        - **Кураторы**
            
            Куратор поможет решить сложности с расписанием, изменить формат обучения или взять перерыв, если времени не хватает. А если времени с избытком, расскажет, как увеличить скорость обучения.
            
        - **Поддержка**
            
            Поддержка помогает студентам решать технические и организационные вопросы. Пишите им, если есть вопросы по платформе: например, если вы не понимаете, как зайти в урок или куда сдавать домашнее задание. Или если неверно отображается время или дата начала занятия.
            
        - **Почему вам может никто не отвечать?**
            
            Каждый день кураторы и служба поддержки получают сотни сообщений. Иногда этот объем кратно возрастает. В такой ситуации может показаться, что ваше обращение пропало, про вас забыли или просто решили не помогать. Это не так.
            
            - Порой нам нужно больше времени, чтобы разобраться с вопросами от студентов. Но вы обязательно получите ответ.
        - **Одногруппники**
            
            Одногруппники - ваши единомышленники и будущие коллеги. Они помогут сохранить мотивацию, поделятся полезными материалами по теме, ответят на вопросы и помогут разобраться с непонятными моментами.
            
            Общение с одногруппниками - еще один способ закрепить знания. Такой формат называется Р2Р или равный равному. Отвечая на вопросы в чате, вы помогаете другому человеку и структурируете то, что знаете сами.
            
        - **Телеграм-чат с группой**
            
            Когда начнется основное обучение, вы сможете присоединиться к учебному чату в телеграме. В нем можно обсуждать интересные и сложные моменты обученияи или просто общаться с одногруппниками.
            
        - **Правила общения**
            
            Обучение - сложный и долгий процесс. Чтобы добиться образовательной цели и завести полезные знакомства, уважительно относитесь ко всем его участникам.
            
        - **Мы приветствуем:**
            - Здоровое общение, шутки и мемы.
            - Обмен знаниями, идеями и кейсами.
            - Нетворкинг и объединение в команды.
            - Вдохновляющие истории коллег.
        - **Мы запрещаем:**
            - Ненормативную лексику
            - Рекламу в учебных чатах
            - Споры с переходом на личности
            - Некорректные высказывания, которые могут задеть преподавателя или одногруппников.
            - Распространение любых ссылок на неофициальные источники, каналы или чаты.
            
            За правилами общения в студенческих чатах следят кураторы. Они могут удалить участника чата, если он нарушает правила или на него жалуются другие участники.
            
        - **Образовательная Цель**
            
            Во время регистрации на платформе мы спрашиваем об образовательной цели. Нам важно знать, чего хочет добиться каждый студент, и чего он ждет от обучения.
            
            Не все добиваются образовательных целей. Есть разные причины.
            
        - **Цель может измениться.**
            
            Например, вы переехали в другую страну и обучение перешло на второй план, потому что важнее с нуля строить жизнь в другом месте.
            
        - **Программа может оказаться слишком сложной.**
            
            Это поправимо - нужно обратиться к куратору и вместе решить, как двигаться дальше.
            
        - **Вы можете отказаться от обучения,** потому что оно вам не нравится.
            
            Но нужно помнить, что вы потеряете потраченное время, а в будущем можете пожалеть, что не дошли до конца.
            
            Важно регулярно возвращаться к Цели, оценивать пройденный путь и двигаться дальше. Поэтому на протяжении обучения мы проводим анкетирование. И вам, и нам оно помогает понять:
            
            - Изменилась ли образовательная Цель?
            - Удалось ли ее достичь?
            - Как ее достичь в будущем?
        - **Обязательные анкеты**
            
            Чтобы у нас были актуальные данные, и мы могли помогать вам на протяжении образовательного пути, мы проводим опросы. Некоторые можно заполнить по желанию, но есть и обязательные:
            
            - **Опрос во время регистрации на платформе. Поможет определиться со стартовой целью.**
            - **Анкета для сбора документов. Нужна для оформления и получения документов об образовании. Проходится на старте, во время зачисления.**
            - **Ежемесячный опрос после старта обучения. Позволит отслеживать динамику изменений и улучшать процесс вашего обучения.**
            - **Опрос для регистрации в центре карьеры. Нужен, чтобы карьерные консультанты смогли помочь вам с поиском работы.**
            
            Образовательная Цель меняется от возраста, региона проживания, предыдущего образования, уровня компьютерной грамотности, готовности учиться самостоятельно, свободного времени, занятости на работе. Поэтому мы рекомендуем регулярно проходить наши опросы и держать в голове вашу Цель. А со своей стороны мы поможем сделать так, чтобы вы ее достигли.
            
        - **Трудоустройство**
            
            Добиться карьерных Целей и найти работу по новой специальности поможет центр карьеры ГикБрэйнс. Здесь работают менеджеры с экспертизой в HR и карьерном консультировании. Они знают, как устроены процессы найма изнутри, и помогут пройти через них успешно.
            
        - **Гарантия трудоустройства**
            
            Наша гарантия трудоустройства - это содействие, т.е. помощь в поиске работы. Совместный процесс, в котором нельзя добиться успеха без мотивации, дисциплины, ответственности и инициативы студента.
            
            Карьерный консультант даст полезные рекомендации, поможет освоить инструменты поиска работы и поделиться развивающей обратной связью. Ко всему этому нужно прислушаться и учесть при трудоустройстве.
            
        - **Программа “Карьера”**
            
            Чтобы студенты смогли найти новую работу, мы разработали программу “Карьера”, на которой:
            
            - Помогаем составить стратегию и карту поиска, отредактировать резюме, оформить сопроводительные письма, подготовиться к собеседованию.
            - Учим студентов расширять воронку поиска и самостоятельно искать вакансии в разных источниках, общаться с рекрутерами и нанимающими менеджерами.
            - Постоянно расширяем список компаний-партнеров, чтобы рекомендовать наших студентов напрямую.
            
            Подробнее о работе центра карьеры - в курсе [“Центр карьеры ГикБрэйнс: как мы помогает студентам в поиске работы”](https://gb.ru/chapters/26778).
            
        - **Чтобы начать работать с центром карьеры,** вам нужно:
            1. Пройти опрос для регистрации в карьеру
            2. Записаться на программу “Карьера”.
            
            Подробнее об этих шагах - в курсе [“Регистрация в карьеру”](https://gb.ru/chapters/22267).
            
        - **Вас могут не взять на работу**
            
            Вас могут не взять на работу после 10, 100 или даже 1000 откликов. Так бывает. Можно застропориться на этапе собеседования с HR или техническим лидом. Работодатель может решить, что вы ему не подходите просто так, без объективных причин. Найти работу сложно, а по новой специальности - еще сложнее.
            
            Чтобы ваши шансы выросли, работайте вместе с центром карьеры. Прислушивайтесь ко всем рекомендациям, которые вам дают. Если вам говорят, что нужно с нуля пересобрать портфолио, значит нужно это сделать. Доверьтесь нам, как доверились во время обучения.
            
            Поиск работы требует включенности с двух сторон. Ответственность не только на центре карьеры, но и на вас.
            
        - **Документы об образовании**
            
            В ГикБрэйнс есть несколько видов документов об образовании.
            
            **Электронный сертификат** выдается после прохождения курса. Скачать его можно с сайта в любой момент: после прохождения курса нажмите кнопку “Получить сертификат”.
            
            **Свидетельство -** физический документ. Выдается тем, кто не может претендовать на диплом о переподготовке: например, если нет диплома о высшем или среднем специальном образовании. Чтобы получить свидетельство, нужно успешно сдать все аттестации - промежуточную и итоговую.
            
            **Диплом о профессиональной переподготовке** подтверждает, что вы успешно прошли программу профессиональной переподготовки. Чтобы его получить, нужны:
            
            - Диплом о высшем или среднем профессиональном образовании
            - Прохождение всех курсов программы.
            - Успешная сдача всех аттестаций - промежуточных и итоговой.
            
            **Важно!** Успешная сдача - сдача на “удовлетворительно”, “хорошо” или “отлично”.
            
        - **Расторжение договора**
            
            Если обучение в ГикБрэйнс вам не подошло, изменилась образовательная Цель или времени перестало хватать, вы можете расторгнуть договор. Мы вернем деньги полностью или частично - зависит от времени, которое вы провели на курсе. Подробнее об этом в приложении 1 к [публичному договору](https://gbcdn.mrgcdn.ru/uploads/staticpage/433/asset/8fbb901448467da351508b7a45493be7.pdf).
            
        - **Заключение**
            
            Мы рады, что вы с нами - впереди много интересного. Чтобы взять максимум от процесса:
            
            - **Настройтесь на учебу. В следующие месяцы ваше расписание будет очень плотным. Не пропускайте вебинары и вовремя сдавайте домашние задания. Чем больше внимания уделите учебе, тем круче будет ваш результат.**
            - **Будьте общительными. Не бойтесь задавать вопросы и принимать участие в дискуссиях, помогайте одногруппникам и просите помощь, если она вам нужна. В ИТ-компаниях никто не работает в одиночку, сейчас самое время научиться быть командным игроком.**
            - **Отслеживайте свою динамику. Заполняйте анкеты, чтобы увидеть прогресс и зарядиться мотивацией.**
            - **Подготовьтесь к трудоустройству. Соберите портфолио из проектов, которые сделали в рамках обучения. Отшлифуйте резюме вместе с карьерным консультантом и подготовьтесь к собеседованию.**
            
            Удачи!!!
            
- **Урок 2. Изучите английский и откройте новые возможности в ИТ**
    
    *Интересный факт про разработку:*
    
    *НАСА до сих пор использует программы 70-х годов в своих космических кораблях. Потому что внедрение новых требует времени и денег, а*
    
    *старые уже доказали свою надежность.*
    
    **Английский для айтишники: сколько нужно для счастья?**
    
    ***Разбираемся, почему английский важен для разработки, хватит ли В1, чтобы получить работу в США, и как учить язык, когда совсем не до этого.***
    
    Вы знали, что, согласно исследованию CEMS, эмпатия и способность вести эффективный диалог онлайн стали ключевыми навыками в 2021 году? А что треть команд в период пандемии начала активно общаться с иностранными коллегами?
    
    - **80% заказов в ИТ приходится на западные страны**
        
        Благодаря международным проектам большинство разработчиков, тестировщиков и дизайнеров владеет английским языком не ниже уровня Intermediate. А к тем, кто общается с клиентами непосредственно, требования еще выше - у большинства менеджеров и бизнес-аналитиков уровень upper-intermediate. В 2021 году для успешной коммуникации важно не просто понимать собеседника, но и проявлять эмпатию, гибкость, уметь работать с мелочами и идти на компромиссы.
        
        Теперь, даже живя в Нижнем Новгороде или Тольятти, вы имеете возможность присоединиться к международному проекту и общаться со своей командой на английском. Как следствие, работодатели не исключают привлечение распределенных команд и ждут, что вы сможете понимать друг друга: согласно исследованию Работа.юа треть соискателей минимум раз получали отказ на собеседовании из-за незнания иностранного языка. А статистика Доу.юа показывает, что специалисты без знания английского зарабатывают в среднем вдвое меньше своих англоговорящих коллег.
        
    - **Я - не менеджер. Зачем мне английский?**
        1. **Английский позволяет ориентироваться в среде разработки**
        Сейчас единичные компании используют русскоязычные интерфейсы. В большинстве случае меню, справочники и даже сообщения об ошибках будут на английском. Далеко не все локализовано, а в том, что успели перевести, не всегда легко сориентироваться - форумы и гайды вероятнее всего тоже будут на английском. А если программируете, знаете: все базовые языки основываются на английских словах и конструкциях.Кстати, у многих айтишников даже интерфейсы их смартфонов, мессенджеров, соцсетей англоязычные - отличное погружение в среду.
        2. **Техническая документация в 90% случаев написана на английском**
        Даже для ПО, созданного в России или Азии, в первую очередь готовят документацию на английском языке - это язык, который понятен абсолютному большинству. И будет ошибкой полагать, что вам не придется читать документацию, или что ее легко закинуть в Гугл Переводчик. Кстати, это хорошая возможность начать погружаться в язык без необходимости с кем-то разговаривать, важно лишь хорошо понимать написанное. Да и мотивации для изучения достаточно: хочешь облегчить себе работу - читай документацию.
        3. **Обсуждения на форумах по нужной теме будут на английском**
        По достаточно популярным вопросами вы найдете ответы даже на русском языке. Но такие вопросы быстро закончатся. Как показывает практика, чтение оригинальных ответов помогает найти более полное и актуальное решение, большая часть из которых никогда не будет переведена на русский язык.
        4. **Вам будут рекомендовать англоязычную литературу**
        Профессиональная литература и научные труды ориентированы на англоязычную аудиторию. Кстати, лучшие книги по программированию в России являются переводами, и, что ожидаемо, публикуются после выхода оригинала с задержкой в несколько лет. поэтому высока вероятность, что книги, которые вам порекомендуют, еще никто не успеет перевести. Да и перевод может не учитывать всех тонкостей: многие термины переводятся неоднозначно, смысл информации искажается. Покупая книгу, адаптированную на русский язык, вы всецело доверяете профессионализму исполнителей, которые могут не иметь технического образования.
        5. **На конференциях с вами заговорят по-английски**
        В профессиональное комьюнити входят специалисты разных национальностей, которые находят общий язык благодаря английскому. Он позволяет за счет одного труда, темы или лекции дотянуться до многих локальных сообществ вместо того, чтобы локализовать свои доклады под ключевые страны и языки.Кроме этого английский - это шанс на работу в международной компании, поскольку ведущие ИТ-гиганты, такие как Гугл, Эппл, Фэйсбук и Амазон, базируются в США. Даже в краткосрочные командировки в Америку, Европу и Китай охотнее берут тех, чья поездка не потребует дополнительных костов на переводчика.
    - **Какого уровня языка достаточно?**
        
        Для того, чтобы понимать несложные статьи, читать техническую документацию и отвечать на письма иностранных коллег, достаточно иметь Intermediate. Но важно, чтобы это был навык, который вы не забываете практиковать. Курсы, сданные успешно 2 - 3 года назад, забываются очень быстро.
        
        Уровень upper Intermediate требуется менеджерам и тимлидам, чтобы понимать и поддерживать иностранных коллег в команде, за которую они отвечают. Взаимоотношения, адаптация новичков и другие тонкости коммуникации требуют более свободного общения на английском языке.
        
    - **Что делать, если английский почти нулевой?**
        
        Возможность попасть в разработку без знания английского есть. Часть на вакансии Джуниор-программистов такой навык не требуется, либо работодатель готов оплатить обучение своим сотрудникам.
        
    - **Хорошо знаю язык, но боюсь на нем говорить**
        
        У многих русскоязычных айтишников есть страх перед собеседованиями на английском языке. Это во многом связано с тем, что мы редко заканчиваем школу или университет с уверенным разговорным английским. Поэтому существует много тренингов для собеседований, которые включают самые разные сценарии: от нескольких типовых вопросов на английском языке до развернутых бесед.
        
    - **Как подтянуть английский?**
        
        Не всегда есть возможность ходить на платные курсы или заниматься с репетитором. Вот вам несколько советов, как естественным образом улучшить свои знания:
        
        1. Поменяйте язык ваших приложений, соцсетей и мессенджеров на английский язык. Привычные детали и мышечная память позволят вам с первого использования сориентироваться в происходящем.
        2. Поставьте себе план по прочтению статей и прослушиванию аудиокниг на английском. Полчаса разговорной речи в ваших наушниках по дороге в офис и одна статья в день будут погружать вас в контекст позволяя мозгу привыкнуть и почувствовать себя в своей тарелке.
        3. Пересмотрите знакомые фильмы на Нетфликс в оригинальной озвучке. Если сложно, подключите английские субтитры. Кстати, даже в прокате идет много фильмов на языке оригинала.
        4. Подпишитесь на англоязычные порталы и блоги в Фэйсбуке, заодно узнаете много нового. Здесь же удобно наблюдать за англоязычными дискуссиями, неочевидными сокращениями и сленгом.
        5. Подберите удобный онлайн-словарик и приложение для изучения английского каждый день.
        6. А еще на английском языке выходит много интересных подкастов. К некоторым даже есть расшифровки или хотя бы текстовое сопровождение.
        
        Не стоит стараться успеть всё и перечитать все статьи. Не забывайте открывать все это хотя бы три раза в неделю, и через несколько месяцев вы сами удивитесь, как быстро и много информации вы стали понимать.
        
        Стабильность - залог успеха.
        
        Кстати, английский может пригодиться и в основной работе. Конструкции и термины всех базовых языков программирования берут свои истоки в английском. Почему так, читайте в уроке №3.
        
- **Урок 3. Разберите код с точки зрения английского языка**
    - **Как английские слова в коде делают нашу жизнь проще?
    Что, если знание английского помогает дебажить быстрее?**
        
        Полезно разбираться в английском, если ты собираешься работать в ИТ. Как минимум потому, что большинство языков программирования написаны с использованием слов и конструкций английского языка, а большая часть библиотек и фреймворков разрабатывается на английском. Да и практически вся документация пишется на английском языке.
        
        Но как знание английского поможет разобраться в коде? И насколько глубоко удастся понять суть программы? Давайте разбираться.
        
    - **Немного истории**
        
        В первых компьютерах языки высокого уровня, смысл которых может быть частично или полностью понят человеком на визуальном уровне, не использовались вовсе. Программисты вводили заранее закодированные строки - конкретные инструкции, понятные только машине. При этом стороннему зрителю прочитать и понять, что делает этот код, было невозможно.
        
        Одним из первых высокоуровневых языков стали Шорткод и так называемый Автокод, написанные более “человеческим языком”. Но программирование на них все равно требовало глубокой инженерной подготовки и времени на отладку. Только в 1957 году появился Фортран, программы на котором выглядели доступными для понимания человеком. Фортран имел синтаксис, который позволял разобраться в том, какие структуры данных использует программа и какие операции над ними может совершать. Теперь читать код стало гораздо проще.
        
    - **Как разобраться в несложных конструкциях популярных языков на примере С++**
        
        Начнем с типов переменных, которые можно использовать для работы.
        
        - **Основные типы переменных в С++**
            - **int - целочисленный тип данных (от integer - целое число)**
            - **float - тип данных с плавающей запятой = дробное число (от float - плавать)**
            - **double - тип данных с плавающей запятой двойной точности (double - удвоение - повышает вдвое количество знаков после запятой)**
            - **char - символьный тип данных (от char - символ)**
            - **bool - логический тип данных (от boolean - логический, где подразумевается соответствие значения параметрам TRUE или FALSE)**
            
            Теперь несложно понять, что строка с операцией { float b = 7,9: } указывает на создание дробного числа. С другой стороны, если бы b имела тип int, то значение бы автоматически округлилось.
            
        - **Простые структуры в С++**
            
            Логические структуры тоже написаны на относительно понятном языке в логичной, пусть и более схематичной форме. Рассмотрим классические конструкции с условиями и счетчиками. Условный оператор дает программе выполнить определенное действие, только если выполняется указанное условие. Счетчик же предназначен для того, чтобы операция выполнялась несколько раз - в нем дополнительно указывается требуемое количество шагов.
            
            В виде кода обе конструкции выглядят следующим образом (на примере цикла while):
            
            **whle (Условие) { Тело цикла (какие действия будем совершать, пока идет цикл) }**
            
            While  в данном случае говорит программе: “пока условие Х выполняется, делай следующие действия”. У цикла есть и другой тип вида:
            
            **do { Тело цикла; } while (Условие);**
            
            Смысл здесь изменится так же, как изменился бы в родном языке: “делай следующие действия, пока не наступит Х”. Теперь программа будет проверять условие на НЕвыполняемость, и остановится, как только оно будет достигнуто.
            
            Если же нам известно точное количество итераций, стоит использовать цикл FOR (для).
            
            **for (действие до начала цикла; условие продолжения цикла; действия со счетчиком цикла на каждом шаге) { тело цикла; }**
            
            Интерпретация простая и тоже понятная путем прямого перевода: для каждого Х из перечня чисел в скобках выполняй действие У.
            
        - **Более сложные конструкции и методы**
            
            Тот же С++ имеет и ряд стандартных функций, названных так, чтобы можно было уже видя предложенный список доступных функций, выбрать подходящую. Поработаем с динамическими массивами. Ничего страшного, если этот термин вам пока не знаком. Название дано им неслучайно, а сами они во многом похожи на объекты из реального мира.
            
            Динамический массив - набор данных, которые могут перемещаться внутри ячеек своей матрицы. Разновидностью динамического массива является очередь - процесс, когда некие данные занимают “места” в ячейках и по мере освобождения предыдущего места, переходят на него.
            
            Для работы с такими массивами есть большой список функций. Облегчает задачу то, что зная английский, в них легко разобраться.
            
            Например, метод clear () - очищает очередь; IsEmpty() - проверяет, не является ли очередь пустой; print() - выводит очередь на экран.
            
            Кстати, в объектно-ориентированном программировании (ООП) есть концепции, которые позволяют описать с помощью английских терминов еще более сложные конструкции, например, паттерны.
            
            Паттерны ООП (от английского слова “шаблон, образец”) являются шаблонами для написания когда определенного узкого функционала. Многие из них были созданы исходя из частых запросов на одну и ту же логику в коде. Вот некоторые:
            
            **REGISTRY (англ - журнал записей)**
            
            Паттерн предназначен для хранения записей и предоставления информации по ним в том случае, если к записи обратились по имени. Например, список номеров медицинских карт или телефонных номеров. Очевидно, что всегда проще использовать готовый шаблон, чем заново изобретать велосипед, точнее, список данных.
            
            **FACTORY (англ - фабрика)**
            
            Паттерн хранит информацию о том, как создаются определенные объекты и данные. Например, для создания новой анкеты обратной связи нам не нужно каждый раз писать процесс, описывающий множество необходимых полей. Имея паттерн Фэктори, мы можем обратиться к нему и сказать “создай новую анкету”. В том случае, если анкета поменяла свою форму, изменения вносятся сразу на уровень Фабрики.
            
            **DECORATOR (англ - декоратор, оформитель)**
            
            Паттерн чаще всего используется для расширения исходного объекта до требуемого вида. Применяется для работы с интерфейсами и другими деталями, которые нужно “дотюнить”.
            
            По этой же логике появились Mediator (Посредник), Blackboard (Доска объявлений), Proxy (Заместитель) и т.д.
            
        - **Как назвать свои данные**
            
            Переменные и классы, которые вы задаете сами, тоже стоит называть понятным языком, иначе есть риск уже через 1-2 недели забыть их смысл.
            
            Пара хороших примеров: totalScore - итоговый счет в игре, maxWidth - максимальная ширина.
            
            Если это уместно и соответствует сути, принято добавлять к названиям значения:
            
            - количество (count), если идет подсчет
            - размер (size, length), если мы вычисляем длину и т.п.
            - номер (number), если возвращаем значение чего-то.
            
            Кстати, массивы часто называют словами во множественном числе. Таким образом становится понятно уже из названия, что внутри лежит целый набор данных. А в функциях на первое место часто ставят глагол, кратко объясняющий, что она делает, например, find, create.
            
            Зная эту деталь, уверены, вам будет несложно разобраться в задачке, которую мы подготовили для вас. Это простая игра, где компьютер загадывает число. Постарайтесь разобраться, какие правила у этой игры, и что вы можете делать, чтобы угадать число.
            
            1. secretNumber = generateNumber( )
            2. isCorrect = false;
            3. while (isCorrect ==false )
            4. {
            5. playersNumber = requestPlayerNumber( )
            6. isCorrect = validatePlayerNumberAndPrintResult(playersNumber)
            7. }
            8. congratulatePlayer( )
            
            ОТВЕТ: на самом деле у вас не так много возможностей угадать число, загаданное компьютером. Вы видите, что переменной “секретное число” было присвоено случайное значение. А дальше вы методом подбора пытаетесь его угадать. Как только введенное число совпадет с загаданным, компьютер поздравит вас.
            
            Надеемся, вам стало проще “читать” код визуально и не так страшно его изучать. Если что-то забудете, сориентируетесь по ходу дела, если у вас большой словарный запас.
            
- **Урок 4. Можно постоянно кодить и оставаться здоровым? 05.08.2023**
    
    *Все про туннелльный синдром и другие специфичные проблемы со здоровьем у разработчиков.*
    
    Если вы работаете в ИТ, вероятно, много времени проводите за компьютером в одной позе. В этом есть определенная ирония: комфортный офис, здоровая еда и спортзал напротив кабинета не избавляют вас от рисков сидячей работы.
    
    У большой части айтишников наблюдается нехватка физической активности. Вы и сами могли замечать за собой, что стали реже гулять и встречаться с друзьями, в выходные вам хочется остаться дома и посмотреть пару фильмов. К сожалению, именно ИТ-сфера и обуславливает проблемы, с которыми есть риск столкнуться каждому из нас: гиподинамия, аллергия на пыль, туннельный синдром. Рассказываем, что это за проблемы, как их распознать и что делать, чтобы снизить риски их появления.
    
    - **Туннельный синдром. Что это такое?**
        
        Туннельный синдром - сдавливание срединного нерва кисти - причина постоянной однообразной нагрузки на запястье: чем больше времени мы работаем с компьютерной мышкой в руках, тем опаснее для нас.
        
        **Почему это происходит?**
        
        В результате перегиба нерва происходит снижение кровообращения и частичное отсутствие кровообращения тканей. Мышцы не получают достаточного питания и кислорода, не происходит нужного обмена веществ. В результате двигательные функции ухудшаются, чувствительность снижается, а иногда пропадает вовсе.
        
        Дело не только в мышке. То, как мы набираем текст и пользуемся тачпадом, тоже вредно для наших рук. А представьте, каково им, когда мы свешиваем локти со стола или работаем лежа, подпирая ноутбук коленями. Особенно если это происходит в течение длительного времени.
        
        Спровоцировать появление туннельного синдрома могут избыточные спортивные нагрузки, травмы, такие заболевания, как сахарный диабет и некоторые другие причины. Поэтому в каждом из перечисленных случаев стоит еще внимательнее относиться к своему здоровью.
        
    - **Проверить себя на наличие туннельного синдрома**
        
        Соедините запястья и опустите руки под прямым углом от себя. Если вы в течение минуты почувствуете боль или другие неприятные ощущения, это повод пройти обследование.
        
    - **Как лечить туннельный синдром или снизить вероятность его появления**
        
        Прежде всего речь пойдет об изменении образа жизни:
        
        1. Ограничивайте нагрузку на руки. Если вы много работаете за компьютером, используйте голосовой ввод, где это возможно, или переходите на бумагу и ручку.
        2. Добавьте в рацион достаточно нужных витаминов и микроэлементов, в частности В6. Много витамина В6 содержится в зерновых проростках, орехах, в неочищенном рисе, шпинате, картофеле, моркови, цветной и белокочанной капусте, помидорах, клубнике, черешне, цитрусовых.
        3. Пользуйтесь эргономической клавиатурой и ковриком для мыши с силиконовыми вставками. Руки при такой работе устают меньше, их можно развести в стороны или изменить положение частей клавиатуры, поставив на разный уровень на столе.
        4. Проверьте, правильно ли вы держите руки на клавиатуре. Попробуйте печатать вслепую и задействуйте все пальцы, чтобы подключить мышечную память и снизить суммарную нагрузку на руки. Первое время методика может казаться неудобной. Но она эффективно работает уже много лет и доказала свою пользу. Для тренировки слепой печати есть специальные сервисы.
        5. Выполняйте физические упражнения, улучшающие кровообращение кисти: сжимайте и разжимайте пальцы, вращайте кистями, соедините ладони вместе и поочередно надавливайте ладонью на пальцы соседней руки так, чтобы кисть выгибалась наружу.
        
        Если все перечисленное уже не помогает, не бойтесь обратиться к неврологу. Иногда требуется медикаментозное вмешательство и физиотерапия. Туннельный синдром можно полностью излечить, если вовремя заметить проблему.
        
    - **Аллергия на пыль**
        
        Даже если у вас с детства ни на что нет аллергии, помните, что долгое пребывание возле пыльного монитора может вызвать аллергическую реакцию. Пыль скапливается не только на поверхности, но и между мелкими деталями, поэтому необходимо не реже раза в месяц тщательно чистить рабочий компьютер.
        
        Симптомы аллергии очень похожи на раннюю стадию простуды: заложенный нос, чихание, иногда сопровождается раздраженным горлом и слезящимися глазами. Если вы склонны к аллергии или сильно восприимчивы к пыли, не забудьте, что пыль скапливается также в коврах, шторах и мягких игрушках.
        
    - **Гиподинамия**
        
        Гиподинамия - это нарушение функций организма на фоне пониженной физической активности. Риск гиподинамии сильно увеличился в пандемию, когда мы даже выходные проводили дома. Мы с головой окунулись в то, что врачи называют недостаточными физическими нагрузками, малоподвижным образом жизни и плохими привычками.
        
        Симптомы гиподинамии:
        
        - быстрая утомляемость
        - бессонница
        - регулярные головные боли
        - нервозность и раздражительность
        - дряблость мышц
        - боли в спине
        
        Если же запустить свое состояние, то последствия могут быть хуже: проблемы с сердцем и сосудами, ожирение и снижение интеллектуальных возможностей. Поэтому настоятельно рекомендуем почаще ходить в зал, а в выходные видеться с друзьями не только за игровой приставкой. Лучше встретиться, например, в парке или за городом.
        
        Да, 2019 и 2020 год не давали достаточной возможности для активного отдыха и смены мест. Но рано или поздно пандемия закончится, главное не выйти из нее человеком, привыкшим сидеть дома 24/7 и видеться с друзьями только онлайн.
        
    - **Ухудшение зрения**
        
        Пока мы проводим целый рабочий день в мониторе, наше зрение неуклонно падает. В процессе работы мы фокусируемся на одной точке, наши глазные мышцы не отдыхают, а мы получаем осложнения в виде сухих глаз, близорукости и тому подобных вещей.
        
        О том, чем это чревато, и как с минимальными усилиями поддержать свое зрение, мы пишем в уроке №5. Надеемся, наши советы помогут вам. Не забывайте, что самое негативное воздействие компьютер оказывает именно на зрение.
        
    - **Выгорание**
        
        Многие не признают выгорание не только как симптом ухудшения здоровья, но и вовсе как предмет, заслуживающий внимания. В некоторых компаниях оно до сих пор считается последствием недостаточной вовлеченности и старательности сотрудника.
        
        Тем не менее в мае 2019 года ВОЗ признала выгорание, как фактор, влияющий на состояние здоровья. Оно было признано синдромом, вызванным хроническим стрессом на рабочем месте, который оказывает негативное влияние на здоровье и требует медицинской помощи.
        
        Само по себе выгорание говорим о сильном эмоциональном истощении. Это нежелание работать, развиваться или даже развлекаться. Это состояние снижает продуктивность, повышает тревожность и нервозность. Им часто подвержены руководители и другие ключевые работники компаний из-за того, что на них возлагается повышенная ответственность, для реализации которой часто не хватает ресурсов. В результате у человека опускаются руки.
        
        Кстати, эмоциональное истощение сказывается на реальных заболеваниях: с 2013 уровень заболеваемости среди 25 - 29-летних сотрудников вырос в 1,5 раза. Не стоит думать, что ночная работа и 10 часов подряд за компьютером не вредят вашему здоровью. Такой режим в сочетании с периодическим давлением со стороны менеджера, например, в преддверии релизов, может стать причиной эмоционального истощения.
        
        Активность в ночное время, сон посреди дня, отсутствие оффлайн-развлечений - все это снижает продуктивность, повышает тревожность и нервозность. Когда работа становится центром жизни, то ошибки и сложности проекта становятся фатальными сложностями для сотрудника. Даже при высокой зарплате и комфортных условиях качество жизни снижается.
        
    - **В каких условиях есть высокий риск выгорания**
        1. Требований и давления со стороны начальства больше, чем одобрения и поддержки.
        2. Команда не оправдывает завышенных ожиданий сотрудника, например, каждый из них тратит на работу меньше времени и привносит меньший вклад в общий результат.
        3. Нельзя заранее спланировать нагрузку, свободные дни чередуются с длительными спринтами непрерывного кодинга.
        4. Личная жизнь сильно смешивается с рабочей, чаты всегда активны, и коллеги ждут оперативных ответов в любое время.
        
        Советы, как этого избежать, не оригинальны. Самое главное, что нужно помнить: тяжелее всего вовремя идентифицировать выгорание и сразу начать работать над собственным эмоциональным равновесием. Только в этом случае вы не рискуете потерять продуктивность и доверие команды. Будьте внимательны к себе и своим друзьям, нас могут раздражать советы в духе “не работай на выходных”, но иногда они очень своевременны.
        
    - **Что делать, чтобы избежать выгорания?**
        1. ***Определяйте четкие границы своего рабочего времени. Не бойтесь сообщить команде о том, что не всегда может быть на связи. Не самые важные вопросы переносите на первый рабочий день, даже если решить их можно в течение 15 минут.***
        2. ***Разрешайте себе отдыхать. Часто мы не расслабляемся по-хорошему, поскольку думаем. что слабо поработали. Это как снежный ком: мало отдыхаем - плохо работаем - виним себя за слабый результат - и вновь не можем по-хорошему отдохнуть.***
        3. ***Сфокусируйтесь на своем теле и мыслях. Во время напряженных моментов постарайтесь выделить несколько минут, чтобы “прочувствовать стресс”: обратите внимание, какие эмоции вы испытываете, какие части тела напряжены, как вы начинаете мыслить. Фокус на нестабильном состоянии при определенной практике помогает вернуть себя в состояние баланса.***
        4. ***Цените свой труд. Именно обесценивание проделанной работы прежде всего повергает нас в апатию. А делая небольшие детали абстрактных проектов, сроки которых затягиваются, мы часто не видим, какую значимую работу проделали. Уметь вовремя себя похвалить - важный талант.***
        5. ***Ведите учет своих достижений. Не забывайте хвалить себя, особенно в сложные моменты.***
        6. ***Не делайте чужую работу. Помогайте и учите, если это будет оправдано, например, коллега не справится без вас или у вас есть нужный опыт. В остальных случаях вы берете на себя лишнюю ответственность, которая, при высокой загрузке, может снизить качество вашей работы.***
        
        У Льюиса Кэрролла есть хорошая цитата: “Нужно бежать со всех ног, чтобы оставаться на месте, а чтобы куда-то попасть, надо бежать, как минимум, вдвое быстрее!”. Эта цитата отлично подходит к тому режиму, по которому сейчас живут многие айтишники. Тем не менее не стоит загонять себя. Только двигаясь размеренно, сохраняя состояние работоспособности и разделяя гордость за успехи своего проекта, можно продвинуться достаточно далеко.
        
    - **Как сидеть за компьютером 24/7 и сохранить здоровье?**
        
        Обустраиваем рабочее место, подбираем технику и соблюдаем несложные правила, чтобы оставаться здоровыми, проводя много времени за компьютером.
        
        Длительная сидячая работа является неестественной для анатомии человека - страдают суставы, ослабевают мышцы ног, шея и спина испытывают постоянную нагрузку. Ситуацию осложняет то, что мы привыкаем сидеть неправильно, усугубляя наши ошибки.
        
        Надеемся что на данный момент никто из вас не сталкивался ни с чем серьезным. Тем не менее многие замечают, что с годами зрение ослабевает, задерживать дыхание надолго, как в детстве, уже не удается, а если резко встать - в глазах темнеет. Причины всех неудобств в неудачном рабочем месте. Все-таки это не самая простая система, требующая правильно эксплуатации.
        
        Но есть и хорошая новость: если можно привыкнуть к плохой позе, то можно привыкнуть и к хорошей. Давайте разберемся, какие несложные правила позволят избежать осложнений.
        
    - **Проверяем стол и стул**
        
        Высота стула должна позволять полностью поставить стопы на пол. При этом важно, чтобы колени были согнуты под прямым углом. Идеальная высота стола при этом - если локти удобно ложатся на стол. Они не должны свисать, но при этом плечи должны быть расслаблены, другими словами, полностью опущены.
        
        Чтобы было проще убедиться, что высота стола и стула настроена правильно, проверьте свое солнечное сплетение, оно должно располагаться чуть выше поверхности стола.
        
    - **Ставим правильно компьютер**
        
        Компьютер устанавливается чуть ниже линии взгляда. При этом расстояние до глаз должно составлять около 50 см. Если же у вас рабочим компьютером является ноутбук, обеспечить это расстояние не так просто. В таком случае советуем иметь на рабочем месте подставку и отдельную клавиатуру, которые позволят добиться нужного положения техники.
        
    - **Работаем с освещением**
        
        Несмотря на то, что экран монитора достаточно яркий и его освещенность можно регулировать, работать с ним без дополнительного источника света не рекомендуется. В этом случае глаза напрягаются ощутимо сильнее, и после вечерней работы в таком режиме сложнее заснуть.
        
        Позаботьтесь о светильнике на вашем столе и постарайтесь зафиксировать его сверху над монитором и клавиатурой. Так блики не будут отражаться в экране, создавать дополнительное напряжение для вашего зрения и раздражать слизистую оболочку глаза. Включайте светильник как только за окном начинает темнеть. Хорошим решением будет установить светильник таким образом, чтобы он освещал стену ЗА компьютером, снижая контрастный перепад от яркого экрана к затемненной комнате.
        
    - **Делаем перерывы**
        
        Часто хочется доделать неприятную работу за один подход и больше к ней не возвращаться. Но глазам (да и вашему мозгу) важно переключаться с экрана на что-то еще, отдыхая и восстанавливаясь для будущей работы.
        
        Мы знаем, как сложно заставить себя делать разминку для глаз и зарядку. Поэтому советуем для начала почаще выходить заварить чай (телефон оставьте на рабочем столе), изучайте происходящее за окном, фокусируя взгляд на мелких деталях, и пару раз в день выделите 10-15 минут, чтобы полежать на диване с закрытыми глазами. Может быть у вас есть домашний питомец, который будет только рад прогуляться с вами.
        
    - **Пользуемся надстройками**
        
        Сейчас появилось много дополнений для рабочих мест: конвертеры, стенды, кронштейны, которые позволяют регулировать высоту и наклон мебели. Не менее полезно приобретать ортопедическое кресло. Согласно исследованиям, использование компьютерного кресла с раздвоенной спинкой снижает давление на позвоночник до 50%.
        
        Не забывайте, что ваше здоровье и самочувствие в первую очередь зависит от вас самих.
        
    - **Чек-лист: проверяем себя на вредные привычки**
        1. Обратите внимание на свои запястья. Ощутите, как ваши руки лежат на мышке и клавиатуре. Если чувствуете напряжение, их ломит или хочется размять, то положение рук неправильно и может привести к защемлению мышц.
        2. Поднимите взгляд в окно и посмотрите вдаль. Как быстро ваш взгляд смог сфокусироваться на дальней точке и рассмотреть ее? Если понадобилось время, ваше глаза утомлены.
        3. Резко встаньте. Если в глазах темнеет, вы засиделись, и ваше давление снизилось. Частые повторения этого симптома могут говорить о гиподинамии - пониженной активности.
        4. Сядьте в привычной позе и протяните руку к клавиатуре. Если, выпрямив руку, вы касаетесь ладонью кнопок - отлично. Иначе клавиатура располагается слишком близко или далеко, что вынуждает лишний раз напрягать спину.
        
        Кстати, есть еще одна привычка, которой грешим мы все. Просматривая фотографии, видео или ленту в соцсетях, мы непроизвольно задерживаем дыхание, что мешает нормальной вентиляции легких. Многим этот эффект знаком как легкое “апноэ”.
        
    - **Вместо заключения**
        
        Все мы привыкли работать по-разному. Кто-то постоянно отвлекается, а кто-то пропадает в работе часами не глядя на время. В любом случае ваше рабочее место должно быть комфортным для вас и оставаться вашей личной территорией, свободной от детей, животных и лишнего хлама. А будет ли оно с колонкой, подушкой или вентилятором - решать вам.
        
        Главное, что посоветуем напоследок: никогда не работайте в кровати. Вы не только испортите себе осанку, но и перестанете воспринимать ее местом для отдыха. А без отдыха нет ни продуктивности, ни удовольствия от жизни. Работайте с удовольствием и посвящайте больше времени приятным вещам.
        
    
    **[Устаревшая версия урока](https://gbcdn.mrgcdn.ru/uploads/asset/3869507/attachment/402d9a2332c4c87c4a546be8ba5a94aa.pdf)**
    
- **Урок 5. Как беречь глаза при работе за компьютером. 05.08.2023**
    - **Как закрыть все таски и не испортить зрение?**
        
        Поговорим о том, что вреднее для глаз - рабочие чаты или Инстаграм, а также, как, сохранив привычный ритм жизни, не потерять здоровье.
        
        Многие из нас носят очки. У кого-то близорукость, у кого-то - синдром “сухого глаза”. Правда в том, что пока мы проводим целый рабочий день в мониторе и при этом неправильно сидим, не разминаемся и не следим за здоровьем, наше зрение неуклонно падает. А если мы делаем это ночью, после работы переключаемся на смартфон и совсем не выходим из дома, то компьютерный зрительный синдром нам обеспечен.
        
        Обратите внимание на свое зрение: посмотрите на дальний объект (например, на предмет за окном); если зрение фокусируется долго или вы вовсе не можете его рассмотреть, ощущается сухость и хочется потереть глаза - у вас синдром компьютерного зрения.
        
        Причина простая: в процессе работы годами мы фокусируемся на одной точке, в итоге глазные мышцы не отдыхают, мы начинаем реже моргать и сами снижаем количество увлажнений наших глазных яблок. При работе в темноте негативное воздействие увеличивается.
        
        Согласно медицинским исследованиям основная опасность мониторов как раз не в излучении, а в опасности для зрения. И это не только компьютеры, смартфоны не менее опасны для нашего зрения.
        
    - **Как избежать таких последствий?**
        - **Расположение экрана**
            
            Рекомендуется расположить экран на такой высоте, чтобы взгляд падал сверху вниз под углом 15-30 градусов. Это оптимальное положение, чтобы не напрягать шею, при этом оставлять глаза в полуприкрытом состоянии, чтобы они меньше пересыхали.
            
            Соблюдайте оптимальное расстояние до экрана. Для его оценки существует метод Хармона: сложите пальцы в щепотку и коснитесь брови. Отметьте на каком расстоянии находится ваш локоть. Расстояние до экрана смартфона или ноутбука должно быть не меньше.
            
            Стационарный монитор должен находиться еще дальше, на расстоянии вытянутой руки.
            
        - **Хороший монитор**
            
            Позаботьтесь о наличии антибликового покрытия и хорошего разрешения. Вашим глазам будет легче, если у устройства будет хорошая матрица, система подсветки дисплея и частота. Чем ниже частота мерцания, тем быстрее вы утомляетесь.
            
            Уменьшайте яркость, если работаете в темноте, и следите за уровнем контраста. Размытые или, наоборот, резаные контуры объектов вынуждают глазные мышцы прикладывать избыточные усилия. При длительном использовании вы можете даже чувствовать перманентную головную боль.
            
            То же самое происходит, когда вы читаете с экрана слишком мелкий шрифт.
            
        - **Освещение рабочего места**
            
            Хорошо, если пространство у компьютера освещено также хорошо, как его экран. Крайне не рекомендуется работать в темноте - это вызывает дополнительное напряжение и усталость глаз.
            
            Ради эксперимента можно снизить наличие вредной синей части спектра экрана. Для этого на Мак и Виндоус 10 есть встроенный инструмент Найт Шифт. Для более ранних поколений устройств есть сторонние решения. Уменьшение влияния синего спектра помогает восстановить циркадные ритмы, т.е. не дать яркому свету перевозбудить мозг. Первое время изображение будет казаться непривычно желтым, однако, к этому быстро привыкаешь и даже удивляешься, как некоторые коллеги работают со странным цветом экрана.
            
        - **Регулярные перерывы**
            
            Очевидный, но крайне важный факт. Старайтесь расслабить глаз раз в 20-30 минут, отвлекаясь на сторонние предметы. Идеально, если они будут находиться на заднем плане и являться естественными, например, это может быть вид за окном.
            
        - **То, как мы моргаем**
            
            Сидя перед экраном мы моргаем в два раза реже из-за того, что глаза не нуждаются в движении. При этом роговице глаза не хватает влаги (так называемой слезной пленки), и она пересыхает. По этой же причине вредно смотреть на экран снизу вверх - мы раскрываем глаза полностью, не давая им экономно расходовать влагу.
            
        - **Гимнастика для глаз**
            
            Важно заботиться не только об увлажненности роговицы, но и о тонусе зрительной мышцы, которая спазмируется от постоянного напряжения, фокусируя взгляд на одном расстоянии.
            
            Выделяйте 2-3 небольших перерыва, чтобы размять глаза (как минимум повороты и круговые движения) и выполнять упражнение доктора Аветисова. Сфокусируйтесь на близком объекте, не более, чем в полуметре от вас. Переведите взгляд на далекий объект, например, автомобиль или человека за окном. Дождитесь, пока ваш взгляд сфокусируется на новом объекте. Повторяйте гимнастику в течение 3-5 минут.
            
        - **Полезные продукты**
            
            Лютеин - пигмент, который защищает глаза от повреждений и блокирует ультрафиолет, в большом количестве содержится в шпинате, фисташках, морковке, петрушке, зеленом горошке. Зеаксантин является его изомером и встречается, например, в хурме и кукурузе. Когда этих элементов не хватает, сетчатка становится более уязвимой.
            
        - **Как избежать таких последствий?**
            1. Периодически вставайте и прогуливайтесь по офису, переводите взгляд в окно на удаленные предметы, меняйте фокус, заставляя глаза переключаться.
            2. Размышляя над чем-то, переводите взгляд на сторонние предметы и двигайте глазами, мысленно обводя их контуры.
            3. Периодически отвлекайтесь от работы и массируйте закрытые веки кончиками пальцев в течение минуты.
            4. Пару раз в день ложитесь на диван, закрывайте глаза и расслабляйтесь, 10 - 15 минут достаточно, чтобы ваши глаза отдохнули.
            5. Во время длительных поездок старайтесь найти глазами горизонт и наблюдать за ним.
            
            Кстати, здоровью роговицы способствует повышенная влажность в квартире и комфортная температура - 18-22 градуса.
            
            В остальном важно внимательно относиться к своему зрению и не полениться дойти до окулиста, если почувствуете, что зрение уже не такое острое, как раньше. Фисташки и работа в холоде - еще не решение всех проблем. Поэтому если вы нашли в ИТ свое призвание, то не поленитесь и потратьте немного времени на профилактику здоровья. В длительной перспективе это поможет избежать проблем и продолжать получать кайф от своей работы.
            
- **Урок 6 Как разработчику избежать профессиональных болезней 05.08.2023**
    
    Интересный факт про разработку: Первая компьютерная игра называлась Спейсвар. И разработчики просто поделились ей со всеми желающими. Таким образом, ничего не заработав.
    
- **Урок 7. Почему программисты работают ночью 05.08.2023**
    - **Стоит ли работать по ночам и спать до 12 ?**
        
        Как выбрать комфортный режим работы при гибком графике, успеть к релизу и выспаться?
        
        Практика показывает, что увлеченные программисты работают не менее 10 - 12 часов в сутки. Они поздно встают, решают рабочие вопросы в течение дня, под вечер немного отдыхают и начинают кодить. Писать код “в ночь” для многих из них совершенно нормально. Более того, им это нравится гораздо больше, чем рабочий график с 9 до 18.
        
    - **Хочу сам устанавливать свой график**
        
        Для программистов возможность самим планировать свое рабочее расписание и количество часов, выделяемых на работу, очень важна. Гибкий график и удаленная работа становятся определяющими при выборе компании. Со временем каждый из них вырабатывает свое комфортное время и может вставать в 12:00, а основную часть кода писать ночью.
        
    - **Я работаю 12 часов в день потому, что сам так захотел**
        
        Увлеченный программист может работать 10 - 12 часов в сутки без ущерба для качества кода. Возможность погрузиться в проект по-хорошему, не отвлекаясь на сторонние факторы, дает дополнительный буст к исполнительности.
        
        Это на руку и компании, которая официально имеет право только на 40 часов своих сотрудников в неделю. поэтому офисы большинства ИТ-компаний обустроены так, чтобы из них не хотелось уходить: диваны, игровые приставки, автоматы с едой, спортзал и бесплатные напитки. Кстати, в некоторых офисах уже появляются комнаты с диванами, где можно поспать несколько часов после ночной работы. Для тех, кто не знаком с кухней ИТ-компаний, это может кззаться дикостью: как люди, которые зарабатывают сотни тысяч, выбирают возможность поспать на офисном диване, вместо своих квартир?
        
    - **Я предпочитаю кодить ночью**
        
        Необходимость работы с 9 до 18 многим мешается сосредоточиться и по-хорошему погрузиться в задачу. Как следствие, айтишники чаще всего встают ближе к 12:00, работают со средней вовлеченностью в течение дня, а потом усиленно кодят ночью. Программист, которые работает до рассвета и только потом ложится спать - уже не редкость.
        
        У этого есть простая причина: разработчики работают по ночам потому, что это не требует прекратить работу к фиксированному времени, например, к 18:00. Таким образом мозг более расслаблен, а рабочие часы проходят эффективнее.
        
        Но иногда айтишники сами заставляют себя работать больше, поскольку не замечают прогресса. По статистике только 10-20% рабочего времени тратится на написание кода, который потом пойдет в релиз. Все остальное будет удалено, заменено и отрефакторено. В итоге это всего 10-20 строк кода в день. И несмотря на то, что такая картина нормальна для многих айтишников, кажется, что в течение дня сделано очень много.
        
    - **Ненавижу тайм-трекеры и тайминги**
        
        Становится понятно, почему разработчики не хотят, чтобы менеджеры сами устанавливали свои сроки. Более того, задачи, связанные с исправлением ошибок или часто просто невозможно оценить заранее. От этого попытка соблюсти гипотетические сроки вызывает негативные эмоции.
        
    - **Почему такой график стал нормой?**
        
        Ненормированные и ночной форма работы ни для кого не является догмой. Это выбор каждого человека, который пришел в ИТ, и если он погружен в проект, то будет делать все, чтобы запуск прошел успешно. Кто-то в привычное рабочее время, а кто-то в удобные ему часы. Такой формат может отнимать много времени и сил, но приносит ни с чем не сравнимое чувство удовлетворения и гордости за свой проект.
        
        Это одна из причин, почему руководителям, слабо погруженным в ИТ-процессы, сложно воспринимать программистов наряду с остальными сотрудниками. Отсюда рождается много мифов:
        
        - программисты ничего не делают, только требуют высокую зарплату;
        - они не могут дать точных сроков, и ничего не сдают вовремя;
        - они работают два часа в день, а остальное время сидят в соцсетях.
        
        Тем не менее за последние три года культура распределенных удаленных команд сильно развилась, и уже гораздо чаще можно встретить компании, которые предоставляют сотрудникам комфортные условия.для работы, даже если это рабочие часы в ночное время. На первый план вышло не количество отработанных часов, а результативность и значимость сотрудника для проекта.
        
    - **Заботимся о качестве своей жизни**
        
        Лишая себя сна, мы стараемся выиграть побольше времени, но только теряем его. Мы получаем больше стресса и меньше времени. Причина - циркадные ритмы, которые отвечают за регуляцию сна. Они влияют на нашу бодрость, иммунитет и даже скорость старения.
        
        Циркадный ритм регулируется мелатонином, который вырабатывается в темноте. Большинство не знает об этом и проводит вечер в окружении искусственного освещения в обнимку с гаджетами. В итоге мозг потом больше не может расслабиться и момент засыпания откладывается за полночь.
        
    - **Но что делать, если вам приходится работать ночью, а спать после рассвета? Вот несколько советов:**
        1. **Мелатонин боится света. Не сидите в смартфоне лежа в кровати, либо отключайте синюю часть спектра. И, разумеется, не засыпайте под ролики Ютуб.**
        2. **Как только вы просыпаетесь, наоборот, наполняйте комнату солнечным светом, чтобы “зарядить” организм и скорректировать свои циркадные ритмы.**
        3. **Спите не менее 7 часов в сутки с закрытыми шторами. Хорошо, если в вашей квартире есть блэк-аут шторы, которые не пропускают солнечные лучи и имитируют темное время суток.**
        4. **Не работайте в кровати, чтобы дать мозгу время отдыха от времени работы и по-настоящему расслабиться. Если в вашей квартире больше одной комнаты, старайтесь не работать там, где спите.**
        5. **Пройдите обследование на наличие полезных микроэлементов в организме. Помогите восстановиться тому, чего не хватает конкретно сейчас по разным причинам: от стресса до холодной погоды.**
        6. **Введите привычки, которые будут держать ваш организм в тонусе: прохладный душ по утрам, “разгрузочные дни” без жирного по вторникам и пятницам, исключите сладкие фрукты и фастфуд.**
        
        Если вы решили последовать нашим советам, то важно понимать, что главное - не интенсивность. Нет необходимости с первого же дня вставать с восходом солнца, а после 22:00 отключать телефон. Будьте системными, воспитайте в себе такой образ жизни, как привычку, и сами удивитесь, как много сил и желания жить вы будете иметь по сравнению с вашими коллегами и друзьями.
        
- **Урок 8. Какие навыки нужны программисту? 05.08.2023**
    - **Интересный факт про разработку:**
        
        Первый компьютерный вирус был разработан в 1986 году в Пакистане. Этот вирус под названием Brain создали работники компьютерного магазина, чтобы помешать своим клиентам создавать копии их программного обеспечения без разрешения. В отличие от обычных вирусов, Брэйн не повреждал и не удалял какие-либо файлы, а просто отправлял сообщение об авторских правах.
        
    - **7 качеств хорошего программиста**
        
        Чему учиться, чтобы повысить свою ценность для руководителя и команды?
        
        Создатель языка программирования Перл Ларри Уолл считает, что три главных навыка хорошего программиста это лень, нетерпеливость и гордыня. Ленивый человек найдет самый быстрый и эффективный способ сделать что-либо. Нетерпеливый сотрудник быстро проверит то, что кажется ему правильным. А гордый - будет самосовершенствоваться, ведь страстное желание гордиться собой станет огромной мотивирующей силой.
        
        Какие еще качества и навыки покажут вас как хорошего специалиста?
        
        Другими словами, над чем работать, чтобы увеличивать свою ценность для руководителя и команды?
        
        - **Умение планировать**
            
            Под планированием имеется в виду и способность адекватно оценить сроки и способность отделить важное от неважного. Такой навык автоматически подразумевает, что во-первых, вы хорошо погружены в детали продукта и знаете, где могут быть узкие места, а во-вторых, воспринимаете продукт целостно, зная его основную ценность и целевую аудиторию.В умении планировать скрыт талант мыслить и как программист, и как менеджер. Т.е. знать, когда стоит отрефакторить код и заняться техническим долгом, а когда - быстро пилить фичи и выпускать их на рынок, чтобы успеть собрать сливки с аудитории, у которой есть на нее спрос. Чтобы добиться хороших результатов в планировании, заведите несколько полезных привычек:
            
            1. Планируйте Цели письменно - на бумаге, в заметках или на доске в Трелло.
            2. Назначайте своим задачам разный приоритет и выполняйте их в нужном порядке.
            3. Дробите сложные цели на мелкие подзадачи, которым можно назначить конкретный срок.
            4. Всегда оставляйте временной запас, не старайтесь распланировать все 8 часов. Так вы не будете отставать от графика и перерабатывать из-за форс-мажоров.
        - **Умение работать в любой обстановке**
            
            Пандемия диктует нам свои условия. Иногда вам придется работать в доме в окружении детей, питомцев и сладостей на кухне. Иногда это будет шумный офис или кафе по дороге на работу.Умение работать, как в тишине, так и в хаосе очень важно. Кроме обстановки на результат может влиять этап работы над продуктом - это первые относительно спокойные спринты или месяц до релиза.
            
        - **Стрессоустойчивость**
            
            Многие интроверты выбирают путь айтишника, чтобы не сталкиваться с переговорами с клиентами, не выступать и вообще поменьше видеть людей. Тем не менее пусть программиста нельзя назвать легким. Так или иначе каждый сталкивается с жесткими сроками и неконкретными требованиями. Есть и более частая беда: код почему-то не работает. И здесь важно спокойно отнестись к текущей неудаче и продолжить работать. Справиться с невольным стрессом помогают, как ни странно, коллеги. Будьте честны о своих переживаниях и спросите о паре-тройке схожих случаев в их практике. У них явно будет, чем поделиться с вами, ведь в таких ситуациях оказываются все айтишники. Чем больше знаний о схожем опыте вы получите, тем проще вам будет справляться с ним самому.
            
        - **Умение презентовать**
            
            **РезультатНе всегда объекм проделанной вами работы очевиден для остальных. Вам придется рассказывать о том, что именно было сделано и с каким результатом на разных уровнях - своему руководителю, менеджеру, команде проекта. При этом презентации часто гораздо нагляднее отчетов и позволяют быстро донести информацию. Навык доступно и интересно рассказать о результатах помогает не только в отчетности. Он пригодится в том случае, если нужно научить чему-то менее опытных коллег или передать свой опыт. Если вы боитесь публичных выступлений даже на уровне команды, то стоит начать с небольшой подготовки перед защитой:**
            
            1. Составьте план или текст выступления.
            2. Проговорите его пару раз, чтобы убедиться, что текст звучит логично.
            3. Если впереди большое выступление, попробуйте выступить на встречах помельче, или среди знакомых.
            4. Не переживайте, если выступление будет не идеальным. Самое главное - быть конкретным и донести ключевые мысли. Тем более никто лучше вас не знает о том, какую работу вы проделали.
            5. В крайнем случае на онлайн-встрече вы можете выступить с отключенной камерой, глядя на подготовленные тезисы, если такой формат принят в вашей компании.
        - **Менторинг**
            
            **Менторинг позволяет обмениваться знаниями с коллегами и помогать новичкам. Кроме этого процесс менторинга помогает самому глубже разобраться в теме. Ведь мы сами хорошо понимаем то, что объясняем другому человеку. Есть ряд дополнительных навыков, которые улучшаются благодаря прокачке менторинга:**
            
            1. ораторское искусство
            2. навык презентации
            3. навык переговоров
            4. руководящий опыт
            5. решение конфликтных ситуаций
            
            Если хотите попробовать себя в роли ментора, но у вас нет руководящего опыта, узнайте о возможности приглашать стажеров в компанию. Предложите менторство одного из них. Не бойтесь, что не сможете быть полезным или интересным. Если вам сложно самому разработать план стажировки, попросите у эйчара пару планов адаптации на схожих должностях и используйте их как пример.
            
        - **Умение быстро осваивать новые технологии и инструменты**
            
            **Когда мир меняется так быстро, как сейчас, умение быстро осваивать новое становится залогом успеха. И речь не только про готовность осваивать новые навыки, которые пригодятся в работе. Переходить на другой график, перестраивать устоявшиеся процессы, менять текущие рабочие привычки очень важно. Совсем недавно нам пришлось быстро осваивать новые онлайн-инструменты, учиться работать с коллегами, которых иногда не видели вживую, и делать акцент на диджитал-инструментах вместо привычных оффлайн-решений.	Как быстро вы перестраиваетесь сейчас?Вспомните, какие значимые изменения произошли с вами в этом году.Может быть это новый формат отчетности или новый фреймворк для работыОтветьте для себя на следующие вопросы:**
            
            1. Насколько позитивно вы восприняли новость о переходе на новый инструмент?
            2. Как быстро вы относительно остальной команды перешли на него: одним из первых, в общей массе или сопротивлялись до последнего?
            3. Увидели ли вы эффективность нового решения?
            4. Знаете ли вы аналогичные решения в других областях, которые могли бы порекомендовать своей команде?
            5. Рекомендовали ли вы такие решения в этом году?
            
            Если вы в основном пассивны, то не исключено, что много нового вы изучаете только благодаря драйвовой команде. Не бойтесь почувствовать себя не в своей тарелке из-за новых инструментов, перемены - одна из возможностей непрерывно развивать свой мозг.
            
        - **Дисциплинированность**
            
            **Дисциплинированному человеку хочется доверять. Он выдержан, внутренне организован и способен организовать других. Дисциплина повышает работоспособность и воспитывает ответственность. Уже поэтому такому человеку руководство часто доверяет ключевые проекты. С другой стороны, если человек постоянно опаздывает, не сдает вовремя задачи и не может вылезти из соцсетей, его могут счесть легкомысленным и необязательным. Дисциплина помогает не только в работе, но и в обучении, занятиях спортом и заботе о собственном здоровье.**
            
            **Как стать более дисциплинированным:**
            
            1. Не отвлекаться на соцсети слишком часто. Установите себе специальное приложение или попросите ваших коллег обращать внимание на то, как часто вы отвлекаетесь.
            2. Составить расписание и стараться придерживаться его в течение дня.
            3. Записывать свои расходы и доходы и стараться составлять план по ним.
            4. Давать публичные обещания и также публично отчитываться за их выполнение.
            5. Тренироваться говорить “нет”
            6. Определить ресурсные и нересурсные активности, стараться исключать бесполезные события и действия.
        
        Чем-то из перечисленного вы обладаете уже, чему-то получится научиться только через какое-то время. Тем не менее работа над каждым из перечисленных качеств поможет вам быстрее наращивать свои скиллы, подняться по карьерной лестнице и заслужить доверие коллег.
        
        Удачи!
        
- **Наставничество 05.08.2023**
    - **Встаньте на путь Наставника**
        
        Наши исследования показали, что эффективность обучения увеличивается, если у студента есть Наставник. Мы стремимся, чтобы каждый ученик ГикБрэйнс получил от обучения максимум благодаря помощи сообщества.
        
    - **Чем занимается Наставник?**
        
        Помогает студенту осваивать программу обучения, выполнять практические задания и учебные проекты. Мы предусмотрели инструменты на сайте, которые позволят вам общаться со своими подопечными. Вам будут задавать вопросы, а вы отвечать на них.
        
    - **Как стать Наставником?**
        
        Наставником может стать выпускник ГикБрэйнс старше 18 лет. Вы должны пройти хотя бы один курс и сдать тест по нему, если он есть в программе. Как минимум 6 практических заданий должны быть сданы на “хорошо” или “отлично”. После успешного прохождения курса вы получите доступ к новым функциям, а на сайте у вас появится бэйдж “Наставник”. Вы сможете выбирать потоки, которые хотите курировать, и вам автоматически будут назначены студенты.
        
    - **Что получает Наставник?**
        
        **Скачок в развитии**, **Особый статус**
        
        Став Наставником, вы повышаете свой экспертный статус не только в ГБ, но и любом профессиональном комьюнити. Это привлекательно и для работодателей.
        
        **Плюс в карму**
        
        Многим интересно и приятно помогать новичкам и видеть их благодарность. На этом принципе строится наше сообщество.
        
        **Полезные связи**
        
        Если вы фрилансер или задумываетесь над собственным проектом, наставничество поможет вам отобрать в свою команду талантливых и активных соратников. Но даже если вы не ищете коллег, наставничество для вас будет способом познакомиться с единомышленниками и расширить круг общения.
        

**05.08.2023 Подготовка. Наставничество**

**05.08.2023 Подготовка. Наставничество**

### Модуль: Вопрос - Ответ по программе. 02.08 - 03.08.2023

- **Урок 1. Вводное видео с директором образовательных проектов Анной Ковбас**
    
    **Основные тезисы:**
    
    1. В этом видеокурсе 5 уроков, в них есть ответы на вопросы, которые могут возникнуть в процессе обучения.
    2. Нам важно, чтобы с каждым студентом был контакт на протяжении всего обучения.
    3. Наша команда рада видеть вас среди студентов ГикБрэйнс. Мы уверены, что за время обучения вы достигнете поставленных целей и сформируете правильную траекторию для смены профессии!
- **Урок 2. Вопрос - Ответ с Александром Волчеком. Траектория Программы**
    
    Александр Волчек, ИТ-предприниматель и СЕО ГикБрэйнс, расскажет о линейке ИТ-направлений “Разработчик”.
    
    Из видео вы узнаете, чем различаются программы разной длительности, как получить документ об образовании и трудоустроитсья по новой профессии. А еще поймете, как будет проходить обучение в разных форматах, из каких блоков состоит программа, какие дополнительные активности помогут углубить знания. Бонус - море мотивации и вдохновения перед стартом.
    
    - **Основные тезисы:**
        1. Название программ ИТ-обучения в ГикБрэйнс - “Разработчик”. Мы выбрали его для описания современных айтишников: программистов, тестировщиков, аналитиков, проджект- и продакт-менеджеров.
        2. ИТ-программы различаются по длительности. Чем дольше длится программа, тем выше профессиональный уровень закончивших ее студентов. За 6 месяцев можно получить уровень Интерн, за 12 - Джуниор, за 24 - Миддл, за 36 - Миддл+, за 60 - Сеньор.
        3. Чтобы освоить профессию на уровне Интерн и Джуниор, достаточно обучения на программе. Чтобы стать мидлом, параллельно нужно начинать работать.
        4. Трудоустройство - важный блок в программе обучения. Если вы выполняете все домашние задания и посещаете занятия, мы гарантируем трудоустройство через 6 месяцев для полугодовой программы и через 9 месяцев для более длительных.
        5. Вы можете получить диплом или удостоверение (в зависимости от уровня вашего образования) после завершения программы на 6 месяцев и 1 год. На более длительных программах документ об образовании получают ежегодно - он пригодится, чтобы начать работать, не дожидаясь окончания обучения.
        6. На протяжении обучения вы проходите промежуточную оценку знаний. Мы смотрим на ваш уровень знаний и, если нужно, даем рекомендации: что подтянуть, на что обратить внимание, нужно ли заново пройти неусвоенный материал.
        7. Обучаться можно индивидуально или в группе. В первом случае вы смотрите уроки в записи, когда вам удобно. Во втором - посещаете онлайн-занятия. Здесь больше общения с одногруппниками и преподавателями, а еще есть групповая динамика: вы видите ошибки и успехи других, изучаете чужой опыт, который помогает вам расти.
        8. Группы миксуются по уровню подготовки, часовым поясам и регионам, возрасту, образовательным целям и другим критериям. В процессе люди могут переходить из одной группы в другую - это зависит от образовательной траектории.
        9. Формат обучения можно менять. Например, если вы выбрали обучение в записи, можете перейти в группу, но раз в определенный период. Часто перескакивать между форматами нельзя - это ломает процесс обучения и мешает студентам планировать время.
        10. Обучение можно ускорить. Например, если вы готовы уделять учебе 30-40 часов в неделю, можете закончить годовую программу за 6 месяцев (ускоренный режим - дополнительная платная опция).
        11. Замедленный режим тоже возможен. Например, можно пройти годовую программу за 2 года, если времени не хватает или нагрузка слишком большая. Но чем меньше вы учитесь, тем меньше возможностей получить новую профессию.
        12. В ГикБрэйнс много методологов, преподавателей, кураторов и экспертов, которые заботятся о вашем образовательном процессе. Но важно не переставать учиться самостоятельно. Доверьтесь нам и идите по своей образовательной траектории.
        13. Задача ГикБрэйнс - не просто обучить вас, а показать жизнь современного ИТ-мира через образовательный опыт.
        14. Настоящий айтишник должен изучать книги, комментарии к коду, материалы в интернете, в том числе на иностранных языках. Поэтому мы начали вести некоторые занятия на английском, но с русскими субтитрами. Это нужно, чтобы проживать и легкость и сложность в обучении.
        15. Каждая программа системна - состоит из нескольких блоков. Например, в годовом обучении есть блок достартовой подготовки, общей инженерной базы, специализации и технологической специализации.
        16. Достартовая подготовка - это вводные блоки. Они помогут освоить платформу ГикБрэйнс и расскажут, как учиться продуктивно. Можно проходить параллельно с основным обучением.
        17. Общая инженерная база - блок основных ИТ-предметов, с которыми вы столкнетесь на работе вне зависимости от выбранной профессии. Поможет осознанно выбрать специализацию. Длится 2 - 4 месяца и может видоизменяться в зависимости от группы.
        18. Специализация - блок, в котором остаются общие предметы, но добавляется более углубленное изучение выбранной области. Обычно проходит со 2-го по 9-й месяц обучения.
        19. Технологическая специализация - время сузить и углубить область интересов. Например, выбрать язык программирования или научиться кодить под определенную платформу, освоить ручное или автоматическое тестирование, углубиться в финансовую аналитику или в Дата Сайенс
        20. Внутри обучения есть несколько дополнительных форматов. Например, буткемпы - формат ежедневного интенсивного обучения. А также Гик Спик и Команда ИТ - онлайн-встречи с приглашенными экспертами и предпринимателями, которые рассказывают про мир ИТ через свои истории.
    - **Вводный урок с Анной Ковбас**
        
        ***Почему мне стоит посмотреть этот видеокурс перед стартом обучения?***
        
        Этот видеокурс состоит из пяти уроков. В каждом уроке представлены ответы на вопросы, которые могут возникнуть в процессе обучения. На эти вопросы ответят ведущие специалисты команды ГикБрэйнс.
        
        ***Кто выступает спикерами в этом видеокурсе?***
        
        1. Александр Волчек. Это ИТ-предприниматель и генеральный директор ГикБрэйнс, а также создатель программы обучения по ИТ-направлению “Разработчик”. Поэтому он будет принимать прямое участие в вашем обучении. За его плечами большой опыт управления бизнесом, сложными техническими процессами и командами, а также создания ИТ-продуктов и вывода их на рынок. Карьерный путь Александра начался с позиции программиста в небольшой ИТ-компании, поэтому он понимает, что необходимо новичку для старта и профессионального роста. На нашей платформе можно познакомиться с профилем А.Волчека, а также посмотреть актуальные видео и интервью с его участием.
        2. Ильнар Шафигуллин. Это эксперт, идеолог и главный методолог программы обучения “Разработчик”. Ильнар обладает сильнейшей экспертизой в области преподавания в области программирования.
        3. Мария Максимова. Она представляет команду заботы о студентах. Эта команда будет взаимодействовать со всеми студентами и поддерживать вас на протяжении всего обучения.
        
        ***О чем расскажут представленные специалисты?***
        
        1. В своих видео А.Волчек расскажет о траектории программы обучения “Разработчик”, форматах и опциях, доступных нашим студентам, а также ответит на другие актуальные вопросы.
        2. Ильнар Шафигуллин расскажет в своих видео о технических вопросах, о том, как правильно подойти к выбору “железа” и программного обеспечения для обучения.
        3. Мария Максимова расскажет, как происходит взаимодействие с куратором, преподавателем и одногруппниками, а также о том, как пользоваться платформой для обучения, как устроен раздел “Мое обучение”, где посмотреть актуальное расписание занятий, как написать преподавателю или сдать практическое задание.
        
        ***Упоминается ли программа обучения “Разработчик” в соцсетях и где найти на них ссылки?***
        
        Да. Под видео будет размещена ссылка на телеграм-канал “Разработчик”, доступный для всех студентов ИТ-направления. Подписывайтесь на этот канал, чтобы быть в курсе происходящего на своей программе обучения.
        
    - **Подготовка на Разработчике. Траектория программы с Александром Волчеком. Вопросы и Ответы от А.Волчека**
        - ***Почему программа обучения по ИТ-направлениям называется “Разработчик”?***
            1. Разработчик - это брендовое понятие для всей линейки программ ИТ-направления. Поэтому, если вы учитесь на ИТ-направлении, значит, находитесь на программе обучения “Разработчик”.
            2. Слово “разработчик” близко к слову “программист”. Поэтому современных айтишников и тех, кто учится на наших ИТ-направлениях, мы приравниваем к разработчикам. Даже занимаясь созданием продукта или руководством проектов, связанных с ИТ, вы находитесь на дисциплине “Разработчик” и, соответственно, считаетесь разработчиком.
        - ***Какова длительность обучения на ИТ-программах линейки “Разработчик”?***
            
            В рамках ИТ-программы “Разработчик” есть курсы длительностью 6, 12, 24, 36 и 60 месяцев
            
        - ***Какова траектория программ ИТ-линейки “Разработчик”?***
            
            В зависимости от программы у вас будет формироваться собственная траектория обучения. Однако в процессе обучения могут возникать дополнительные траектории. Поэтому вы часто будете пересекаться с людьми, учащимися на программах разной длительности и разных специализаций.
            
        - ***Какие есть уровни на ИТ-программах линейки “Разработчик”?***
            
            В зависимости от длительности курса выделяются реперные точки. Каждая реперная точка связана с вашим уровнем знаний или навыком. Программа обучения, рассчитанная на 6 месяцев, соответствует уровню Интерн, на 12 месяцев - Джун, на 24 месяца - Мидл, на 36 месяцев - Мидл+, на 60 месяцев - Сеньор. Названия этих уровней приняты в мире ИТ для обозначения уровней знаний и навыков.
            
        - ***Как достичь уровня Мидл?***
            
            Чтобы достичь уровня Мидл, важно учиться по выбранной программе, параллельно применяя полученные знания в работе.
            
        - ***Как достичь уровня Интерн или Джун?***
            
            Уровень Интерн или Джун достигается в рамках обучения. Имея эту базу, вы сможете устроиться на работу в ИТ-сфере.
            
        - ***Помогут ли мне устроиться на работу после прохождения обучения?***
            
            Вопрос трудоустройства наших студентов является одним из важнейших блоков программ обучения. в процессе вашего обучения будут запущены специальные карьерные траектории, программы и курсы, направленные как на трудоустройство, так и на развитие вас как профессионала внутри компании.
            
        - ***Как строится карьерная траектория студентов ГикБрэйнс?***
            
            В рамках карьерной траектории есть некоторые фиксации, когда можно устроиться на работу. Эти фиксации включают два фактора: гарантию трудоустройства с нашей стороны и желание - с вашей. В процессе обучения вы будете проходить опросы и указывать, когда именно хотели бы трудоустроиться. Главное - учиться и выполнять все задания, т.к. это основа появления реперных точек, гарантирующих трудоустройство. Реперная точка в шестимесячной программе обучения появляется через 6 месяцев, а в годовой, двухлетней, трехлетней и пятилетней - через 9 месяцев.
            
        - ***Можно ли начать поиск работы до появления этих реперных точек?***
            
            Да, можно. Все зависит от вашего желания, уровня знаний, навыков, потребности в заработке, интересов, рынка и другого.
            
        - ***Получу ли я документ, подтверждающий прохождение мной выбранного курса?***
            
            Да. По окончании шестимесячной программы обучения в зависимости от вашего текущего уровня образования вы получите диплом или удостоверение через 6 месяцев, по окончании годовой программы - через 1 год, во время прохождения остальных программ получение документов, подтверждающих уровень образования, будет осуществляться ежегодно. Получив такой документ о прохождении годовой программы, вы сможете применить его на более длительных программах обучения.
            
        - ***Как происходит оценка усвоенных студентом знаний?***
            
            В процессе обучения каждый квартал вы будете проходить аттестацию. Цель проведения аттестаций - определить ваш уровень знаний, понять, на что вы можете претендовать, и дать вам некоторую рекомендацию. По результатам аттестации мы рекомендуем либо продолжить обучение, либо пройти материал снова, переместившись в младшую группу.
            
        - ***Какие есть форматы прохождения обучения?***
            1. Обучение в формате записи. Вы получаете учебные материалы в записи, а затем выполняете практические задания в удобном режиме, находясь не в группе. Такой формат подходит тем, кто не хочет заниматься в группе и чей график не позволяет учиться в определенное время.
            2. Обучение в группе. Вы попадаете в поток, где есть группы. Эти группы формируются по определенным критериям: по уровню знаний и навыков, по возрасту, целям, по регионам и т.д. Вы начинаете и заканчиваете обучение со своей группой. Однако траектория обучения в процессе прохождения выбранной программы может несколько раз переместить вас из одной группы в другую. Такой формат позволяет развиваться вам как профессионалу на опыте своих одногруппников.
            3. Групповое обучение в формате записи. В течение определенного времени вы занимаетесь самостоятельно - просматриваете видеолекции, читаете специальную литературу, пишете код - после чего встречаетесь с группой для подведения итогов.
            4. Групповое обучение не в формате записи. Это посещение в реальном времени лекций, практикумов и встреч, а также совместное прохождение дополнительный занятий по формированию софтскилс.
        - ***Могу ли я перейти из одного формата обучения в другой?***
            1. Если вы учитесь в формате записи, у вас есть возможность перейти в формат группы. Это можно сделать один раз в определенное время.
            2. Если вы учитесь в группе, но по каким-то причинам перестаете посещать занятия, система переводит вас в формат записи. Однако в зависимости от выбранной программы у вас есть возможность вернуться в группу через какое-то время.
        - ***Есть ли возможность ускорить или замедлить процесс обучения?***
            
            Да, такая возможность есть. На платформе ГикБрэйнс есть ускоренный тариф, где за дополнительную плату годовую программу вы можете пройти за 6 месяцев. Вы также можете замедлить процесс обучения и пройти ту же годовую программу за 2 года. Однако, чем меньше вы учитесь, тем меньше у вас шансов получить профессию, и наоборот.
            
        - ***В каком формате будет подаваться образовательный контент и проводиться проверка знаний?***
            
            Формат образовательного контента и проверка знаний студентов зависит от образовательной траектории, которую для вас подберут специалисты ГикБрэйнс. К образовательному контенту относятся видео разной длительности и учебные материалы в текстовом виде, а к форматам проверки знаний - ответы на вопросы, аттестации, тестирование и дипломные работы.
            
        - ***Какова система базовой ИТ-программы линейки “Разработчик”?***
            1. Базовая ИТ-программа линейки “Разработчик” рассчитана на 12 месяцев.
            2. Сначала идет блок достартовой подготовки, где вас определяют в группу, вы знакомитесь с куратором и разбираете несколько базовых тем - например, “Как правильно учиться”, “Как работает платформа ГикБрэйнс” и т.д.
            3. В следующем блоке, длящемся обычно 2 - 4 месяца, вы будете проходить общие инженерные специализации и изучать разные аспекты, т.к. в будущем столкнетесь с ними в работе. Во второй блок включены специальные подкурсы, проводимые в разных форматах и разными преподавателями. Построение и количество этих подкурсов зависит от вашей траектории обучения.
            4. Параллельно будет идти дополнительный образовательный контент: “ГикСпик Разработчик”, “ГикСпик Ученые”, “Команда ИТ”. Из этого блока вы узнаете, как начинали и проходили свой ИТ-путь различные ученые, предприниматели и другие специалисты.
            5. После выбора специализации, а именно, со второго по девятый месяц обучения, идет блок, где вы продолжаете обучение по основным специализациям и начинаете углубленно изучать выбранную специализацию.
            6. Далее идет блок технологической специализации, где выбирается отрасль - например, бэкенд-программист. Этот этап длится последние 2 - 3 месяца обучения.
        - ***Почему мне стоит пройти эту базовую ИТ-программу?***
            
            Пройдя базовую ИТ-программу, вы осознанно сможете выбрать ИТ-специализацию, по которой получите желаемую профессию.
            
        - ***А если я уже знаю, на какой специализации хочу учиться?***
            
            Хорошо. Тогда вы учитесь по выбранной траектории, осваивая, например, программирование на С++, проходите блоки специализации и технологической специализации и изучаете дополнительные языки, чтобы знать все технологические аспекты.
            
        - ***Почему я должен изучать программирование, если у меня другая специальность?***
            
            Базовые навыки программирования важны, так как без них вы не сможете работать в ИТ-сфере.
            
        - ***Предусмотрены ли каникулы в рамках этой базовой ИТ-программы?***
            
            Да, в рамках годовой программы линейки “Разработчик” предусмотрены каникулы. Они идут в качестве дополнения к основной программе обучения и зависят от того, когда вы начали учиться. Каникулы проходят раз в квартал и отображены в специальном графике.
            
        - ***Проходят ли на ИТ-программах линейки “Разработчик” интенсивы?***
            1. Да. В рамках наших ИТ-программ предусмотрен формат интенсивного обучения, который на мировом рынке называется “буткемп”. Буткемп может входить в вашу программу обучения или нет. В основном буткемп идет после блока общих инженерных специализаций и длится от двух недель до двух месяцев.
            2. В годовой программе обучения предусмотрено объединение двух блоков: “Специализация” и “Техническая специализация”.
        - ***Могу ли я осваивать дополнительные курсы во время прохождения основной программы обучения?***
            1. Да, в процессе прохождения основной программы вам будут предложены дополнительные курсы. Например, если вы учитесь на ИТ-линейке, вам могут предложить курс по маркетингу. Дополнительные курсы позволят вам расширить возможности получаемой профессии.
            2. В процессе обучения вам также будет предложено прочитать дополнительную литературу или посмотреть видео по вашей специальности. от чего вы можете отказаться.
        - ***В чем преимущества двухлетней и трехлетней программ обучения?***
            1. Те, кто пришел на двухлетнюю и трехлетнюю программы обучения, на первом году получают больше дополнительного контента, видов занятий, знаний, опыта, аттестаций и форматов обучения.
            2. Обучаясь на таких программах, у вас появляется больше возможностей достичь уровня Мидл, Мидл+, Сеньор и трудоустроиться во время обучения.
        - ***Почему важно начать работать во время прохождения обучения?***
            
            Полученные знания еще не делают вас профессионалом. Главное - применять их в работе, решая конкретные задачи.
            
        - ***Как оставаться в тренде информационных технологий?***
            
            Если в мире появится какая-то новая информационная технология, мы обязательно включим ее в арсенал наших ИТ-программ.
            
    - **Про анкеты с Александром Волчеком**
        - ***Как достичь своей Цели в процессе учебы?***
            
            Прежде чем достичь какой-либо Цели в процессе учебы, надо эту Цель сформировать. Поэтому одна из основных задач команды ГикБрэйнс - помочь вам сформировать собственную Цель во время обучения.
            
        - ***Как в ГикБрэйнс мне помогут сформировать собственную Цель в процессе обучения?***
            
            Чтобы помочь студенту сформировать собственную Цель в процессе обучения, в первую очередь нам важно понять, какой перед нами человек. Для этого мы проводим опросы, опираясь на следующие параметры: место жительства, возраст, наличие опыта, сложности в обучении, условия обучения, потребности, идеи и прочее. Эти данные позволяют нам подобрать наиболее подходящую для вас траекторию и усовершенствовать процесс образования.
            
        - ***В каком формате вы собираете данные о студентах?***
            
            Мы собираем данные о студентах как в формате анкетирования, так и в формате тестирования
            
        - ***Информацию какого характера вы собираете о студенте?***
            
            Эта информация разного характера. Например:
            
            - на каком компьютере работаете;
            - сколько компьютеров в семье;
            - вы женаты / замужем;
            - в какой стране и городе живете;
            - хотите ли переехать;
            - учатся ли на нашей платформе ваши друзья и знакомые;
            - нравится ли тот или иной преподаватель;
            - что устраивает или не устраивает в проверке практических заданий;
            - прочее.
        - ***Что нужно для успешного прохождения обучения на платформе ГикБрэйнс?***
            1. Довериться команде ГикБрэйнс
            2. Выделить время на учебу
            3. Посещать занятия
            4. Выполнять все задания
            5. Корректно сообщать обязательную информацию.
        - ***Как часто проходит сбор данных?***
            1. Первичный сбор данных происходит во время регистрации на сайте ГикБрэйнс
            2. В процессе обучения анкетирование и тестирование осуществляется, как правило, больше одного раза в месяц. Все зависит от того, на какую программу приходит студент.
            - ***Какие задачи решает анкетирование студентов?***
            1. Вы четче формулируете свою Цель: выбор профессии и специальности - выявление трудностей - планирование действий.
            2. Компания максимально совмещается с вами.
        - ***Проводится ли анкетирование на определение в карьере?***
            
            Да, компания ГикБрэйнс проводит анкетирование на определение в карьере. В этой анкете вы сообщаете нам:
            
            - в какую компанию хотите попасть:
                - в большую
                - в маленькую
                - в маленькую, состоящую из 10 человек
                - в маленькую, состоящую из 100 человек
            - в каком формате хотите работать:
                - только в офисе
                - только удаленно
                - удаленно с возможностью работать в офисе
                - в офисе с возможностью работать удаленно
            - в каком населенном пункте хотите работать
            - в каком коллективе хотите работать - там, где больше мужчин или женщин
            - в компании какого типа хотите работать: государственного, частного или смешанного
            - с каким руководителем хотите работать - мужского или женского пола
            - сколько дней в неделю хотите работать
            - сколько часов в день хотите работать
            - стажировку какого типа хотите проходить - платную или бесплатную
            - сколько раз готовы прийти на собеседование в одну компанию
            - когда хотите выйти на работу
            - какую зарплату хотите получать
            
            По результатам такого анкетирования вы формируете собственное видение освоения профессии, а мы, подстраиваясь под ваше видение, формируем подходящую траекторию обучения.
            
        - ***Могу ли я заранее узнать, в каком формате буду учиться?***
            
            Нет. Форматы обучения подбираются в зависимости от траектории, которая формируется на основе вашей учебной деятельности и результатов анкетирования. Поэтому траектория изменчива и заранее определить формат невозможно.
            
        - ***Что произойдет, если я сообщу некорректную информацию о себе?***
            
            Если вы сообщите о себе некорректную информацию, траектория обучения, основанная на этой информации, направит вас в неподходящий вектор. Вам станет сложнее учиться и осваивать профессию.
            
        - ***Помогут ли мне после прохождения обучения трудоустроиться в другой стране?***
            
            Если вы сконцентрированы на какой-то стране, мы постараемся организовать сотрудничество с местными компаниями. Чтобы это сделать, нам важно получить от вас корректную информацию.
            
        - ***Что делать, если я уже учусь, но еще не знаю, какая у меня Цель?***
            
            Если вы уже учитесь, но еще не сформировали Цель, подумайте, что, возможно, вы недостаточно сконцентрировались, отнеслись к вопросу обучения эгоистически или не критически.
            
        - ***Нужно ли учить все? Может, есть что-то лишнее?***
            
            В рамках образовательного процесса лишнего нет, а есть обязательное и дополнительное. Но это все нужно для успешного прохождения обучения. Есть то, что делать в рамках учебы вы обязаны, даже если окружение твердит обратное. Поэтому не сопротивляйтесь и доверьтесь нам, ведь в компании ГикБрэйнс трудятся специалисты высокого уровня.
            
    - **Про техническое оснащение с Ильнаром Шафигуллиным**
        - ***Какое “железо” нужно для обучения?***
            1. Для основного блока обучения, который длится 2 месяца подойдет любой компьютер, который у вас есть. Главное, чтобы вы могли создавать на нем документы, смотреть видео из интернета и выполнять бытовые задачи.
            2. Если вы выбрали направление “Программирование”, желательно, чтобы компьютер поддерживал более 8 Гб оперативной памяти.
        - ***Какая операционная система у меня должна быть?***
            1. До старта обучения подойдет любая ОС: Виндоус, Мак ОС и Линукс. Однако, выбрав направление программирования или тестирования, полезно освоить ОС Линукс.
            2. Важно, чтобы ОС компьютера не была старой. Оптимальна Виндоус 10 или более современные версии.
        - ***Какой мощностью должен обладать интернет?***
            
            Для прохождения обучения достаточно той мощности интернета, которая позволяет вам смотреть ролики на Ютуб в хорошем качестве.
            
        - ***Что дополнительно может понадобиться для занятий?***
            1. Так как занятия будут прохоить в Зум, через ВК-звонки и на подобных платформах, могут понадобиться микрофон и камера, которые часто уже встроены во многие компьютеры.
            2. Можно избежать покупки доп оборудования. Например, если занятия проходят в Зум, вы можете говорить, используя свой смартфон, а выполнять какие-то действия с компьютера.
        - ***Какое программное обеспечение потребуется?***
            
            Заранее никакого дополнительного программного обеспечения устанавливать не надо. Чаще всего в комментария к первой лекции уже есть ссылки на необходимые программы и инструкции, как эти программы установить и настроить.
            
        - ***Какие есть форматы обучения?***
            1. Есть 2 основных формата обучения - лекции и семинары.
            2. Лекции выходят по расписанию - сначала в прямом эфире, затем в виде видеозаписи. Прямая трансляция позволяет в реальном времени задать в комментариях интересующий вопрос и получить на него ответ от специального преподавателя, следящего за комментариями. В формате видеозаписи можно смотреть лекции в удобное время, делать это в ускоренном режиме, а также пересматривать отдельные фрагменты.
            3. Семинарские занятия проходят в режиме реального времени с живым преподавателем, который дает задание, проверяет, что вы делаете, и комментирует какие-то ваши вопросы. Под семинарские занятия выделяются три слота времени:
                1. выходные
                2. будни: дневное время
                3. будни: вечернее время
            4. Обязательно посещайте семинарские занятия. Люди, выполняющие задания на практических занятиях, как правило, лучше усваивают материал. На семинарских занятиях вы можете не только пообщаться с преподавателем вживую, задав интересующие вопросы, но и порешать вместе с одногруппниками заданные задачи.
        - ***Какие курсы входят в программу обучения?***
            1. На платформе ГикБрэйнс есть как обязательные курсы, так и необязательные. К первому типу относятся курсы, которые уже включены в ваше расписание. Вторые будут появляться в процессе вашего обучения, и вы сможете на них записаться.
            2. Если у вас мало свободного времени и вам сложно дается обучение, можете сконцентрироваться только на основных курсах. А если вы легко выполняете все задания, скорее всего, вам будут полезны и дополнительные курсы.
    - **Действия после регистрации с Марией Максимовой**
        - ***Что меня ждет после покупки курса?***
            1. Сразу после покупки курса вам придет письмо на электронную почту. Как правило, это почта, с которой вы зарегистрировались на платформе. В письме будет сказано, как зайти в личный кабинет, и указана ссылка на страницу “Мое обучение”.
            2. Далее в течение нескольких дней вам позвонит менеджер по адаптации. Это специальная команда менеджеров, которая занимается погружением студента в учебный процесс. Во время звонка менеджер по адаптации расскажет, как зайти на учебный сайт, поможет с подключением к обучению, предложит разные группы обучения, например, в будни утром или в будни вечером, и ответит на вопросы по программе.
            3. После того, как вы подключитесь к платформе и зайдете на нее, перед вами появится анкета студента. Заполнение этой анкеты обязательно. По результатам опроса анкеты мы узнаем Цель обучения студента, его предпочтения в программе, уровень знаний, и выстраиваем на основе этого подходящую траекторию обучения.
            4. Далее вы проходите подготовку. Подготовка - обязательная часть перед основным обучением. В части подготовки есть дополнительные курсы: по центру карьеры и по получению документов об окончании обучения.
        - ***Кто такой куратор? Какие функции он выполняет?***
            1. Куратор - это сотрудник ГикБрэйнс
            2. Технически он будет находиться в телеграм-чате с вами и другими одногруппниками
            3. Куратор может позвонить вам, если у вас возникли вопросы по обучению или вы перестали ходить на уроки и выполнять практические задания.
            4. Куратор помогает и по организационным вопросама, касающимся расписания или программы обучения.
            5. Куратор служит мостиком между студентом и продуктом. Часть вопросов куратор будет решать сам, а часть - приносить в продуктовую команду и искать решение вашего вопроса вместе с ней.
            6. Куратор также помогает студенту достичь образовательной Цели. Он (куратор) будет звонить вам, если вы перестанете сдавать практические задания.
        - ***Где мне общаться с одногруппниками?***
            1. Телеграм-чат. Это основная площадка для общения с одногруппниками. В нем также будет наш куратор.
            2. Платформа. На ней вы не будете общаться группой, но сможете видеть список своих одногруппников с аватарками и описанием и писать в личные сообщения каждому.
            3. Семинары. Они проходят онлайн. Во время семинаров открывается чат. В этом чате будут находиться и писать свои сообщения ваши одногруппники и куратор.
        - ***Если у меня что-то не работает? Кому писать?***
            1. Вы можете обратиться в поддержку. Это можно сделать через нашу платформу - иконка находится в правом нижнем углу.
            2. Вы также можете обратиться к куратору через телеграм-бот.
            3. Вы можете позвонить на нашу горячую линию, где сотрудники помогут вам либо передадут ваш запрос куратору. После этого куратор в скором времени перезвонит вам и решит проблему.
        - ***Кто такой Наставник? Какие функции он выполняет?***
            1. Наставник - это студент ГикБрэйнс, который успешно окончил один или несколько курсов.
            2. Наставники помогают с вопросами по обучению и с практическими заданиями.
            3. Если вы будете хорошо учиться, то тоже сможете стать Наставником. Однако наставничество - добровольное дело, поэтому наставники могут встречаться не во всех курсах. И если увидели наставника на своем курсе, то смело пишите ему.
        - ***Если мне не хватает занятий? Я могу получить больше дополнительной информации?***
            
            Конечно. Есть несколько вариантов:
            
            1. Можно перейти на более интенсивное обучение. Так, вы будете получать знания в 2 раза быстрее.
            2. Вы можете приобрести дополнительные консультации с преподавателем. Это консультации Р2Р. Можно приобрести как одну консультацию, так и несколько.
            
            Однако перед тем, как выбрать один из способов получения дополнительной информации, проконсультируйтесь с куратором.
            
    - **Навигация по платформе с Марией Максимовой**
        - ***Как войти на платформу ГикБрэйнс?***
            1. Сначала зайдите на платформу ГикБрэйнс. Можно через адресную строку или поисковик
            2. Далее авторизуйтесь. Для этого введите свою почту, с которой регистрировались на платформе и нажмите “Войти”.
        - ***Как заполнить свой профиль?***
            1. После авторизации вы попадаете на главную страницу сайта.
            2. Заполните свой профиль. Для этого наведите курсор на иконку, стоящую в правом верхнем углу, и нажмите “Профиль”. После перехода в профиль кликните на “Редактировать профиль”.
            3. Корректно укажите ФИО, чтобы мы подготовили для вас документы, а студенты и преподаватели правильно к вам обращались.
            4. Обязательно укажите свой населенный пункт. Во-первых, эта информация поможет связываться с вами и понимать, в каком часовом поясе вы находитесь. Во-вторых, мы часто организовываем мероприятия и зовем поучаствовать в них студентов, поэтому информация о вашем местонахождении пригодится и здесь.
            5. Рекомендуем указать свои данные в разделе “О себе”. Здесь вы можете написать о своих навыках и опыте. Этот раздел видят другие студенты, а также преподаватели, которым будет проще взаимодействовать с вами.
            6. Добавьте информацию о своих интересах.
            7. Обязательно добавьте свою аватарку, чтобы общение с одногруппниками и преподавателем было комфортным.
            8. После заполнения всех полей нажмите “Сохранить”.
        - ***Куда зайти, чтобы начать учиться?***
            1. Для начала перейдите на главную страницу и кликните на раздел “Мое обучение”. Этим разделом вы будете пользоваться чаще всего. Чтобы перейти в этот раздел, нажмите на иконку “Мое обучение” рядом с аватаркой справа или перейдите в меню слева и выберите этот раздел там.
            2. В разделе “Мое обучение” вы найдете 3 вкладки: Активные, Подготовка и 1 четверть.
                1. В первой вкладке, “Активные”, находятся те предметы, которые вы можете проходить уже сейчас.
                2. Во вкладке “Подготовка” - информация, с которой обязательно надо ознакомиться перед основным обучением. Важно пройти курсы “Регистрация в карьеру. Первый шаг” и “Итоговые документы об обучении - старт учебы”. На этих курсах вы узнаете, как получить документы об образовании, вступить в центр карьеры, а также о навигации по сайту.
                3. Во вкладке “1 четверть” - все курсы первого блока обучения. Перейдя в один из курсов, вы увидите:
                    1. по центру - через сколько начнется урок
                    2. слева - навигацию по урокам и их даты
                    3. справа - материалы к урокам, преподавателей, которым можно написать, и одногруппников.
        - ***Какие есть форматы курсов?***
            
            Есть 3 формата курсов: лекция, семинар, практикум. Название формата указано в названии курса.
            
        - ***Из чего состоит страница урока?***
            1. По центру, если курс уже начат, и вы опоздали на онлайн-лекцию, перед вами откроется ее запись.
            2. Справа - материалы, преподаватель, иногда даже наставник.
            3. Слева - навигация по урокам и практическое задание.
        - ***Куда загружать выполненное практическое задание?***
            
            Чтобы загрузить выполненное практическое задание, надо зайти в урок и слева выбрать “Практическое задание”. Перейдя по этой ссылке, в центре вы увидите описание практического задания и поле для его загрузки, ниже можно оставить комментарий. У каждого практического задания есть свой срок сдачи, который указывается над полем “Загрузить практическое задание”.
            
        - ***Что делать, если я не успеваю сдать практическое задание?***
            1. Если вы не успели сдать практическое задание в указанный срок, появится кнопка “Продлить дедлайн сдачи практического задания”. Такой возможностью можно воспользоваться только один раз.
            2. Если по каким-то причинам вы пропустили все сроки сдачи практического задания - пишите куратору. Куратор поможет вам решить этот вопрос.
        - ***Где найти расписание занятий?***
            
            Чтобы найти расписание занятий, перейдите на главную страницу и кликните на иконку календаря, находящуюся в правом верхнем углу. Зайдя в этот календарь, вы увидите:
            
            - по центру - расписание будущих занятий
            - слева - курсы, которые можно отобразить в расписании или убрать
            - справа - навигация по урокам, кликнув по которым, можно перейти в раздел “Мое обучение” внутри выбранного урока.
        - ***На сколько месяцев планируется расписание?***
            
            Расписание, как правило, планируется на 2 месяца вперед.
            
        - ***Куда обращаться, если возникнут вопросы по платформе, обучению и прочему?***
            
            Если у вас возникнут вопросы, например, по платформе или обучению, обратитесь в поддержку. Для этого перейдите на главную страницу, кликните на специальную иконку в правом нижнем углу, и перед вами появится чат поддержки.
            
- **Урок 3. Вопрос - Ответ. Анкетирование в учебном процессе**
    
    **Основные тезисы:**
    
    1. Чтобы достичь учебной Цели, сперва эту Цель нужно сформулировать. Помочь с этим - одна из основных задач команды ГикБрэйнс.
    2. Чтобы помочь сформировать учебную Цель, нужно лучше узнать студента. Для этого мы проводим опросы и тестированияи.
    3. В опросах мы спрашиваем о месте жительства, возрасте, семейном положении и образовательном опыте: как вам преподаватели, практические задания и платформа, с какими сложностями вы столкнулись, а что было легко. Все это помогает выстроить или скорректировать траектрорию обучения.
    4. Первый раз мы проводим анкету во время регистрации на платформе ГикБрэйнс. Затем анкетирование, как правило, проводится чаще раза в месяц.
    5. Если вы сообщите некорректную информацию о себе, траектория обучения направит вас в неподходящий вектор. Учиться и осваивать профессию станет сложнее, поэтому на вопросы анкеты нужно отвечать честно.
    6. На этапе определения в карьеру тоже есть анкетирование. Мы узнаем, в какой компании и в каком формате вы хотите работать, какую зарплату хотите получать. По результатам вы сформируете свое видение профессии и процесса ее освоения, а мы - траекторию обучения.
    7. Если вы хотите переехать и устроиться на работу в конкретной стране, мы постараемся организовать сотрудничество с местными компаниями. Чтобы это сделать, нам важно получить от вас корректную информацию.
    8. Чтобы обучение было успешным, доверьтесь нам и сделайте его частью своей рутины. Выделите время, посещайте все занятия и выполняйте все задания.
    9. В образовательном процессе нет ничего лишнего, только обязательное и дополнительное. Есть то, что в рамках учебы вы обязаны делать, даже если окружение твердит, что это сложно или не потребуется. На самом деле потребуется.
- **Урок 4. Ильнар Шафигуллин. Техническое оснащение**
    
    **Основные тезисы**
    
    1. Для прохождения основного блока обучения, который длится 2 месяца, подойдет любой компьютер, позволяющий смотреть ролики на Ютуб, создавать какие-то документы в Офисе, работать в базовых программах и выполнять бытовые задачи.
    2. Выбрав в дальнейшем направление “Программирование”, желательно, чтобы компьютер поддерживал более 8 Гб оперативной памяти, потому что современные среды разработки достаточно требовательны, с этой точки зрения. Однако заранее модернизировать свой компьютер не надо.
    3. До старта обучения подойдет любая ОС, будь то Виндоус, Мак ОС или Линукс. Однако, выбрав направление программирования или тестирования, полезно освоить операционную систему Линукс.
    4. Некоторые сложности могут возникнуть, если ОС устарела. Например, оптимальна Виндоус 10 или более современные версии, в этом случае все будет работать, как у преподавателя.
    5. Для прохождения обучения достаточно той мощности интернета, которая позволяет смотреть ролики на Ютуб в хорошем качестве.
    6. Т.к. занятия будут проходить в Зум, через ВК-звонки и на подобных платформах, может понадобиться микрофон и камера, которые часто уже встроены во многие девайсы. С этим оборудованием вы сможете общаться с одногруппниками или задавать голосом вопросы преподавателю. Однако, если желания общаться и задавать вопросы нет, такие платформы, как Зум, позволяют вести беседу без видео и звука.
    7. Заранее никакого дополнительного ПО устанавливать не надо - чаще всего в комментариях к первой лекции уже есть ссылки на необходимые программы и инструкции, как это установить или настроить.
    8. Есть 2 основных формата обучения - лекции и семинары.
    9. Лекции выходят по расписанию - сначала в прямом эфире, затем в виде готовой видеозаписи. Прямая трансляция позволяет в реальном времени задать в комментариях интересующий вопрос и получить на него ответ от специального преподавателя, следящего за комментариями. В формате видеозаписи можно смотреть лекции в удобное время, делать это в ускоренном режиме, а также пересматривать отдельные фрагменты.
    10. Семинарские занятия проходят в режиме реального времени с живым преподавателем, который дает задание, проверяет, что вы делаете, и комментирует какие-то ваши вопросы. Под семинарские занятия выделяются три слота времени: выходные, в будни вечером или будни днем.
    11. Обязательно посещайте семинарские занятия. Люди, выполняющие задания на практических занятиях, как правило, лучше понимают материал. На семинарских занятиях вы можете не только пообщаться с преподавателем вживую, задав интересующие вопросы, но и прорешать вместе с одногруппниками заданные задачи.
- **Урок 5. Мария Максимова. Действия после регистрации**
    
    **Основные тезисы и рекомендации**
    
    1. Первые шаги после покупки курса: получение письма с инструкциями, общение с менеджером, заполнение анкеты, прохождение подготовки к обучению.
    2. Обратите внимание на дополнительные курсы: один от центра карьеры, другой посвящен получению документов о завершении обучения. Их лучше пройти перед стартом основной программы.
    3. Куратор - сотрудник ГикБрэйнс, который помогает решать организационные вопросы и помогает вам в достижении образовательной цели.
    4. Вы можете связаться с куратором в Телеграм-чате группы или через личные сообщения. Если вы пропускаете занятия или не сдаете домашние задания. куратор может позвонить вам, чтобы узнать, все ли в порядке и нужна ли помощь.
    5. Телеграм - основная площадка общения с одногруппниками и куратором.
    6. Во время онлайн-семинаров вы можете общаться с другими студентами и преподавателем в чате трансляции.
    7. Для решения любых вопросов по обучению вы можете:
        1. Написать в поддержку через всплывающий чат в правом нижнем углу сайта
        2. Обратиться к куратору
        3. Позвонить на горячую линию, где ваш вопрос примут и передадут вашему куратору.
    8. Наставник - студент ГикБрэйнс, успешно окончивший курс на платформе. Наставниками становятся добровольно, поэтому они встречаются не на всех курсах. Однако, если нашли такого, - можете смело писать ему и обращаться за помощью.
    9. Вы можете перейти на более интенсивное обучение, чтобы получать знания в 2 раза быстрее. Также можно приобрести персональные консультации с преподавателем.
- **Урок 6. Навигация по платформе с Марией Максимовой**
    
    **Основные тезисы и рекомендации**
    
    1. Заполните профиль пользователя, чтобы сотрудники ГикБрэйнс могли готовить для вас документы, приглашать вас на мероприятия и в целом быстрее понимать ситуацию при решении ваших вопросов. Кроме того, заполненные профили способствуют знакомству одногруппников.
    2. Для заполнения профиля наведите курсор мыши на иконку - аватар пользователя в правом верхнем углу, - в меню выберите Профиль и на странице, которая после этого откроется, нажмите кнопку Редактировать профиль. После заполнения формы нажмите Сохранить.
    3. В разделе “Мое обучение” отображаются приобретенные вами продукты. На панели каждого продукта можно видеть вкладки с курсами: “Активные”, “Подготовка”, а также курсы основной программы с разбивкой по четвертям.
    4. Перед стартом основного обучения обязательно пройдите Подготовку. Начните с курсов Регистрация в карьеру. Первый шаг. и Итоговые документы об обучении - старт учебы.
    5. Можно и нужно писать преподавателям на платформе. Для этого щелкните на иконке с фото преподавателя, после чего откроется окно обмена сообщениями.
    6. Курсы бывают разных форматов: лекции, семинары, практикумы. Формат курса можно видеть рядом с названием курса в вашей программе обучения.
    7. Если вы не успели на урок онлайн, вы всегда можете посмотреть его в записи. Для этого нужно внутри курса выбрать необходимый урок.
    8. Практические задания к урокам можно найти в оглавлении курса справа. Если вы не сдадите ДЗ вовремя, в форме отправки задания появится кнопка для продления срока сдачи. Воспользоваться ею можно только один раз. Если снова не успеете, - напишите своему куратору.
    9. Календарь с расписанием предстоящих занятий доступен по нажатию соответствующей иконки в правой верхней части экрана (если вы уже авторизованы на сайте под своей учетной записью).
    10. Все возникающие вопросы по платформе и обучению вы можете задавать специалистам поддержки в чате прямо на платформе. Для этого нажмите на цветную иконку в правом нижнем углу любой страницы сайта.
- 

### Приветственное обращение А. Волчека к студентам Geek. 02.08.2023

- **Урок 1. Приветственное обращение А. Волчека к студентам Geek**
    
    Всем привет! Меня зовут Александр Волчек. Поздравляю вас со стартом программы обучения Гик. Эта программа - наше ядро. Это наверное самая крутая программа, которая сейчас есть на рынке по ИТ. Мы вместе с вами будем 36 месяцев и на протяжении их мы будем наблюдать как вы из новичка или человека, у которого абсолютно отсутствуют знания в ИТ станете профессионалом. Получите невероятные компетенцию, знания для того, чтобы на рынке вы были настоящим профессионалом. Не просто вышли на работу, потому что мы уверены, что каждый человек, который у нас учится, не просто уверены, а, мы гарантируем, что он будет работать по ИТ-профессиям. А чтобы вы не просто работаете по ИТ-профессиям, а вы еще получили фундаментальную базу, которая позволяет в жизни адаптироваться под разные страны, компании, специализации, отрасли, технологии, под ваши запросы и под запросы рынка.
    
    Мы видим, как рынок ИТ невероятно меняется. Появляется много различных вакансий, специализаций. Он будет меняться следующее десятилетие
    
    Программа Гик состоит из трех основных блоков: 1 - Разработчик (12 мес), 2 - Диджитал мастер (12 мес), 3 год - программа Гик.
    
    Что важно, что с самого начала уже обучаясь на первой программе вы будете получать спец материалы для программы Гик, как будто вы на ней находитесь.
    
    В целом, специально программа сделана так, чтобы человек лучше разобрался кто такой программист, кто такой разработчик. Для себя самого совместил насколько это его тематика, больше вошел в эти основы ИТ, программирования, аналитики, тестирования и тд. Поэтому параллельно основным темам, мы будем рассказывать об этих специализациях. По истечении 9 месяцев человек уже проходит углубленное изучение по этой специализации. Там есть много общих тем, порядка 60-70% которые пересекаются для всех специализаций. И есть темы, углубленные для конкретных специализаций. Это позволяет человеку через год сделать миграцию в любую специализацию…
    
    - **Специализации**
        - **Программист. Кто такой программист**
            
            Программист - это представитель цифровой профессии, связанной с разработкой программ и использованием компьютерной техники. Он пишет код и занимается отладкой программ на определенном языке программирования.
            
            Вы получите фундаментальные знания в программировании, погрузитесь в выбранную технологию, изучите конкретные стеки и разберетесь на практике, как они работают.
            
            **Кем вы сможете работать после обучения**
            
            Программистом. Программист применяет принципы программной инженерии для проектирования, разработки, обслуживания, тестирования и оценки компьютерного программного обеспечения.
            
            **С какими понятиями связана работа программиста**
            
            - Алгоритмы
            - Паттерны
            - Фреймворк
            - Структуры данных
            - Потоки данных
            - Виртуализация
            - Протоколы передачи данных
            - Архитектура приложений и сервисов
            - и другие
            
            **Какие бывают виды и типы программирования**
            
            - Frontend
            - Backend
            - Fullstack
            - Низкоуровневое
            - Высокоуровневое
            - Для мобильных приложений
            - Для оборудования
            - Для десктоп-приложений
            - Для веб-приложений
            - Для умных устройств
            
            **Какие технологии и инструменты программист использует в работе**
            
            - Java
            - Python
            - JavaScript
            - PHP
            - C++
            - C
            - TCP/IP
            - SQL
            - NoSQL
            - Linux
            - Git
            - HTML/CSS
            - Docker
            - Allure
            - Selenium
            - JUnit
            - ANNs
            - GAN
            - и другие
        - **Тестировщик. Кто такой тестировщик?**
            
            Тестировщик ищет ошибки и уязвимости в программах, проверяет их качество и моделирует ситуации, которые могут возникнуть во время их использования.
            
            Вы получите фундаментальные знания в тестировании, поймете тонкости тестирования в выбранной технологии, изучите необходимый инструментарий и разберетесь на практике, как с ним работать.
            
            **Кем вы сможете работать после обучения?**
            
            Тестировщик. Проверяет приложения на ошибки с помощью моделирования ситуаций, которые могут возникнуть у пользователя во время работы
            
            **Какие задачи решает тестировщик?**
            
            - Проверяет работу сайтов и приложений
            - Ищет и воспроизводит баги
            - Заводит заявки на исправление ошибок
            - Составляет отчеты о проделанной работе
            - Придумывает тест-планы
            
            **С какими понятиями связана работа тестировщика?**
            
            - Тестовая документация
            - Unit-тесты
            - Чек-листы
            - Локализация дефектов
            - Тест-аналитика
            - Тест-менеджмент
            - Отчеты по тестированию
            - Тест-кейсы
            - Тестирование веб-приложений
            - Тест-планы
            
            **Какие бывают виды и уровни тестирования?**
            
            - Ручное тестирование
            - Функциональные тесты
            - Автоматизированное тестирование
            - Приемочное тестирование
            - Сквозные тесты
            - Интеграционное тестирование
            - Нагрузочное тестирование
            - Модульные тесты
        - **Аналитик. Кто такой аналитик?**
            
            Аналитик собирает, изучает и интерпретирует данные. Он знает, как превратить информацию в понятные отчеты и графики, и может сделать выводы на ее основе. Помогает бизнесу принимать решения и планировать развитие.
            
            Вы научитесь применять разные способы и методы аналитики в рамках выбранной технологии, поймете, какие инструменты в какой момент времени использовать, как правильно работать с отчетностью в пользу для бизнеса.
            
            **Кем вы сможете работать после обучения?**
            
            Аналитик. В разработке сайта, приложения или другого ИТ-продукта участвуют две стороны: директор и технические специалисты. Бизнес-аналитик - это посредник между ними. Его задача - выяснить потребности директора, обсудить их с программистами и предложить решение, которое удовлетворит потребности рынка, а также всех участников разработки.
            
            **Какие проекты делает аналитик?**
            
            - Анализирует данные
            - Ищет закономерности и ошибки в данных
            - Предлагает улучшения на основе данных
            - Визуализирует данные
            - и многое другое
            
            **Какие бывают аналитики?**
            
            Профессия аналитика бывает очень разной. В зависимости от отрасли задачи меняются.
            
            - Игровой аналитик
            - Продуктовый аналитик
            - Финансовый аналитик
            - Бизнес-аналитик
            - HR-аналитик
            - Маркетинговый аналитик
            - BI-аналитик
            
            **Какие технологии и инструменты программист использует в работе?**
            
            - Excel
            - Google Analytics
            - AppMetrica
            - Power BI
            - Tableau
            - Яндекс-Метрика
            - и многие другие
        - **Проджект-менеджер. Кто такой проджект-менеджер?**
            
            Проджект-менеджер превращает идеи заказчика в задачи для команды разработки. Он организует рабочие процессы, распределяет обязанности, ведет переговоры с клиентами и принимает решения для оптимизации процесса создания продукта.
            
            Вы научитесь управлять проектами в выбранном направлении, поймете, какие методы использовать, чтобы проекты выполнялись в срок, качественно и без нагрузки на команду.
            
            **Кем вы сможете работать после обучения?**
            
            Проджект-менеджер раскладывает цели компании на задачи и работает над тем, чтобы они выполнялись в срок. Для этого он следит за дедлайнами, готовит отчеты, может формировать бюджет
            
            **Какие задачи решает проджект-менеджер?**
            
            - Составляет план проектов
            - Распределяет задачи по командам
            - Контролирует исполнение задач
            - Ищет подрядчиков
            - Управляет финансовыми потоками
            - Составляет отчеты о проделанной работе
            
            **С какими понятиями связана работа проджект-менеджера?**
            
            - Основы программирования
            - Контроль версий
            - Управление командой
            - Веб-программирование
            - Стандарты менеджмента
            - Составление проектной документации
            - Жизненный цикл проекта
            - Scrum
            - Kanban
            - Agile
            
            **Какие технологии и инструменты проджект-менеджер использует в работе?**
            
            - HTML
            - CSS
            - Tilda
            - Jira
            - Confluence
            - Notion
            - Trello
            - Miro
            - Figma
            - и многие другие
        - **Продакт-менеджер. Кто такой продакт менеджер?**
            
            Опытный продакт-менеджер отвечает за развитие целого приложения или его части, например, гео-карты внутри него
            
            Типичные задачи продакта - расставить приоритеты задач для разработки, найти точки роста продукта и исследовать рынок.
            
            Вы поймете весь цикл разработки продукта и научитесь запускать свои собственные в выбранной технологии. Поймете, как правильно выстроить работу разных специалистов, чтобы пользователи получали новые продукты вовремя и в хорошем качестве.
            
            **Кем вы сможете работать после обучения?**
            
            Продакт-менеджер отвечает за создание новых продуктов, анализ рынка, ассортиментную политику, ценообразование, продвижение продукта, планирование KPI и формирование требований к продукту.
            
            **Какие задачи решает продакт-менеджер?**
            
            - Анализирует рынок и ЦА
            - Придумывает новый продукт
            - Управляет финансовыми ресурсами
            - Управляет командой
            - Развивает каналы продаж
            - Тестирует маркетинговые гипотезы
            - Управляет жизненным циклом продукта
            - Выстраивает стратегии продвижения продукта
            
            **С какими понятиями связана работа продакт-менеджера?**
            
            - Просчет бизнес-моделей
            - Аналитика
            - Бизнес-кейсы
            - Привлечение инвестиций
            - MVP
            - Жизненный цикл продукта
            - Финансы
            - Тестирование гипотез
            - Управление командой
            - Основы программирования
            - Unit-экономика
            - Scrum
            - Kanban
            - Agile
            
            **Какие технологии и инструменты продакт-менеджер использует в работе?**
            
            - Tilda
            - Figma
            - Miro
            - Jira
            - Notion
            - Confluence
            - Trello
            - и многие другие

### Факультативы

### Git. 31.08.23 -

[**[Git. Базовый курс](https://gb.ru/chapters/7843#) 31.08.23 - 16.09.23**](https://www.notion.so/Git-31-08-23-16-09-23-ebb1b90dd8254bb3a8197742f3ff206e?pvs=21)

[**[Руководство по Git на русском](https://git-scm.com/book/ru/v2)**](https://www.notion.so/Git-1c5cc01d92e9413f8dd66a00c046415b?pvs=21)

[************************************************************************************************************************************Книга. Git для профессионального программиста. С. Чакон, Б. Штрауб 18.09.23 -************************************************************************************************************************************ ](https://www.notion.so/Git-18-09-23-4428a62997304e04a4482ead7c83ec65?pvs=21)

- **[Ссылки](https://www.notion.so/7b23507a87c64b3d85041325e72d3314?pvs=21)**

### Алгоритмы и Структуры данных

- **************************Общие вопросы**************************
    - ******Зачем изучать алгоритмы?******
        - Алгоритмизация превращает мысли и рассуждения в последовательность действий.
        К одному и тому же результату могут приводить разные действия - поэтому составление алгоритма это еще и поиск наиболее эффективного (в данный момент) набора действий.
        - Зная фундаментальные алгоритмы, я смогу виртуозно использовать стандартные библиотеки языков программирования, уверенно оценивать ожидаемое время работы программы, читать и понимать код, написанный другими программистами
        - Алгоритмизация важна и для “общего развития”: она помогает планировать свои действия в реальной жизни. 
        Почти все, что нас окружает, можно описать алгоритмически.
    - **************************************Что такое алгоритм?**************************************
        
        **********************************************************************************************************************************************************************************************************************************Алгоритм - это последовательность указаний, которые нужно исполнить, чтобы решить четко сформулированную задачу.********************************************************************************************************************************************************************************************************************************** Мы описываем задачи, исходя из ввода и вывода, и алгоритм становится способом превращения ввода в вывод. 
        При этом формулировка задачи должна быть точной и недвусмысленной - это помогает избежать неверной интерпретации.
        
- **********Видео**********
- **********Книги**********
    
    [**Книга. Адитья Бхаргава. “Грокаем алгоритмы”**](https://www.notion.so/0d7694e113aa41418f6b7fb8950929f0?pvs=21)
    
    [************************************************************Книга. Томас Кормен. “Вводный курс. Алгоритмы”************************************************************](https://www.notion.so/a24cfd7e26bb4d4b81692888e8c90ed8?pvs=21)
    
- **********Курсы**********
    - **[Основы алгоритмов](https://academy.yandex.ru/handbook/algorithms) - Хендбук от Академии Яндекса**
        
        *Начало 07.11.2023 - 1% в день. Закончим 17.02.2024*
        
        - ******Зачем изучать алгоритмы?******
            - Алгоритмизация превращает мысли и рассуждения в последовательность действий.
            К одному и тому же результату могут приводить разные действия - поэтому составление алгоритма это еще и поиск наиболее эффективного (в данный момент) набора действий.
            - Зная фундаментальные алгоритмы, я смогу виртуозно использовать стандартные библиотеки языков программирования, уверенно оценивать ожидаемое время работы программы, читать и понимать код, написанный другими программистами
            - Алгоритмизация важна и для “общего развития”: она помогает планировать свои действия в реальной жизни. 
            Почти все, что нас окружает, можно описать алгоритмически.
        - **************************************Что такое алгоритм?**************************************
            
            **********************************************************************************************************************************************************************************************************************************Алгоритм - это последовательность указаний, которые нужно исполнить, чтобы решить четко сформулированную задачу.********************************************************************************************************************************************************************************************************************************** Мы описываем задачи, исходя из ввода и вывода, и алгоритм становится способом превращения ввода в вывод. 
            При этом формулировка задачи должна быть точной и недвусмысленной - это помогает избежать неверной интерпретации.
            
            Кассиру необходимо сдать сдачу 77 центов монетами номиналом 25, 10, 5 и 1 цент
            
            - Входные данные: Целое число money и массив из d номиналов 
            c = (c1,c2, … , cd) в порядке убывания (c1 > c2 > … > cd)
            - Выходные данные: Список из d целых чисел i1, i2, … id, в котором 
            c1*i1 + c2*i2 + … + cd*id = money и i1 + i2 + … + id как можно меньше.
            
            Кассиры по всему миру решают эту проблему с помощью простого алгоритма:
            
            ```csharp
             Change(money, c, d):
            	**while** money > 0:
            		coin = ... // монета с самым большим номиналом, который не превышает money дать монету с номиналом coin клиенту
            		money = money - coin
            **************Change:**************
            Change(mone, c, d):
            	**for** k in **range**(1, d + 1)
            		i_k = floor(money / c[k]) // наибольшее количество монет номинала c[k]
            		// дать i_k монет с номиналом c[k] клиенту
            		money = money - c[k] * i_k
            ```
            
            ```csharp
            BruteForceChange(money, c, d):
            	smallestNumberOfCoins = ∞
            	for each combinations of coins (i_1, ... i_d) // (money/c[1], ... , money/c[d])
            		valueOfCoins = ∑ i_k * c_k // k d
            		if valueOfCoins = money:
            			numberOfCoins = ∑ i_k // 
            			if numberOfCoins < smallestNumberOfCoins:
            				smallestNumberOfCoins = numberOfCoins
            				change = (1_1, i_2, ... , i_d)
            	return change
            ```
            
            ```csharp
             
            ```
            
            ```csharp
             
            ```
            
    - **[Анализ данных в социальных науках](https://academy.yandex.ru/handbook/data-analysis) - Хендбук от Академии Яндекса**
        - **[Командная строка](https://academy.yandex.ru/handbook/data-analysis/article/pandan-instrumenty-analitika-dannyh-komandnaya-stroka)**
            
            Командная строка - очень простой, но очень мощный инструмент, которым пользуются аналитики данных, программисты и многие другие ИТ-специалисты.
            
            - **********************************************************Цепочки преобразований данных**********************************************************
                
                У нас есть огромное количество “строительных блоков” - готовых компонентов, программ, команд, на основе которых можно писать сценарии. Мы можем настроить их совместную работу таким образом, чтобы выстраивался конвейер.
                Представим такую задачу: нам нужно распознать тексты, которые написаны на мемах в интернете, чтобы подсчитать среднее число слов в них.
                Конечно, можно посчитать их вручную - но это нереально, тут так и просится автоматизация.
                Для этого нужно:
                
                1. Создать папку для работы
                2. Скачать мемы, которые мы хотим распознать (поскольку задача учебная, ограничимся только одним)
                3. Конвертировать изображение в подходящий для распознавания формат
                4. Извлечь текст со страницы
                5. Посчитать количество слов
                
                Для каждого из этих пунктов есть готовая программа с интерфейсом командной строки
                
                1. ************************************************Создать папку для работы************************************************
                Создадим папку, чтобы потом быстро удалить результаты наших опытов. Сделать это очень просто:
                **************mkdir Data - cd Data (**************сразу перейдем в нее).
                2. ******Скачать мемы, которые мы хотим распознать.******
                Нам потребуется программа **wget**, которая в самом простом случае принимает 1 параметр - ссылку на файл. Она уже установлена 
                `wget -O 01.webp https://img-9gag-fun.9cache.com/photo/aVbxpod_460swp.webp`
                3. **********************Извлечь изображение со страницы**********************
                Преобразуем картинку в более привычный нам формат. Программа называется **[ImageMagik](https://imagemagick.org/script/download.php#windows)**. 
                Указываем два параметра: имя исходного файла и имя нового файла, куда сохранять изображения:
                `magick 01.webp 01.png`
                4. **Распознать текст на картинке**
                Здесь нам поможет система распознавания текстов [Tesseract](https://ru.wikipedia.org/wiki/Tesseract) - **********************************************tesseract 01.png 01 -********************************************** Указываем исходный файл и текстовый файл, куда сохраним все содержимое. В данном случае - 01.txt. Расширение txt не пишется в параметре команды.
                Откроем этот файл в блокноте - ************************************notepad.exe 01.txt************************************
                5. ******************************Посчитать слова******************************
                Это тоже очень просто. Тут мы сначала открываем файл, а потом считаем слова в нем:
                ******************************************************Get-Content 01.txt | Measure-Object -Word******************************************************
                6. ****************************Удаление папки****************************
                Вернемся в исходную папку и удалим папку с результатами нашего эксперимента:
                **************************Remove-Item -path Data -recurse**************************
                7. **********************Итоговый сценарий для одного изображения**********************
                ********************************wget -0 01.webp******************************** https://img-9gag-fun.9cache.com/photo/aVbxpod_460swp.webp
                **magick 01.web 01.png
                tesseract 01.png 01
                Get-Content 01.txt | Measure-Object -Word**
                Мы практически один в один воплотили изначальную идею:
                1. Скачать картинку
                2. Распознать текст на картинке
                3. Посчитать число слов
            - **************************Что мы узнали**************************
                - Сценарии автоматизации не сильно больше объяснения на русском языке
                - Мы оперируем высокоуровневыми программами, например Tesseract
                - Результаты действия одной программы передаются следующей - так и получается цепочка преобразований.
                - Все приведенные программы бесплатны и свободны, что дополнительно приятно.
                
                Конечно, это только первый шаг - чтобы выполнить первоначальную задачу, нам потребовалось бы повторить эти действия для всех мемов, которые мы можем найти в интернете.
                
        - **[О данных и информации](https://academy.yandex.ru/handbook/data-analysis/article/o-dannyh-i-informacii)**
    - **[Учебник по машинному обучению](https://academy.yandex.ru/handbook/ml) - Хендбук от Академии Яндекса**
        - **********************************Машинное обучение**********************************
            
            **********************Машинное обучение********************** - это наука, изучающая алгоритмы, автоматически улучшающиеся благодаря опыту.
            
            ****************************************************************************************************************************************Задачи, которые крайне трудно запрограммировать и алгоритмизировать:****************************************************************************************************************************************
            
            - Перевести текст с одного языка на другой
            - Диагностировать болезнь по симптомам
            - Сравнить, какой из двух документов в интернете лучше подходит под данный поисковый запрос
            - Сказать, что изображено на картинке
            - Оценить, по какой цене удастся продать квартиру.
            
            У всех этих задач есть много общего.
            Во-первых, их решение можно записать как функцию, которая отображает **объекты** или **примеры (samples) в предсказания (targets)**.
            Во-вторых, вряд ли у этих зада есть единственно верное, идеальное решение. 
            В-третьих, у нас есть много примеров правильных ответов, а примеры неправильных ответов, как правило, не составляет труда сконструировать.
            Мы назовем функцию, отображающую объекты в предсказания,  - **моделью**, а имеющийся у нас набор примеров - **обучающей выборкой** или **датасетом**. Обучающая выборка состоит из:
            
            - **объектов** (к примеру, скачанные из интернета картинки, истории больных, активность пользователей сервиса и тд)
            - и **ответов** (подписи к картинкам, диагнозы, информация об уходе пользователей с сервиса), которые мы также будем иногда называть **таргетами**.
            
            **********************************Постановка задачи**********************************
            
            Описанные выше задачи являются примерами задач **обучения с учителем (supervised learning)**, т.к. правильные ответы для каждого объекта обучающей выборки заранее известны. Задачи обучения с учителем делятся на следующие виды в зависимости от того, каким может быть множество У всех возможных ответов (таргетов): 
            
            1. Y = R Y = R^M - **регрессия**. Примерами задач регрессии является предсказание продолжительности поездки на каршеринге, спрос на конкретный товар в конкретный день или погода в вашем городе на завтра (температура, влажность и давление - это несколько вещественных чисел, которые формируют вектор нашего предсказания).
            2. Y = {0, 1} - **бинарная классификация**. Например, мы можем предсказывать, кликнет ли пользователь по рекламному объявлению, вернет ли клиент кредит в установленный срок, сдаст ли студент сессию, случится ли определенное заболевание у пациента, есть ли на картинке банан.
            3. Y = {1, … , K} - **многоклассовая (multiclass) классификация**. Например, определение предметной области для научной статьи (математика, биология, психология и т.д.)
            4. Y = {0, 1}^K - **многоклассовая классификация с пересекающимися классами (multiabel classification)**. Например, задача автоматического проставления тегов для ресторанов (логично, что ресторан может одновременно иметь несколько тегов).
            5. Y - конечное упорядоченное множество - **ранжирование**. 
            Основным примером является задача ранжирования поисковой выдачи, где для любого запроса нужно отсортировать все возможные документы по релевантности этому запросу; при этом оценка релевантности имеет смысл только в контексте сравнения двух документов между собой, ее абсолютное значение информации не несет.
            
            Интерес представляют и задачи **порождения новых объектов** то есть генерации правдоподобных объектов, из ничего или на основе уже существующих.
            С помощью такой модели также можно научиться увеличивать разрешение изображения и применять любимые всеми маски в Snapchat, Instagram. 
            
            Есть и относительно небольшой класс задач, относящихся к **обучению без учителя (unsupervised learning)**, - это задачи, для которых нам известны только данные, а ответы неизвестны или вообще не существуют. 
            Более того, часто поиск “правильных” ответов не является самоцелью. 
            Классическим примером обучения без учителя является кластеризация - задача разделения объектов на группы, обладающие некоторыми неизвестными нам, но, как мы в глубине души надеемся, интерпретируемыми свойствами.
            Примером может служить кластеризация документов из электронной библиотеки по темам или кластеризация новостей с целью выявления крупных сюжетов.
            
            Бывают и другие виды (и даже парадигмы) машинного обучения, так что если вы встретите задачу, которую никак не получается отнести к одному из перечисленных выше типов, не расстраивайтесь.
            
            **Вопрос на подумать**. Определите тип следующих задач. По возможности попробуйте отнести их к более узким видам задач:
            
            - 1. Предсказание курса евро к доллару на следующий день
                
                Это задача регрессии. 
                Модель предсказывает вещественное число, пусть и с небольшим количеством знаков после запятой.
                
            - 2. Стилизация текста.
            Например, перевод на бюрократический язык: “Пиппина и Мерри похитили!” → “Граждане Тук, Перегрин Паладинович, 2990 года рождения, и Брендибак, Мериадок Сарадокович, 2982 года рождения, были похищены неустановленными лицами”.
                
                Это задача генерации новых объектов на основе уже существующих
                
            - 3. Детектирование котиков на изображении
                
                В зависимости от того, для чего мы детектируем котиков, это может быть задача регрессии (предсказание координат вершин прямоугольника, в котором находится котик) или классификации (если нас просто интересует, есть котик или нет).
                
            - 4. Обучение робокота запрыгивать на стол из произвольной позы.
                
                Эту задачу можно решать по-разному. Например, создав физическую модель движения робокота и рассчитав оптимальную последовательность движений. 
                Если мы все-таки хотим решать ее с помощью машинного обучения, то можно поступить следующим образом. 
                Создадим компьютерную симуляцию (чтобы не ломать настоящего робота) и модель, которая будет в каждый момент на основе конфигурации сочленений, высоты от пола, расстояния до стола, фазы Луны и других важных параметров предсказывать, как нужно дальше поворачивать лапы, изгибать спину кота и тд. 
                Эту модель будем прогонять в симуляции, так или иначе меняя ее в зависимости от того, насколько удчано робот справляется со своей задачей. Такая парадигма называется **обучением с подкреплением (reinforcement learning)**, и о ней мы будем говорить дальше. 
                
            - 5.  Поиск наборов товаров, которые посетители супермаркета часто покупают вместе.
                
                Это задача обучения без учителя.
                
            - **Вопрос на подумать**. Ранжирование - это задача с таргетом из конечного упорядоченного множества (1, … К). Казалось бы, ее запросто можно было бы рассматривать как задачу классификации на К классов или задачу регрессии. В чем же проблема? Почему так не делают?
                
                Для решения зада ранжирования обычно строят модель, предсказывающую некоторое вещественное число, по которому затем сортируют объекты, - так почему бы не считать ее регрессией?
                Дело в том, что функции потерь и метрики в этой задаче совсем другие. Нам неважно, какие именно вещественные числа мы предсказываем. Мы просто хотим, чтобы более релевантным объектам сопоставлялись числа побольше
                
                Задача “предскажите 10 самых релевантных объектов” непохожа на задачу классификации. Мир меняется, появляются новые объекты, и если к нам в руки попадет объект более релевантный, чем текущий топ-1, все номера позиций поедут, и выученное нами соответствие объектов и номеров можно будет выкидывать на помойку.
                
            - **********************************Критерии качества**********************************
                
                По обучающей выборке мы хотим построить модель предсказания которой достаточно хороши. Что вообще значит “достаточно хороши”?
                Не понимая, чего мы хотим добиться, мы не предложим хорошего решения, поэтому нужно внимательно отнестись к выбору **метрик качества.**
                Например, мы хотим:
                
                - Решить, сколько коробок с бананами нужно завтра привезти в конкретный магазин, чтобы минимизировать количество товара, который не будет выкуплен, и минимизировать вероятность того, что покупатель к концу дня не найдет желаемый продукт на полке
                - Увеличить счастье пользователей от работы с нашим сервисом, чтобы пользователи стали лояльнее, а сервис мог получать стабильный и прогнозируемый доход
                - Решить, нужно ли направить пациента на дополнительное медицинское обследование.
                
                В каждом конкретном случае может возникать целая иерархия метрик.
                
                1. Самый верхний уровень - это **бизнес-метрики**, например, будущий доход сервиса. Их трудно измерить в моменте, они сложным образом зависят от совокупности всех наших усилий, не только связанных с машинным обучением.
                2. **Онлайн метрики** - это характеристики работающей системы, с помощью которых мы надеемся оценить, что будет с бизнес-метриками. например, это может быть:
                    1. Медианная длина сессии в онлайн-игре. Можно предположить, что пользователь, который долго сидит в игре - это довольный пользователь.
                    2. Среднее количество бананов на полках во всех магазинах торговой сети в конце дня.
                3. Не всегда плоды наших трудов оцениваются числами. Многое может зависеть от субъективного восприятия людей, и для того, чтобы оценить их реакцию до выпуска в продакшн, применяется оценка специально нанятыми людьми - асессорами. Например, так можно оценивать, получилось ли у нас улучшить качество машинного перевода или релевантность выдачи в поисковой системе.
                4. **Офлайн метрики** могут быть измерены до введения модели в эксплуатацию, например, по историческим данным. В задачах, в которых нужно предсказывать какой-то конкретный таргет, офлайн метрики обычно оценивают отклонение предсказаний модели от истинных значений таргета. Например, это может быть точность предсказания, т.е. число верно угаданных значений, или среднеквадратичное отклонение.
                
                Асессорскую оценку тоже можно считать офлайн-метрикой.
                
                В этой книге речь в основном пойдет об офлайновых метриках и о функциях потерь. И прежде, чем вы начнете знакомиться с методами решения задач обучения с учителем, полезно посмотреть, какими бывают метрики качества. Вот несколько примеров:
                
                - Для задачи постановки диагноза хорошими метриками могут быть, например, доля правильно поставленных диагнозов или доля больных, которым удалось поставить правильный диагноз.
                - Для задачи предсказания цены квартиры метрикой качества может быть доля квартир, для которых разница между предсказанным и истинным значением цены не превысила какого-то порога, или средний модуль разницы между предсказанным и истинным значением.
                - Для задачи ранжирования поисковых документов по запросу - доля пар документов, которые мы упорядочили неправильно.
                
                Цель обычно в том, чтобы найти модель для которой значение метрики будет оптимальным.
                
                **Вопрос на подумать**. Важно помнить, что разные нужды заказчика могут диктовать самые разные метрики. Вернемся к задаче постановки диагноза пациентам больницы. Какие метрики вы предложили бы использовать в каждом из следующих случаев:
                
                - Обычный год в обычном терапевтическом отделении обычной больницы
                - Определение очень неприятной болезни, которая жутким клеймом падет на каждого, кому поставили такой диагноз
                - Определение опасной и очень заразной болезни
                - **********Ответ**********
                    
                    Конечно, даже в каждом из этих довольно частных случаев могут быть разные ситуации и разные метрики, но вот как, например, можно было бы ответить:
                    
                    - Обычный год в обычном терапевтическом отделении обычной больницы - тогда главного врача вполне устроит, если доля правильно поставленных диагнозов будет высокой (эта метрика называется **accuracy**)
                    - Определение очень неприятной болезни, которая жутким клеймом падет на каждого, кому поставили такой диагноз - тогда нам важно максимизировать долю действительно больных среди тех, кому мы имели несчастье поставить этот диагноз (эта метрика называется точностью, или **precision**)
                    - Определение опасной и очень заразной болезни - тогда нам важно не пропустить ни одного зараженного, и метрика будет иметь вид доли правильно определенных носителей (эта метрика называется полнотой или **recall**).
                    
                    Разумеется, это самые простые метрики, и в реальной жизни вам придется работать с более сложной иерархией метрик.
                    
    - [**Алгоритмы и структуры данных на JavaScript](https://www.youtube.com/watch?v=NErrGZ64OdE) (Ulbi TV)**
- **[Алгоритмы сортировок](https://academy.yandex.ru/journal/osnovnye-vidy-sortirovok-i-primery-ikh-realizatsii)**
    
    **Пузырьковая сортировка и ее улучшения**
    
    Один из самых известных алгоритмов сортировки.
    Последовательно сравниваем значения соседних элементов и меняем числа местами, если предыдущее оказывается больше последнего. 
    Алгоритм считается учебным и почти не применяется на практике из-за низкой эффективности: он медленно работает на тестах, в которых маленькие элементы (”черепахи”) стоят в конце массива. 
    Однако на нем основаны многие другие методы, например, шейкерная сортировка и сортировка расческой
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$ 
    Лучшее время: O(n)
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void BubbleSort(vector<int>& values) 
    {
      for (size_t idx_i = 0; idx_i + 1 < values.size(); ++idx_i) 
    	{
        for (size_t idx_j = 0; idx_j + 1 < values.size() - idx_i; ++idx_j) 
    		{
          if (values[idx_j + 1] < values[idx_j]) 
    			{
            swap(values[idx_j], values[idx_j + 1]);
          }
        }
      }
    }
    ```
    
    ************************************************************************************************Сортировка перемешиванием (шейкерная сортировка)************************************************************************************************
    
    Отличается от пузырьковой тем, что она двунапраленная: алгоритм перемещается не строго слева направо, а сначала слева направо, а затем справа налево
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$ 
    Лучшее время: O(n)
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void ShakerSort(vector<int>& values) {
      if (values.empty()) 
    	{
        return;
      }
      int left = 0;
      int right = values.size() - 1;
      while (left <= right) 
    		{
        for (int i = right; i > left; --i) 
    			{
          if (values[i - 1] > values[i]) {
            swap(values[i - 1], values[i]);
          }
        }
        ++left;
        for (int i = left; i < right; ++i) 
    		{
          if (values[i] > values[i + 1]) 
    			{
            swap(values[i], values[i + 1]);
          }
        }
        --right;
      }
    }
    ```
    
    ****************************************Сортировка расческой****************************************
    
    Улучшение сортировки пузырьком. Ее идея состоит в том, чтобы “устранить” элементы с небольшими значениями в конце массива, которые замедляют работу алгоритма.
    Если при пузырьковой и шейкерной сортировках при переборе массива сравниваются соседние элементы, то при “расчесывании” сначала берется достаточно большое расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального
    Первоначальный разрыв нужно выбирать не случайным образом, а с учетом специальной величины - фактора уменьшения, оптимальное значение которого равно 1,247. Сначала расстояние между элементами будет равняться размеру массива, поделенному на 1,247; на каждом последующем шаге расстояние будет снова делиться на фактор уменьшения - и так до окончания работы алгоритма
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2/2^p)$, где р - количество инкрементов 
    Лучшее время: $O(n log n)$
    
    Затраты памяти: О(1)**
    
    </aside>
    
    ```csharp
    void CombSort(vector<int>& values) 
    {
      const double factor = 1.247; // Фактор уменьшения
      double step = values.size() - 1;
    
      while (step >= 1) 
    	{
        for (int i = 0; i + step < values.size(); ++i) 
    		{
          if (values[i] > values[i + step]) 
    			{
            swap(values[i], values[i + step]);
          }
        }
        step /= factor;
      }
      // сортировка пузырьком
      for (size_t idx_i = 0; idx_i + 1 < values.size(); ++idx_i) 
    	{
        for (size_t idx_j = 0; idx_j + 1 < values.size() - idx_i; ++idx_j) 
    		{
          if (values[idx_j + 1] < values[idx_j]) 
    			{
            swap(values[idx_j], values[idx_j + 1]);
          }
        }
      }
    }
    ```
    
    ************************************Простые сортировки************************************
    
    ****************************************Сортировка вставками****************************************
    
    При сортировке вставками массив постепенно перебирается слева направо. При этом каждый последующий элемент размещается так, чтобы он оказался между ближайшими элементами с минимальным и максимальным значением
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$ для сравнений и перестановок
    Среднее время: $O(n^2/2^p)$для сравнений и перестановок 
    Лучшее время: $O(n)$ для сравнений и $О(1)$ перестановок
    
    Затраты памяти: O(n) основной, $О(1)$ дополнительной**
    
    </aside>
    
    ```csharp
    void InsertionSort(vector<int>& values) 
    {
      for (size_t i = 1; i < values.size(); ++i) 
    	{
        int x = values[i];
        size_t j = i;
        while (j > 0 && values[j - 1] > x) 
    		{
          values[j] = values[j - 1];
          --j;
        }
        values[j] = x;
      }
    }
    ```
    
    ************************************Сортировка выбором************************************
    
    Сначала нужно рассмотреть подмножество массива и найти в нем максимум (или минимум). 
    Затем выбранное значение меняют местами со значением первого неотсортированного элемента. 
    Этот шаг нужно повторять до тех пор, пока в массиве не закончатся неотсортированные подмассивы
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n^2)$, где р - количество инкрементов 
    Лучшее время: $О(n^2)$
    
    Затраты памяти: $О(n)$, $О(1)$ вспомогательной**
    
    </aside>
    
    ```csharp
    void SelectionSort(vector<int>& values) 
    {
      for (auto i = values.begin(); i != values.end(); ++i) 
    	{
        auto j = std::min_element(i, values.end());
        swap(*i, *j);
      }
    }
    ```
    
    ********************************************Эффективные сортировки********************************************
    
    ************************************Быстрая сортировка************************************
    
    Этот алгоритм состоит из трех шагов.
    Сначала из массива нужно выбрать один элемент - его обычно называют опорным. 
    Затем другие элементы в массиве перераспределяют так, чтобы элементы меньше опорного оказались до него, а большие или равные - после.
    А дальше рекурсивно применяют первые два шага к подмассивам справа и слева от опорного значения.
         Быструю сортировку изобрели в 1960 году для машинного перевода: тогда словари хранились на магнитных лентах, а сортировка слов обрабатываемого текста позволяла получить переводы за один перегон ленты, без перемотки назад
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $О(n^2)$
    Среднее время: $O(n log n)$
    Лучшее время: $O(n)$
    
    Затраты памяти: $O(n)$**
    
    </aside>
    
    ```csharp
    int Partition(vector<int>& values, int l, int r) 
    {
      int x = values[r];
      int less = l;
    
      for (int i = l; i < r; ++i) 
    	{
        if (values[i] <= x) 
    		{
          swap(values[i], values[less]);
          ++less;
        }
      }
      swap(values[less], values[r]);
      return less;
    }
    
    void QuickSortImpl(vector<int>& values, int l, int r) 
    {
      if (l < r) 
    	{
        int q = Partition(values, l, r);
        QuickSortImpl(values, l, q - 1);
        QuickSortImpl(values, q + 1, r);
      }
    }
    
    void QuickSort(vector<int>& values) 
    {
      if (!values.empty()) 
    	{
        QuickSortImpl(values, 0, values.size() - 1);
      }
    }
    ```
    
    **************************************Сортировка слиянием**************************************
    
    Сортировка слиянием пригодится для таких структур данных, в которых доступ к элементам осуществляется последовательно (например, для потоков). Здесь массив разбивается на две примерно равные части и каждая из них сортируется по отдельности. Затем два отсортированных подмассива сливаются в один
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $O(n log n)$
    Среднее время: $O(n log n)$ 
    Лучшее время: $O(n log n)$
    
    Затраты памяти: $O(n)$ вспомогательной**
    
    </aside>
    
    ```csharp
    void MergeSortImpl(vector<int>& values, vector<int>& buffer, int l, int r) 
    {
      if (l < r) 
    	{
        int m = (l + r) / 2;
        MergeSortImpl(values, buffer, l, m);
        MergeSortImpl(values, buffer, m + 1, r);
    
        int k = l;
        for (int i = l, j = m + 1; i <= m || j <= r; ) 
    		{
          if (j > r || (i <= m && values[i] < values[j])) 
    			{
            buffer[k] = values[i];
            ++i;
          } else {
            buffer[k] = values[j];
            ++j;
          }
          ++k;
        }
        for (int i = l; i <= r; ++i) 
    		{
          values[i] = buffer[i];
        }
      }
    }
    
    void MergeSort(vector<int>& values) 
    {
      if (!values.empty()) 
    	{
        vector<int> buffer(values.size());
        MergeSortImpl(values, buffer, 0, values.size() - 1);
      }
    }
    ```
    
    ******Пирамидальная сортировка******
    
    При этой сортировке сначала строится пирамида из элементов исходного массива. 
    Пирамида (или двоичная куча) - это способ представления элементов, при котором от каждого узла может отходить не больше двух ответвлений. 
    А значение в родительском узле должно быть больше значений в его двух дочерних узлах
       Пирамидальная сортировка похожа на сортировку выбором, где мы сначала ищем максимальный элемент, а затем помещаем его в конец. 
    Дальше нужно рекурсивно повторять ту же операцию для оставшихся элементов
    
    <aside>
    💡 **************************************************************************************Сложность по времени:
    Худшее время: $O(n log n)$
    Среднее время: $O(n log n)$ 
    Лучшее время: $O(n log n)$ или $O(n)$ при одинаковых ключах
    
    Затраты памяти: $O(n)$**
    
    </aside>
    
    ```csharp
    void HeapSort(vector<int>& values) 
    {
    std::make_heap(values.begin(), values.end());
    for (auto i = values.end(); i != values.begin(); --i) 
    	{
    std::pop_heap(values.begin(), i);
      }
    }
    ```
    
- **********************Базы данных**********************

### Архитектура компьютера и операционные системы

- ********Unix********

### Основы и методология программирования

- ********************************************Языки программирования********************************************
    - ********************************Скриптовые языки********************************
    - **C#**
        - **********Видео**********
            - ******************Видеокурс Степана Берегового******************
                - 001
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        class Program
                        {
                            static void Main(string[] args)
                            {
                                Console.WriteLine("Привет, Граждане! Я начинаю осваивать C# !!!");
                            }
                        }
                    }
                    ```
                    
                
                ```csharp
                
                ```
                
            - ******************Видеокурс “Весь C# с нуля до профи”******************
                - **001_Самая первая программа**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                Console.WriteLine("Hello, Dude!");
                                Console.ReadKey();
                            }
                        }
                    }
                    ```
                    
                - **002_Типы переменных**
                    
                    ```csharp
                    using System;
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Основные типы int | float | 
                                // Целочисленные типы
                                byte b; // 0 до 255
                                sbyte sb; // -128 до 127
                                short s; // -32768 до 32767
                                ushort us; // 0 до 65535
                                int i; // -2 млрд до 2 млрд
                                uint ui; // 0 до 4 млрд
                                long l; // 
                                ulong ul; // 
                                // Числа с плавающей точкой
                                float f = 5.7f; // до 7 знаков после запятой и обязательна f
                                double d = 5.7; // до 15 знаков после запятой
                                // Символный тип
                                char c = 'd' ;
                                // Строковый тип
                                string str = "string";
                                // Логический тип
                                bool bl;
                    
                                int age;
                                age = 27;
                                age = 10;
                            }
                        }
                    }
                    ```
                    
                - **003_Арифметические операторы +, -, *, /, %**
                    
                    ```csharp
                    using System;
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Арифметические операторы + - * / % 
                                int timeInMinutes = 130;
                                int hour;
                                int minute;
                    
                                hour = timeInMinutes / 60;
                                minute = timeInMinutes % 60;
                                
                                Console.WriteLine("hours: " + hour);
                                Console.WriteLine("minutes: " + minute);
                    
                                int age = 18;
                                age = age + 1;
                                age++;
                                age += 1;
                                age -= 1;
                                age *= 2;
                                age /= 2;
                    
                                int result = 5 + (12 - 5) * 3 - 1 + 2;
                                Console.WriteLine(result);
                            }
                        }
                    }
                    ```
                    
                - **004_Логические операторы**
                    
                    ```csharp
                    static void Main(string[] args)
                            {
                                // Логические операторы == != >= <= < >
                                int age = 17;
                                bool accesIsAlowed = age >= 18;
                                Console.WriteLine(accesIsAlowed);
                            }
                    ```
                    
                - **005_Конкатенация (суммирование строк)**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                string greeting = "Привет";
                                string name = "Валентин";
                                string message = greeting + " мазафака " + name;
                    
                                Console.WriteLine(message + ", бон жур, йопта!");
                                // Суммируем строки и числа
                                int age = 41;
                                Console.WriteLine("Завтра тебе стукнет: " + (age + 1));
                    
                                string concatination = "age" + "age" + age * 2 + name;
                                Console.WriteLine(concatination);
                            }
                        }
                    }
                    ```
                    
                - **006_Интерполяция**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        int age = 27;
                        string name = "Valentin";
                    
                        Console.WriteLine("Ваше имя: " + name + " вам " + age + " лет!");
                        // Также мы можем выводить эти строчки методом интерполяции:
                        Console.WriteLine($"Ваше имя: {name} вам {age} лет!");
                    }
                    ```
                    
                - **007_Типы конвертации**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        int age;
                        string input = "15";
                        age = Convert.ToInt32(input);
                        Console.WriteLine(age);
                    
                        float result;
                        int x = 5, y = 2;
                        result = Convert.ToSingle(x) / y;
                        Console.WriteLine(result);
                    
                        int trigger = 1;
                        bool triggerInBoolean = Convert.ToBoolean(trigger);
                        Console.WriteLine(triggerInBoolean);
                        int reconvert = Convert.ToInt32(triggerInBoolean);
                        Console.WriteLine(reconvert);
                    }
                    ```
                    
                - **008_Ввод и вывод в консоль**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        string name;
                        Console.WriteLine("Введите ваше имя: ");
                        name = Console.ReadLine();
                        Console.Write($"Ваше имя: {name}");
                        int age;
                        Console.WriteLine("Введите ваш возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine($"Вам {age} лет!");
                    }
                    ```
                    
                - **009_Инкремент и Декремент**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Инкремент и Декремент имеют наивысший приоритет в последовательности действий
                        int i = 0;
                        i++;
                        Console.WriteLine(i);
                        Console.WriteLine(i++ + ++i);
                    
                        int j = 0;
                        j--;
                        Console.WriteLine(j);
                    
                        int k = 0;
                        ++k;
                        Console.WriteLine(k);
                    
                        int l = 0;
                        --l;
                        Console.WriteLine(l);
                    
                        int A = 0;
                        Console.WriteLine(++A + 2 + 1 + A++ + "1" + ++A * 2);
                    }
                    ```
                    
                - **010_Программа рассчитывает урок, наносимый игроку**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            {
                                // Программа расчитывает урон, наносимый игроку
                                float health;
                                int armor;
                                int damage;
                                int percentConverter = 100;
                    
                                Console.WriteLine("Введите количество здоровья: ");
                                health = Convert.ToInt32(Console.ReadLine());            
                                Console.WriteLine("Введите количество брони: ");
                                armor = Convert.ToInt32(Console.ReadLine());            
                                Console.WriteLine("Введите количество урона: ");
                                damage = Convert.ToInt32(Console.ReadLine());
                    
                                health -= Convert.ToSingle(damage) / percentConverter * armor;
                    
                                Console.WriteLine($"Вам нанесли {damage} урона. " +
                                    $"У вас осталось {health} здоровья. " +
                                    $"Вам нанесли {damage} урона. ");
                            }
                        }
                    }
                    ```
                    
                - **011_Добавляем невозможность ухода в отрицательный баланс через bool-переменную**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Прописываем невозможность ухода в отрицательный баланс
                        int money;
                        int food;
                        int foodUnitPrice = 10;
                        // Заводим булеву пер-ю, для того, чтобы не уйти в минус по показателям
                        bool isAbleToPay;
                    
                        Console.WriteLine("Добро пожаловать в пекарню! Сегодня еда по " + foodUnitPrice + " монет.");
                        Console.WriteLine("Сколько у вас золота?");
                        money = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine("Сколько еды вам нужно?");
                        food = Convert.ToInt32(Console.ReadLine());
                    
                        isAbleToPay = money >= food * foodUnitPrice;
                        food *= Convert.ToInt32(isAbleToPay); // конвертация
                        money -= food * foodUnitPrice;
                        Console.WriteLine($"У вас в сумке {food} единиц еды, а также {money} золота");
                    }
                    ```
                    
                - **012_If_Else**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Операторы цикла: if else
                        int age;
                        Console.Write("Введите свой возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        if (age >= 18)
                        {
                            Console.WriteLine("Добро пожаловать в наш бар!");
                            Console.WriteLine("Что будете пить?");
                        }
                        else
                        {
                            Console.WriteLine("Вы слишком юны для бухла!");
                            Console.WriteLine("Приходи, когда вырастешь, сынок!");
                        }
                        Console.WriteLine("За условным оператором.");
                    }
                    ```
                    
                - **013_If & Else If**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Операторы цикла: if else
                        string dayOfWeek;
                        Console.Write("Введите день недели: ");
                        dayOfWeek = Console.ReadLine();
                    
                        if (dayOfWeek == "понедельник")
                        {
                            Console.WriteLine("Стало быть проходим курсы!");
                        }
                        // Однако, что делать, если понедельник уже введен, и нам не нужно
                        // гонять программу дальше и расходовать память? Применим else - if
                        else if (dayOfWeek == "вторник")
                        {
                            Console.WriteLine("Стало быть делаем домашку");
                        }    
                    }
                    ```
                    
                - **014_Таблица логических операторов**
                    
                    ```csharp
                    static void Main(string[] args)
                    {
                        // Логическое И && (умножение)
                        // x | y | x && y true -> 1 false -> 0
                        // 1 | 1 |   1
                        // 1 | 0 |   0
                        // 0 | 1 |   0
                        // 0 | 0 |   0
                        // Логическое ИЛИ && (сложение)
                        // x | y | x || y true -> 1 false -> 0
                        // 1 | 1 |   1
                        // 1 | 0 |   1
                        // 0 | 1 |   1
                        // 0 | 0 |   0
                    
                        int money = 500;
                        int level = 4;
                    
                        if (money >= 500 || level > 9)
                        {
                            Console.WriteLine("Проходи! Добро пожаловать в нашу Гильдию!");
                        }
                        else
                        {
                            Console.WriteLine("Вас выпнули за дверь!");
                        }
                    }
                    ```
                    
                - **015_Switch_Case**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Условный оператор switch case
                        Console.WriteLine("Введите день недели строчными буквами: ");
                        string dayOfWeek;
                        dayOfWeek = Console.ReadLine();
                    
                        switch (dayOfWeek)
                        {
                            case "понедельник":
                            case "апрель":
                            case "суббота":
                                Console.WriteLine("Идем в киношку!");
                                Console.WriteLine("Едим попкорн.");
                                break;
                            case "вторник":
                                Console.WriteLine("Делаем домашку");
                                break;
                            case "среда":
                                Console.WriteLine("Смотрим лекцию");
                                Console.WriteLine("Идем на тренировку");
                                break;
                            case "четверг":
                                Console.WriteLine("Проходим семинар");
                                break;
                            case "пятница":
                                Console.WriteLine("Сдаем домашку");
                                break;
                            case "воскресенье":
                                Console.WriteLine("Нихуа не делаем, пузом кверху!");
                                break;
                        }
                    }
                    ```
                    
                - **016_Switch_Case_Default**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Условный оператор switch case
                        Console.WriteLine("Введите день недели строчными буквами: ");
                        string dayOfWeek;
                        dayOfWeek = Console.ReadLine();
                    
                        switch (dayOfWeek)
                        {
                            case "понедельник":
                            case "апрель":
                            case "суббота":
                                Console.WriteLine("Идем в киношку!");
                                Console.WriteLine("Едим попкорн.");
                                break;
                            case "вторник":
                                Console.WriteLine("Делаем домашку");
                                break;
                            case "среда":
                                Console.WriteLine("Смотрим лекцию");
                                Console.WriteLine("Идем на тренировку");
                                break;
                            case "четверг":
                                Console.WriteLine("Проходим семинар");
                                break;
                            case "пятница":
                                Console.WriteLine("Сдаем домашку");
                                break;
                            case "воскресенье":
                                Console.WriteLine("Нихуа не делаем, пузом кверху!");
                                break;
                            default: Console.WriteLine("Слющий, зачем обманываещь, да?");
                                break;
                        }
                    }
                    ```
                    
                - **017_Проверка пароля**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Проверка пароля
                        string password = "12345";
                        string userInput;
                    
                        Console.Write("Введите пароль: ");
                        userInput = Console.ReadLine();
                    
                        if (userInput == password)
                        {
                            Console.WriteLine("Пароль принят, Вацок! Заходи да!");
                        }
                        else
                        {
                            Console.WriteLine("Вэу! Пшель вон отсюда эээ!");
                        }
                    }
                    ```
                    
                - **018_Конвертер валют**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Конвертер валют с потенциалом на много разных операций
                        float rublesInWallet;
                        float dollarsInWallet;
                    
                        int rubToUsd = 96, usdToRub = 92;
                    
                        float exchangeCurrensyCount;
                    
                        string desiredOperation;
                    
                        Console.WriteLine("Привет, Вацок. Ты пришел в самый лючщий абменник да!");
                        Console.WriteLine("Введи баланс рублей, слющий: ");
                        rublesInWallet = Convert.ToSingle(Console.ReadLine());
                        Console.WriteLine("Введи баланс долларов, вэу: ");
                        dollarsInWallet = Convert.ToSingle(Console.ReadLine());
                    
                        Console.WriteLine("Брат, давай выбери аперация нужный да: ");
                        Console.WriteLine("1 - рубли на доллары хочу поменять ");
                        Console.WriteLine("2 - Доллары на рубли хочу, деньги очень нужны слющий.");
                        Console.WriteLine("Какой выбираещь нипасредственно?: ");
                        desiredOperation = Console.ReadLine();
                    
                        switch (desiredOperation)
                        {
                            case "1":
                                Console.WriteLine("Обмен рублей на доллары...");
                                Console.WriteLine("Сколько хочищь обменять, да? ");
                                exchangeCurrensyCount = Convert.ToSingle(Console.ReadLine());
                                if (rublesInWallet >= exchangeCurrensyCount)
                                {
                                    rublesInWallet -= exchangeCurrensyCount;
                                    dollarsInWallet += exchangeCurrensyCount / rubToUsd;
                                }
                                else
                                {
                                    Console.WriteLine("Вэу, брат, нэ хуатает чутка да, ц-ц-ц");
                                }
                                break;
                            case "2":
                                Console.WriteLine("Обмен долларов на рубли...");
                                Console.WriteLine("Сколько хочищь абмэнять слющий? ");
                                exchangeCurrensyCount = Convert.ToSingle(Console.ReadLine());
                                if (dollarsInWallet >= exchangeCurrensyCount)
                                {
                                    dollarsInWallet -= exchangeCurrensyCount;
                                    rublesInWallet += exchangeCurrensyCount * usdToRub;
                                }
                                else
                                {
                                    Console.WriteLine("Вэу, брат, нэ хуатает чутка да, ц-ц-ц");
                                }
                                break; 
                            default:
                                Console.WriteLine("Брат, зачем мазги дэлаешь слющий?!");
                                break;
                        }
                        Console.WriteLine($"Твой баланс, брат: {rublesInWallet} рублей и {dollarsInWallet} долларов. ");
                    }
                    ```
                    
                - **019_Цикл while + break & continue**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Цикл while + break & continue
                        int age;
                        Console.WriteLine("Введите ваш возраст: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        while (age-- > 0)
                        {
                            if (age == 5)
                            {
                                continue;
                            }
                            Console.WriteLine($"С днем рождения Мазафака! {age}");
                    
                            //if (age == 5)
                            //{
                            //    break;
                            //}
                        }
                    }
                    ```
                    
                - **020_Цикл for & continue**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Цикл for & continue
                        int age;
                        Console.WriteLine("Сколько тебе лет слющий: ");
                        age = Convert.ToInt32(Console.ReadLine());
                        for (int i = 0; i <= age; i += 2)
                        {
                            if (i == 4) continue; // исключаем из цикла 4
                            Console.WriteLine($"Ваааа, и было тебе {i} лет");
                        }
                    }
                    ```
                    
                - **021_Checking Password**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // checking password
                        int triesCount = 5;
                        string password = "123456";
                        string userInput;
                    
                        for (int i = 0; i < triesCount; i++)
                        {
                            Console.WriteLine("Введите пароль: ");
                            userInput = Console.ReadLine();
                            if (userInput == password)
                            {
                                Console.WriteLine("Держи охапку секретов!");
                                break;
                            }
                            else
                            {
                                Console.WriteLine("Ваааа, ипана делаешь!");
                                Console.WriteLine($"Давай, брат, попытайся еще {triesCount - i - 1} раз");
                            }
                        }
                    }
                    ```
                    
                - **022_Программа считает, как увеличивается вклад по %**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Программа считает, как увеличивается вклад по %
                        float money;
                        int years;
                        int percent;
                    
                        Console.Write("Введите количество денег, внесенных на вклад: ");
                        money = Convert.ToSingle(Console.ReadLine());
                        Console.Write("На сколько лет открыт вклад?: ");
                        years = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Под какой процент?: ");
                        percent = Convert.ToInt32(Console.ReadLine());
                    
                        for (int i = 0; i < years; i++)
                        {
                            money += money / 100 * percent;
                            Console.WriteLine("В этом году у вас " + money);
                            Console.ReadKey();
                        }
                    }
                    ```
                    
                - **023_Бой игрока с противником**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Бой игрока с противником
                        int playerHealth = 100;
                        int playerDamage = 15;
                        int enemyHealth = 100;
                        int enemyDamage = 10;
                    
                        while (playerHealth > 0 && enemyHealth > 0)
                        {
                            playerHealth -= enemyDamage;
                            enemyHealth -= playerDamage;
                    
                            Console.WriteLine(playerHealth + " игрок. ");
                            Console.WriteLine(enemyHealth + " враг. ");
                        }
                        if (playerHealth <= 0 && enemyHealth <= 0)
                        {
                            Console.WriteLine("Ничья!");
                        }
                        else if (enemyHealth <= 0)
                        {
                            Console.WriteLine("Победа игрока");
                        }
                        else if (playerHealth <= 0)
                        {
                            Console.WriteLine("Победа врага");
                        }
                    }
                    ```
                    
                - **024_Random**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Random
                        Random rand = new Random();
                        int value = rand.Next(0, 10);
                        Console.WriteLine("Программа выдает случайные числа от 1 до 9");
                    
                        while (true)
                        {
                            value = rand.Next(0, 10);
                            Console.WriteLine(value);
                            Console.ReadKey();
                        }
                    }
                    ```
                    
                - **025_Игра Угадай число. Метод Random + Цикл**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра "Угадай число"
                        int number;
                        int lower, higher;
                        int triesCount = 5;
                        int userInput;
                        Random rand = new Random();
                    
                        number = rand.Next(0, 101);
                        lower = rand.Next(number - 10, number);
                        higher = rand.Next(number + 1, number + 10);
                    
                        Console.WriteLine($"Мы загадали число от 0 до 100, оно больше чем {lower}, " +
                            $"но меньше чем {higher}");
                        Console.WriteLine($"Что это за число? У вас {triesCount} попыток отгадать");
                    
                        while (triesCount-- > 0)
                        {
                            Console.WriteLine("Ваш ответ: ");
                            userInput = Convert.ToInt32(Console.ReadLine());
                            if (userInput == number)
                            {
                                Console.WriteLine("Вы правы, это было число " + number + ".");
                                break;
                            }
                            else
                            {
                                Console.WriteLine("Нихуа не верно. Давай заново!");
                            }
                        }
                        if (triesCount < 0)
                        {
                            Console.WriteLine("Ты проипал, друг! Это было число " + number + "!");
                        }
                    }
                    ```
                    
                - **026_Игра Бой гладиаторов**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра "Бой гладиаторов", основанная на Random
                        Random rand = new Random();
                        float health1 = rand.Next(90, 110);
                        int damage1 = rand.Next(7, 35);
                        int armor1 = rand.Next(45, 100);
                    
                        float health2 = rand.Next(80, 120);
                        int damage2 = rand.Next(5, 40);
                        int armor2 = rand.Next(65, 100);
                    
                        Console.WriteLine($"Гладиатор 1 - {health1} здоровья, {damage1} наносимый урон, {armor1} броня.");
                        Console.WriteLine($"Гладиатор 2 - {health2} здоровья, {damage2} наносимый урон, {armor2} броня.");
                    
                        while (health1 > 0 && health2 > 0)
                        {
                            health1 -= Convert.ToSingle(rand.Next(0, damage2 + 1)) / 100 * armor1;
                            health2 -= Convert.ToSingle(rand.Next(0, damage1 + 1)) / 100 * armor2;
                    
                            Console.WriteLine("Здоровье гладиатора 1: " + health1);
                            Console.WriteLine("Здоровье гладиатора 2: " + health2);
                        }
                        if (health1 <= 0 && health2 <= 0)
                        {
                            Console.WriteLine("Ничья. Оба гладиатора погибли.");
                        }
                        else if (health1 <= 0)
                        {
                            Console.WriteLine("Гладиатор 1 пал.");
                        }
                        else if (health2 <= 0)
                        {
                            Console.WriteLine("Гладиатор 2 пал.");
                        }
                    }
                    ```
                    
                - **027_Параметры и цвета консоли**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Console parameters
                        Console.Clear();
                        Console.SetCursorPosition(5, 10);
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.BackgroundColor = ConsoleColor.DarkGray;
                        Console.Clear();
                        Console.WindowHeight = 10;
                        Console.WindowWidth = 50;
                        Console.WriteLine("Привет, Дядя Женя!\nКуда ты вчера делся?\nЯ убежал в ...]\b \b");
                        Console.ReadKey();
                    }
                    ```
                    
                - **028_Инициализация массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Massive initialisation
                        int[] cucumbers = new int[10];
                        // Console.WriteLine(cucumbers[0]);
                        Console.WriteLine($"{cucumbers.Length} - размер массива");
                    
                        Random rand = new Random();
                    
                        for (int i = 0; i < cucumbers.Length; i++)
                        {
                            cucumbers[i] = rand.Next(0, 101);
                            Console.Write(cucumbers[i] + " ");
                        }
                        Console.WriteLine();
                        cucumbers[7] = 13;
                        cucumbers[3] = 3;
                        Console.WriteLine($"{cucumbers[7]} and {cucumbers[3]} - after cycle");
                    }
                    ```
                    
                - **029_Математические операции над элементами массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Mathematic operations with massive elements
                        int[] array = { 24, 25, 17, 66, 38, 84, 7, 8, 3, 7 };
                        int sum = 0;
                        for (int i = 0; i < array.Length; i++)
                        {
                            sum += array[i];
                            Console.Write(array[i] + " ");
                        }
                        int multiplication = 1;
                    
                        for (int i = 0;i < array.Length; i++)
                        {
                            multiplication *= array[i];
                        }
                        Console.WriteLine();
                        Console.WriteLine($"Сумма всех элементов массива = {sum}");
                        Console.WriteLine($"Произведение всех элементов массива = {multiplication}");
                    }
                    ```
                    
                - **030_Находим максимальный элемент в массиве**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Find MaxElement in massive
                        int[] array = { 24, 25, 17, 66, -38, 84, 7, 8, 3, 7 };
                        int maxElement = int.MinValue;
                        for (int i = 0; i < array.Length; i++)
                        {
                            if (maxElement < array[i])
                            {
                                maxElement = array[i];
                            }
                            Console.Write(array[i] + " ");
                        }
                        Console.WriteLine();
                        Console.WriteLine($"Максимальный элемент массива = {maxElement}");
                        //Console.WriteLine($"Произведение всех элементов массива = {multiplication}");
                    }
                    ```
                    
                - **031_Регистрация пассажиров на рейс самолета**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Регистрация пассажиров на рейс самолета
                        int[] sectors = { 6, 28, 15, 15, 17 };
                        bool isOpen = true;
                        while (isOpen)
                        {
                            Console.SetCursorPosition(0, 18);
                            for (int i = 0; i < sectors.Length; i++)
                            {
                                Console.WriteLine($"В секторе {i+1} свободно {sectors[i]} мест");
                            }
                    
                            Console.SetCursorPosition(0, 0);
                            Console.WriteLine("Регистрация рейса");
                            Console.WriteLine("\n\n1 - забронировать место\n\n2 - выход из программы.\n\n");
                            Console.WriteLine("Введите номер команды: ");
                            switch (Convert.ToInt32(Console.ReadLine()))
                            {
                                case 1:
                                    int userSector, userPlaceAmount;
                                    Console.Write("В каком секторе вы хотите лететь? ");
                                    userSector = Convert.ToInt32(Console.ReadLine()) - 1;
                                    if (sectors.Length <= userSector || userSector < 0)
                                    {
                                        Console.WriteLine("Такого сектора не существует!");
                                        break;
                                    }
                                    Console.Write("Сколько мест вы хотите забронировать? ");
                                    userPlaceAmount = Convert.ToInt32(Console.ReadLine());
                                    if (userPlaceAmount < 0)
                                    {
                                        Console.WriteLine("Неверное количество мест!");
                                        break;
                                    }
                                    if (sectors[userSector] < userPlaceAmount)
                                    {
                                        Console.WriteLine($"В секторе {userSector} недостаточно мест. " +
                                            $"Остаток {sectors[userSector]}");
                                        break;
                                    }
                    
                                    sectors[userSector] -= userPlaceAmount;
                                    Console.WriteLine("Бронирование успешно!");
                                    break;
                                case 2:
                                    isOpen = false;
                                    break;
                            }
                    
                            Console.ReadKey();
                            Console.Clear();
                        }
                    }
                    ```
                    
                - **032_Инициализация двумерного массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Инициализация и вывод в консоль двумерного массива
                        int[,] array;
                        int[,] array2 = new int[2, 3];
                    
                        int[,] array3 = {
                            { 2, 3, 4 },
                            { 4, 5, 1 },
                            { 7, 8, 9 }
                        };
                        int[,] array4 = new int[2, 3] {
                            { 9, 8, 7 },
                            { 6, 5, 4 }
                        };
                    
                        Console.WriteLine(array4[1, 1]);
                        Console.WriteLine(array3.Length);
                    
                        int[,] array5 = new int[4, 4];
                        Random rand = new Random();
                    
                        for (int i = 0; i < array5.GetLength(0); i++)
                        {
                            for (int j = 0; j < array5.GetLength(1); j++)
                            {
                                array5[i, j] = rand.Next(0, 10); 
                                Console.Write(array5[i, j] + " ");
                            }
                            Console.WriteLine();
                        }
                    }
                    ```
                    
                - **033_Программа управления библиотекой**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Система управления библиотекой
                        bool isOpen = true;
                        string[,] books =
                        {
                            { "Александр Пушкин", "Михаил Лермонтов", "Сергей Есенин" },
                            { "Роберт Мартин", "Джесси Шилд", "Сергей Тепляков" },
                            { "Стивен Кинг", "Говард Лавкрафт", "Брэм Стокер" }
                        };
                    
                        while (true)
                        {
                            Console.SetCursorPosition(0, 20);
                            Console.WriteLine("\nВесь список авторов:\n");
                            for (int i = 0; i < books.GetLength(0); i++)
                            {
                                for (int j = 0; j < books.GetLength(1); j++)
                                {
                                    Console.Write(books[i,j] + " | ");
                                }
                                Console.WriteLine();
                            }
                            Console.SetCursorPosition(0, 0);
                            Console.WriteLine("Библиотека");
                            Console.WriteLine("\n1 - узнать имя автора по индексу книги." +
                                "\n2 - найти книгу по автору." +
                                "\n3 - выход.");
                            Console.WriteLine("Выберите пункт меню: ");
                    
                            switch(Convert.ToInt32(Console.ReadLine()))
                            {
                                case 1:
                                    int line, column;
                                    Console.Write("Введите номер полки: ");
                                    line = Convert.ToInt32(Console.ReadLine()) - 1;
                                    Console.Write("Введите номер столбца: ");
                                    column = Convert.ToInt32(Console.ReadLine()) - 1;
                                    Console.WriteLine("Это автор: " + books[line, column]);
                                    break;
                                case 2:
                                    string author;
                                    bool authorIsFound = false;
                                    Console.Write("Введите автора: ");
                                    author = Console.ReadLine();
                                    for (int i = 0; i < books.GetLength(0); i++)
                                    {
                                        for (int j = 0; j < books.GetLength(1); j++)
                                        {
                                            if (author.ToLower() == books[i,j].ToLower())
                                            {
                                                Console.Write($"Автор {books[i, j]} " +
                                                    $"находится по адресу: полка { i + 1 }, место { j + 1 }");
                                                authorIsFound = true;
                                            }
                                        }
                                    }
                                    if (authorIsFound == false)
                                    {
                                        Console.WriteLine("Автор отсутствует!");
                                    }
                                    break;
                                case 3:
                                    isOpen = false;
                                    break;
                                default:
                                    Console.WriteLine("Введена неверная команда!");
                                    break;
                            }
                            if (isOpen)
                            {
                                Console.WriteLine("\nНажмите любую клавишу для продолжения...");
                            }
                            Console.ReadKey();
                            Console.Clear();
                        }
                    ```
                    
                - **034_Ссылочные типы на примере гаражей**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Ссылочные типы
                        int[] petrovich = new int[3]; // Гараж Петровича
                        int[] ivanovich = new int[5]; // Гараж Иваныча
                        int[] sidorovich;
                    
                        petrovich = ivanovich; // Петрович пришел к Иванычу и все барахло ему принес
                    
                        petrovich[0] = 5;
                        petrovich[1] = 3;
                    
                        sidorovich = petrovich;
                        sidorovich[2] = 7;
                        sidorovich[0] = 10;
                    
                        Console.WriteLine(ivanovich[0]);
                        Console.WriteLine(ivanovich[1]);
                    
                        petrovich = new int[10];
                    }
                    ```
                    
                - **035_Расширение массива**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Расширение массива
                        int[] bag = new int[1];
                        bag[0] = 12;
                        int[] tempbag = new int[bag.Length + 1];
                        for (int i = 0; i < bag.Length; i++)
                        {
                            tempbag[i] = bag[i];
                            Console.WriteLine(bag[i] + " Первый");
                        }
                        Console.WriteLine();
                        tempbag[tempbag.Length - 1] = 56;
                        bag = tempbag;
                        for (int i = 0;i < bag.Length;i++)
                        {
                            Console.WriteLine(bag[i] + " Второй");
                        }
                    }
                    ```
                    
                - **036_Моя первая бродилка**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Игра-бродилка (в ней будем ходить, собирать сокровища, и они должны отображаться)
                        // Понадобится перво-наперво карта - определенная область с размерами и разметкой
                        Console.CursorVisible = false; // Делаем курсор невидимым, дабы не мешал
                        char[,] map =
                        {
                            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                            { '#', 'x', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', 'x', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', 'x', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', 'x', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', 'x', ' ', '#', 'x', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', 'x', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                        };
                    
                        int userX = 6, userY = 6;
                        char[] bag = new char[1]; // Сумка для сбора сокровищ (Х)
                    
                        while (true)
                        {
                            Console.SetCursorPosition(0, 25);
                            Console.Write("Сумка: ");
                            for (int i = 0; i < bag.Length; i++)
                            {
                                Console.Write(bag[i] + " ");
                            }
                    
                            Console.SetCursorPosition(0, 0);
                            for (int i = 0; i < map.GetLength(0); i++)
                            {
                                for (int j = 0; j < map.GetLength(1); j++)
                                {
                                    Console.Write(map[i, j]);
                                }
                                Console.WriteLine();
                            }
                            Console.SetCursorPosition(userY, userX);
                            Console.Write("@"); // Игрок
                            ConsoleKeyInfo charkey = Console.ReadKey();
                            switch (charkey.Key)
                            { // Прописываем движения, согласно клавишам
                                case ConsoleKey.UpArrow:
                                    if (map[userX - 1, userY] != '#')
                                    {
                                        userX--;
                                    }
                                    break;
                                case ConsoleKey.DownArrow:
                                    if (map[userX + 1, userY] != '#')
                                    {
                                        userX++;
                                    }
                                    break;
                                case ConsoleKey.LeftArrow:
                                    if (map[userX, userY - 1] != '#')
                                    {
                                        userY--;
                                    }
                                    break;
                                case ConsoleKey.RightArrow:
                                    if (map[userX, userY + 1] != '#')
                                    {
                                        userY++;
                                    }
                                    break;
                            }
                            // Логика сбора сокровищ
                            if (map[userX, userY] == 'x')
                            {
                                map[userX, userY] = 'O';
                                char[] tempbag = new char[bag.Length + 1];
                                for (int i = 0; i < bag.Length; i++)
                                {
                                    tempbag[i] = bag[i];
                                }
                                tempbag[tempbag.Length - 1] = 'X';
                                bag = tempbag;
                            }
                    
                            Console.Clear();
                        }
                    }
                    ```
                    
                - **037_foreach**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с символьными массивами
                        string line = "Привет!";
                        Console.WriteLine(line[1]);
                    
                        // Теперь переберем массив (другой)
                        int[] numbers = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
                        for (int i = 0; i < numbers.Length; i++)
                        {
                            Console.Write(" " + numbers[i] + " |");
                        }
                        Console.WriteLine();
                    
                        // А чтобы не обращаться по индексу, используем foreach
                        foreach (int number in numbers) // Читаем: каждый элемент во всей коллекции
                        {
                            Console.Write(" " + number + " |");
                        }
                    }
                    ```
                    
                - **038_Меняем цвет текста в консоли через метод**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с функциями и как их писать
                        // Напишем маленькую программу, которая будет выводить ошибку красным цветом
                        Console.WriteLine("Привет!");
                        Console.WriteLine("Ты здесь?");
                        WriteError("Нет соединения с интернетом"); // А здесь в скобках аргумент
                        Console.WriteLine("Странно...");
                        WriteError("Интернет не оплачен, идиот!");
                    }
                    
                    static void WriteError(string text) // static - обязателен; в скобках параметр функции
                    {
                        ConsoleColor defaultColor = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine(text);
                        Console.ForegroundColor = defaultColor;
                    }
                    ```
                    
                - **039_Пример простейшего метода Sum**
                    
                    ```csharp
                    static void Main(string[] args)
                    { // Работа с функциями и как их писать
                        int j = 3, y = 8, sum;
                        sum = Sum(j, y) + j + y; // Как видим, переменные вовсе не должны совпадать с теми, что указаны в методе
                        Console.WriteLine(Sum(2,3));
                        Console.WriteLine(sum);
                    }
                    
                    static int Sum(int x, int y)
                    {
                        int sum;
                        sum = x + y;
                        return sum;
                    }
                    ```
                    
                - **040_Параметры текста в консоли + Необязательные параметры**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Работа с функциями и как их писать
                                Console.WriteLine("Привет!");
                                Console.WriteLine("Ты здесь?");
                                WriteError("Нет соединения с интернетом."/*Здесь работает параметр по умолчанию из метода*/);
                                Console.WriteLine("Странно...");
                                WriteError("Интернет не оплачен.", symbol: '@' /*ConsoleColor.Magenta*/);
                            }
                    
                            static void WriteError(string text, ConsoleColor color = ConsoleColor.Red, 
                                char symbol = '!')
                            {
                                ConsoleColor defaultColor = Console.ForegroundColor;
                                Console.ForegroundColor = color;
                                Console.WriteLine(symbol + text);
                                Console.ForegroundColor = defaultColor;
                            }
                        }
                    }
                    /* А если я не хочу указывать цвет?
                     * Например, если по умолчанию был красный
                     * Есть такая вещь, как НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР
                     * ConsoleColor color = ConsoleColor.Red и теперь, если я не укажу в основном блоке 
                     * в аргументах цвет, то по умолчанию он будет взят из метода и останется красным
                     */
                    ```
                    
                - **041_Меняем значения массива с помощью метода**
                    
                    ```csharp
                    internal class Program
                    {
                        static void Main(string[] args)
                        { // Меняем массив с помощью метода
                            int[] array = new int[5];
                            EditArray(array, 2, 5);
                            Console.WriteLine(array[2]);
                        }
                    
                        static void EditArray(int[] array, int index, int value)
                        {
                            array[index] = value;
                        }
                    }
                    ```
                    
                - **042_Перегрузки**
                    
                    ```csharp
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Перегрузки
                                int[] array1 = new int[5];
                                int[,] array2 = new int[5, 5];
                                array1 = ReSize(array1, 6);
                                array2 = ReSize(array2, 10, 10);
                                Console.WriteLine(array1.Length);
                                Console.WriteLine(array2.Length);
                            }
                    
                            static int[] ReSize(int[] array, int size)
                            {
                                int[] tempArray = new int[size];
                    
                                for (int i = 0; i < array.Length; i++)
                                {
                                    tempArray[i] = array[i];
                                }
                                array = tempArray;
                                return array;
                            }
                    
                            static int[,] ReSize(int[,] array, int x, int y)
                            {
                                int[,] tempArray = new int[x, y];
                    
                                for (int i = 0; i < array.GetLength(0); i++)
                                {
                                    for (int j = 0; j < array.GetLength(1); j++)
                                    {
                                        tempArray[i, j] = array[i, j];
                                    }
                                }
                                array = tempArray;
                                return array;
                            }
                        }
                    }
                    ```
                    
                - **043_Игровые бары**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Игровые бары
                                int health = 5, maxHealth = 10;
                                int mana = 7, maxMana = 10;
                    
                                while (true)
                                {
                                DrawBar(health, maxHealth, ConsoleColor.Green, 0);
                                DrawBar(mana, maxMana, ConsoleColor.Blue, 1);
                    
                                    Console.SetCursorPosition(0, 5);
                                    Console.Write("Введите число, на которое изменится жизнь:");
                                    health += Convert.ToInt32(Console.ReadLine());
                                    Console.Write("Введите число, на которое изменится мана:");
                                    mana += Convert.ToInt32(Console.ReadLine());
                                    Console.ReadKey();
                                    Console.Clear();
                                }
                            }
                    
                            static void DrawBar(int value, int maxValue, ConsoleColor color, int position, char symbol = '_')
                            {
                                ConsoleColor defaultColor = Console.BackgroundColor;
                    
                                string bar = "";
                    
                                for (int i = 0; i < value; i++)
                                {
                                    bar += symbol;
                                }
                    
                                Console.SetCursorPosition(0, position);
                                Console.Write('[');
                                Console.BackgroundColor = color;
                                Console.Write(bar);
                                Console.BackgroundColor = defaultColor;
                    
                                bar = "";
                    
                                for (int i = value; i < maxValue; i++)
                                {
                                    bar += " ";
                                }
                    
                                Console.Write(bar + "]");
                                Console.WriteLine();
                            }
                        }
                    }
                    ```
                    
                - **044_Pacman Game**
                    
                    ```csharp
                    using System;
                    
                    namespace _001
                    {
                        internal class Program
                        {
                            static void Main(string[] args)
                            { // Игровые бары
                                int health = 5, maxHealth = 10;
                                int mana = 7, maxMana = 10;
                    
                                while (true)
                                {
                                DrawBar(health, maxHealth, ConsoleColor.Green, 0);
                                DrawBar(mana, maxMana, ConsoleColor.Blue, 1);
                    
                                    Console.SetCursorPosition(0, 5);
                                    Console.Write("Введите число, на которое изменится жизнь:");
                                    health += Convert.ToInt32(Console.ReadLine());
                                    Console.Write("Введите число, на которое изменится мана:");
                                    mana += Convert.ToInt32(Console.ReadLine());
                                    Console.ReadKey();
                                    Console.Clear();
                                }
                            }
                    
                            static void DrawBar(int value, int maxValue, ConsoleColor color, int position, char symbol = '_')
                            {
                                ConsoleColor defaultColor = Console.BackgroundColor;
                    
                                string bar = "";
                    
                                for (int i = 0; i < value; i++)
                                {
                                    bar += symbol;
                                }
                    
                                Console.SetCursorPosition(0, position);
                                Console.Write('[');
                                Console.BackgroundColor = color;
                                Console.Write(bar);
                                Console.BackgroundColor = defaultColor;
                    
                                bar = "";
                    
                                for (int i = value; i < maxValue; i++)
                                {
                                    bar += " ";
                                }
                    
                                Console.Write(bar + "]");
                                Console.WriteLine();
                            }
                        }
                    }
                    ```
                    
                - **045_Коллекции**
                    
                    ```csharp
                    static void Main()
                         { // Коллекции
                             List<int> numbers = new List<int>(5); // в круглых скобках размер коллекции
                             numbers[0] = 1; // Присвоение значения элементу коллекции
                         }
                    ```
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpList
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Коллекции
                                List<int> numbers = new List<int>();
                    
                                numbers.Add(12); // Add добавляет значение в конец листа (коллекции)
                                numbers.Add(5);
                                numbers.Add(8);
                                numbers.Add(14);
                                numbers.Add(22);
                    
                                numbers.AddRange(new int[] { 3, 4, 8, 5 }); // Добавляем диапазон
                    
                                numbers.RemoveAt(3); // Удаление элемента под индексом 3
                                numbers.Remove(5); // Удаление повторящихся элементов
                    
                                // numbers.Clear(); - очистка списка
                    
                                for (int i = 0; i < numbers.Count; i++)
                                { // Count - длина коллекции, аналог Length у массивов
                                    Console.WriteLine(numbers[i]); // Выводим в консоль
                                }
                    
                                Console.WriteLine("Число 22 находится на позиции: " + numbers.IndexOf(22));
                    
                                numbers.Insert(1, 123); // Вставляем на позицию 1 число 12
                                Console.WriteLine("Вставленное число " + numbers[1] + " находится в " +
                                    "позиции: " + numbers.IndexOf(123));
                            }
                        }
                    }
                    ```
                    
                - ******************046_Очередь******************
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpLight
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Очередь
                                Queue<string> patients = new Queue<string>();
                    
                                patients.Enqueue("Василий");
                                patients.Enqueue("Алексей");
                                patients.Enqueue("Роман");
                                patients.Enqueue("Владимир");
                    
                                // Убираем пациента из очереди. Выводится первый, он же удаляется
                                Console.WriteLine("Сейчас на прием идет: " + patients.Dequeue());
                    
                                // Но что если я хочу просто узнать кто следующий в очереди, но не удалять его
                                Console.WriteLine("Следующий в очереди: " + patients.Peek());
                    
                                foreach (var patient in patients)
                                { // Перечисляем очередь
                                    Console.WriteLine(patient);
                                }
                            }
                        }
                    }
                    ```
                    
                - 047_Стек
                    
                    ```csharp
                    using System;
                    using System.Collections.Generic;
                    
                    namespace CSharpLight
                    {
                        internal class Program
                        {
                            static void Main()
                            { // Стек
                                Stack<int> numbers = new Stack<int>();
                    
                                numbers.Push(1); // Push добавляет элемент в стек
                                numbers.Push(2);
                                numbers.Push(3);
                                numbers.Push(4);
                                numbers.Push(5);
                    
                                Console.WriteLine("Сверху в стеке лежит: " + numbers.Peek()); // Смотрим, что лежит наверху Peek
                    
                                numbers.Pop(); // Pop извлекает элемент из стека
                    
                                while (numbers.Count > 0)
                                { // Перебираем элементы в стеке
                                    Console.WriteLine("Следующее число в стеке: " + numbers.Pop());
                                }
                    
                                foreach (var number in numbers)
                                { // Убедимся, что стек пуст
                                    Console.WriteLine(number);
                                }
                            }
                        }
                    }
                    ```
                    
                - 048_
                - 049_
                - 050_
                
                ```csharp
                
                ```
                
                ```csharp
                
                ```
                
                ```csharp
                
                ```
                
        - ********************************Основные моменты********************************
            - ******ООП******
                - ООП - это способ организации программы через взаимодействие отдельных объектов, содержащих данные и методы для работы с этими данными. Обычно в ООП выделяют три базовых принципа:
                    - Инкапсуляция
                    Данные объединяются в одно целое с программным кодом, предназначенным для их обработки.
                    Фактически организация программы через взаимодействие объектов является реализацией принципа инкапсуляции.
                    На программном уровне инкапсуляция реализуется путем использования **классов и объектов** (объекты создаются на основе классов).
                    - Полиморфизм
                    Подразумевает использование единого интерфейса для решения однотипных задач.
                    Проявлением полиморфизма является тот факт, что нередко в программе один и тот же метод можно вызывать с разными аргументами. Это удобно.
                    Проявлением полиморфизма является перегрузка и переопределение методов
                    - Наследование
                    Позволяет создавать объекты не на пустом месте, а использованием ранее разработанных утилит. 
                    В языке C# наследование позволяет создавать классы на основе уже существующих классов. 
                    Эти классы используются для создания объектов.
                    Вообще, название этого механизма очень точно отображает его сущность и занимает важное место в концепции языка.
        - **********Книги**********
            - «[Разработка обслуживаемых программ на языке C#](https://drive.google.com/file/d/1OSyEwvwIodTLNlq6qOvXJApK_NlX3bUA/view?usp=drive_link)», Джуст В.
                
                Международный стандарт ISO25010 различает восемь характеристик программного обеспечения:
                
                - **Обслуживаемость**
                - **Функциональная пригодность**
                - **Эффективность работы**
                - **Совместимость**
                - **Удобство использования**
                - **Надежность**
                - **Безопасность**
                - **Переносимость**
                
                Можно выделить следующие четыре вида обслуживания программного обеспечения:
                
                - Устранение выявленных ошибок (так называемое **корректирующее обслуживание**)
                - Адаптация системы к изменениям в окружающей среде, где она функционирует, например, при обновлении ОС или смене технологий (называется **адаптивным обслуживанием**)
                - Обеспечение изменения требований пользователей системы и/или других заинтересованных сторон (это **улучшающее обслуживание**)
                - Повышение качества или предотвращение будущих ошибок (**профилактическое обслуживание**).
                
                Почему так важна обслуживаемость?
                
                - Обслуживаемость или отсутствие таковой оказывает существенное влияние на деловую сторону вопроса
                - Обслуживаемость обеспечивает улучшение других характеристик качества.
            - ******************Васильев А. “Программирование на C# для начинающих”. Выжимки******************
                - ********************************************************************Задания для самостоятельной работы********************************************************************
                    - **************Часть 1**************
                        1. Напишите программу, в которой пользователь вводит сначала имя, а затем фамилию. Программа выводит сообщение с информацией об имени и фамилии пользователя. Предложите версию программы, в которой ввод и вывод текста осуществляется с помощью диалоговых окон. 
                        Также используйте консольную версию программы.
                        2. Напишите программу, в которой пользователь вводит имя и возраст. 
                        Программа отображает сообщение об имени и возрасте пользователя. 
                        Предложите консольную версию программы и версию, в которй данные выводятся с помощью диалоговых окон
                        3. Напишите программу, в которой пользователь последовательно вводит название текущего дня недели, название месяца и дату (номер дня в месяце). Программа выводит сообщение о сегодняшней дате (день недели, дата, месяц). Используйте консольный ввод и вывод данных. 
                        Предложите версию программы, в которой для ввода и вывода данных используются диалоговые окна.
                        4. Напишите программу, в которой пользователю предлагается ввести название месяца и количество дней в этом месяце.
                        Программа выводит сообщение о том, что соответствующий месяц содержит указанное количество дней. 
                        Предложите версии программы для ввода / вывода данных через консоль и с помощью диалоговых окон.
                        5. Напишите программу, в которой по году рождения определяется возраст пользователя. 
                        Используйте консольный ввод и вывод данных.
                        6. Напишите программу, в которой пользователь вводит имя и год рождения, а программа отображает сообщение, содержащее имя пользователя и его возраст. Предложите консольную и версию с диалоговыми окнами
                        7. Напишите программу, в которой по возрасту определяется год рождения. Возраст пользователь вводит в окно с полем, а вычисленный год рождения отображается в другом диалоговом окне. Предложите вариант программы, в которой используется консольный ввод и вывод данных.
                        8. Напишите программу для вычисления суммы двух чисел. Оба числа вводятся пользователем. Для вычисления суммы используйте оператор +. Предложите два варианта программы: программу, в которой данные вводятся и выводятся с помощью диалоговых окон, и программу, в которой используется консольный ввод и вывод данных.
                        9. Напишите программу, в которой пользователь вводит число, а программой отображается последовательность из трех чисел: число, на единицу меньше введенного, введенное число и число на единицу больше введенного. 
                        Предложите версию программы с консольным вводом и выводом данных, а также версию программы, в которой ввод и вывод выполняется с помощью диалоговых окон.
                        10. Напишите программу, в которой пользователь вводит два числа, а программой вычисляется и отображается сумма и разность этих чисел. Предложите варианты программы с использованием консольного ввода / вывода данных и ввода и вывода с помощью диалоговых окон.
                    - **************Часть 2**************
                        1. Напишите программу, которая проверяет, делится ли введенное пользователем число на 3
                        2. Программа проверяет, удовлетворяет ли введенное число следующим критериям: при делении на 5 в остатке получается 2, а при делении на 7 в остатке получается 1.
                        3. Программа проверяет, удовлетворяет ли введенное пользователем число следующим критериям: число делится на 4, и при этом оно не меньше 10
                        4. Программа проверяет, попадает ли введенное пользователем число в диапазон от 5 до 10 включительно
                        5. Программа проверяет, сколько тысяч во введенном пользователем числе (определяется четвертая цифра справа в десятеричном представлении числа).
                        6. Программа проверяет вторую справа цифру в восьмеричном представлении числа, введенного пользователем. Число вводится в десятеричном представлении.
                        7. Программа вычисляет третий бит справа в двоичном представлении числа, введенного пользователем. Число вводится в десятеричном представлении. В программе используйте оператор побитового сдвига.
                        8. Программа, в которой для введенного пользователем числа в бинарном представлении третий бит устанавливается равным единице.
                        9. Программа, в которой для введенного пользователем числа в бинарном представлении четвертый бит устанавливается равным нулю.
                        10. Программа, в которой для введенного пользователем числа в бинарном представлении значение второго бита меняется на противоположное (исходное нулевое значение бита меняется на единичное, а исходное единичное значение бита меняется на нулевое).
                    - **************Часть 3**************
                        1. Напишите программу. Пользователь вводит число, а программа проверяет, делится ли это число на 3 и на 7. 
                        Результаты в диалоговое окно. 
                        Использовать обработку исключений
                        2. Пользователь последовательно вводит два целых числа. 
                        Программа определяет, какое из чисел больше или они равны и выводит сообщение в диалоговом окне.
                        Использовать обработку исключений
                        3. Программа вычисляет сумму чисел, которые вводит пользователь.
                        Выводится запрос на ввод числа, считываем введенное, прибавляем его к сумме и снова запрос на ввод числа.
                        Процесс продолжается до тех пор, пока пользователь не введет нулевое значение.
                        Использовать обработку исключений
                        4. Пользователь вводит целое число в диапазоне от 1 до 7.
                        Программа определяет по числу день недели. 
                        Если число выходит за допустимый диапазон, выводится сообщение о том, что введено некорректное значение.
                        Использовать оператор выбора switch. 
                        Предложить механизм обработки ошибки, связанной с вводом нечислового значения.
                        5. Пользователю предлагается ввести название дня недели.
                        По введенному названию программа определяет порядковый номер дня в неделе.
                        Если пользователь вводит неправильное название дня, программа выводит сообщение о том, что такого дня нет.
                        Предложить версию на основе вложенных условных операторов и на основе switch case
                        6. Программа вычисляет сумму нечетных чисел. Для проверки результата воспользуйтесь тем, что 2 + 4 + 6 + … + 2х = х ( х + 1). Предложить версии, использующие разные операторы цикла.
                        7. Программа для вычисления суммы квадратов натуральных чисел. 
                        Для проверки результата: 1(2) + 2(2) + … + х(2) = ( х ( х + 1) ( 2х + 1)) / 6. 
                        Предложить версии программы, использующие разные операторы цикла.
                        8. Программа выводит последовательность чисел Фибоначчи.(каждое следующее число равно сумме двух предыдущих).
                        Количество чисел в последовательности вводится пользователем. 
                        Предложить версии программы, использующие разные операторы цикла.
                        9. Пользователь вводит два целых числа. 
                        Программа выводит все целые числа, начиная с наименьшего и заканчивая наибольшим. 
                        Предложить версии программы, использующие разные операторы цикла, а также механизм обработки исключений для этой программы
                        10. Программа вычисляет сумму чисел, удовлетворяющих таким критериям: при делении числа на 5 в остатке получается 2, или при делении на 3 в остатке 1.
                        Количество чисел в сумме вводится пользователем.
                        Программа отображает числа, которые суммируются, и значение суммы.
                        Предложить версии программы, использующие разные операторы цикла.
                        Использовать обработку исключений
                    - ******************Часть 4. Массивы******************
                        - ******************Что будет******************
                            - Одномерные массивы - способы их объявления и использования
                            - Особенности работы с двумерными массивами
                            - Способы инициализации массивов
                            - Выполнение основных операций с массивами - в частности, речь будет идти о копировании и присваивании массивов
                            - Создание зубчатых массивов - т.е. массивов со строками разной длины
                            - Особенности массива из объектных ссылок
                            
                            Также познакомимся со способами обработки аргументов командной строки. Еще в главе есть различные примеры использования массивов. Начнем же с азов - с создания одномерных массивов.
                            
                        - ************************************Одномерные массивы************************************
                            
                            **тип[] переменная = new тип[размер]**
                            `int[] nums = new int[10];`
                            
                            ****************************************************************************************************Задача по созданию массива состоит из двух этапов:****************************************************************************************************
                            
                            - Объявление переменной массива
                            - Создание массива и присваивание ссылки на массив переменной массива.
                        - **************Задания**************
                            1. Напишите программу, в которой создается одномерный числовой массив и заполняется числами, которые при делении на 5 дают в остатке 2 (числа 2, 7, 12, 17 и тд).
                            Размер массива вводится пользователем. 
                            Предусмотреть обработку ошибки, связанной с вводом некорректного значения.
                            2. Напишите программу, в которой создается массив из 11 целочисленных элементов. 
                            Массив заполняется степенями двойки с 1 до 1024.
                            При заполнении массива учесть, что начальный элемент равен 1, а каждый следующий больше предыдущего в 2 раза.
                            Отобразить массив в консольном окне в прямом и обратном порядке.
                            Размер массива задается переменной.
                            3. Напишите программу, в которой создается одномерный символьный массив из 10 элементов. Массив заполняется буквами “через одну”, начиная с буквы ‘a’, 
                            Отобразите массив в консольном окне в прямо и обратном порядке. 
                            Размер массива задается переменной.
                            4. Напишите программу, в которой создается символьный массив из 10 элементов.
                            Массив заполнить большими (прописными) буквами английского алфавита. Буквы берутся подряд, но только согласные. Отобразите содержимое созданного массива в консольном окне.
                            5. Напишите программу, в которой создается массив и заполняется случайными числами.
                            Массив отображается в консольном окне.
                            В этом массиве необходимо определить элемент с минимальным значением.
                            В частности, программа должна вывести значение элемента с минимальным значением и индекс этого элемента.
                            Если элементов с минимальным значением несколько, должны быть выведены индексы всех этих элементов.
                            6. Напишите программу, в которой создается целочисленный массив, заполняется случайными числами и после этого значения элементов в массиве сортируются в порядке убывания значений.
                            7. Напишите программу, в которой создается символьный массив, а затем порядок элементов в массиве меняется на обратный.
                            8. Напишите программу, в которой создается двумерный целочисленный массив.
                            Он заполняется случайными числами. 
                            Затем в этом массиве строки и столбцы меняются местами: первая строка становится первым столбцом, вторая строка становится вторым столбцом и тд
                            Например, если исходный массив состоял из 3 строк и 5 столбцов, то в итоге получаем массив из 5 строк и 3 столбцов
                            9. Напишите программу, в которой создается и инициализируется двумерный числовой массив
                            Затем из этого массива удаляется строка и столбец (создается новый массив, в котором по сравнению с исходным удалена одна строка и один столбец). Индекс удаляемой строки и индекс удаляемого столбца определяется с помощью генератора случайных чисел.
                            10. Напишите программу, в которой создается двумерный числовой массив и этот массив заполняется “змейкой”: сначала первая строка (слева направо), затем последний столбец (сверху вниз), последняя строка (справа налево). первый столбец (снизу вверх), вторая строка (слева направо) и тд.
                    - ******************************************************Часть 5. Статические методы******************************************************
                        1. Напишите программу со статическим методом, которым описано вычисление двойного факториала числа, переданного аргументом методу. 
                        По определению, двойной факториал числа обозначается как п!! - это произведение через одно всех чисел, не больших п. Например, 6! = 6 х 4 х 2 = 48 и 5!! = 5 х 3 х 1 = 15
                        Предложите версию метода без рекурсии и с рекурсией.
                        2. Напишите программу со статическим методом, которым вычисляется сумма квадратом натуральных чисел. Число п передается аргументом методу.
                        Предложите версию метода без рекурсии и с рекурсией.
                        3. Напишите программу со статическим методом, которому аргументом передается целочисленный массив и целое число. Результатом метод возвращает ссылку на новый массив, который получается из исходного массива (переданного первым аргументом методу), если в нем взять несколько начальных элементов. 
                        Количество элементов, которые нужно взять из исходного массива, передаются вторым аргументом методу.
                        Если второй аргумент метода больше длины массива, переданного первым аргументом, то методом создается копия исходного массива и возвращается ссылка на эту копию.
                        4. Напишите программу со статическим методом, аргументом которому передается символьный массив, а результатом возвращается ссылка на целочисленный массив, состоящий из кодов символов из массива-аргумента
                        5. Напишите программу со статическим методом, аргументом которому передается целочисленный массив, а результатом возвращается среднее значение для элементов массива (сумма значений элементов, деленная на количество элементов в массиве).
                        6. Напишите программу со статическим методом, аргументом которому передается двумерный целочисленный массив. 
                        У метода, кроме аргумента-массива, есть два неинициализированных аргумента.
                        Результатом метод возвращает значение наибольшего элемента в массиве. 
                        Неинициализированным аргументам присваиваются значения индексов этого элемента.
                        7. Напишите программу со статическим методом, аргументом которому передается одномерный символьный массив. 
                        В результате вызова метода элементы массива попарно меняются местами: первый - с последним, второй - с предпоследним и тд
                        8. Напишите программу с перегруженным статическим методом. Если аргументом методу передается два целых числа, то результатом возвращается ссылка на целочисленный массив, состоящий из натуральных чисел, а первое и последнее число в массиве определяется аргументами метода.
                        Например, если передать аргументами числа 2 и 4, то результатом будет массив из чисел 2, 3 и 4.
                        Если аргументами методу передаются два символьных значения, то результатом возвращается ссылка на массив, состоящий из последовательности символов, а первый и последний символы определяются аргументами метода.
                        9. Напишите программу со статическим методом, аргументом которому передается произвольное количество целочисленных аргументов. Результатом метод возвращает массив из двух элементов: это значения наибольшего и наименьшего значений среди аргументов, переданных методу
                        10. Напишите программу со статическим методом, аргументом которому передается текст и произвольное количество символьных аргументов. 
                        Результатом возвращается текст, который получается добавлением в конец исходного текста (первый аргумент метода) символьных значений, переданных аргументами методу.
                    - ****************Часть 6. Знакомство с классами и объектами****************
                        1. Напишите программу с классом, в котором есть закрытое символьное поле и три открытых метода. 
                        Один из методов позволяет присвоить значение полю.
                        Еще один метод при вызове возвращает результатом код символа.
                        Третий метод позволяет вывести в консольное поле символ (значение поля) и его код
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_1
                                { /* Напишите программу с классом, в котором есть закрытое символьное поле и три открытых метода. 
                                Один из методов позволяет присвоить значение полю.
                                Еще один метод при вызове возвращает результатом код символа.
                                Третий метод позволяет вывести в консольное поле символ (значение поля) и его код
                                   */
                                    class MyClass
                                    {
                                        private char symbol; // Закрытое символьное поле
                                        public void set(char s)
                                        { // Открытый метод позволяет присвоить значение полю
                                            symbol = s; // Значение символьного поля
                                        }
                                        public void show()
                                        { // Открытый метод при вызове возвращает результатом код символа
                                            Console.WriteLine("Код символа: " + (int)symbol); // Возвращаем код символа
                                        }
                                        public void showSymbol()
                                        { // Открытый метод позволяет вывести в консольное поле символ (значение поля) и его код
                                            Console.WriteLine("Символ: " + symbol);
                                            Console.WriteLine("Код символа: " + (int)symbol);
                                        }
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                            MyClass A = new MyClass();
                                            A.set('G');
                                            A.show();
                                            A.showSymbol();
                                        }
                                    }
                                }
                                ```
                                
                        2. Напишите программу с классом, у которого есть два символьных поля и метод. Он не возвращает результат и у него нет аргументов.
                        При вызове метод выводит в консольное окно все символы из кодовой таблицы, которые находятся “между” символами, являющимися значениями полей объекта (из которого вызывается метод).
                        Например, если полям объекта присвоены значения ‘A’ , ‘D’, то при вызове метода в консольное окно должны выводиться все символы от ‘A’ до ‘D’ включительно.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        3. Напишите программу с классом,  у которого есть два целочисленных поля. 
                        В классе должны быть описаны конструкторы, позволяющие создавать объекты без передачи аргументов, с передачей одного аргумента и с передачей двух аргументов.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        4. Напишите программу с классом,  у которого есть символьное и целочисленное поле. 
                        В классе должны быть описаны версии конструктора с двумя аргументами (целое число и символ - определяют значения полей), а также с одним аргументом типа double. В последнем случае действительная часть аргумента определяет код символа (значение символьного поля), а дробная часть (с учетом десятых и сотых) определяет значение целочисленного поля. 
                        Например, если аргументом передается число 65.1267, то значением символьного поля будет символ ‘A’ с кодом 65, а целочисленное поле получить значение 12 (в дробной части учитываются только десятые и сотые).
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        5. Напишите программу с классом,  у которого есть закрытое целочисленное поле. 
                        Значение полю присваивается с помощью открытого метода. 
                        Методу аргументом может передаваться целое число, а также метод может вызываться без аргументов. 
                        Если метод вызывается без аргументов, то поле получает нулевое значение. 
                        Если метод вызывается с целочисленным аргументом, то это значение присваивается полю. Однако, если переданное аргументом методу значение превышает 100, то значением полю присваивается число 100. 
                        Предусмотрите в классе конструктор, который работает по тому же принципу, что и метод для присваивания значения полю. Также в классе должен быть метод. позволяющий проверить значение поля.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        6. Напишите программу с классом,  в котором есть два закрытых целочисленных поля (назовем их макс и мин). Значение поля макс не может быть меньше значения мин. Значения полям присваиваются с помощью открытого метода. Метод может вызываться с одним или двумя целочисленными аргументами.
                        При вызове метода значения полям присваиваются так: сравниваются текущие значения полей и значения аргумента или аргументов, переданных методу. 
                        Самое большое из значений присваивается полю макс, а самое маленькое - мин.
                        Предусмотрите конструктор, который работает по тому же принципу, что и метод для присваивания значений полям. 
                        В классе также должен быть метод, отображающий в консольном окне значения полей объекта.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        7. Напишите программу с классом,  в котором есть два поля: символьное и текстовое.
                        В классе должен быть перегруженный метод для присваивания значений полям. Если метод вызывается с символьным аргументом, то соответствующее значение присваивается символьному полю.
                        Если метод вызывается с текстовым аргументом, то он определяет значение текстового поля. Методу аргументом также может передаваться символьный массив. 
                        Если массив состоит из одного элемента, то он определяет значение символьного поля. В противном случае (если в массиве больше одного элемента) из символов массива формируется текстовая строка и присваивается значением текстовому полю.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        8. Напишите программу с классом,  в котором есть закрытое статическое целочисленное поле с начальным нулевым значением. 
                        В классе должен быть описан статический метод, при вызове которого отображается текущее значение статического поля, после чего значение поля увеличивается на единицу.
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        9. Напишите программу с классом,  в котором есть статические методы, которым можно передавать произвольное количество целочисленных аргументов (или целочисленный массив). Методы, на основании переданных аргументов или массива, позволяют вычислить: наибольшее значение, наименьшее значение, а также среднее значение из набора чисел. 
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                        10. Напишите программу со статическим методом для вычисления косинуса. 
                        Используйте формулу $cos(x) = 1 - x^2/2! + x^4/4! + ... + ((-1)^n*x^2n)/(2n)!$
                        В классе также должны быть статические методы для вычисления гиперболического синуса $sh(x) = x + x^3/3! + x^5/5! + ... + x^(2n+1)/(2n+1)!$  и гиперболического косинуса $ch(x) = 1 + x^2/2! + x^4/4! + ... + x^(2n)/(2n)!$
                            - **************Решение**************
                                
                                ```csharp
                                using System;
                                
                                namespace Самостоятельная_Работа_6_
                                { /* 
                                   */
                                    class MyClass
                                    {
                                
                                    }
                                    class Program
                                    {
                                        static void Main()
                                        {
                                        }
                                    }
                                }
                                ```
                                
                    - **************************************************Часть 7. Работа с текстом**************************************************
                        1. Напишите программу, в которой есть статический метод. Аргументом методу передается текстовое значение. 
                        Результатом метод возвращает текст, в котором, по сравнению с текстом-аргументом, между символами вставлены пробелы.
                        2. Напишите программу, в которой есть статический метод. 
                        Результатом метод возвращает текстовое значение и получающий аргументом текст.
                        Результат метода - это переданный аргументом текст, в котором слова следуют в обратном порядке.
                        Словами считать блоки текста, разделенные пробелами.
                        3. Напишите программу, в которой есть статический метод, который сравнивает текстовые строки.
                        Строки на предмет совпадения сравниваются посимвольно.
                        Правило сравнения такое: два символа считаются одинаковыми, если их коды отличаются не больше, чем на единицу.
                        Текстовые строки совпадают, если у них совпадают символы (в указанном выше смысле).
                        4. Напишите программу, в которой есть статический метод выполняющий сравнение текстовых строк.
                        Текстовые строки сравниваются следующим образом: для каждого текстового значения определяется набор разных букв, входящих в текст (при этом количество вхождений буквы в текст значения не имеют). 
                        Текстовые строки считаются равными, если они содержат одинаковые наборы букв.
                        5. Напишите программу, в которой есть статический метод, определяющий позиции, на которых в тексте находится определенный символ.
                        Аргументами методу передаются текст и символ. 
                        Результатом метод возвращает целочисленный массив, значения элементов которого - это индексы позиций, на которых символ (второй аргумент) находится в тексте (первый аргумент). 
                        Если символ в тексте не встречается, то метод результатом возвращает массив из одного элемента, значение которого равно -1
                        6. Напишите программу, в которой есть статический метод, аргументом которому передается текст, а результатом возвращается символьный массив, состоящий из букв (без учета пробелов и знаков препинания), из которых состоит текст. Если буква несколько раз встречается в тексте, в массиве она представлена одним элементом. 
                        Буквы в массиве-результате должны быть отсортированы в алфавитном порядке.
                        7. Напишите программу, в которой есть статический метод, эмулирующий работу метода Substring(). 
                        Аргументами статическому методу передается текст и два целочисленных аргумента. 
                        Результатом метод возвращает текстовую строку, которая состоит из символов текста (первый аргумент), начиная с позиции с индексом, определяемым вторым аргументом метода. 
                        Третий аргумент статического метода определяет количество символов, которые включаются в подстроку.
                        8. Напишите программу с классом, у которого есть текстовое поле. 
                        Значение текстовому полю присваивается при создании объекта класса.
                        Также в классе должен быть метод, позволяющий вставить подстроку в текст из текстового поля. 
                        Аргументами методу передается подстрока для вставки в текст, а также индекс позиции, начиная с которой выполняется вставка.
                        Переопределить в классе метод ToString() так, чтобы он возвращал значением текст из текстового поля. 
                        9. Напишите программу с классом, в котором есть текстовое поле и символьное поле. 
                        Значение полям присваивается при создании объекта класса. В классе должен быть метод, возвращающий результатом массив из текстовых строк. Такие строки получаются разбиением на подстроки значения текстового поля. 
                        Символ, являющийся индикатором для разбивки на подстроки, определяется значением символьного поля. 
                        Переопределить в классе метод ToString() так, чтобы он возвращал текст со значениями полей объекта и подстроки, на которые разбивается текст из текстового поля.
                        10. Напишите программу с классом, у которого есть поле, являющееся ссылкой на целочисленный массив.
                        При создании объекта массив заполняется случайными числами. Переопределите в классе метод ToString() так, чтобы метод возвращал текстовую строку со значениями элементов массива.
                        Также строка должна содержать информацию о количестве элементов массива и среднем значении для элементов массива (сумма значений элементов, деленная на количество элементов).
                    - ************************************************************Часть 8. Перегрузка операторов************************************************************
                        1. Напишите программу, в которой есть класс с символьным полем и следующими перегруженными операторами: оператором инкремента ++ и декремента —, бинарным оператором “плюс” + и “минус” -.
                        Правила перегрузки операторов такие: применение оператора инкремента к объекту приводит к тому, что поле значением получает следующий (по отношению к текущему значению) символ в кодовой таблице. 
                        Применение оператора декремента приводит к тому, что поле получает значением предыдущий (по отношению к текущему значению) символ в кодовой таблице.
                        Значением выражения на основе оператора инкремента / декремента является ссылка на объект-операнд. 
                        Бинарный оператор “плюс” можно применять для вычисления суммы объекта и целого числа, а аткже суммы целого числа и объекта.
                        В обоих случаях результатотм возвращается новый объект, значение символьного поля которого определяется прибавлением целого числа (один из операндов) к коду символа из объекта-операнда. 
                        С помощью бинарного оператора “минус” можно вычислять разность двух объектов. 
                        Результатом является целое число - разность кодов символов из объектов-операндов.
                        2. Напишите программу, в которой есть класс с полем, являющимся ссылкой на одномерный целочисленный массив.
                        У класса есть конструктор с одним целочисленным аргументом, определяющим размер массива. При создании объекта все элементы массива получают нулевые значения.
                        В классе перегружаются следующие операторы: 
                         - Унарный ~ перегружен таким образом, что результатом возвращается текстовая строка со значениями элементов массива (на который ссылается поле объекта, к которому применяется оператор).
                         - Унарный оператор инкремента ++ перегружен так, что его применение к объекту приводит к добавлению в массив нового элемента с нулевым значением. Результатом возвращается ссылка на объект-операнд.
                         - При применении к объекту оператора декремента — из массива удаляется один элемент (например, последний), а результатом возвращается ссылка на объект-операнд. 
                         - Бинарный оператор сложения + должен быть определен так, чтобы можно было вычислять сумму двух объектов, объекта и числа, а также числа и объекта. Во всех случаях возвращается новый объект.
                        Если в операции участвуют два объекта-операнда, то в объекте-результате массив формируется объединением массивов складываемых объектов. Если вычисляется сумма объекта и числа, то в объекте-результате массив получается добавлением нового элемента к массиву из объекта-перанда. 
                        Значение добавляемого элемента определяется значением числа-операнда. 
                        Если к числу прибавляется объект, то новый элемент добавляется в начало массива. 
                        Если к объект прибавляется число, то новый элемент добавляется в конец массива. 
                        3. Напишите программу, в которой есть класс с двумя целочисленными полями.
                        Опишите для этого класса операторные методы, которые позволяют сравнивать объекты класса на предмет “меньше” или “больше”.
                        Исходите из того, что один объект меньше / больше другого, если сумма квадратов значений его полей меньше / больше суммы квадратов значений полей другого объекта.
                        4. Напишите программу, в которой есть класс с целочисленным полем и текстовым полем. 
                        Выполните перегрузку всех операторов сравнения.
                        Сравнение на предмет “больше” или “меньше” выполняется на основе сравнения длины текстовых значений (имеются ввиду текстовые поля сравниваемых объектов). 
                        При сравнении на предмет “больше или равно” или “меньше или равно” сравниваются значения целочисленных полей объектов. 
                        При сравнении на предмет “равно” или “не равно” сравниваются и целочисленные, и текстовые поля объектов. 
                        Также предложите способ переопределения методов Equals() и GetHashCode().
                        5. Напишите программу, в которой есть класс с целочисленным полем и символьным полем. 
                        Перегрузите операторы true и false так, чтобы “истинным” считался объект, у которого разность значения целочисленного поля и кода символа из символьного поля не превышает величину 10.
                        Используйте объект данного класса  (в качестве условия в условном операторе) для того, чтобы отобразить последовательность символов в консольном окне.
                        6. Напишите программу, в которой есть класс с целочисленным полем.
                        Перегрузите операторы &, |, true и false так, чтобы с объектами класса можно было использовать операторы && и ||.
                        Перегрузку следует реализовать так, чтобы объект считался “истинным”, если значение его числового поля равно 2, 3, 5 или 7.
                        Объект должен рассматриваться как “ложный”, если значение его числового поля меньше 1 или больше 10.
                        7. Напишите программу, в которой есть класс с текстовым полем.
                        Опишите в классе операторные методы для выполнения приведения типов.
                        Необходимо определить следующие способы преобразований. При преобразовании объекта в целое число результатом возвращается количество символов в значении текстового поля.
                        При преобразовании объекта в символ результатом является первый символ в тексте.
                        При преобразовании числа в объект создается (и возвращается результатом соответствующего операторного метода) объект, текстовое поле которого содержит текстовую строку из символов ‘A’.
                        Количество символов в тексте определяется преобразуемым числом.
                        8. Напишите программу, в которой есть класс с полем, являющимся ссылкой на целочисленный массив.
                        Опишите в классе операторные методы для выполнения приведений типов. 
                        Необходимо реализовать следующие правила приведения типов.
                        При преобразовании объекта в текст возвращается текстовая строка со значениями элементов массива.
                        При преобразовании объекта в число возвращается сумма элементов массива.
                        При преобразовании числа в объект результатом является новый объект, размер массива в котором определяется преобразуемым числом.
                        Массив в объекте должен быть заполнен нулями.
                        9. Напишите программу, в которой есть класс с целочисленным полем и перегрузкой операторов +, - и *.
                        Предложите такой способ перегрузки этих операторов, чтобы с объектами класса можно было использовать операторы +=, -= и *=.
                        10. Напишите программу, в которой есть класс с символьным полем и перегрузкой операторов + и -.
                        11. Операторы должны быть перегружены так, чтобы применение оператора + к объектам класса давало результатом текст, получающийся объединением значений символьных полей суммируемых объектов. При применении оператора - к объектам класса результатом должно возвращаться целое число (разность кодов символов из вычитаемых объектов).
                        Предложите такие способы перегрузки операторов приведения типа, чтобы с объектами класса можно было использовать операторы += и -=.
                    - ********************************************************Часть 9. Свойства и индексаторы********************************************************
                        1. Напишите программу, в которой есть класс с символьным свойством.
                        Опишите аксессоры для свойства так, чтобы значение свойства попадало в диапазон символов от ‘A’ до  ‘Z’ включительно
                        2. Напишите программу, в которой есть класс с целочисленным массивом и целочисленным свойством.
                        При считывании значения свойства оно последовательно и циклически возвращает значения элементов массива. 
                        При присваивании значения свойству изменяется значение того элемента, который в данный момент интерпретируется как значение свойства.
                        3. Напишите программу, в которой есть класс с целочисленным массивом. 
                        Опишите в классе свойство, доступное только для считывания значения.
                        Значением свойства является сумма элементов массива.
                        4. Напишите программу, в которой есть класс с закрытым неотрицательным целочисленным полем.
                        Также в классе должно быть закрытое текстовое поле, содержащее значением восьмеричный код числа из целочисленного поля.
                        Опишите в классе свойство, доступное только для присваивания значения.
                        При присваивании неотрицательного целочисленного значения свойству соответствующее число записывается в целочисленное поле, а в текстовое поле заносится восьмеричный код числа.
                        Опишите еще одно свойство, доступное только для чтения, которое результатом возвращает текст из текстового поля (восьмеричный код числа).
                        5. Напишите программу, в которой есть класс со статическим свойством.
                        При считывании значения свойства возвращается нечетное число, каждый раз новое: при первом считывании свойства получаем значение 1, затем 3, затем 5 и так далее.
                        При присваивании значения свойству определяется порядковый номер числа в последовательности нечетных чисел, начиная с которого будут возвращаться числа. 
                        Например, если присвоить свойству значение 5, то при считывании значения свойства получаем число 9 (пятое по порядку нечетное число), затем число 11, затем 13 и так далее.
                        6. Напишите программу, в которой есть класс с целочисленным массивом и с индексатором.
                        При считывании значения выражения с проиндексированным объектом результатом возвращается значение элемента массива.
                        При присваивании значения выражению с проиндексированным объектом значение присваивается элементу массива.
                        Необходимо описать индексатор так, чтобы при индексировании объекта первый индекс отличался от нуля.
                        Числовые значения, определяющие диапазон изменения индекса (и, соответственно, размер целочисленного массива) при индексировании объекта, передаются аргументами конструктору класса.
                        7. Напишите программу с классом, в котором есть неотрицательное целочисленное поле.
                        Опишите для класса индексатор (с одним get-аксессором) такой, что при индексировании объекта с целочисленным индексом результатом возвращается значение бита в бинарном представлении числа (значение целочисленного поля).
                        8. Напишите программу, с классом, у которого есть неотрицательное целочисленное поле. 
                        В классе нужно описать индексатор с целочисленным индексом и set-аксессором.
                        Присваивание значения проиндексированному объекту обрабатывается следующим образом. 
                        В фактически присваиваемом значении берется только последняя цифра (остаток от деления числа на 10). Индекс определяет разряд в числовом значении поля, в который записывается цифра.
                        Нулевой разряд соответствует единицам, единичный - десяткам и тд. 
                        Например, если объект проиндексирован числом 1 и присваивается значение, заканчивающееся на 5, то это означает, что в числе, которое является значением поля, в разряд десятков (разряд 1) нужно записать цифру 5.
                        9. Напишите программу с классом, в котором есть двумерный числовой массив. 
                        Опишите два индексатора для класса. 
                        Двумерный индексатор с двумя целочисленными индексами позволяет прочитать и изменить значение элемента в двумерном массиве, а индексатор с одним целочисленным индексом возвращает результатом значение наибольшего элемента в строке двумерного массива.
                        Присваивание значения выражению на основе объекта с одним индексом означает присваивание значения тому элементу в строке, который на данный момент имеет наибольшее значение.
                        Строка определяется индексом, указанным при индексировании объекта. 
                        Если в строке несколько элементов с наибольшим значением, то используется первый такой элемент
                        10. Напишите программу с классом, в котором есть текстовый массив.
                        Опишите в классе одномерный и двумерный индексаторы. 
                        Одномерный индексатор позволяет прочитать элемент текстового массива и присвоить новое значение элементу текстового массива. 
                        Двумерный индексатор позволяет прочитать символ в элементе текстового массива (первый индекс определяет элемент в текстовом массиве, а второй индекс определяет символ в тексте). 
                        Предусмотрите циклическую перестановку индексов в случае, если они выходят за верхнюю допустимую границу.
                    - **************Часть 10. Наследование**************
                        1. Напишите программу, в которой есть базовый класс с защищенным текстовым полем, конструктором с текстовым аргументом и где переопределен метод ToString(). На основе базового класса путем наследования создается производный класс. 
                        У него появляется еще одно защищенное текстовое поле.
                        Также производный класс должен иметь версии конструктора с одним и двумя текстовыми аргументами, а еще в нем должен быть переопределен метод ToString(). 
                        В обоих классах метод ToString() переопределяется так, что он возвращает строку с названием класса и значение текстового поля или текстовых полей. 
                        2. Напишите программу, в которой есть базовый класс с защищенным текстовым полем. В базовом классе должен быть метод для присваивания значения полю: без аргументов и с одним текстовым аргументом. Объект базового класса создается передачей одного текстового аргумента конструктору. Доступное только для чтения свойство результатом возвращает длину текстовой строки. Доступный только для чтения индексатор возвращает значением символ из текстовой строки. На основе базового класса создается производный класс. В производном классе появляется дополнительное открытое целочисленное поле. В классе должны быть такие версии метода для присваивания значения полям (используется переопределение и перегрузка метода из базового класса): без аргументов, с текстовым аргументом, с целочисленным аргументом, с текстовым и целочисленным аргументом. У конструктора производного класса два аргумента (целочисленный и текстовый).
                        3. Напишите программу, в которой есть базовый класс с открытым полем, являющимся ссылкой на целочисленный массив. Конструктору класса при создании передается ссылка на массив, в результате чего создается копия этого массива и ссылка на него записывается в поле объекта. Метод ToString() переопределен так, что возвращает текстовую строку со значениями элементов массива. На основе базового класса создается производный класс. В производном классе появляется еще одно открытое поле, являющееся ссылкой на символьный массив. Конструктору производного класса передаются две ссылки: на целочисленный массив и на символьный массив. В результате должны создаваться копии этих массивов, а ссылки на созданные массивы записываются в поля объекта. Метод ToString() должен возвращать текстовую строку с содержимым обоих массивов.
                        4. Напишите программу, в которой на основе базового класса создается производный класс, а на основе этого производного класса создается еще один производный класс (цепочка наследования из трех классов). В первом базовом классе есть открытое целочисленное поле, метод с одним аргументом для присваивания значения полю и конструктор с одним аргументом. 
                        Во втором классе появляется открытое символьное поле, метод с двумя аргументами для присваивания значения полям (перегрузка метода из базового класса) и конструктор с двумя аргументами.
                        В третьем классе появляется открытое текстовое поле, метод с тремя аргументами для присваивания значений полям (перегрузка метода из базового класса) и конструктор с тремя аргументами.
                        Для каждого класса определите метод ToString() так, чтобы он возвращал строку с названием класса и значениями всех полей объекта.
                        5. Напишите программу, в которой использована цепочка наследования из трех классов.
                        В первом классе есть открытое символьное поле. Во втором классе появляется открытое текстовое поле. В третьем классе появляется открытое целочисленное поле. В каждом из классов должен быть конструктор, позволяющий создавать объект на основе значений полей, переданных аргументами конструктору, а также конструктор создания копии.
                        6. Напишите программу, в которой есть базовый класс с защищенным текстовым полем, конструктор с текстовым аргументом и метод, при вызове которого в консольном окне отображается название класса и значение поля. На основе базового класса создаются два производных класса (оба на основе одного и того же базового). В одном из классов появляется защищенное целочисленное поле, так есть конструктор с двумя аргументами и переопределен метод для отображения значений полей объекта и названия класса. Во втором производном классе появляется защищенное символьное поле, конструктор с двумя аргументами и переопределен метод, отображающий в консоли название класса и значения полей. 
                        В главном методе создайте объекты каждого из классов. 
                        Проверьте работу метода, отображающего значения полей объектов, для каждого из объектов. 
                        Вызовите этот же метод через объектную переменную базового класса, которая ссылается на объект производного класса.
                        7. Напишите программу, в которой есть базовый класс с открытым текстовым полем. 
                        На его основе создается производный класс с дополнительным открытым символьным полем. Опишите в базовом классе виртуальный метод, который при вызове создает и возвращает результатом объект производного класса. Переопределите в производном классе этот метод так, чтобы он создавал и возвращал копию объекта, из которого вызывается.
                        8. Напишите программу, в которой есть базовый класс с открытым целочисленным полем.
                        В классе описан виртуальный индексатор, позволяющий считывать цифры в десятичном представлении числа (значение поля). 
                        На основе базового класса создается производный класс, в котором появляется еще одно открытое целочисленное поле.
                        В производном классе описывается версия индексатора с двумя индексами: первый индекс определяет поле, значение которого используется, а второй индекс определяет разряд, для которого считывается цифра. Индексатор с одним индексом переопределяется так, что вычисления (считывание цифры в десятичном представлении числа) производятся на основе значения, равного сумме значений полей индексируемого объекта.
                        9. Напишите программу, в которой есть базовый класс с защищенным текстовым полем. В классе имеется виртуальное текстовое свойство, возвращающее значением текст из текстового поля.
                        При присваивании значения свойству значение присваивается текстовому полю. 
                        В классе переопределен метод ToString(): он возвращает текстовую строку с названием класса и значением текстового поля. 
                        На основе базового класса создается производный класс, у которого появляется еще одно текстовое поле. Свойство переопределяется так, что значением возвращается текст, получающийся объединением (через пробел) значений текстовых полей объекта.
                        При присваивании значения свойству присваиваемая текстовая строка разбивается на две, которые присваиваются полям объекта. Разделителем для разбивки строки на две подстроки является пробел (первый с начала строки). Если пробела нет, то первая подстрока совпадает с исходной строкой, а вторая подстрока пустая. Метод ToString() для производного класса нужно переопределить таким образом, чтобы он возвращал название класса и значения полей объекта.
                        10. Напишите программу, в которой есть базовый класс с защищенным целочисленным массивом, индексатором (с целочисленным индексом), позволяющим считывать и присваивать значения элементам массива, а также свойство, возвращающее результатом размер массива. На основе базового класса создается производный класс, у которого появляется защищенный символьный массив. 
                        Опишите в производном классе версию индексатора с символьным индексом, который возвращает значение элемента символьного массива и позволяет присвоить значение элементу символьного массива. 
                        Для свойства из базового класса необходимо выполнить замещение так, чтобы результатом возвращался целочисленный массив из двух элементов: первый элемент определяет размер целочисленного массива объекта, а второй элемент определяет размер символьного массива объекта.
                - ********************************************Примеры кодов из книги********************************************
                    - **************************************************************************Листинг 2.2. Количество сотен в числе**************************************************************************
                        
                        ```csharp
                        using System;
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class HundredsDemo
                        {
                            static void Main()
                            {
                                int number, hundreds; // Целочисленные переменные, считывание целого числа
                                number = Int32.Parse(
                                    Interaction.InputBox( // Надпись над полем ввода:
                                        "Введите целое число: ", "Количество сотен")); // Заголовок окна
                                hundreds = number / 100 % 10; // Формула для вычисления количества сотен
                                string txt = "В этом числе " + hundreds + " сотен!";
                                MessageBox.Show(txt, "Сотни"); // Отображение окна с сообщением
                            }
                        }
                        ```
                        
                    - **********************Знакомство через диалоговое окошко**********************
                        
                        ```csharp
                        Вариант 1
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class UsingIfDemo
                        {
                            static void Main()
                            {
                                // Переменная для определения типа пиктограммы:
                                MessageBoxIcon icon;
                                // Переменные для определения текста сообщения, заголовка окна и имени пользователя
                                string msg, title, name; // Считывание имени пользователя
                                name = Interaction.InputBox("Как вас зовут?", "Знакомимся");
                                // Текст над полем ввода, Название окна. Проверка введенного пользователем текста
                                if (name == "")
                                {
                                    // Пиктограмма ошибки
                                    icon = MessageBoxIcon.Error;
                                    // Текст сообщения
                                    msg = "Очень жаль, что мы не познакомились!";
                                    title = "Знакомство не состоялось"; // Заголовок окна
                                }
                                else
                                {
                                    // Если текст введен, информационная пиктограмма, текст сообщения и заголовок окна
                                    icon = MessageBoxIcon.Information;
                                    msg = "Очень приятно, мазафака " + name + "!";
                                    title = "Знакомство состоялось";
                                }
                                // Отображение сообщения (аргументы - текст сообщения, заголовок, кнопки и пиктограмма)
                                MessageBox.Show(msg, title, MessageBoxButtons.OK, icon);
                            }
                        }
                        ```
                        
                        ```csharp
                        Вариант 2
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        class AnotherIfDemo
                        {
                            static void Main()
                            {
                                // Пиктограмма (сначала это пиктограмма ошибки)
                                MessageBoxIcon icon = MessageBoxIcon.Error;
                                string msg = "Очень жаль, что мы не познакомились!",
                                title = "Знакомство не состоялось", name; // Заголовок окна
                                // Переменные для записи имени пользователя
                                name = Interaction.InputBox("Как вас зовут?", "Знакомимся");
                                // Текст над полем ввода, Название окна. Проверка введенного пользователем текста
                                if (name != "")
                                { // Новый тип пиктограммы и новый текст сообщения
                                    icon = MessageBoxIcon.Information;
                                    msg = "Очень приятно, мазафака " + name + "!";
                                    title = "Знакомство состоялось";
                                }
                                // Отображение сообщения (аргументы - текст сообщения, заголовок, кнопки и пиктограмма)
                                MessageBox.Show(msg, title, MessageBoxButtons.OK, icon);
                            }
                        }
                        ```
                        
                    - ******************if - else******************
                        
                        ```csharp
                        using System;
                        class NestedIfDemo
                        {
                            static void Main()
                            {
                                string txt;
                                Console.WriteLine("Введите текст: ");
                                txt = Console.ReadLine();
                        
                                if (txt != "")
                                {
                                    Console.WriteLine("Спасибо, что ввели текст!");
                                    if (txt.Length > 10)
                                    {
                                        Console.WriteLine("Ого, как много букаф ипать!");
                                    }
                                    else
                                    {
                                        Console.WriteLine("А че как мало, йопт!?");
                                    }
                                }
                                else
                                {
                                    Console.WriteLine("Че, глухой шоле?");
                                }
                            }
                        }
                        ```
                        
                    - **********************************Определение введенного пользователем числа**********************************
                        - **********************************Консольная версия**********************************
                            
                            ```csharp
                            using System;
                            using System.Collections.Generic;
                            using System.Linq;
                            using System.Text;
                            using System.Threading.Tasks;
                            
                            namespace Определение_Числа_3_4
                            {
                                class AnotherNestedIfDemo
                                {
                                    static void Main()
                                    {
                                        int number;
                                        Console.Write("Введите целое число: ");
                                        number = Int32.Parse(Console.ReadLine());
                            
                                        if (number == 1) Console.WriteLine("Ты ввел единицу!");
                                        else if (number == 2) Console.WriteLine("Ты ввел двойку!");
                                        else if (number == 3) Console.WriteLine("Ты ввел тройку!");
                                        else if (number == 4) Console.WriteLine("Ты ввел четыре!");
                                        else Console.WriteLine("А вот это непонятно че ты навводил!..");
                                    }
                                }
                            }
                            ```
                            
                        - ************************************Версия с диалоговыми окнами************************************
                            
                            ```csharp
                            using System;
                            using System.Windows.Forms;
                            using Microsoft.VisualBasic;
                            using System.Collections.Generic;
                            using System.Linq;
                            using System.Text;
                            using System.Threading.Tasks;
                            
                            namespace _3_5_Знакомство_с_оператором_выбора
                            {
                                class SwitchDemo
                                {
                                    static void Main()
                                    {
                                        int number;
                                        string name;
                                        number = Int32.Parse(Interaction.InputBox("Введите число: ", "Число"));
                            
                                        switch (number)
                                        {
                                            case 1: name = "Единица";
                                                break;
                                            case 2: name = "Двойка";
                                                break;
                                            case 3:
                                                name = "Тройка";
                                                break;
                                            case 4:
                                                name = "Четверка";
                                                break;
                                                default;
                                                name = "Неизвестное число";
                                                break;
                                        }
                                        MessageBox.Show(name, "Число");
                                    }
                                }
                            }
                            ```
                            
                        - ****************************************************************************Оператор выбора с пустыми case-блоками****************************************************************************
                            
                            ```csharp
                            using System;
                            using System.Windows.Forms;
                            using Microsoft.VisualBasic;
                            namespace _3_6_Оператор_выбора_с_пустыми_case_блоками
                            {
                                class AnotherSwitchDemo
                                {
                                    /// <summary>
                                    ///  The main entry point for the application.
                                    /// </summary>
                                    [STAThread]
                                    static void Main()
                                    {
                                        int number; // Переменная для запоминания введенного числа
                                        string txt = ""; // Переменная для текста сообщения, далее считывание числа
                                        number = Int32.Parse(Interaction.InputBox("Введите целое число от 1 до 9: ", "Число"));
                                        switch (number) // Оператор выбора
                                        {
                                            case 1: // Если 1 или 9
                                            case 9:
                                                txt = "Вы ввели нечетное,\n но не простое число!";
                                                break;
                                            case 2: // Если значения 2, 3, 5 или 7
                                            case 3:
                                            case 5:
                                            case 7:
                                                txt = "Вы ввели простое число.";
                                                break;
                                            case 4: // Если 4 или 8
                                            case 8:
                                                txt = "Вы ввели число - степень двойки!";
                                                break;
                                            case 6:
                                                txt = "Вы ввели 6 - совершенное число!";
                                                break;
                                        }
                                        MessageBox.Show(txt, "Число"); // Отображение диалогового окна с сообщением
                                    }
                                }
                            }
                            ```
                            
                    - **********************************************************************Использование оператора цикла while**********************************************************************
                        - ************************************************Еще пример использования************************************************
                            
                            ```csharp
                            namespace _3_8_Еще_пример_использования_while
                            {
                                internal class AnotherWhileDemo
                                {
                                    static void Main(string[] args)
                                    {// Количество слагаемых в сумме и значение суммы
                                        int n = 10, s = 0;
                                        Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                        while (n > 0)
                                        {
                                            s += 2 * n - 1; // Добавляем слагаемое в сумму
                                            n--; // Новое значение переменной
                                        }
                                        Console.WriteLine(s);
                                    }
                                }
                            }
                            ```
                            
                        
                        ```csharp
                        namespace _3_7_Использование_оператора_цикла_while
                        {
                            internal class WhileDemo
                            {
                                static void Main(string[] args)
                                {
                                    int n = 10, k = 1, s = 0;
                                    Console.WriteLine("Сумма 1 + 3 + 5 + ... + {0} = ", 2*n-1);
                                    while(k<=n)
                                    {
                                        s += 2 * k - 1;
                                        k++;
                                    }
                                    Console.WriteLine(s);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Оператор цикла do-while**********************************************
                        
                        ```csharp
                        internal class DoWhileDemo
                            {
                                static void Main(string[] args)
                                {
                                    int n = 10, k = 1, s = 0;
                                    Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                        
                                    do
                                    {
                                        s += 2 * k - 1;
                                        k++;
                                    }
                                    while (k <= n);
                                    Console.WriteLine(s);
                                }
                            }
                        ```
                        
                    - ****************Цикл for****************
                        - ******************************************************Первый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                for (k = 1; k <= n; k++)
                                {
                                    s += 2 * k - 1;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Второй пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                            
                                for (int k = 1; k <= n; k++)
                                {
                                    s += 2 * k - 1;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Третий пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k, s;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 *  n - 1);
                                for (k = 1, s = 0; k <= n; s += 2 * k - 1, k++) ;
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Четвертый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k = 1, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                                for (; k <= n; )
                                {
                                    s += 2 * k - 1;
                                    k++;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                        - ******************************************************Пятый пример использования******************************************************
                            
                            ```csharp
                            static void Main(string[] args)
                            {
                                int n = 10, k = 1, s = 0;
                                Console.Write("Сумма 1 + 3 + 5 + ... {0} = ", 2 * n - 1);
                                for (; ;)
                                {
                                    s += 2 * k - 1;
                                    k++;
                                    if (k > n) break;
                                }
                                Console.WriteLine(s);
                            }
                            ```
                            
                    - ********Инструкция безусловного перехода goto********
                        
                        ```csharp
                        static void Main(string[] args)
                        {
                            int n = 10, k = 1, s = 0;
                            Console.Write("Сумма 1 + 3 + 5 + ... + {0} = ", 2 * n - 1);
                        mylabel: //Использование метки
                            s += 2 * k - 1; // Добавляем слагаемое в сумму
                            k++; // Изменение значения индексной переменной
                            if (k <= n) goto mylabel; // Использование инструкции и переход к помеченному коду
                            Console.WriteLine(s);
                        }
                        ```
                        
                    - **************************************Перехват исключений**************************************
                        
                        ```csharp
                        **************try
                        {
                        	// Контролируемый код
                        }
                        catch
                        {
                        	// Код для обработки исключений
                        }**************
                        ```
                        
                        ```csharp
                        using System;
                        using System.Windows.Forms;
                        using Microsoft.VisualBasic;
                        
                        namespace _3_16_Знакомство_с_Перехватом_Исключений_try_catch
                        {
                            internal static class TryCatchDemo
                            {
                                /// <summary>
                                ///  The main entry point for the application.
                                /// </summary>
                                [STAThread]
                                static void Main()
                                { // Сообщение о начале выполнения программы
                                    MessageBox.Show("Выполняется программа!", "Начало");
                                    // Перехват и обработка исключений
                                    try     // Контролируемый код
                                    {       // Попытка преобразовать текст в число
                                        Double.Parse(Interaction.InputBox("Введите действительное число", 
                                            "Число"));  // Отображение сообщения
                                        MessageBox.Show("Да, это было число!", "Число");
                                    }
                                    catch   // Блок обработки исключений
                                    {       // Отображение сообщения
                                        MessageBox.Show("Надо было ввести число!", "Эррор йопт!", 
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    }
                                    // Завершение блока обработки исключений и сообщ-е о зав-ии программы
                                    MessageBox.Show("Программа завершена", "Давай, некогда!");
                                }
                            }
                        }
                        ```
                        
                    - **************Массивы**************
                        - ****************************************4_1_Создание_одномерного_числового_массива****************************************
                            
                            ```csharp
                            internal class CharArrayDemo
                            {
                                static void Main(string[] args)
                                { // Массив заполняем числами, которые при делении на 3 дают остаток 1
                                    int[] nums = new int[12];
                                    for (int i = 0; i < nums.Length; i++)
                                    {
                                        nums[i] = 3 * i + 1;
                                        Console.Write("| " + nums[i] + " ");
                                    }
                                    Console.WriteLine("|");
                                }
                            }
                            ```
                            
                        - ******************************************4_2_Символьный_массив******************************************
                            
                            ```csharp
                            internal class CharArrayDemo
                                {
                                    static void Main(string[] args)
                                    {
                                        Random rnd = new Random(); // Генерируем случайные числа
                                        int size = 10, k;           // Размер массива и индексная переменная
                                        char[] symbs = new char[size]; // Создание символьного массива
                                        Console.WriteLine("Массив случайных символов: ");
                            
                                        for (k = 0; k < symbs.Length; k++)
                                        { // Заполняем массив случайными элементами
                                            symbs[k] = (char)('A' + rnd.Next(26));
                                            Console.Write("| " + symbs[k] + " ");
                                        }
                                        Console.WriteLine("|");
                                        Console.WriteLine("Массив в обратном порядке: ");
                            
                                        for(k = symbs.Length - 1; k >= 0; k--)
                                        {
                                            Console.Write("| " + symbs[k] + " ");
                                        }
                                        Console.WriteLine("|");
                                    }
                                }
                            ```
                            
                        - ********4_3_Инициализация_Одномерного_Массива********
                            
                            ```csharp
                            using System;
                            
                            namespace _4_3_Инициализация_Одномерного_Массива
                            {
                                internal class IntArrayDemo
                                {
                                    static void Main()
                                    { // Создание и инициализация массивов
                                        int[] nums = { 1, 3, 5, 7, 6, 5, 4 };
                                        char[] symbs = new char[] { 'A', 'Z', 'Z', 'B', 'Y' };
                                        string[] txts = new string[3] { "one", "two", "three" };
                            
                                        Console.WriteLine("Array nums: "); // Отображение содержимого массивов
                                        for (int k = 0; k < nums.Length; k++)
                                        {
                                            Console.Write(nums[k] + " ");
                                        }
                            
                                        Console.WriteLine("\nArray symbs: ");
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                            
                                        Console.WriteLine("\nArray txts: ");
                                        for (int k = 0; k < txts.Length; k++)
                                        {
                                            Console.Write(txts[k] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **********************************4_4_Копирование_и_Присваивание_Массивов**********************************
                            
                            ```csharp
                            using System;
                            
                            namespace _4_4_Копирование_Присваивание_Массивов
                            {
                                internal class CopyArrayDemo
                                {
                                    static void Main()
                                    {
                                        int[] A = { 1, 3, 5, 7, 9 };    // Целочисленный массив
                                        int[] B, C;                     // Переменные массива
                                        B = A;                          // Присваивание массивов
                                        C = new int[A.Length];          // Создание нового массива
                            
                                        for (int k = 0; k < A.Length; k++)
                                        { // Поэлементное копирование массива:
                                            C[k] = A[k];
                                        }
                                        A[0] = 0;                       // Изменение значения первого элемента в массиве A
                                        B[B.Length - 1] = 0;            // Изменение значения последнего элемента в массиве B
                                        Console.WriteLine("A:\tB:\tC:"); // Сообщение в консольном окне
                            
                                        for (int k = 0; k < A.Length; k++)
                                        { // Отображение содержимого массивов
                                            Console.WriteLine("{0}\t{1}\t{2}", A[k], B[k], C[k]); // Отобожение зн-й эл-в массивов
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_5_Поиск_Наибольшего_Значения_в_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_5_Поиск_Наибольшего_Значения_в_Массиве
                            {
                                internal class MaxElementDemo
                                {
                                    static void Main()
                                    {
                                        int value, index; // Переменные для записи значения элемента и индекса
                                        int size = 100_500_000; // Размер массива
                                        Random rnd = new Random(); // Объект для генерации случайных чисел
                                        int[] nums = new int[size]; // Создание массива
                            
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Заполнение и отображение массива
                                            nums[k] = rnd.Next(1, 1_000_000_001); // Значение элемента массива
                                            //Console.Write(nums[k] + " "); // Отобраение значения элемента
                                        }
                                        Console.WriteLine();
                            
                                        index = 0; // Поиск наибольшего элемента. Начальное значение для индекса
                                        value = nums[index]; // Значение элемента с индексом
                                        for (int k = 1; k < nums.Length; k++)
                                        { // Перебор элементов
                                            if (nums[k] > value)
                                            { // Если значение проверяемого элемента больше текущего наибольшего значения:
                                                value = nums[k]; // Новое наибольшее значение
                                                index = k; // Новое значение для индекса
                                            }
                                        }
                                        // Отображение результата
                                        Console.WriteLine("Наибольшее значение: " + value);
                                        Console.WriteLine("Индекс элемента: " + index);
                                    }
                                }
                            }
                            ```
                            
                        - **4_6_Сортировка_Массива_Методом_Пузырька**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_6_Сортировка_Массива_Методом_Пузырька
                            {
                                internal class SortArrayDemo
                                {
                                    static void Main()
                                    {
                                        char s; // Символьная переменная и исходный символьный массив
                                        char[] symbs = { 'Q', 'S', 'a', 'B', 'R', 'G', 'q', 'b', 'j', 'y', 'h' };
                                        Console.WriteLine("Массив до сортировки: "); // Отображение содержимого массива
                            
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                                        Console.WriteLine();
                            
                                        for (int i = 1; i < symbs.Length; i++)
                                        { // Сортировка элементов в массиве
                                            for (int j = 0; j < symbs.Length - i; j++)
                                            { // Перебор элементов
                                                if (symbs[j] > symbs[j + 1])
                                                { // Если значение элемента слева больше элемента справа
                                                    s = symbs[j + 1];
                                                    symbs[j + 1] = symbs[j];
                                                    symbs[j] = s;
                                                }
                                            }
                                        }
                                        Console.WriteLine(""); // Отображение содержимогомассиве
                                        for (int k = 0; k < symbs.Length; k++)
                                        {
                                            Console.Write(symbs[k] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **4_7_Использование_Цикла_по_Коллекции**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_7_Использование_Цикла_по_Коллекции
                            {
                                internal class ForeachDemo
                                {
                                    static void Main()
                                    {
                                        int[] nums = { 1, 3, 4, 8, 9 }; // Целочисленный массив
                                        char[] symbs = { 'a', 'b', 'A', 'B', 'Ы' }; // Символьный массив
                                        string[] txts = { "красный", "желтый", "синий" }; // Текстовый массив
                                        Console.WriteLine("Целочисленный массив");
                            
                                        foreach (int s in nums)
                                        { // Циклы по целочисленному массиву
                                            Console.WriteLine("Число {0} - {1}", s, s % 2 == 0 ? "четное" : "нечетное");
                                        }
                            
                                        Console.WriteLine("Символьный массив");
                                        foreach (char s in symbs)
                                        { // Цикл по символьному масссиву
                                            Console.WriteLine("Код символа {0} - {1}", s, (int)s);
                                        }
                            
                                        Console.WriteLine("Текстовый массив");
                                        foreach (string s in txts)
                                        { // Цикл по текстовому массиву
                                            Console.WriteLine("В слове \"{0}\" {1} букв", s, s.Length);
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_8_Двумерный_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_8_Двумерный_Массив
                            {
                                class TwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        int rows = 3, cols = 5; // Количество строк и столбцов в массиве
                                        int[,] nums = new int[rows, cols]; // Создание двумерного массива
                                        int value = 1; // Значение первого элемента в массиве
                            
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Заполнение и отображение массива, перебор строк
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            { // Перебор столбцов в строке
                                                nums[i, j] = value; // Присваивание значения элементу массива
                                                value++; // Это будет значение следующего элемента
                                                Console.Write(nums[i, j] + "\t"); // Отображение элемента в строке
                                            }
                                            Console.WriteLine(); // Переход к новой строке
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_9_Добавление_Строки_и_Столбца_в_Массив**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_9_Добавление_Строки_и_Столбца_в_Массив
                            {
                                class InitTwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[,] symbs = { { 'A', 'B', 'C' }, { 'D', 'E', 'F' } };
                                        Console.WriteLine("Исходный массив: "); // Создание, инициализация и отображение двумерного массива
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        {
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            {
                                                Console.Write(symbs[i, j] + " ");
                                            }
                                            Console.WriteLine();
                                        }
                            
                                        Random rnd = new Random(); // Объект для нерерации случайных чисел
                                        int row = rnd.Next(symbs.GetLength(0) + 1); // Строка и столбец
                                        int col = rnd.Next(symbs.GetLength(1) + 1); 
                                        Console.WriteLine("Добавляется {0}-я строка и {1}-й столбец", row, col);
                            
                                        char[,] tmp = new char[symbs.GetLength(0) + 1, symbs.GetLength(1) + 1]; // Создание нового массива
                                        int a, b; // Целочисленные переменные
                                        char s = 'a'; // Символьная переменная
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Заполнение массива. Копирование значений из исходного массива
                                            if (i < row) a = i; // Первый индекс для элемента нового массива
                                            else a = i + 1;
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            { // Второй индекс для элемента нового массива
                                                if (j < col) b = j;
                                                else b = j + 1; 
                                                tmp[a, b] = symbs[i, j]; // Присваивание значения элементу массива
                                            }
                                        }
                            
                                        for (int j = 0; j < tmp.GetLength(1); j++)
                                        { // Заполнение добавленной строки в новом массиве
                                            tmp[row, j] = s; // Значение элемента в строке
                                            s++; // Новое значение для следующего элемента
                                        }
                            
                                        for (int i = 0; i < tmp.GetLength(0); i++)
                                        { // Если элемент не в добавленной строке
                                            if (i != row) 
                                            { // Значение элемента в столбце
                                                tmp[i, col] = s;
                                                s++; // Новое значение для следующего элемента
                                            }
                                        }
                                        symbs = tmp; // Присваивание массивов
                                        Console.WriteLine("Новый массив: "); // Отображение массива
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Отображение массива
                                            for (int j = 0; j < symbs.GetLength(1); j++)
                                            {
                                                Console.Write(symbs[i, j] + " ");
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_10_Знакомство_с_Многомерными_Массивами**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_10_Знакомство_с_Многомерными_Массивами
                            {
                                class MultiDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[,,] symbs = new char[4, 3, 5]; // Трехмерный символьный массив
                                        char[] s = { 'б', 'Б', 'b', 'B' }; // Одномерный символьный массив
                            
                                        for (int i = 0; i < symbs.GetLength(0); i++)
                                        { // Заполнение трехмерного массива и отображение значений его элементов. Цикл по первому индексу
                                            Console.WriteLine(" Слой № {0}:", i + 1); // Отображение сообщения
                                            for (int j = 0; j < symbs.GetLength(1); j++) 
                                            { // Цикл по второму индексу
                                                for (int k = 0; k < symbs.GetLength(2); k++)
                                                { // Цикл по третьему индексу
                                                    symbs[i, j, k] = s[i]; // Присваивание значения элементу массива
                                                    s[i]++; // Изменение элемента в одномерном массиве
                                                    Console.Write(symbs[i, j, k] + " "); // Отображение значения элемента массива
                                                }
                                                Console.WriteLine(); // Переход к новой строке
                                            }
                                            Console.WriteLine("----------------"); // Отображение линии
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_11_Массив_из_Переменных_Массива**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_11_Массив_из_Переменных_Массива
                            {
                                class AnotherTwoDimArrayDemo
                                {
                                    static void Main()
                                    {
                                        char[][] symbs = new char[16][]; // Символьный массив из переменных массива и Целочисленный массив из переменных массива
                                        int[][] nums = { new int[] { 1, 2, 3 }, new int[] { 4, 5 }, new int[] { 6, 7, 8, 9 } };
                                        char s = 'A'; // Символьная переменная
                            
                                        for (int i = 0; i < symbs.Length; i++)
                                        { // Заполнение символьного массива и перебор элементов во внешнем массиве
                                            symbs[i] = new char[i + 3]; // Создание внутреннего массива
                                            for (int j = 0; j < symbs[i].Length; j++)
                                            { // Перебор элементов во внутреннем массиве
                                                symbs[i][j] = s; // Значение элемента внутреннего массива
                                                s++; // Значение для следующего элемента
                                            }
                                        }
                                        Console.WriteLine("Целочисленный массив: "); // Отобржаение целочисленного массива
                                        for (int i = 0; i < nums.Length; i++)
                                        {
                                            for (int j = 0; j < nums[i].Length; j++)
                                            {
                                                Console.Write("{0, 3}", nums[i][j]);
                                            }
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine("Символьный массив"); // Отображение символьного массива
                                        foreach (char[] q in symbs)
                                        { // Перебор элементов внешнего массива
                                            foreach (char p in q)
                                            { // Перебор элементов во внутреннем массиве
                                                Console.Write("{0, 2}", p); // Отображение элемента массива
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **4_12_Массив_из_Переменных_Типа_Object**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_12_Массив_из_Переменных_Типа_Object
                            {
                                class ObjectArrayDemo
                                {
                                    static void Main()
                                    {
                                        Object[] objs = new object[3]; // Массив из трех переменных типа Object
                                        objs[0] = 123; // Элементам массива присваиваются значения разных типов
                                        objs[1] = 'A'; // Символ
                                        objs[2] = "trese elemento"; // Текст
                                        Console.WriteLine("Look at this strange Array: ");
                            
                                        for (int k = 0; k < objs.Length; k++)
                                        { // Проверка содержимого массива
                                            Console.WriteLine(k + ": " + objs[k]);
                                        }
                            
                                        objs[0] = (int)objs[0] + 111; // Новые значения элементов
                                        objs[1] = "Dos elemento puto!"; // Текст
                                        objs[2] = 3.141592; // Действительное число
                                        Console.WriteLine("После присваивания значений: ");
                            
                                        for (int k = 0; k < objs.Length; k++)
                                        { // Проверка содержимого массива
                                            Console.WriteLine(k + ": " + objs[k]);
                                        }
                            
                                        int[] nums = { 10, 20, 30 }; // Целочисленный массив.
                                        objs[2] = nums; // Переменная массива присваивается как значение элементу массива
                                        Console.WriteLine("Целочисленный массив");
                            
                                        for (int i = 0; i < ((int[])objs[2]).Length; i++)
                                        { // Отображение элементов целочисленного массива
                                            Console.Write("{0, 3}", ((int[])objs[2])[i]);
                                        }
                                        Console.WriteLine();
                            
                                        ((int[])objs[2])[1] = 0; // Новое значение элемента в целочисленном массиве
                                        Console.WriteLine("Еще раз тот же массив: "); // Отображение элементов целочисленного массива 
                                        for (int i = 0; i < nums.Length; i++)
                                        {
                                            Console.Write("{0, 3}", nums[i]);
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        - **4_13_Параметры_Командной_Строки**
                            
                            ```csharp
                            using System;
                            
                            namespace _4_13_Параметры_Командной_Строки
                            {
                                class ProgArgsDemo
                                {
                                    static void Main(string[] args) // Главный метод с аргументом - массивом
                                    {
                                        Console.WriteLine("Передано {0} параметров", args.Length); // Определение количества переданных параметров
                            
                                        for (int k = 0; k < args.Length; k++)
                                        { // Отображение значений параметров
                                            Console.WriteLine("{0}-й параметр: {1}", (k + 1), args[k]); // Отображение значения параметра
                                        }
                                        Console.WriteLine("Выполнение программы завершено!");
                                    }
                                }
                            }
                            ```
                            
                    - ************************************Статические методы************************************
                        - **5_1_Знакомство_со_Статическими_Методами**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_1_Знакомство_со_Статическими_Методами
                            {
                                class StatMethDemo
                                {
                                    static void show(string txt)
                                    { // Статический метод для отображения текста, переданного аргументом методу
                                        Console.WriteLine(txt);
                                    }
                            
                                    static int factorial(int n)
                                    { // Статический метод для вычисления факториала числа, переданного аргументом методу
                                        int s = 1; // Локальная переменная
                                        for (int k = 1; k <= n; k++)
                                        { // Вычисление произведения
                                            s *= k; // Умножение произведения на число
                                        }
                                        return s; // Результат метода
                                    }
                            
                                    static double power(double x, int n)
                                    { // Статический метод для возведения числа в степень. Число и степень передаются аргументами методу
                                        double s = 1; // Локальная переменная
                                        for (int k = 1; k <= n; k++)
                                        { // Вычисление результата (число в степени)
                                            s *= x; // Текущее значение умножается на число
                                        }
                                        return s; //  Результат метода
                                    }
                            
                                    static void Main()
                                    { // Главный метод программы
                                        show("Начинаем вычисления");
                                        int m = 5; // Целочисленные переменные
                                        double z = 3, num; // Действительные переменные
                                        show(m + "!=" + factorial(m)); // Вычисление факториала числа
                                        num = power(z, m); // Число в степени
                                        show(z + " в степени " + m + ": " + num); // Отображение сообщения вызовом статического метода
                                    }
                                }
                            }
                            ```
                            
                        - **5_2_Перегрузка_Статических_Методов**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_2_Перегрузка_Статических_Методов
                            {
                                class OverloadMethDemo
                                {
                                    static void show(string txt)
                                    { // Версия статического метода для отображения текста с одним текстовым аргументом
                                        Console.WriteLine("Текст: " + txt);
                                    }
                                    static void show(int num)
                                    { // Версия статического метода для отображения целого числа (аргумент метода)
                                        Console.WriteLine("Целое число: " + num);
                                    }
                                    static void show(double num)
                                    { // Версия статического метода для отображения действительного числа
                                        Console.WriteLine("Действительное число: " + num);
                                    }
                                    static void show(char s)
                                    { // Версия статического метода для отображения символа
                                        Console.WriteLine("Символ: " + s);
                                    }
                                    static void show(int num, char s)
                                    { // Версия статического метода для отображения числа и символа
                                        Console.WriteLine("Аргументы {0} и {1}", num, s);
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int num = 6; // Целочисленная переменная
                                        double z = 12.5; // Действительная числовая переменная
                                        char symb = 'W'; // Символьная переменная
                                        show(symb); // Вызываем метод с символьным аргументом
                                        show("Знакомимся с перегрузкой методов!"); // Вызываем метод с текстовым аргументом
                                        show(num); // Вызываем метод с целочисленным аргументом
                                        show(z); // Вызываем метод с действительным аргументом
                                        show(num, 'Q'); // Вызываем метод с двумя аргументами
                                    }
                                }
                            }
                            ```
                            
                        - **5_3_Передача_Массива_Аргументом_Методу**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_3_Передача_Массива_Аргументом_Методу
                            {
                                class ArrayToMethDemo
                                {
                                    static void fillRand(int[] nums)
                                    { // Метод для заполнения массива случайными числами
                                        Random rnd = new Random(); // Объект для генерирования случайных чисел
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Заполнение массива случайными числами
                                            nums[k] = rnd.Next(1, 101);
                                        }
                                        Console.WriteLine("|");
                                    }
                                    static void showArray(int[] nums)
                                    { // Метод для отображения одномерного целочисленного массива
                                        for (int k = 0; k < nums.Length; k++)
                                        { // Перебор элементов массива и отображение значения элемента
                                            Console.Write("| {0}", nums[k]);
                                        }
                                        Console.WriteLine();
                                    }
                                    static void showArray(int[,] nums)
                                    { // Метод для отображения двумерного целочисленного массива
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Перебор строк и элементов массива и отображение значения элемента
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            {
                                                Console.Write("{0,3}", nums[i, j]);
                                            }
                                            Console.WriteLine();
                                        }    
                                    }
                                    static int findMin(int[] nums)
                                    { // Метод для вычисления наименьшего элемента в массиве
                                        int s = nums[0]; // Локальная переменная
                                        for (int k = 1; k < nums.Length; k++)
                                        { // Поиск наименьшего значения. Если проверяемый элемент имеет значение меньшее
                                            if (nums[k] < s) s = nums[k]; // текущего значения переменной s
                                        }
                                        return s;
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A = { 1, 3, 5, 7, 9, 11, 13, 15 }; // Одномерные массивы
                                        int[] B = new int[5];
                                        int[,] C = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 } }; // Двумерный массив
                                        fillRand(B); // Массив В заполняется случайными числами
                                        Console.WriteLine("Одномерный массив A: ");
                                        showArray(A); // Отображается массив А
                                        Console.WriteLine("Одномерный массив B: ");
                                        showArray(B); // Отображается массив В
                                        int m = findMin(B); // Поиск наименьшего элемента
                                        Console.WriteLine("Наименьшее значение: {0}", m);
                                        Console.WriteLine("Двумерный массив C: ");
                                        showArray(C); // Отображается массив С
                                    }
                                }
                            }
                            ```
                            
                        - **5_4_Массив_как_Результат_Метода**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_4_Массив_как_Результат_Метода
                            {
                                class ArrayFromMethDemo
                                {
                                    static int[] fibs(int n)
                                    { // Метод для создания массива с числами Фибоначчи
                                        int[] nums = new int[n]; // Создается массив
                                        nums[0] = 1; // Первый элемент массива
                                        if (nums.Length == 1) return nums; // Если массив из одного элемента
                                        nums[1] = 1; // Второй элемент массива
                            
                                        for (int k = 2; k < nums.Length; k++)
                                        { // Заполнение элементов массива
                                            nums[k] = nums[k - 1] + nums[k - 2]; // Значение элемента массива равно сумме 
                                        } // значений двух предыдущих элементов
                                        return nums; // Результат метода - ссылка на массив
                                    }
                                    static char[] rands(int n)
                                    { // Метод для создания массива со случайными символами
                                        Random rnd = new Random(); // Объект для генерирования случайных чисел
                                        char[] symbs = new char[n]; // Создание массива
                            
                                        for (int k = 0; k < symbs.Length; k++)
                                        { // Заполнение массива
                                            symbs[k] = (char)('A' + rnd.Next(26)); // Значение элемента - случайный символ
                                        }
                                        return symbs; // Результат метода - ссылка на массив
                                    }
                                    static int[,] odds(int m, int n)
                                    { // Метод для создания двумерного массива с нечетными числами
                                        int[,] nums = new int[m, n]; // Создание массива
                                        int val = 1; // Локальная переменная
                            
                                        for (int i = 0; i < nums.GetLength(0); i++)
                                        { // Перебор строк массива
                                            for (int j = 0; j < nums.GetLength(1); j++)
                                            { // Перебор элементов в строке
                                                nums[i, j] = val; // Значение элемента
                                                val += 2; // Значение следующего элемента
                                            }
                                        }
                                        return nums; // Результат метода - ссылка на массив
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A; // Переменная для целочисленного массива
                                        char[] B; // Переменная для символьного массива
                                        int[,] C; // Переменная для двумерного массива
                                        A = fibs(10); // Создается массив с числами Фибоначчи
                                        Console.WriteLine("Числа Фибоначчи: ");
                                        foreach (int s in A)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", s);
                                        }
                                        Console.WriteLine("|");
                            
                                        B = rands(8); // Создается массив со случайными символами
                                        Console.WriteLine("Случайные символы: ");
                                        foreach (char s in B)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", s);
                                        }
                                        Console.WriteLine("|");
                            
                                        C = odds(4, 6); // Создается двумерный массив с нечетными числами
                                        Console.WriteLine("Двумерный массив: ");
                                        for (int i = 0; i < C.GetLength(0); i++)
                                        { // Отображение содержимого двумерного массива
                                            for (int j = 0; j < C.GetLength(1); j++)
                                            { // 
                                                Console.Write("{0, 4}", C[i, j]);
                                            }
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                            ```
                            
                        - **5_5_Механизм_Передачи_Аргументов_Методу**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_5_Механизм_Передачи_Аргументов_Методу
                            {
                                class ArgsDemo
                                {
                                    static void alpha(int n)
                                    {
                                        Console.WriteLine("В методе alpha(). На входе :" + n); // Первый метод. Аргумент - целое число
                                        n++; // Попытка изменить значение аргумента
                                        Console.WriteLine("В методе alpha(). На выходе :" + n); // Проверка значения аргумента
                                    }
                                    static void bravo(int[] n)
                                    { // Второй метод. Аргумент - ссылка на массив
                                        Console.WriteLine("В методе bravo(). На входе :" + ArrayToText(n));
                                        for (int k = 0; k < n.Length; k++)
                                        { // Перебор элементов массива
                                            n[k]++; // Попытка изменить значение элемента массива
                                        }
                                        Console.WriteLine("В методе bravo(). На выходе :" + ArrayToText(n));
                                    }
                                    static void charlie(int[] n)
                                    { // Третий метод. Аргумент - ссылка на массив
                                        Console.WriteLine("В методе charlie(). На входе :" + ArrayToText(n));
                                        int[] m = new int[n.Length]; // Создается новый массив
                                        for (int k = 0; k < n.Length; k++)
                                        { // Перебор элементов в массиве
                                            m[k] = n[k] + 1; // Значение элемента в массиве
                                        }
                                        n = m; // Попытка присвоить новое значение аргументу
                                        Console.WriteLine("В методе charlie(). На выходе :" + ArrayToText(n));
                                    }
                                    static string ArrayToText(int[] n)
                                    { // Метод для преобразования массива в текст
                                        string res = " [" + n[0]; // Текстовая переменная
                                        for (int k = 1; k < n.Length; k++)
                                        { // Перебор элементов массива (кроме начального элемента)
                                            res += "," + n[k]; // Дописывание текста в текстовую переменную
                                        }
                                        res += "] "; // Дописывание текста в текстовую переменную
                                        return res; // Результат метода - текстовая строка
                                    }
                                    static void Main(string[] args)
                                    { // Главный метод программы
                                        int A = 100; // Переменная для передачи аргументом методу
                                        Console.WriteLine("До вызова метода alpha(): A = " + A); // Проверка значений переменной
                                        alpha(A); // Вызов метода
                                        Console.WriteLine("После вызова метода alpha: A = " + A); // Проверка значений переменной
                                        int[] B = { 1, 3, 5 }; // Массив для передачи аргументом методу
                                        Console.WriteLine("До вызова метода bravo(): B = " + ArrayToText(B)); // Проверка содержимого массива
                                        bravo(B); // Вызов метода
                                        Console.WriteLine("После вызова метода bravo(): B = " + ArrayToText(B)); // Проверка содержимого массива
                                        int[] C = { 2, 4, 6 }; // Массив для передачи аргументом методу
                                        Console.WriteLine("До вызова метода charlie(): C = " + ArrayToText(C)); // Проверка содержимого массива
                                        charlie(C); // Вызов метода
                                        Console.WriteLine("После вызова метода charlie(): C = " + ArrayToText(C)); // Проверка содержимого массива
                                    }
                                }
                            }
                            ```
                            
                        - **5_6_Передача_Аргументов_по_Ссылке**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_6_Передача_Аргументов_по_Ссылке
                            {
                                class RefArgsDemo
                                {
                                    static void alpha(ref int n)
                                    {
                                        Console.WriteLine("В методе alpha(). На входе: " + n);
                                        n++;
                                        Console.WriteLine("В методе alpha(). На выходе: " + n);
                                    }
                                    static void bravo(ref int[] n)
                                    {
                                        Console.WriteLine("В методе bravo(). На входе: " + ArrayToText(n));
                                        for (int k = 0; k < n.Length; k++)
                                        {
                                            n[k]++;
                                        }
                                        Console.WriteLine("В методе bravo(). На выходе: " + ArrayToText(n));
                                    }
                                    static void charlie(ref int[] n)
                                    {
                                        Console.WriteLine("В методе charlie(). На входе: " + ArrayToText(n));
                                        int[] m = new int[n.Length];
                                        for (int k = 0; k < n.Length; k++)
                                        {
                                            m[k] = n[k] + 1;
                                        }
                                        n = m;
                                        Console.WriteLine("В методе charlit(). На выходе: " + ArrayToText(n));
                                    }
                                    static string ArrayToText(int[] n)
                                    {
                                        string res = " [" + n[0];
                                        for (int k = 1; k < n.Length; k++)
                                        {
                                            res += " , " + n[k];
                                        }
                                        res += "]";
                                        return res;
                                    }
                                    static void Main()
                                    {
                                        int A = 100;
                                        Console.WriteLine("До вызова метода alpha(): A = " + A);
                                        alpha(ref A);
                                        Console.WriteLine("После вызова метода alpha(): A = " + A);
                                        int[] B = { 1, 3, 5 };
                                        Console.WriteLine("До вызова метода bravo(): B = " + ArrayToText(B));
                                        bravo(ref B);
                                        Console.WriteLine("После вызова метода bravo(): B = " + ArrayToText(B));
                                        int[] C = { 2, 4, 6 };
                                        Console.WriteLine("До вызова метода charlie(): C = " + ArrayToText(C));
                                        charlie(ref C);
                                        Console.WriteLine("После вызова метода charlie(): C = " + ArrayToText(C));
                                    }
                                }
                            }
                            ```
                            
                        - **5_7_Неинициализированный_Аргумент**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_7_Неинициализированный_Аргумент
                            {
                                class UsingOutDemo
                                {
                                    static int getMin(int[] nums, out int index)
                                    { // Метод для вычисления значения наименьшего элемента в массиве и его индекса
                                        index = 0; // Начальное значение для индекса
                                        for (int k = 1; k < nums.Length; k++) 
                                        { // Перебор элементов массива
                                            if (nums[k] < nums[index])
                                            { // Если значение элемента массива меньше текущего минимального значения, то
                                                index = k; // Новое значение для индекса
                                            }
                                        }
                                        return nums[index]; // Результат метода
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        int[] A = { 12, 7, 8, 3, 8, 4, 1, 3, 4, 1, 7, 15 }; // Целочисленный массив
                                        foreach(int v in A)
                                        { // Отображение содержимого массива
                                            Console.Write("| {0}", v);
                                        }
                                        Console.WriteLine("|");
                            
                                        int val, k; // Объявление переменных
                                        val = getMin(A, out k); // Вычисление элемента с наименьшим значением и отображение результатов
                                        Console.WriteLine("Наименьшее значение: " + val);
                                        Console.WriteLine("Индекс элемента: " + k);
                                        Console.WriteLine("Проверка: A[{0}] = {1}", k, A[k]);
                                    }
                                }
                            }
                            ```
                            
                        - **5_8_Использование_Рекурсии**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_8_Использование_Рекурсии
                            {
                                class RecursionDemo
                                {
                                    static int factorial(int n)
                                    { // Метод для вычисления факториала числа
                                        if (n == 1) return 1;
                                        else return n * factorial(n - 1);
                                    }
                                    static int fibs(int n)
                                    { // Метод для вычисления чисел Фибоначчи
                                        if (n == 1 || n == 2) return 1;
                                        else return fibs(n - 1) + fibs(n - 2);
                                    }
                                    static int sum(int n)
                                    { // Метод для вычисления суммы чисел
                                        if (n == 0) return 0;
                                        else return n + sum(n - 1);
                                    }
                                    static void show(int[] a, int k)
                                    { // Метод для отображения содержимого массива
                                        Console.Write(a[k] + " "); // Отображение значения элемента массива
                                        if (k == a.Length - 1) // Если элемент в массиве последний
                                        {
                                            Console.WriteLine();
                                        }
                                        else
                                        { // Если элемент в массиве не последний
                                            show(a, k + 1); // Рекурсивный вызов метода
                                        }
                                    }
                                    static void show(int[] a)
                                    { // Перегрузка метода для отображения содержимого массива
                                        show(a, 0); // Вызов версии метода с двумя аргументами
                                    }
                                    static void Main(string[] args)
                                    { // Главный метод программы
                                        Console.WriteLine("Факториал числа: ");
                                        for (int k = 1; k <= 10; k++)
                                        { // Вычисление факториала числа
                                            Console.WriteLine(k + "!= " + factorial(k));
                                        }
                                        Console.WriteLine("Числа Фибоначчи: ");
                                        for (int k = 1; k <= 10; k++)
                                        { // Вычисление чисел Фибоначчи
                                            Console.Write(fibs(k) + " ");
                                        }
                                        Console.WriteLine();
                                        Console.Write("Сумма чисел от 1 до 100: ");
                                        Console.WriteLine(sum(100));
                            
                                        int[] A = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21 }; // Числовой массив
                                        Console.WriteLine("Числовой массив: ");
                                        show(A); // Отображение всех элементов массива
                                        Console.WriteLine("Элементы, начиная с третьего");
                                        show(A, 2); // Отображение элементов начиная с третьего
                                    }
                                }
                            }
                            ```
                            
                        - **5_9_Методы_с_Произвольным_Количеством_Аргументов**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_9_Методы_с_Произвольным_Количеством_Аргументов
                            {
                                class ParamsDemo
                                { // Методы для вычислеиня суммы чисел
                                    static int sums(params int[] a)
                                    {
                                        int res = 0;// Локальная переменная (значение суммы)
                                        for (int k= 0; k < a.Length; k++)
                                        { // Перебор аргументов метода
                                            res += a[k]; // Прибавление слагаемого к сумме
                                        }
                                        return res; // Результат метода
                                    }
                                    static string getText(string t, params int[] a)
                                    { // Метод для извлечения символов из текста
                                        string res = ""; // Начальное значение формируемой текстовой строки
                                        for (int k = 0; k < a.Length; k++)
                                        { // Перебор аргументов метода
                                            res += t[a[k]]; // Добавление символа в текст
                                        }
                                        return res; // Результат метода
                                    }
                                    static void show(int[] a, params char[] b)
                                    { // Метод отображает значения аргументов
                                        Console.Write("Чисел " + a.Length + ": "); // Количество элементов в числовом массиве
                                        for (int k = 0; k < a.Length - 1; k++)
                                        { // Значения элементов в числовом массиве
                                            Console.Write(a[k] + " ");
                                        } // Количество символьных аргументов
                                        Console.WriteLine("и " + a[a.Length - 1]);
                                        Console.Write("Символов" + b.Length + ": ");
                                        for (int k = 0; k < b.Length - 1; k++)
                                        { // Зн-я символьных аргументов
                                            Console.Write(b[k] + " ");
                                        }
                                        Console.WriteLine("и " + b[b.Length - 1]);
                                    }
                                    static void Main()
                                    { // Главный метод программы
                                        Console.WriteLine("Сумма чисел: " + sums(1, 6, 9, 2, 4)); // Вычисление суммы чисел
                                        Console.WriteLine("Сумма чисел: " + sums(5, 1, 2)); 
                                        Console.WriteLine(getText("Раз два три", 0, 10, 8, 1)); // Формируется текст
                                        Console.WriteLine(getText("Бревно", 3, 5, 1, 5, 4));
                                        show(new int[] { 1, 3, 5 }, 'A', 'B', 'C', 'D', 'E'); // Отображаются аргументы
                                        show(new int[] { 1, 3, 5, 7, 9 }, 'A', 'B', 'C', 'D');
                                    }
                                }
                            }
                            ```
                            
                        - **5_10_Главный_Метод_Возвращает_Результат**
                            
                            ```csharp
                            using System;
                            
                            namespace _5_10_Главный_Метод_Возвращает_Результат
                            {
                                class MainMethDemo
                                {
                                    static int Main()
                                    { // Главный метод возвращает результат
                                        Console.WriteLine("Главный метод возвращает результат!");
                                        return 0; // Результат главного метода
                                    }
                                }
                            }
                            ```
                            
                    - ******************************************************************Знакомство с классами и объектами******************************************************************
                        - **6_1_Описание_Класса_и_Создание_Объектов**
                            
                            ```csharp
                            using System;
                            
                            namespace _6_1_Описание_Класса_и_Создание_Объектов
                            {
                                class MyClass
                                { // Описание класса
                                    public int number; // Целочисленное поле
                                    public char symbol; // Символьное поле
                                    public void show()
                                    { // Метод: Отображение значения целочисленного и символьного полей
                                        Console.WriteLine("Целочисленное поле: " + number);
                                        Console.WriteLine("Символьное поле: " + symbol);
                                    }
                                }
                                class UsingObjsDemo
                                { // Класс с главным методом
                                    static void Main()
                                    { // Главный метод
                                        MyClass A = new MyClass(); // Первый объект
                                        MyClass B; // Второй объект
                                        B = new MyClass(); // Присваивание значений полям первого объекта
                                        A.number = 123;
                                        A.symbol = 'A';
                                        B.number = 321; // Присваивание значений полям второго объекта
                                        B.symbol = 'B';
                                        Console.WriteLine("Первый объект");
                                        A.show();
                                        Console.WriteLine("Второй объект");
                                        B.show();
                                    }
                                }
                            }
                            ```
                            
                        - **6_2_Присваивание_Объектов**
                            
                            ```csharp
                            using System;
                            
                            namespace _6_2_Присваивание_Объектов
                            {
                                class MyClass
                                { // Описание класса
                                    public int number; // Целочисленное поле
                                    public void show() // Метод для отображения значения поля
                                    {
                                        Console.WriteLine("Значение поля: " + number);
                                    }
                                }
                                class AnotherObjsDemo
                                { // Класс с главным методом
                                    static void Main()
                                    { // Главный метод
                                        MyClass A, B; // Объектные переменные
                                        A = new MyClass(); // Создание объекта
                                        B = A; // Присваивание объектных переменных
                                        A.number = 123; // Присваивание значения полю через первую объектную переменную
                                        B.show(); // Вызов метода через вторую объектную переменную
                                        B.number = 321; // Вызов метода через первую объектную переменную
                                        A.show();
                                    }
                                }
                            }
                            ```
                            
                        - **6_3_Закрытые_Члены_Класса_и_Перегрузка_Методов**
                    
                    ```csharp
                    using System;
                    
                    namespace _6_3_Закрытые_Члены_Класса_и_Перегрузка_Методов
                    {
                        class MyClass
                        { // Описание класса
                            private int number; // Закрытое целочисленное поле
                            private char symbol; // Закрытое символьное поле
                            public void show()
                            { // Открытый метод для отображения значения полей
                                Console.WriteLine("Поля объекта: " + number + " и " + symbol);
                            }
                            public void set (int n, char s)
                            { // Открытый метод для присваивания значений полям, версия с двумя аргументами
                                number = n; // Значение целочисленного поля
                                symbol = s; // Значение символьного поля
                            }
                            public void set (int n)
                            { // Открытый метод для присваивания значений полям, версия с одним целочисленным аргументом
                                number = n; // Значение целочисленного поля
                                symbol = 'B'; // Значение символьного поля
                            }
                            public void set()
                            { // Открытый метод для присваивания значений полям, версия для без аргументов
                                set(100, 'A'); // Вызов версии метода с двумя аргументами
                            }
                        }
                        class MethodsDemo
                        { // Главный класс
                            static void Main()
                            { // Главный метод
                                MyClass obj = new MyClass(); // Создание объекта
                                obj.set(); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                                obj.set(200); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                                obj.set(200, 'C'); // Присваивание значений полям
                                obj.show(); // Отображение значений полей
                            }
                        }
                    }
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                    ```csharp
                    
                    ```
                    
                - ************Часть 3. Резюме************
                    - В языке C# существуют специальные управляющие инструкции, позволяющие создавать в программе точки ветвления и блоки повторяемых команд.
                    - Условный оператор if позволяет выполнять разные блоки команд в зависимости от истинности или ложности некоторого условия. 
                    Проверяемое условие указывается в круглых скобках. Команды, выполняемые при истинном условии, указываются в блоке после инструкции. 
                    Команды, выполняемые при ложном условии, указываются в else-блоке.
                    Существует упрощенная форма условного оператора без else-блока
                    - Оператор выбора switch позволяет выполнять разные блоки команд в зависимости от значения некоторого выражения. Проверяемое выражение (целочисленное, символьное или текстовое) указывается в круглых скобках после ключевого слова switch. Затем указываются case-блоки с контрольными значениями. Выполняются команды в case-блоке, в котором контрольное значение совпадает со значением проверяемого выражения. В случае, если значение выражения не совпадает ни с одним из контрольных значений в case-блоках, выполняются команды в default-блоке. Этот блок не является обязательным. Каждый case-блок и default-блок заканчивается инструкцией break. В случае необходимости можно использовать пустые case-блоки.
                    - Оператор цикла while позволяет многократно выполнять блок определенных команд. После ключевого слова while в круглых скобках указывается условие, при истинности которого выполняются команды в теле оператора цикла. Каждый раз после выполнения этих команд проверяется условие, и, если оно истинно, команды выполняются снова.
                    - Оператор цикла do-while похож на оператор цикла while, но в операторе do-while сначала выполняются команды, а затем проверяется условие. Команды указываются после ключевого слова do. После блока команд следует ключевое слово while и, в круглых скобках, условие. Оператор цикла выполняется до тех пор, пока при очередной проверке условия оно не оказывается ложным.
                    - Описание оператора цикла for начинается с ключевого слова for. В круглых скобках указывается три блока инструкций. Блоки разделяются между собой точкой с запятой. Если блок содержит несколько инструкций, то они разделяются запятыми. Команды, формирующие тело оператора цикла, указываются в круглых скобках после for-инструкции. Выполнение оператора цикла начинается с выполнения команд в первом блоке. После этого проверяется условие во втором блоке. Если оно ложно, оператор цикла завершает работу. Если условие истинно, то выполняются команды в теле оператора цикла и в третьем блоке. Затем снова проверяется условие. Если условие ложно, работа оператора цикла завершается. Если условие истинно, выполняются команды в теле оператора и в третьем блоке и снова проверяется условие. И так далее, пока при проверке условия оно не окажется ложным.
                    - Инструкция безусловного перехода goto позволяет перейти к выполнению программного кода в том месте, которое выделено меткой. Используя инструкцию goto и условный оператор, можно организовать циклическое выполнение программного кода (симулировать работу оператора цикла). Общая рекомендация состоит в том, чтобы избегать использования инструкции goto.
                    - Система обработки исключений позволяет предусмотреть специальный код, выполняемый при возникновении ошибки. С этой целью используется конструкция try-catch. Программный код, при выполнении которого может возникнуть ошибка, помещается в try-блок. Программный код, предназначенный для выполнения в случае ошибки, помещается в catch-блок. Если при выполнении кода в try-блоке ошибка не возникает, то catch-блок игнорируется. Если при выполнении кода в try-блоке возникает ошибка, то выполнение команд в блоке try прекращается и начинают выполняться команды в блоке catch.
                - ******************************Часть 4. Резюме******************************
                    - Массив представляет собой набор переменных, объединенных общим именем. Переменные, входящие в массив, называются элементами массива.
                    Для идентификации элементов используется имя массива и индекс (или индексы). Количество индексов, необходимых для однозначной идентификации элемента массива, определяет размерность массива. 
                    Индексация всегда начинается с нуля. Размерность массива можно определить с помощью свойства Rank. Свойство Length позволяет определить количество элементов в массиве. 
                    Для определения размера массива по отдельным индексам используют метод GetLength() (аргумент метода определяет индекс, для которого вычисляется размер массива).
                    - Для реализации массива нужна переменная массива и собственно сам массив. 
                    Переменная массива содержит ссылку на массив. Для объявления переменной массива указываются идентификатор типа элементов массива, затем квадратные скобки и имя переменной. 
                    Для одномерного массива квадратные скобки пустые. Для многомерных массивов внутри квадратных скобок указывают запятые - количество запятых на единицу меньше размерности массива
                    - Массив создается с помощью оператора new, после которого следуют идентификатор типа, определяющий тип элементов массива и квадратные скобки. В квадратных скобках через запятую указывается размер массива по каждому из индексов. в результате выполнения инструкции на основе оператора new создается массив, а ссылка на этот массив является значением инструкции. Ссылку на массив можно записать в переменную массива (при условии, что тип и размерность массива совпадают с типом и размерностью, указанными при объявлении переменной массива).
                    - Массив при создании можно инициализировать. Для этого переменной массива значением присваивается список, содержащий значения, которыми инициализируется массив. 
                    Для одномерного массива список инициализации представляет собой последовательность разделенных запятыми значений, заключенных в фигурные скобки. 
                    Для двумерного массива элементами списка инициализации являются вложенные списки, которые содержат значения элементов в строках. Для трехмерного массива список инициализации содержит списки, элементами которых являются списки со значениями элементов трехмерного массива и так далее.
                    - Для работы с массивами может использоваться оператор цикла foreach. В нем объявляется локальная переменная (того же типа, что и тип элементов массива). Эта локальная переменная при выполнении оператора цикла последовательно принимает значения элементов массива. Через локальную переменную можно прочитать значение элемента массива, но нельзя присвоить элементу новое значение.
                    - Можно создать массив, элементами которого являются переменные массива. В таком случае можно создать иллюзию двумерного массива со строками разной длины. Если создать массив объектных переменных класса Object, то элементам такого массива можно присваивать практически любые значения.
                    - При запуске программе можно передавать параметры (параметры командной строки). В программе такие параметры обрабатываются с помощью текстового массива, который объявляется как аргумент главного метода программы.
                - ******************************Часть 5. Резюме******************************
                    - Метод - именованный блок кода, который может выполняться многократно (через вызов метода). 
                    Методы бывают статические и нестатические. 
                    Для вызова нестатического метода нужен объект. 
                    Для вызова статического метода объект не нужен
                    - Статический метод описывается с ключевым словом static. После него указывается идентификатор типа результата, возвращаемого методом (если метод не возвращает результат - указывают идентификатор void). Далее следует имя метода, в круглых скобках описываются аргументы метода, а код метода описывается в блоке из фигурных скобок.
                    Значение, возвращаемое методом, в теле метода указывают после инструкции return.
                    - Методы можно перегружать: в таком случае описывается несколько версий метода с одним и тем же именем. Перегруженные версии метода должны отличаться количеством и/или типом аргументов. 
                    Решение о том, какую версию следует вызывать, принимается на основе аргументов, которые фактически переданы методу.
                    - При передаче аргументом методу массива в действительности в метод передается ссылка на массив. Если метод возвращает результатом массив, то обычно при вызове метода создается массив, а ссылка на него возвращается результатом метода.
                    - Аргументы в метод могут передаваться по значению и по ссылке. 
                    При передаче аргументов по значению (такой режим используется по умолчанию) для аргументов создаются технические копии и все операции выполняются с ними. При передаче аргументов по ссылке в метод передаются те переменные, которые указаны аргументами.
                    Чтобы аргумент передавался по ссылке, в описании метода аргумент должен быть описан с инструкцией ref. Такая же инструкция указывается вместе с аргументом при вызове метода.
                    - В метод можно передавать неинициализированный аргумент - переменную, которая объявлена, но не инициализирована. Такой аргумент должен получить значение в процессе выполнения метода. Для возможности передачи неинициализированного аргумента в описании метода такой аргумент описывается с инструкцией out. Инструкция out также указывается вместе с неинициализированным аргументом при вызове метода.
                    - При описании методов можно использовать рекурсию. При рекурсии в процессе выполнения метода он вызывает сам себя.
                    - Можно описывать методы с аргументами, количество которых заранее неизвестно. Такие параметры формально описываются как массив с инструкцией params. В теле метода аргументы обрабатываются как элементы массива, а при вызове метода аргументы передаются как обычно, через запятую. Если у метода, кроме набора аргументов неизвестного количества, есть и “обычные” аргументы, то они в описании метода указываются в начале. Аргумент с инструкцией params должен быть последним в списке аргументов метода.
                    - Главный метод программы Main() может описываться как такой, что возвращает int-значение. В таком случае в теле метода обычно последней инструкцией является return 0.
                - ******************************Часть 6. Резюме******************************
                    - Представляет собой шаблон, на основе которого создаются объекты. Описание класса начинается с ключевого слова class, после которого указываются имя класса, а в блоке из фигурных скобок описывают поля и методы класса.
                    - Поля описываются также, как и объявляются переменные: указывается идентификатор типа и имя поля. 
                    При описании методов указываются идентификатор типа возвращаемого результата, имя метода, список аргументов и команды, формирующие тело метода (выделяются фигурными скобками).
                    - Поля и методы класса называются членами класса. 
                    По умолчанию члены класса являются закрытыми - они доступны только внутри кода класса.
                    Чтобы сделать поле или метод открытым (доступным вне пределов класса), его описывают со спецификатором уровня доступа public. Закрытые члены класса можно описывать с идентификатором уровня доступа private.
                    - Методы могут перегружаться: в классе может быть описано несколько версий метода с одним и тем же именем, но разными аргументами.
                    Решение о том, какая версия метода используется, принимается на основе команды вызова метода с учетом количества и типа аргументов, фактически переданных методу.
                    - Конструктор является методом, автоматически вызываемым при создании объекта.
                    Конструктор описывается особым образом: имя конструктора совпадает с именем класса, он не возвращает результат, и идентификатор типа результата для конструктора не указывается. 
                    Обычно конструктор описывается с ключевым словом public. У конструктора могут быть аргументы, и конструктор можно перегружать (в классе может быть несколько версий конструктора).
                    - Если в классе конструктор не описан, то используется конструктор по умолчанию: у него нет аргументов, и он не выполняет никаких дополнительных действий. Если в классе описана хотя бы одна версия конструктора, то конструктор по умолчанию больше не доступен.
                    - Деструктор является методом, автоматически вызываемым при удалении объекта из памяти. 
                    Имя деструктора получается объединением символа тильды и названия класса. 
                    У деструктора нет аргументов, он не возвращает результат, и идентификатор типа результата для деструктора не указывается. В классе может быть только один деструктор.
                    - Для создания объекта класса используют оператор new, после которого указываются имя класса и аргументы (в круглых скобках), которые передаются конструктору. 
                    Ссылка на созданный объект записывается в объектную переменную.
                    Объектная переменная объявляется так же, как и переменная простого типа, только в качестве идентификатора типа указывается имя класса.
                    - Обращение к нестатическим полям и методам выполянется с указанием объекта: после имени объекта через точку следует название поля или имя метода (с аргументами в круглых скобках или пустыми круглыми скобками, если аргументы не передаются).
                    - Статические поля и методы описываются с ключевым словом static. 
                    Статические поля и методы “не привязаны” к объекту и существуют даже если ни один объект класса не создан.
                    Обращение к статическим полям и методам выполняется так: имя класса, точка и название статического поля или метода (с аргументами или без). 
                    Если поле или метод используются в классе, в котором они описаны, то имя класса можно не указывать.
                    - Ключевое слово this в тебе методов (в том числе конструкторов и деструкторов) может использоваться для обозначения объекта, из которого вызывается метод. Это же ключевое слово используется как команда вызова в одной версии конструктора другой версии конструктора. В таком случае в описании конструктора после закрывающей круглой скобки указываются двоеточие, ключевое слово this и круглые скобки, в которых можно указать аргументы, которые передаются вызываемой версии конструктора. Вызываемая версия конструктора определяется по переданным ей аргументам.
                - **************************************************Часть 7. Работа с текстом**************************************************
                    - Текстовые значения реализуются в виде объектов класса String System. string System.String. 
                    Текстовая переменная ссылается на объект, содержащий текстовое значение.
                    - Текстовые литералы реализуются в виде объектов класса String.
                    - Создать текстовый объект можно, присвоив текстовой переменной значением литерал. 
                    Также имеется возможность создать текстовый объект на основе символьного массива. Существуют и некоторые иные способы создания текстовых объектов.
                    - Размер текста (количество символов в тексте) можно узнать с помощью свойства Length, а для обращения к отдельным символам в тексте текстовый объект индексируется как массив. 
                    Индексация символов в тексте начинается с нуля.
                    - После создания текстового объекта его содержимое изменить нельзя.
                    Изменения в текст вносятся путем создания новых текстовых объектов, а ссылка на вновь созданный объект записывается в текстовую переменную.
                    - Сравнивать текстовые строки на предмет совпадения или несовпадения можно с помощью операторов == и ≠. Также для этой цели может использоваться метод Equals().
                    - Существует много методов, предназначенных для выполнения различных операций с текстовыми значениями. В частности, методы позволяют: выполнять поиск символов и подстрок в строке, разбивать строку на подстроки, извлекать подстроку из текста, разбивать текст на символы, выполнять удаление подстрок, замену символов и подстрок и многое другое.
                    При выполнении операций с текстом новая текстовая строка является результатом операции, а исходный текст при этом не меняется.
                    - Описав в классе метод ToString(), можно задать способ преобразования объектов этого класса к текстовому формату.
                - ************************************************************Часть 8. Перегрузка операторов************************************************************
                    - В языке C# можно определять действие операторов на операнды, являющиеся объектами пользовательских классов. Этот механизм называется перегрузкой операторов и реализуется путем описания в пользовательском классе операторных методов.
                    - Операторный метод описывается с ключевыми словами public и static - т.е. метод должен быть открытым и статическим.
                    Операторный метод обязательно должен возвращать результат.
                    Название операторного метода получается объединением ключевого слова operator и символа оператора.
                    Аргументы операторного метода отождествляются с операндами выражения на основе перегружаемого оператора. У операторных методов для бинарных операторов должно быть два аргумента, у операторных методов для унарных операторов - один аргумент.
                    Хотя бы один аргумент операторного метода должен быть объектом класса, в котором этот операторный метод описан.
                    - Операторы сравнения перегружаются парами (< и >, ≤и ≥, == и ≠). При перегрузке операторов == и ≠ обычно переопределяют и методы Equals() и GetHashCode().
                    - Операторы true и false используются для проверки объектов на “истинность” и “ложность”. Операторы перегружаются в паре и должны возвращать результатом логическое значение. Оператор true вызывается, если объект указан условием в условном операторе или операторе цикла, а также при проверке первого операнда в выражении на основе оператора ||. Оператор false вызывается при проверке первого операнда в выражении на основе оператора &&.
                    - Операторы && и || не перегружаются. Но есть способ так перегрузить операторы &, |, true и false, что операторы && и || можно будет использовать
                    - Можно описать операторные методы для выполнения явного и неявного приведения типов (при условии, что одним из типов является пользовательский класс). 
                    Операторы для явного приведения типов описываются с ключевым словом explicit, операторы для неявного приведения типов описываются с ключевым словом implicit.
                    - Сокращенные формы операторов присваивания не перегружаются. Но можно так перегрузить базовые операторы, что сокращенные формы операторов также будут рабочими.
                - ********************************************************Часть 9. Свойства и индексаторы********************************************************
                    - Кроме полей и методов в классе могут быть описаны и другие члены: **Свойства и Индикаторы**
                    - Свойство представляет собой нечто среднее между полем и методом. 
                    По способам использования свойство похоже на поле.
                    В общем случае значение свойства можно прочитать и свойству можно присвоить значение. 
                    Обращение к свойству выполняется также, как и обращение к полю: имя свойства указывается через точку после имени объекта.
                    - При считывании значения свойства и при присваивании значения свойству вызываются специальные методы, которые называются аксессорами (get-аксессор и set-аксессор соответственно).
                    Аксессоры описываются при описании свойства.
                    - При описании свойства указывается тип свойства и его название (также указывается спецификатор уровня доступа). 
                    Затем в фигурных скобках описываются аксессоры.
                    Команды выполняемые при вызове аксессоров, указываются в фигурных скобках.
                    Перед блоком команд для get-аксессора указывается ключевое слово get. Перед блоком команд для set-аксессора указывается ключевое слово set.
                    - Для свойства может быть описан только один аксессор. Если для свойства описан только get-аксессор, то такое свойство доступно для чтения, но недоступно для присваивания значения. Если для свойства описан только set-аксессор, то такому свойству можно присвоить значение, но прочитать значение свойства нельзя.
                    - Свойство не определяет область памяти (т.е. наличие у объекта свойства не означает, что для этого свойства выделяется память). 
                    Свойство не может быть использовано с идентификаторами ref и out. Свойство может быть статическим.
                    - Если в классе описан индексатор, то объект такого класса можно индексировать: после имени объекта в квадратных скобках указывается индекс (или индексы). В общем случае можно считывать значение такого выражения или присваивать значение такому выражению.
                    - При описании индексатора указывается спецификатор уровня доступа, тип индексатора, ключевое слово this, а также в квадратных скобках описываются индексы (указывается тип индекса и формальное название).
                    Если индексов несколько, то их описание разделяется запятыми. В блоке, выделенном фигурными скобками, описывается get-аксессор и set-аксессор. В аксессорах можно использовать индексы, а в set-аксессоре также используют ключевое слово value, обозначающее присваиваемое значение. Разрешается описать два аксессора или только один аксессор.
                    - Индексатор не определяет область памяти. 
                    Индексатор не может быть статическим, а выражения, подразумевающие использование индексатора, не могут использоваться с ключевыми словами ref и out.
                    - Индексаторы можно перегружать: в классе может быть описано несколько версий индексатора, которые должны отличаться количеством и/или типом индексов.
                - **************Часть 10. Наследование**************
                    - Классы можно создавать на основе уже существующих классов путем наследования. 
                    Класс, на основе которого создается новый класс, называется базовым.
                    Тот класс, что создается на основ базового, называется производным классом.
                    - Для создания производного класса на основе базового в описании производного класса после его имени через двоеточие указывается имя базового класса.
                    Все открытые и защищенные члены базового класса наследуются в производном классе, в том смысле, что в теле производного класса к ним нельзя обратиться напрямую по имени.
                    - При создании объекта производного класса сначала вызывается конструктор базового класса, а уже затем выполняются команды, описанные в конструкторе производного класса.
                    В описании конструктора производного класса указывается инструкция вызова конструктора базового класса: это ключевое слово base с круглыми скобками, в которых могут передаваться аргументы конструктору базового класса.
                    Инструкция на основе ключевого слова base указывается через двоеточие в описании конструктора производного класса после закрывающей круглой скобки.
                    - При удалении объекта производного класса из памяти сначала выполняются команды в теле деструктора производного класса, а затем вызывается деструктор базового класса.
                    - Объектная переменная базового класса может ссылаться на объект производного класса.
                    Через объектную переменную базового класса можно получить доступ только к тем членам объекта производного класса, которые объявлены в базовом классе.
                    - Унаследованные из базового класса члены могут замещаться в производном классе.
                    Для этого соответствующий член описывается в производном классе с ключевым словом new. Для обращения к такому члену используется его имя. 
                    Для обращения к одноименному члену из базового класса, замещенному в производном классе, пере именем этого члена через точку указывают ключевое слово base.
                    - Если в базовом классе метод объявлен как виртуальный (в описании метода использовано ключевое слово virtual), то в производном классе такой метод можно переопределить. Для этого в производном классе описывается новая версия метода. При этом используется ключевое слово override.
                    - Принципиальная разница между замещением и переопределением метода состоит в том, что при замещении метода версия метода для вызова определяется по объектной переменной, через которую вызывается метода, а при переопределении метода версия метода для вызова определяется по объекту, из которого вызывается метод. 
                    Наряду с замещением и переопределением методов можно также использовать и перегрузку методов.
                    - Свойства и индексаторы могут наследоваться. В описании свойств и индексаторов в базовом классе допускается использовать ключевое слово virtual, а в производном классе такие свойства и индексаторы могут переопределяться.
            - ************************Шилдт Г. “C# 4.0 Полное руководство************************
                - **************************Коды программ**************************
                    - ************************************************Первая простая программа************************************************
                        
                        ```csharp
                        // В эту версию не включена строка "using System;"
                        class Example
                        {
                            // Любая программа на C# начинается с вызова метода Main().
                            static void Main()
                            {
                                // Здесь имя Console.WriteLine полностью определено.
                                System.Console.WriteLine("Простая программа на C#");
                            }
                        }
                        ```
                        
                    - ************************************************Вторая простая программа************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _002_Применение_Переменных
                        {
                            internal class Program
                            { // Данная программа демонстрирует применение переменных
                                static void Main()
                                {
                                    int x; // Здесь объявляется переменная
                                    int y; // Здесь объявляется еще одна переменная
                        
                                    x = 100; // Здесь переменной х присваивается значение 100
                        
                                    Console.WriteLine("х содержит " + x);
                        
                                    y = x / 2;
                        
                                    Console.Write("y содержит х / 2: ");
                                    Console.WriteLine(y);
                                }
                            }
                        }
                        ```
                        
                    - ********************************************************************************************************************************Программа демонстрирует отличия между типами данных int и double********************************************************************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _003_Int_Double_Отличия
                        { // Эта программа демонстрирует отличия между типами данных int и double.
                            internal class Program
                            {
                                static void Main()
                                {
                                    int ivar; // Объявить целочисленную переменную
                                    double dvar; // Объявить переменную с плавающей точкой
                        
                                    ivar = 100; // Присвоить переменной ivar значение 100
                                    dvar = 100.0; // Присвоить переменной dvar значение 100.0
                        
                                    Console.WriteLine(" ivar: " + ivar);
                                    Console.WriteLine(" dvar: " + dvar);
                        
                                    Console.WriteLine(); // Вывести пустую строку
                                    // Разделить значения обеих переменных на 3
                                    ivar = ivar / 3;
                                    dvar = dvar / 3;
                        
                                    Console.WriteLine(" ivar : " + ivar);
                                    Console.WriteLine(" dvar : " + dvar);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Вычислить площадь круга**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _004_Площадь_круга
                        {
                            class Circle
                            { // Вычислить площадь круга
                                static void Main()
                                {
                                    double radius;
                                    double area;
                        
                                    radius = 10.0;
                                    area = radius * radius * 3.1416;
                        
                                    Console.WriteLine("Площадь равна " + area);
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************Применение условного оператора if******************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _005_If_Условный_Оператор
                        {
                            internal class IfDemo
                            { // Продемонстрировать применение условного оператора if
                                static void Main()
                                {
                                    int a, b, c;
                        
                                    a = 2; b = 3;
                        
                                    if (a < b) Console.WriteLine("a меньше b");
                        
                                    // Не подлежит выводу
                                    if (a == b) Console.WriteLine("Этого никто не увидит");
                                    Console.WriteLine();
                        
                                    c = a - b; // c содержит -1
                                    Console.WriteLine("c содержит -1");
                                    if (c >= 0) Console.WriteLine("Значение с неотрицательно");
                                    if (c < 0) Console.WriteLine("Значение с отрицательно");
                        
                                    Console.WriteLine();
                        
                                    c = b - a; // теперь содержит 1
                                    Console.WriteLine("с содержит 1");
                                    if (c >= 0) Console.WriteLine("Значение с неотрицательно");
                                    if (c < 0) Console.WriteLine("Значение с отрицательно");
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Применение оператора цикла for********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _006_for_Применение_цикла
                        {
                            internal class ForDemo
                            { // Продемонстрировать применение оператора цикла for
                                static void Main()
                                {
                                    int count;
                                    for (count = 0; count < 5;  count++)
                                    {
                                        Console.WriteLine("Это подсчет: " + count);
                                    }
                                    Console.WriteLine("Готово!");
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************Применение кодового блока с if************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _007_If_Применение_кодового_блока
                        {
                            class BlockDemo
                            { // Продемонстрировать применение кодового блока
                                static void Main()
                                {
                                    int i, j, d;
                                    i = 5;
                                    j = 10;
                                    // Адресатом этого оператора if служит кодовый блок
                                    if (i != 0)
                                    {
                                        Console.WriteLine("i не равно нулю!");
                                        d = j / i;
                                        Console.WriteLine("j / i равно " + d);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Вычисляем сумму и произведение чисел от 1 до 10**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _008_Вычисляем_сумму_и_произведение_чисел
                        {
                            class ProdSum
                            {
                                static void Main()
                                {
                                    int prod;
                                    int sum;
                                    int i;
                        
                                    sum = 0;
                                    prod = 1;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        sum = sum + i;
                                        prod = prod * i;
                                    }
                                    Console.WriteLine("Сумма равна " + sum);
                                    Console.WriteLine("Произведение равно " + prod);
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************************Применение идентификатора со знаком @**************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _009_Применение_идентификатора__
                        {
                            class IdTest
                            { // Продемонстрировать применение идентификатора со знаком @
                                static void Main()
                                {
                                    int @if; // Применение ключевого слова if в качестве идентификатора
                                    for (@if = 0; @if < 10; @if++)
                                    {
                                        Console.WriteLine("@if равно " + @if);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************Вычисляем расстояние от Земли до Солнца в дюймах********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _010_Расстояние_от_Земли_до_Солнца_в_дюймах
                        {
                            internal class Inches
                            { // Вычислить расстояние от Земли до Солнца в дюймах.
                                static void Main()
                                {
                                    long inches;
                                    long miles;
                        
                                    miles = 93000000; // 93 000 000 миль до Солнца
                                    // 5 280 футов в миле, 12 дюймов в футе
                                    inches = miles * 5280 * 12;
                        
                                    Console.WriteLine("Расстояние до Солнца: " + inches + " дюймов.");
                                }
                            }
                        }
                        ```
                        
                    - **********************************************Использование типа byte**********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _011_Использование_типа_byte
                        {
                            class Use_byte
                            { // Использовать тип byte
                                static void Main()
                                {
                                    byte x;
                                    int sum;
                        
                                    sum = 0;
                        
                                    for (x = 1; x <= 100; x++)
                                        sum = sum + x;
                        
                                    Console.WriteLine("Сумма чисел от 1 до 100 равна " + sum);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************************************Вычисляем радиус окружности по площади круга****************************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _012_Вычисляем_радиус_по_площади_круга
                        { // Определить радиус окружности по площади круга
                            class FindRadius
                            {
                                static void Main()
                                {
                                    Double r;
                                    Double area;
                                    area = 10.0;
                                    r = Math.Sqrt(area / 3.1416);
                                    Console.WriteLine("Радиус равен " + r);
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************************Демонстрация тригонометрических функций******************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _013_Демонстрация_тригонометрических_функций
                        {
                            class Trigonometry 
                            { // Продемонстрировать применение тригонометрических функций.
                                static void Main()
                                {
                                    Double theta; // угол в радианах
                        
                                    for (theta = 0.1; theta <= 1.0; theta = theta + 0.1)
                                    {
                                        Console.WriteLine("Синус угла " + theta + " равен " + Math.Sin(theta));
                                        Console.WriteLine("Косинус угла " + theta + " равен " + Math.Cos(theta));
                                        Console.WriteLine("Тангенс угла " + theta + " равен " + Math.Tan(theta));
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Расчет скидки с помощью decimal**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _014_Расчет_скидки_decimal
                        {
                            class UseDecimal
                            { // Использовать тип decimal для расчета скидки
                                static void Main()
                                {
                                    decimal price;
                                    decimal discount;
                                    decimal discounted_price;
                        
                                    // Рассчитать цену со скидкой.
                                    price = 19.95m;
                                    discount = 0.15m; // норма скидки составляет 15%
                                    discounted_price = price - (price * discount);
                        
                                    Console.WriteLine("Цена со скидкой: $" + discounted_price);
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Расчет роста капиталовложений с помощью decimal**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _015_Расчет_Роста_Капиталовложений
                        {
                            class FutVal
                            { // Применить тип decimal для расчета будущей стоимости капиталовложений
                                static void Main()
                                {
                                    decimal amount;
                                    decimal rate_of_return;
                                    int years, i;
                        
                                    amount = 1000.0M;
                                    rate_of_return = 0.07M;
                                    years = 10;
                        
                                    Console.WriteLine("Первоначальные капиталовложения: $" + amount);
                                    Console.WriteLine("Норма прибыли: " + rate_of_return);
                                    Console.WriteLine("В течение " + years + " лет");
                        
                                    for (i = 0; i < years; i++)
                                        amount = amount + (amount * rate_of_return);
                        
                                    Console.WriteLine("Будущая стоимость равна $" + amount);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************Применение типа bool****************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _016_Применение_типа_bool
                        {
                            class BoolDemo
                            { // Продемонстрировать применение типа bool
                                static void Main()
                                {
                                    bool b;
                                    b = false;
                        
                                    Console.WriteLine("b равно " + b);
                                    b = true;
                                    Console.WriteLine("b равно " + b);
                                    // Логическое значение может управлять оператором if
                                    if (b) Console.WriteLine("Выполняется!");
                                    b = false;
                                    if (b) Console.WriteLine("Не выполняется!");
                                    // Результатом вып-я оператора отношения является логическое зн-е
                                    Console.WriteLine("10 > 9 равно " + (10 > 9));
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Применяем команды форматирования****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _017_Применяем_Команды_Форматирования
                        {
                            class DisplayOptions
                            { // Применяем команды форматирования
                                static void Main()
                                {
                                    int i;
                                    Console.WriteLine("Число\tКвадрат\tКуб");
                        
                                    for (i = 1; i < 10; i++)
                                        Console.WriteLine("{0}\t{1}\t{2}", i, i * i, i * i * i);
                        
                                    Console.WriteLine("Деление 10/3 дает: {0:#.##}", 10.0 / 3.0);
                                    Console.WriteLine("{0:###,###.##}", 123456.56);
                        
                                    decimal balance = 12323.09m;
                                    Console.WriteLine("Текущий баланс равен {0:C}", balance);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************************Вывод скидки в местной валюте**********************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _018_decimal_Представление_в_Валюте
                        {
                            internal class UseDecimal
                            { // Использовать спецификатор формата С для вывода результата в местной валюте
                                static void Main()
                                {
                                    decimal price;
                                    decimal discount;
                                    decimal discounted_price;
                                    // рассчитать цену со скидкой
                                    price = 19.95m;
                                    discount = 0.15m;
                                    discounted_price = price - (price * discount);
                        
                                    Console.WriteLine("Цена со скидкой {0:C}", discounted_price);
                                }
                            }
                        }
                        ```
                        
                    - ************************************Строковые литералы************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _019_Строковые_Литералы
                        {
                            class StrDemo
                            { // Продемонстрировать применение управляющих последовательностей символов в строковых литералах
                                static void Main()
                                {
                                    Console.WriteLine("Первая строка\nВторая строка\nТретья строка");
                                    Console.WriteLine("Один\tДва\tТри");
                                    Console.WriteLine("Четыре\tПять\tШесть");
                                    // Вставить кавычки
                                    Console.WriteLine("\"Зачем\", спросил он.");
                        
                                    // Продемонстрировать применение буквальных строковых литералов
                                    Console.WriteLine(@"Это буквальный
                        строковый литерал,
                        занимающий несколько строк.
                        ");
                                    Console.WriteLine(@"А это вывод с табуляцией:
                        1   2   3   4
                        5   6   7   8
                        ");
                                    Console.WriteLine(@"Отзыв программиста: ""Мне нравится С#.""");
                                }
                            }
                        }
                        ```
                        
                    - ****************************************Вычисляем гипотенузу****************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _020_Вычисляем_гипотенузу
                        {
                            class DynInit
                            { // Вычисляем гипотенузу
                                static void Main()
                                {
                                    // Длина сторон прямоугольного треугольника
                                    double s1 = 4.0;
                                    double s2 = 5.0;
                                    // Инициализировать переменную hypot динамически
                                    double hypot = Math.Sqrt((s1 * s1) + (s2 * s2));
                                    Console.Write("Гипотенуза треугольника со сторонами " + s1 + " и " + s2 + " равна ");
                                    Console.WriteLine("{0:#.###}.", hypot);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Неявно типизированные переменные****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _021_Неявно_Типизированные_Переменные
                        {
                            class ImplicityTypedVar
                            { // Продемонстрировать применение неявно типизированных переменных.
                                static void Main()
                                {
                                    // Эти переменные типизированы неявно. Они отнесены к типу double, поскольку
                                    // инициализирующие их выражения сами относятся к типу double
                                    var s1 = 4.0;
                                    var s2 = 5.0;
                        
                                    // Итак, переменная hypot типизирована неявно и относится к типу double,
                                    // поскольку результат, возвращаемый методом Sqrt(), имеет тип double.
                                    var hypot = Math.Sqrt((s1 * s1) + (s2 * s2));
                                    Console.Write("Гипотенуза треугольника со сторонами " + 
                                        s1 + " и " + s2 + " равна ");
                                    Console.WriteLine("{0:#.###}.", hypot);
                        
                                    // Следующий оператор не может быть скомпилирован, поскольку
                                    // переменная s1 имеет тип double и ей нельзя присвоить
                                    // десятичное значение.
                                    // s1 = 12.2M; // Ошибка!
                                }
                            }
                        }
                        ```
                        
                    - **************************************************************Область действия кодового блока**************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _022_Область_Действия_Кодового_Блока
                        {
                            class ScopeDemo
                            { // Продемонстрировать область действия кодового блока
                                static void Main(string[] args)
                                {
                                    int x; // Эта переменная доступна для всего кода внутри метода Main()
                                    x = 10;
                        
                                    if (x == 10) 
                                    { // Начинаем новую область действия
                                        int y = 20; // Эта переменная доступна только в данном кодовом блоке.
                                        // Здесь доступны обе переменные х и у
                                        Console.WriteLine("х и у: " + x + " " + y);
                                        x = y * 2;
                                    }
                                    // y = 100; // Ошибка! Переменная у здесь недоступна
                                    // А переменная х здесь по-прежнему доступна.
                                    Console.WriteLine("" + x);
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************Время существования переменной************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _023_Время_Существования_Переменной
                        {
                             class VarInitDemo
                            { // Продемонстрировать время существования переменной
                                static void Main()
                                {
                                    int x;
                        
                                    for (x = 0; x < 3; x++)
                                    {
                                        int y = -1; // Переменная у инициализируется при каждом входе в блок
                                        Console.WriteLine("" + y); // Здесь всегда выводится -1
                                        y = 100;
                                        Console.WriteLine("" + y);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ************************Попытка объявить 2 переменные с одним именем************************
                        
                        ```csharp
                        using System;
                        
                        namespace _024_Попытка_Объявить_2_Переменные_Одноименные
                        {
                            class NestVar
                            { /* В этой программе предпринимается попытка объявить во внутренней области
                               * действия переменную с таким же самым именем, как и у переменной, определенной
                               * во внешней области действия.
                               * Эта программа не может быть скомпилирована! */
                                static void Main()
                                {
                                    int count;
                        
                                    for (count = 0; count < 10; count = count + 1)
                                    {
                                        Console.WriteLine("Это подсчет: " + count);
                        
                                        int count; // Недопустимо!!!
                                        for (count = 0; count < 2; count++)
                                            Console.WriteLine("В этой программе есть ошибка!");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************************Неявное преобразование типа long в тип double******************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _025_Неявное_Преобразование_Long_Double
                        {
                            class LtoD
                            { // Продемонстрировать неявное преобразование типа long в тип double
                                static void Main()
                                {
                                    long L;
                                    double D;
                        
                                    L = 100123285L;
                                    D = L;
                                    Console.WriteLine("L и D: " + L + " " + D);
                        
                                    /* *** Эта программа не может быть скомпилирована ***
                                     * long L;
                                     * double D;
                                     * 
                                     * D = 100123285.0;
                                     * L = D; // Недопустимо!!!
                                     * Console.WriteLine("L и D: " + L + " " + D);
                                     */
                                }
                            }
                        }
                        ```
                        
                    - **************************Приведение типов**************************
                        
                        ```csharp
                        using System;
                        
                        namespace _026_Приведение_Типов
                        {
                             class CastDemo
                            { // Продемонстрировать приведение типов
                                static void Main()
                                {
                                    double x, y;
                                    byte b;
                                    int i;
                                    char ch;
                                    uint u;
                                    short s;
                                    long l;
                        
                                    x = 10.0;
                                    y = 3.0;
                        
                                    // Приведение типа double к типу int, дробная часть числа теряется 
                                    i = (int)(x / y);
                                    Console.WriteLine("Целочисленный результат деления x / y: " + i);
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу byte без потери данных
                                    i = 255;
                                    b = (byte)i;
                                    Console.WriteLine("b после присваивания 255: " + b + " -- без потери данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу byte с потерей данных
                                    i = 257;
                                    b = (byte)i;
                                    Console.WriteLine("b после присваивания 257: " + b + " -- с потерей данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа uint к типу short без потери данных
                                    u = 32000;
                                    s = (short)u;
                                    Console.WriteLine("s после присваивания 32000: " + s + " -- без потери данных ");
                        
                                    // Приведение типа uint к типу short с потерей данных
                                    u = 64000;
                                    s = (short)u;
                                    Console.WriteLine("s после присваивания 64000: " + s + " -- с потерей данных");
                                    Console.WriteLine();
                        
                                    // Приведение типа long к типу uint без потери данных
                                    l = 64000;
                                    u = (uint)l;
                                    Console.WriteLine("u после присваивания 64000: " + u + " -- без потери данных");
                        
                                    // Приведение типа long к типу uint с потерей данных
                                    l = -12;
                                    u = (uint)l;
                                    Console.WriteLine("u после присваивания -12: " + u + " -- с потерей данных ");
                                    Console.WriteLine();
                        
                                    // Приведение типа int к типу char
                                    b = 88; // код ASCII символа X
                                    ch = (char)b;
                                    Console.WriteLine("ch после присваивания 88: " + ch);
                        
                                    // Пример неожиданного результата продвижения типов!
                                    byte k;
                                    k = 10;
                                    k = (byte)(k * k); // Необходимо приведение типов
                                    Console.WriteLine("Пример неожиданного продвижения типов:");
                                    Console.WriteLine("b: " + b);
                        
                                    // Пример приведения типов в выражениях
                                    Console.WriteLine();
                                    Console.WriteLine("Пример приведения типов в выражениях");
                                    double n;
                        
                                    for (n = 1.0; n <= 10; n++)
                                    {
                                        Console.WriteLine("Квадратный корень из {0} равен {1}", n, Math.Sqrt(n));
                                        Console.WriteLine("Целая часть числа: {0}", (int) Math.Sqrt(n));
                                        Console.WriteLine("Дробная часть числа: {0}", Math.Sqrt(n) - (int)Math.Sqrt(n));
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Применение оператора %********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _027_Оператор__
                        {
                            class ModDemo
                            { // Продемонстрировать применение оператора %
                                static void Main()
                                {
                                    int iresult, irem;
                                    double dresult, drem;
                        
                                    iresult = 10 / 3;
                                    irem = 10 % 3;
                        
                                    dresult = 10.0 / 3.0;
                                    drem = 10.0 % 3.0;
                        
                                    Console.WriteLine("Результат и остаток от деления 10 / 3: " + iresult + " " + irem);
                                    Console.WriteLine("Результат и остаток от деления 10.0 / 3.0: " + dresult + " " + drem);
                                }
                            }
                        }
                        ```
                        
                    - **********************************************************************************Инкремент. Постфиксная и префиксная формы**********************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _028_Инкремент_Постфиксная_Префиксная_Формы
                        {
                            class PrePostDemo
                            { // Продемонстрировать отличие между префиксной и постфиксной формами оператора инкремента (++)
                                static void Main()
                                {
                                    int x, y;
                                    int i;
                        
                                    x = 1;
                                    y = 0;
                                    Console.WriteLine("Ряд чисел, полученных с помощью оператора y = y + x++;");
                                    for (i = 0; i < 10; i++)
                                    {
                                        y = y + x++; // постфиксная форма оператора ++
                                        Console.WriteLine(y + " ");
                                    }
                                    Console.WriteLine();
                        
                                    x = 1;
                                    y = 0;
                                    Console.WriteLine("Ряд чисел, полученных с помощью оператора y = y + ++x;");
                                    for (i = 0; i < 10; i++)
                                    {
                                        y = y + ++x; // префиксная форма оператора ++
                                        Console.WriteLine(y + " ");
                                    }
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - ******************Операторы отношения и логические операторы******************
                        
                        ```csharp
                        using System;
                        
                        namespace _029_Операторы_Отношения_и_Логические
                        {
                            class RelLogOps
                            { // Продемонстрировать применение операторов отношения и логических операторов
                                static void Main()
                                {
                                    int i, j;
                                    bool b1, b2;
                        
                                    i = 10;
                                    j = 11;
                                    if (i < j) Console.WriteLine("i < h");
                                    if (i <= j) Console.WriteLine("i <= j");
                                    if (i != j) Console.WriteLine("i != j");
                                    if (i == j) Console.WriteLine("");
                                    if (i >= j) Console.WriteLine("");
                                    if (i > j) Console.WriteLine("");
                        
                                    b1 = true;
                                    b2 = false;
                                    if (b1 & b2) Console.WriteLine("");
                                    if (!(b1 & b2)) Console.WriteLine("!(b1 * b2) - true");
                                    if (b1 | b2) Console.WriteLine("b1 | b2 - true");
                                    if (b1 ^ b2) Console.WriteLine("b1 ^ b2 - true");
                                }
                            }
                        }
                        ```
                        
                    - **************************************Операция импликации**************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _030_Операция_Импликации
                        {
                            class Implication
                            { // Построении операции импликации в C#
                                static void Main()
                                {
                                    bool p = false, q = false;
                                    int i, j;
                        
                                    for (i = 0; i < 2; i++)
                                    {
                                        for (j = 0; j < 2; j++)
                                        {
                                            if (i == 0) p = true;
                                            if (i == 1) p = false;
                                            if (j == 0) q = true;
                                            if (j == 1) q = false;
                                            Console.WriteLine("p равно " + p + ", q равно " + q);
                                            if (!p | q)
                                                Console.WriteLine("Результат импликации " + p + " и " + q + " равен " + true);
                                            Console.WriteLine();
                                        }
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ******************************************************Укороченные логические операторы******************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _031_Укороченные_Логические_Операторы
                        {
                            class SCops
                            { // Продемонстрировать применение укороченных логических операторов
                                static void Main()
                                {
                                    int n, d;
                        
                                    n = 10;
                                    d = 2;
                                    if (d != 0 && (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                        
                                    d = 0; // задать нулевое значение переменной d
                                    // d равно нулю, поэтому второй операнд не вычисляется
                                    if (d != 0 && (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                                    // Если теперь попытаться сделать то же самое без укороченного
                                    // логического оператора, то возникнет ошибка из-за деления на ноль.
                                    if (d != 0 & (n % d) == 0)
                                        Console.WriteLine(n + " делится нацело на " + d);
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************Значение побочных эффектов****************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _032_Значение_Побочных_Эффектов
                        {
                             class SideEffects
                            { // Продемонстрировать значение побочных эффектов
                                static void Main()
                                {
                                    int i;
                                    bool someCondition = false;
                                    i = 0;
                                    // Значение переменной i инкрементируется, несмотря на то, что if не выполняется
                                    if (someCondition & (++i < 100))
                                        Console.WriteLine("Не выводится");
                                    Console.WriteLine("Оператор if выполняется: " + i); // выводится 1
                                    // В данном случае значение переменной i не инкрементируется
                                    // поскольку инкремент в укороченном логическом операторе опускается.
                                    if (someCondition && (++i < 100))
                                        Console.WriteLine("Не выводится");
                                    Console.WriteLine("Оператор if выполняется: " + i); // по-прежнему 1!!!
                                }
                            }
                        }
                        ```
                        
                    - ********************************************Поразрядный оператор И********************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _033_Поразрядный_Оператор_И
                        {
                            class MakeEven
                            { // Применить поразрядный оператор И, чтобы сделать число четным
                                static void Main()
                                {
                                    ushort num;
                                    ushort i;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        num = i;
                                        Console.WriteLine("num: " + num);
                                        num = (ushort)(num & 0xFFFE);
                                        Console.WriteLine("num после сброса младшего разряда: " + num + "\n");
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _034_Поразрядный_И_Определение_Нечетности
                        {
                            class IsOdd
                            { // Применить поразрядный оператор И, чтобы определить, является ли число нечетным
                                static void Main()
                                {
                                    ushort num;
                                    num = 10;
                                    if ((num & 1) == 1)
                                        Console.WriteLine("Не выводится.");
                        
                                    num = 11;
                                    if ((num & 1) == 1)
                                        Console.WriteLine(num + " - нечетное число");
                                }
                            }
                        }
                        ```
                        
                    - ****************************************************************Показать биты, составляющие байт****************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _035_Показать_Биты_Составляющие_Байт
                        {
                            class ShowBits
                            { // Показать биты, составляющие байт
                                static void Main()
                                {
                                    int t;
                                    byte val;
                                    val = 123;
                                    for (t = 128; t > 0; t = t / 2)
                                    {
                                        if ((val & t) != 0) Console.Write("1 ");
                                        if ((val & t) == 0) Console.Write("0 ");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **************************************************Поразрядный оператор ИЛИ**************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _036_Поразрядный_Оператор_ИЛИ
                        {
                            class MakeOdd
                            { // Применить поразрядный оператор ИЛИ, чтобы сделать число нечетным
                                static void Main()
                                {
                                    ushort num;
                                    ushort i;
                        
                                    for (i = 1; i <= 10; i++)
                                    {
                                        num = i;
                                        Console.WriteLine("num: " + num);
                                        num = (ushort)(num | 1);
                                        Console.WriteLine("num после установки младшего разряда: ", +num + "\n");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ************************************************************************Поразрядный оператор исключающее ИЛИ************************************************************************
                        
                        ```csharp
                        using System;
                        
                        namespace _037_Исключающее_ИЛИ
                        {
                            class Encode
                            { // Продемонстрировать применение поразрядного оператора исключающее ИЛИ
                                static void Main()
                                {
                                    char ch1 = 'H';
                                    char ch2 = 'i';
                                    char ch3 = '!';
                                    int key = 88;
                        
                                    Console.WriteLine("Исходное сообщение: " + ch1 + ch2 + ch3);
                        
                                    // Зашифровать сообщение
                                    ch1 = (char)(ch1 ^ key);
                                    ch2 = (char)(ch2 ^ key);
                                    ch3 = (char)(ch3 ^ key);
                        
                                    Console.WriteLine("Зашифрованное сообщение: " + ch1 + ch2 + ch3);
                        
                                    // Расшифровать сообщение
                                    ch1 = (char)(ch1 ^ key);
                                    ch2 = (char)(ch2 ^ key);
                                    ch3 = (char)(ch3 ^ key);
                        
                                    Console.WriteLine("Расшифрованное сообщение: " + ch1 + ch2 + ch3);
                                }
                            }
                        }
                        ```
                        
                    - **********************************Поразрядный унарный оператор НЕ**********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _038_Унарный_Оператор_НЕ
                        {
                            class NotDeme
                            { // Продемонстрировать применение поразрядного унарного оператора НЕ
                                static void Main()
                                {
                                    sbyte b = -34;
                        
                                    for (int t = 128; t > 0; t = t / 2)
                                    {
                                        if ((b & t) != 0) Console.Write("1 ");
                                        if ((b & t) == 0) Console.Write("0 ");
                                    }
                                    Console.WriteLine();
                        
                                    // 
                                    b = (sbyte)~b;
                                    for (int t = 128; t > 0; t = t / 2)
                                    {
                                        if ((b & t) != 0) Console.Write("1 ");
                                        if ((b & t) == 0) Console.Write("0 ");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - ********************************Операторы сдвига********************************
                        
                        ```csharp
                        using System;
                        
                        namespace _039_Операторы_Сдвига
                        {
                            class ShiftDemo
                            { // Продемонстрировать применение операторов сдвига.
                                static void Main()
                                {
                                    int val = 1;
                                    for (int i = 0; i < 8; i++)
                                    {
                                        for (int t = 128; t > 0; t = t / 2)
                                        {
                                            if ((val & t) != 0) Console.Write("1 ");
                                            if ((val & t) == 0) Console.Write("0 ");
                                        }
                                        Console.WriteLine();
                                        val = val << 1; // сдвиг влево
                                    }
                                    Console.WriteLine();
                        
                                    val = 128;
                                    for (int i = 0; i < 8; i++)
                                    {
                                        for (int t = 128; t> 0; t = t / 2)
                                        {
                                            if ((val & t) != 0) Console.Write("1 ");
                                            if ((val & t) == 0) Console.Write("0 ");
                                        }
                                        Console.WriteLine();
                                        val = val >> 1; // сдвиг вправо
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _040_Операторы_Сдвига_Для_Умножения_И_Деления_На_2
                        {
                            class MultDiv
                            { // Применить операторы сдвига для умножения и деления на 2
                                static void Main()
                                {
                                    int n;
                                    n = 10;
                                    Console.WriteLine("Значение переменной n: " + n);
                        
                                    // Умножить на 2
                                    n = n << 1;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n * 2: " + n);
                        
                                    // Умножить на 4
                                    n = n << 2;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n * 4: " + n);
                        
                                    // Разделить на 2
                                    n = n >> 1;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n / 2: " + n);
                        
                                    // Разделить на 4
                                    n = n >> 2;
                                    Console.WriteLine("Значение переменной n после " + "операции n = n / 4: " + n);
                        
                                    // Установить переменную n в исходное состояние
                                    n = 10;
                                    Console.WriteLine("Значение переменной n: " + n);
                        
                                    // Умножить на 2 тридцать раз.
                                    n = n << 30; // данные теряются
                                    Console.WriteLine("Значение переменной n после " + "сдвига на 30 позиций влево: " + n);
                                }
                            }
                        }
                        ```
                        
                    - ********************Оператор ?********************
                        
                        ```csharp
                        using System;
                        
                        namespace _041_Исключаем_Деление_На_Ноль
                        {
                            class NoZeroDiv
                            { // Исключить денелие на ноль, используя оператор ?
                                static void Main()
                                {
                                    int result;
                        
                                    for (int i = -5; i < 6; i++)
                                    {
                                        result = i != 0 ? 100 / i : 0;
                                        if (i != 0)
                                            Console.WriteLine("100 / " + i + " равно " + result);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _042_Делим_Только_На_Четные_Ненулевые_Значения
                        {
                            class NoZeroDiv2
                            { // Разделить только на четные, ненулевые значения
                                static void Main()
                                {
                                    for (int i = -5; i < 6; i++)
                                        if (i != 0 ? (i % 2 == 0) : false)
                                            Console.WriteLine("100 / " + i + " равно " + 100 / i);
                                }
                            }
                        }
                        ```
                        
                    - **Оператор if_else**
                        
                        ```csharp
                        using System;
                        
                        namespace _043_Оператор_if_else
                        { // Определить, является ли числовое значение положительным или отрицательным
                            class PosNeg
                            {
                                static void Main()
                                {
                                    int i;
                                    for (i = -5; i <= 5; i++)
                                    {
                                        Console.Write("Проверка " + i + ": ");
                        
                                        if (i < 0) Console.WriteLine("отрицательное число");
                                        else Console.WriteLine("положительное число");
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _044_if_else_Проверяем_Числа
                        {
                            class PosNegZero
                            { // Определить, является ли числовое значение положительным, отрицательным или нулевым
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = -5; i <= 5; i++)
                                    {
                                        Console.Write("Проверка " + i + ": ");
                                        if (i < 0) Console.WriteLine("отрицательное число");
                                        else if (i == 0) Console.WriteLine("число без знака");
                                        else Console.WriteLine("положительное число");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Конструкция if_else_if**
                        
                        ```csharp
                        using System;
                        
                        namespace _045_Конструкция_if_else_if
                        {
                            class Ladder
                            { // Определить наименьший множитель заданного целого значения, состоящий из одной цифры
                                static void Main()
                                {
                                    int num;
                        
                                    for (num = 2; num < 12; num++)
                                    {
                                        if((num % 2) == 0)
                                        Console.WriteLine("Наименьший множитель числа " + num + " равен 2.");
                                        else if ((num % 3) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 3.");
                                        else if ((num % 5) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 5.");
                                        else if ((num % 7) == 0)
                                            Console.WriteLine("Наименьший множитель числа " + num + " равен 7.");
                                        else
                                            Console.WriteLine(num + " не делится на 2, 3, 5 или 7.");
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор switch**
                        
                        ```csharp
                        using System;
                        
                        namespace _046_Оператор_switch
                        { // Продемонстрировать применение оператора switch.
                            class SwitchDemo
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 0; i < 10; i++)
                                        switch(i)
                                        {
                                            case 0:
                                                Console.WriteLine("i равно нулю");
                                                break;
                                            case 1:
                                                Console.WriteLine("i равно единице");
                                                break;
                                            case 2:
                                                Console.WriteLine("i равно двум");
                                                break;
                                            case 3:
                                                Console.WriteLine("i равно трем");
                                                break;
                                            case 4:
                                                Console.WriteLine("i четырем");
                                                break;
                                            default:
                                                Console.WriteLine("i равно или больше пяти");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _047_Switch_Case_Char
                        { // Использовать элементы типа char для управления оператором switch
                            class SwitchDemo2
                            {
                                static void Main()
                                {
                                    char ch;
                        
                                    for (ch = 'A'; ch <= 'E'; ch++)
                                        switch (ch)
                                        {
                                            case 'A':
                                                Console.WriteLine("ch содержит A");
                                                break;
                                            case 'B':
                                                Console.WriteLine("ch содержит B");
                                                break;
                                            case 'C':
                                                Console.WriteLine("ch содержит C");
                                                break;
                                            case 'D':
                                                Console.WriteLine("ch содержит D");
                                                break;
                                            case 'E':
                                                Console.WriteLine("ch содержит E");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _048_Пример_Проваливания_Пустых_Ветвей_Case
                        { // Пример "проваливания" пустых ветвей case
                            class EmptyCasesCanFall
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 1; i < 5; i++)
                                        switch(i)
                                        {
                                            case 1:
                                            case 2:
                                            case 3: Console.WriteLine("i равно 1, 2 или 3");
                                                break;
                                            case 4: Console.WriteLine("i равно 4");
                                                break;
                                        }
                                }
                            }
                        }
                        ```
                        
                    - **Цикл for**
                        - ************************************************Число в обратном порядке************************************************
                            
                            ```csharp
                            using System;
                            
                            namespace _060_Do_While_Цифры_Числа_Обратный_Порядок
                            { // Отобразить цифры целого числа в обратном порядке
                                class DoWhileDemo
                                {
                                    static void Main()
                                    {
                                        int num;
                                        int nextdigit;
                                        num = 198;
                            
                                        Console.WriteLine("Число: " + num);
                                        Console.Write("Число в обратном порядке: ");
                            
                                        do
                                        {
                                            nextdigit = num % 10;
                                            Console.Write(nextdigit);
                                            num = num / 10;
                                        }
                                        while(num > 0);
                                        Console.WriteLine();
                                    }
                                }
                            }
                            ```
                            
                        
                        ```csharp
                        using System;
                        
                        namespace _049_Цикл_for_Отрицательное_Направление
                        { // Выполнение цикла for в отрицательном направлении
                            class DecrFor
                            {
                                static void Main(string[] args)
                                {
                                    int x;
                        
                                    for (x = 100; x > -100; x -= 5)
                                        Console.WriteLine(x);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _050_for_Выявление_Простых_Чисел
                        { // Выяснить, является ли число простым. Если оно непростое, вывести наибольший его множитель
                            class FindPrimes
                            {
                                static void Main()
                                {
                                    int num;
                                    int i;
                                    int factor;
                                    bool isprime;
                        
                                    for (num = 2; num < 20; num++)
                                    {
                                        isprime = true;
                                        factor = 0;
                        
                                        // Выяснить, делится ли значение переменной num нацело
                                        for (i = 2; i <= num / 2; i++)
                                        {
                                            if ((num % i) == 0)
                                            {
                                                // Значение переменной num делится нацело.
                                                // Следовательно, это не простое число.
                                                isprime = false;
                                                factor = i;
                                            }
                                        }
                                        if (isprime)
                                            Console.WriteLine(num + " - простое число.");
                                        else
                                            Console.WriteLine("Наибольший множитель числа " + num + " равен " + factor);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _051_for_Применение_Нескольких_Переменных_Управления_Циклом
                        { // Использовать запятые в операторе цикла for
                            class Comma
                            {
                                static void Main()
                                {
                                    int i, j;
                        
                                    for (i = 0, j = 10; i < j; i++, j--)
                                        Console.WriteLine("i и j: " + i + " " + j);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _052_for_Использование_Запятых
                        { // Использовать запятые в операторе цикла for для выявления наименьшего
                          // и наибольшего множителя числа
                            class Comma
                            {
                                static void Main()
                                {
                                    int i, j;
                                    int smallest, largest;
                                    int num;
                        
                                    num = 100;
                                    smallest = largest = 1;
                        
                                    for (i = 2, j = num / 2; (i <= num / 2) & (j >= 2); i++, j--)
                                    {
                                        if ((smallest == 1) & ((num % i) == 0))
                                            smallest = i;
                                        if ((largest == 1) & ((num % j) == 0))
                                            largest = j;
                                    }
                        
                                    Console.WriteLine("Наибольший множитель: " + largest);
                                    Console.WriteLine("Наименьший множитель: " + smallest);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _053_Условное_Выражение
                        { // Условием выполнения цикла может служить любое выражение типа bool
                            class ForDemo
                            {
                                static void Main()
                                {
                                    int i, j;
                                    bool done = false;
                        
                                    for (i = 0, j = 100; !done; i++, j--)
                                    {
                                        if (i * i >= j) done = true;
                                        Console.WriteLine("i, j: " + i + " " + j);
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _054_for_Отдельные_Пустые_Блоки
                        { // Отедльные части цикла for могут оставаться пустыми
                            class Empty
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    for (i = 0; i < 10; )
                                    {
                                        Console.WriteLine("Проход №" + i);
                                        i++; // инкрементировать переменную управления циклом
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _055_for_Исключаем_Два_Блока
                        { // Исключить еще одну часть из определения цикла for
                            class Empty2
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    i = 0; // исключить инициализацию из определения цикла
                                    for (; i < 10; )
                                    {
                                        Console.WriteLine("Проход №" + i);
                                        i++; // инкрементировать переменную управления циклом
                                    }
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _056_for_Без_Тела
                        { // Тело цикла может быть пустым
                            class Empty3
                            {
                                static void Main()
                                {
                                    int i;
                                    int sum = 0;
                                    // получить сумму чисел от 1 до 5
                                    for (i = 1; i <= 5; sum += i++) ;
                        
                                    Console.WriteLine("Сумма равна " + sum);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _057_Объявление_Управляющих_Переменных_for
                        { // Объявить переменную управления циклом в самом цикле for
                            class ForVar
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int fact = 1;
                        
                                    // вычислить факториал чисел от 1 до 5
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        sum += i; // Переменная i действует в цикле
                                        fact *= i;
                                    }
                                    // А здесь переменная i недоступна
                                    Console.WriteLine("Сумма равна " + sum);
                                    Console.WriteLine("Факториал равен " + fact);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _058_While_Вычисляем_Порядок_Величины_Целого_Числа
                        { // Вычислить порядок величины целого числа
                            class WhileDemo
                            {
                                static void Main()
                                {
                                    int num;
                                    int mag;
                        
                                    num = 435679;
                                    mag = 0;
                        
                                    Console.WriteLine("Число: " + num);
                        
                                    while (num > 0)
                                    {
                                        mag++;
                                        num = num / 10;
                                    };
                                    Console.WriteLine("Порядок величины: " + mag);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _059_while_Вычисляем_Целые_Степени_Числа
                        { // Вычислить целые степени числа 2
                            class Power
                            {
                                static void Main()
                                {
                                    int e;
                                    int result;
                        
                                    for (int i = 0; i < 10; i++)
                                    {
                                        result = 1;
                                        e = i;
                        
                                        while (e > 0)
                                        {
                                            result *= 2;
                                            e--;
                                        }
                                        Console.WriteLine("2 в степени " + i + " равно " + result);
                                    }    
                                }
                            }
                        }
                        ```
                        
                    - **Оператор break**
                        - Применение оператора break для выхода из цикла for
                            
                            ```csharp
                            using System;
                            
                            namespace _061_Оператор_break
                            { // Применить оператор break для выхода из цикла
                                class BreakDemo
                                {
                                    static void Main()
                                    {
                                        // Использовать оператор break для выхода из этого цикла
                                        for (int i = -10; i <= 10; i++)
                                        {
                                            if (i > 0) break; // завершить цикл, как только значение
                                                              // переменной i станет положительным
                                            Console.Write(i + " ");
                                        }
                                        Console.WriteLine("Готово!");
                                    }
                                }
                            }
                            ```
                            
                        - Применить оператор break для выхода из цикла do-while
                            
                            ```csharp
                            using System;
                            
                            namespace _062_break_Из_Цикла_Do_While
                            { // Применить оператор break для выхода из цикла do-while
                                class BreakDemo2
                                {
                                    static void Main()
                                    {
                                        int i;
                                        i = -10;
                                        do
                                        {
                                            if (i > 0) break;
                                            Console.Write(i + " ");
                                            i++;
                                        }
                                        while (i <= 10);
                                        Console.WriteLine("Готово!");
                                    }
                                }
                            }
                            ```
                            
                        - Выявляем наименьший множитель числа
                            
                            ```csharp
                            using System;
                            
                            namespace _063_Выявляем_Наименьший_Множитель_Числа
                            { // Выявить наименьший множитель числа
                                class FindSmallestFactor
                                {
                                    static void Main()
                                    {
                                        int factor = 1;
                                        int num = 1000;
                            
                                        for (int i = 2; i <= num / i; i++)
                                        {
                                            if ((num % i) == 0)
                                            {
                                                factor = i;
                                                break; // прервать цикл, как только будет выявлен
                                                        // наименьший множитель числа
                                            }
                                        }
                                        Console.WriteLine("Наименьший множитель числа равен " + factor);
                                    }
                                }
                            }
                            ```
                            
                        - Применяем оператор break во вложенных циклах
                            
                            ```csharp
                            using System;
                            
                            namespace _064_break_Вложенные_Циклы
                            {
                                class BreakNested
                                { // Применить оператор break во вложенных циклах
                                    static void Main()
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            Console.WriteLine("Подсчет во внешнем цикле: " + i);
                                            Console.Write("Подсчет во внутреннем цикле: ");
                            
                                            int t = 0;
                                            while (t < 100)
                                            {
                                                if (t == 10) break; // прервать цикл, если t равно 10
                                                Console.Write(t + " ");
                                                t++;
                                            }
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine("Циклы завершены!");
                                    }
                                }
                            }
                            ```
                            
                    - **Оператор continue**
                        
                        ```csharp
                        using System;
                        
                        namespace _065_Оператор_Continue
                        { // Применить оператор continue 
                            class ContDemo
                            {
                                static void Main()
                                {
                                    // Вывести четные числа от 0 до 100
                                    for (int i = 0; i <= 100; i++)
                                    {
                                        if ((i % 2) != 0) continue; // перейти к следующему шагу итерации
                                        Console.WriteLine(i);
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор goto**
                        
                        ```csharp
                        using System;
                        
                        namespace _066_GoTo_Switch
                        { // Применить оператор goto в операторе switch
                            class Program
                            {
                                static void Main()
                                {
                                    for (int i = 1; i < 5; i++)
                                    {
                                        switch(i)
                                        {
                                            case 1:
                                                Console.WriteLine("В ветви case 1");
                                                goto case 3;
                                            case 2:
                                                Console.WriteLine("В ветви case 2");
                                                goto case 1;
                                            case 3:
                                                Console.WriteLine("В ветви case 3");
                                                goto default;
                                            default:
                                                Console.WriteLine("В ветви default");
                                                break;
                                        }
                                        Console.WriteLine();
                                    }
                                    // goto case 1; // Ошибка! Безусловный переход к оператору switch недопустим
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _067_Практическое_Применение_GoTo
                        { // Продемонстрировать практическое применение оператора goto
                            class Use_goto
                            {
                                static void Main()
                                {
                                    int i = 0, j = 0, k = 0;
                        
                                    for (i = 0; i < 10; i++)
                                    {
                                        for (j = 0; j < 10; j++)
                                        {
                                            for (k = 0; k < 10; k++)
                                            {
                                                Console.WriteLine("i, j, k: " + i + " " + j + " " + k);
                                                if (k == 3) goto stop;
                                            }
                                        }
                                    }
                                stop: Console.WriteLine("Остановлено! i, j, k: " + i + ", " + j + ", " + k);
                                }
                            }
                        }
                        ```
                        
                    - **Класс Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _068_Класс_Building
                        { // Программа, в которой используется класс Building
                            class Building
                            {
                                public int Floors; // количество этажей
                                public int Area; // общая площадь здания
                                public int Occupants; // количество жильцов
                            }
                        
                            // В этом классе объявляется объект типа Building
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building(); // создать объект типа Building
                                    int areaPP; // площадь на одного человека
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Вычислить площадь на одного человека
                                    areaPP = house.Area / house.Occupants;
                                    Console.WriteLine("Дом имеет\n" + house.Floors + 
                                        " этажа\n" + house.Occupants + " жильца\n" + house.Area + 
                                        " кв. футов общей площади, из них\n" + areaPP + 
                                        " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Программа с двумя объектами типа Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _069_Два_Объекта_Типа_Building
                        { // в этой программе создаются два объекта типа Building
                            class Building
                            {
                                public int Floors; // количество этажей
                                public int Area; // общая площадь
                                public int Occupants; // количество жильцов
                            }
                            
                            class BuildingDemo
                            { // В этом классе объявляются два объекта типа Building
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    int areaPP; // площадь на одного человека
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    // Вычислить площадь на одного человека в жилом доме
                                    areaPP = house.Area / house.Occupants;
                        
                                    Console.WriteLine("Дом имеет\n" + house.Floors + " этажа\n" + 
                                        house.Occupants + " жильца\n" + 
                                        house.Area + " кв. футов общей площади, из них\n" + 
                                        areaPP + " приходится на одного человека");
                                    Console.WriteLine();
                        
                                    // 
                                    areaPP = office.Area / office.Occupants;
                                    Console.WriteLine("Учреждение имеет\n" + office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + "кв. футов общей площади, из них\n" +
                                        areaPP + " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Добавляем метод в класс Building**
                        
                        ```csharp
                        using System;
                        
                        namespace _070_Добавляем_Метод_В_Класс_Building
                        { // Добавить метод в класс Building
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Вывести площадь на одного человека
                                public void AreaPerPerson()
                                {
                                    Console.WriteLine(" " + Area / Occupants + " приходится на одного человека");
                                }
                            }
                            // Использовать метод AreaPerPerson()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Дом имеет: \n" +
                                        house.Floors + " этажа\n" +
                                        house.Occupants + " жильца\n" +
                                        house.Area + " кв. футов общей площади, из них");
                                    house.AreaPerPerson();
                        
                                    Console.WriteLine();
                        
                                    Console.WriteLine("Учреждение имеет: \n" +
                                        office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + " кв. футов общей площади, из них");
                                    office.AreaPerPerson();
                                }
                            }
                        }
                        ```
                        
                    - **Возвращаем значение из метода AreaPerPerson()**
                        
                        ```csharp
                        using System;
                        
                        namespace _071_Возвращаем_Значение_Из_Метода_Return
                        { // Возвратить значение из метода AreaPerPerson
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Возвратить величину площади на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                            }
                            // Использовать значение, возвращаемое методом AreaPerPerson()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                                    int areaPP; // площадь на одного человека
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 2;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 25;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Дом имеет: \n" +
                                        house.Floors + " этажа\n" +
                                        house.Occupants + " жильца\n" +
                                        house.Area + " кв. футов общей площади, из них\n" + 
                                        house.AreaPerPerson() + " приходится на одного человека");
                        
                                    Console.WriteLine();
                        
                                    Console.WriteLine("Учреждение имеет: \n" +
                                        office.Floors + " этажа\n" +
                                        office.Occupants + " работников\n" +
                                        office.Area + " кв. футов общей площади, из них\n" +
                                        office.AreaPerPerson() + " приходится на одного человека");
                                }
                            }
                        }
                        ```
                        
                    - **Применение параметров в методе**
                        
                        ```csharp
                        using System;
                        
                        namespace _072_Применение_Параметров_В_Методе
                        { // Простой пример применения параметра
                            class ChkNum
                            {
                                // Возвратить значение true, если значение параметра х окажется простым числом 
                                public bool IsPrime(int x)
                                {
                                    if (x <= 1) return false;
                        
                                    for (int i = 2; i <= x / i; i++)
                                        if ((x % i) == 0) return false;
                                    return true;
                                }
                            }
                            class ParmDemo
                            {
                                static void Main()
                                {
                                    ChkNum ob = new ChkNum();
                        
                                    for (int i = 2; i < 10; i++)
                                        if (ob.IsPrime(i)) Console.WriteLine(i + " простое число.");
                                        else Console.WriteLine(i + " непростое число.");
                                }
                            }
                        }
                        ```
                        
                    - **Метод, принимающий два аргумента**
                        
                        ```csharp
                        using System;
                        
                        namespace _073_Метод_Принимает_Два_Аргумента
                        { // Добавить метод, принимающий два аргумента
                            class ChkNum
                            {
                                // Возвратить значение true, если значение параметра х окажется простым числом 
                                public bool IsPrime(int x)
                                {
                                    if (x <= 1) return false;
                        
                                    for (int i = 2; i <= x / i; i++)
                                        if ((x % i) == 0) return false;
                                    return true;
                                }
                        
                                // Возвратить наименьший общий множитель
                                public int LeastComFactor(int a, int b)
                                {
                                    int max;
                        
                                    if (IsPrime(a) || IsPrime(b)) return 1;
                                    max = a < b ? a : b;
                        
                                    for (int i = 2; i <= max / 2; i++)
                                        if (((a % i) == 0) && ((b % i) == 0)) return i;
                                    return 1;
                                }
                            }
                            class ParmDemo
                            {
                                static void Main()
                                {
                                    ChkNum ob = new ChkNum();
                                    int a, b;
                        
                                    for (int i = 2; i < 10; i++)
                                        if (ob.IsPrime(i)) Console.WriteLine(i + " простое число.");
                                        else Console.WriteLine(i + " непростое число.");
                        
                                    a = 7;
                                    b = 8;
                                    Console.WriteLine("Наименьший общий множитель чисел " + 
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                        
                                    a = 100;
                                    b = 8;
                                    Console.WriteLine("Наименьший общий множитель чисел " +
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                        
                                    a = 100;
                                    b = 75;
                                    Console.WriteLine("Наименьший общий множитель чисел " +
                                        a + " и " + b + " равен " +
                                        ob.LeastComFactor(a, b));
                                }
                            }
                        }
                        ```
                        
                    - **Возвращаем максимальное количество жильцов**
                        
                        ```csharp
                        using System;
                        
                        namespace _074_Возвращаем_Максимальное_Количество_Жильцов_Building
                        { /* Возвратить максимальное количество человек, занимающих здание, исходя из 
                           * заданной минимальной площади на одного человека.
                           * Добавить параметризированный метод, вычисляющий максимальное количество человек, 
                           * которые могут занимать здание, исходя из заданной минимальной площади на одного человека.*/
                            
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Возвратить площадь на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                        
                                // Возвратить максимальное кол-во чел, занимающих здание, исходя из
                                // заданной минимальной площади на одного человека
                                public int MaxOccupant(int minArea)
                                {
                                    return Area / minArea;
                                }
                            }
                        
                            // Использовать метод MaxOccupant()
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building();
                                    Building office = new Building();
                        
                                    // Присвоить значения полям в объекте house
                                    house.Occupants = 4;
                                    house.Area = 2500;
                                    house.Floors = 3;
                        
                                    // Присвоить значения полям в объекте office
                                    office.Occupants = 4;
                                    office.Area = 4200;
                                    office.Floors = 3;
                        
                                    Console.WriteLine("Максиальное количество человек в доме, \n" + 
                                        "если на каждого должно приходиться " + 300 + " кв. футов: " +
                                        house.MaxOccupant(300));
                                    Console.WriteLine("Максиальное количество человек в учреждении, \n" +
                                        "если на каждого должно приходиться " + 300 + " кв. футов: " +
                                        office.MaxOccupant(300));
                                }
                            }
                        }
                        ```
                        
                    - Простой конструктор
                        
                        ```csharp
                        using System;
                        
                        namespace _075_Простой_Конструктор
                        { // Простой конструктор
                        
                            class MyClass
                            {
                                public int x;
                        
                                **public MyClass()
                                {
                                    x = 10;
                                }**
                            }
                            class ConsDemo
                            {
                                static void Main()
                                {
                                    MyClass t1 = new MyClass();
                                    MyClass t2 = new MyClass();
                        
                                    Console.WriteLine(t1.x + t2.x);
                                }
                            }
                        }
                        ```
                        
                    - Параметризированный конструктор
                        
                        ```csharp
                        using System;
                        
                        namespace _076_Параметризированный_Конструктор
                        { // Параметризированный конструктор
                            
                            class MyClass
                            {
                                public int x;
                        
                                public MyClass(int i)
                                {
                                    x = i;
                                }
                            }
                            class ParmsConsDemo
                            {
                                static void Main()
                                {
                                    MyClass t1 = new MyClass(10);
                                    MyClass t2 = new MyClass(88);
                        
                                    Console.WriteLine(t1.x + " " + t2.x);
                                }
                            }
                        }
                        ```
                        
                    - Добавляем конструктор в класс Building
                        
                        ```csharp
                        using System;
                        
                        namespace _077_Конструктор_В_Классе_Building
                        { // Добавить конструктор в класс Building
                        
                            class Building
                            {
                                public int Floors;      // количество этажей
                                public int Area;        // общая площадь здания
                                public int Occupants;   // количество жильцов
                        
                                // Параметризированный конструктор для класса Building
                                public Building(int f, int a, int o)
                                {
                                    Floors = f;
                                    Area = a;
                                    Occupants = o;
                                }
                        
                                // Возвратить площадь на одного человека
                                public int AreaPerPerson()
                                {
                                    return Area / Occupants;
                                }
                        
                                // Возвратить макс кол-во чел, исходя из заданной мин площади на человека
                                public int MaxOccupant(int minArea)
                                {
                                    return Area / minArea;
                                }
                            }
                        
                            // Использовать параметризированный конструктор класса Building
                            class BuildingDemo
                            {
                                static void Main()
                                {
                                    Building house = new Building(2, 2500, 4);
                                    Building office = new Building(3, 4200, 250);
                        
                                    Console.WriteLine("Максимальное количество человек в доме\n" +
                                        "если на каждого должно приходиться " +
                                        300 + " кв. футов: " + house.MaxOccupant(300));
                        
                                    Console.WriteLine("Максимальное количество человек в учреждении\n" +
                                        "если на каждого должно приходиться " +
                                        300 + " кв. футов: " + office.MaxOccupant(300));
                                }
                            }
                        }
                        ```
                        
                    - Оператор new
                        
                        ```csharp
                        // Использовать оператор new вместе с типом значения (однако, это нецелесообразно)
                        
                        using System;
                        
                        class newValue
                        {
                        	static void Main()
                        	{
                        		int i = new int(); // инициализировать переменную i нулевым значением
                        		Console.WriteLine("Значение переменной i равно: " + i);
                        	}
                        }
                        ```
                        
                    - Применение деструктора
                        
                        ```csharp
                        using System;
                        
                        namespace _078_Применение_Деструктора
                        { // Продемонстрировать применение деструктора
                        
                            class Destruct
                            {
                                public int x;
                        
                                public Destruct(int i)
                                {
                                    x = i;
                                }
                        
                                // Вызывается при утилизации объекта
                                ~Destruct()
                                {
                                    Console.WriteLine("Уничтожить " + x);
                                }
                                
                                // Создает объект и тут же уничтожает его
                                public void Generator(int i)
                                {
                                    Destruct o = new Destruct(i);
                                }
                            }
                            class DestructDemo
                            {
                                static void Main()
                                {
                                    int count;
                        
                                    Destruct ob = new Destruct(0);
                                    /* А теперь создать большое кол-во объектов. В какой-то момент 
                                     произойдет "сборка мусора". 
                                    Примечание: для того, чтобы активизировать сборку мусора, возможно
                                    придется увеличить число создаваемых объектов. */
                        
                                    for (count = 1; count < 100000; count++)
                                        ob.Generator(count);
                        
                                    Console.WriteLine("Готово! ");
                                }
                            }
                        }
                        ```
                        
                    - Ключевое слово This
                        
                        ```csharp
                        using System;
                        
                        namespace _079_Ключевое_Слово_this
                        { // однако, в данной программе this можно опустить и ничего не изменится
                            class Rect
                            {
                                public int Width;
                                public int Height;
                        
                                public Rect(int w, int h)
                                {
                                    this.Width = w;
                                    this.Height = h;
                                }
                        
                                public int Area()
                                {
                                    return this.Width * this.Height;
                                }
                            }
                            class UseRect
                            {
                                static void Main()
                                {
                                    Rect r1 = new Rect(4, 5);
                                    Rect r2 = new Rect(7, 9);
                        
                                    Console.WriteLine("r1: " + r1.Area());
                                    Console.WriteLine("r2: " + r2.Area());
                                }
                            }
                        }
                        ```
                        
                    - Одномерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _080_Одномерный_Массив
                        { // Продемонстрировать одномерный массив
                            class ArrayDemo
                            {
                                static void Main()
                                {
                                    int[] sample = new int[10];
                                    int i;
                        
                                    for (i = 0; i < 10; i = i + 1)
                                        sample[i] = i;
                        
                                    for (i = 0; i < 10; i = i + 1)
                                        Console.WriteLine("sample[" + i + "]: " + sample[i]);
                                }
                            }
                        }
                        ```
                        
                    - Среднее арифметическое массива
                        
                        ```csharp
                        using System;
                        
                        namespace _081_Среднее_Арифметическое_Ряда_Значений
                        {
                            class Average
                            { // Вычислить среднее арифметическое ряда значений
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    int avg = 0;
                        
                                    nums[0] = 99;
                                    nums[1] = 10;
                                    nums[2] = 100;
                                    nums[3] = 18;
                                    nums[4] = 78;
                                    nums[5] = 23;
                                    nums[6] = 63;
                                    nums[7] = 9;
                                    nums[8] = 87;
                                    nums[9] = 49;
                        
                                    for (int i = 0; i < 10; i++)
                                        avg = avg + nums[i];
                                    avg = avg / 10;
                        
                                    Console.WriteLine("Среднее: " + avg);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _082_Среднее_Арифметическое_Ряда_Значений
                        { // Вычислить среднее арифметическое ряда значений
                            class Average
                            {
                                static void Main()
                                {
                                    int[] nums = { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
                                    int avg = 0;
                        
                                    for (int i = 0; i < 10; i++)
                                        avg = avg + nums[i];
                                    avg = avg / 10;
                        
                                    Console.WriteLine("Среднее: " + avg);
                                }
                            }
                        }
                        ```
                        
                    - Превышение границ массива
                        
                        ```csharp
                        using System;
                        
                        namespace _083_Превышение_Границ_Массива
                        { // Продемонстрировать превышение границ массива
                            class ArrayErr
                            {
                                static void Main()
                                {
                                    int[] sample = new int[10];
                                    int i;
                        
                                    // Воссоздать превышение границ массива
                                    for (i = 0; i < 100; i = i + 1)
                                        sample[i] = i;
                                }
                            }
                        }
                        ```
                        
                    - Двумерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _084_Двумерный_Массив
                        { // Продемонстрировать двумерный массив
                            class TwoD
                            {
                                static void Main()
                                {
                                    int t, i;
                                    int[,] table = new int[3, 4];
                        
                                    for (t = 0; t < 3; ++t)
                                    {
                                        for (i = 0; i < 4; ++i)
                                        {
                                            table[t, i] = (t * 4) + i + 1;
                                            Console.Write(table[t, i] + " ");
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Суммируем значения по диагонали 3х-мерного массива
                        
                        ```csharp
                        using System;
                        
                        namespace _085_Суммируем_Значения_По_Диагонали_3_Мерного_Массива
                        { // Суммировать значения по одной из диагоналей матрицы 3х3х3х
                            class ThreeDMatrix
                            {
                                static void Main()
                                {
                                    int[,,] m = new int[3, 3, 3];
                                    int sum = 0;
                                    int n = 1;
                        
                                    for (int x = 0; x < 3; x++)
                                        for (int y = 0; y < 3; y++)
                                            for (int z = 0; z < 3; z++)
                                                m[x, y, z] = n++;
                                    sum = m[0, 0, 0] + m[1, 1, 1] + m[2, 2, 2];
                        
                                    Console.WriteLine("Сумма значений по первой диагонали: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Инициализируем двумерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _086_Инициализация_Двумерного_Массива
                        { // Инициализировать двумерный массив
                            class Squares
                            {
                                static void Main()
                                {
                                    int[,] sqrs =
                                    {
                                        {1, 1 },
                                        {2, 4 },
                                        {3, 9 },
                                        {4, 16 },
                                        {5, 25 },
                                        {6, 36 },
                                        {7, 49 },
                                        {8, 64 },
                                        {9, 81 },
                                        {10, 100 }
                                    };
                        
                                    int i, j;
                        
                                    for (i = 0; i < 10; i++)
                                    {
                                        for (j = 0; j < 2; j++)
                                            Console.Write(sqrs[i, j] + " ");
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Инициализируем многомерный массив
                        
                        ```csharp
                        using System;
                        
                        namespace _087_Инициализация_Многомерного_Массива
                        { // Продемонстрировать применение ступенчатых массивов
                            class Jagged
                            {
                                static void Main()
                                {
                                    int[][] jagged = new int[3][];
                                    jagged[0] = new int[4];
                                    jagged[1] = new int[3];
                                    jagged[2] = new int[5];
                        
                                    int i;
                        
                                    // 
                                    for (i = 0; i < 4; i++)
                                        jagged[0][i] = i;
                                    // 
                                    for (i = 0; i < 3; i++)
                                        jagged[1][i] = i;
                                    // 
                                    for (i = 0; i < 5; i++)
                                        jagged[2][i] = i;
                                    // 
                                    for (i = 0; i < 4; i++)
                                        Console.Write(jagged[0][i] + " ");
                                    Console.WriteLine();
                                    // 
                                    for (i = 0; i < 3; i++)
                                        Console.Write(jagged[1][i] + " ");
                                    Console.WriteLine();
                                    // 
                                    for (i = 0; i < 5; i++)
                                        Console.Write(jagged[2][i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Присваивание ссылок на массивы
                        
                        ```csharp
                        using System;
                        
                        namespace _088_Присваивание_Ссылок_На_Массивы
                        { // Присваивание ссылок на массивы
                            class AssignARef
                            {
                                static void Main()
                                {
                                    int i;
                        
                                    int[] nums1 = new int[10];
                                    int[] nums2 = new int[10];
                        
                                    for (i = 0; i < 10; i++) nums1[i] = i;
                        
                                    for (i = 0; i < 10; i++) nums2[i] = -i;
                                    Console.Write("Содержимое массива nums1: ");
                        
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                        
                                    Console.Write("Содержимое массива nums2: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                        
                                    nums2 = nums1; // Теперь nums2 ссылается на nums1
                        
                                    Console.Write("Содержимое массива nums2\n" + "после присваивания: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                        
                                    // Далее оперировать массивом nums1 посредством переменной
                                    // ссылки на массив nums2
                                    nums2[3] = 99;
                        
                                    Console.Write("Содержимое массива nums1 после изменения\n" +
                                        "посредством переменной nums2: ");
                                    for (i = 0; i < 10; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Применение свойства Length
                        
                        ```csharp
                        using System;
                        
                        namespace _089_Применение_Свойства_Length
                        { // Использовать свойство Length массива
                            class LengthDemo
                            {
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    Console.WriteLine("Длина массива nums равна " + nums.Length);
                        
                                    // Использовать свойство Length для инициализации массива nums
                                    for (int i = 0; i < nums.Length; i++)
                                        nums[i] = i * i;
                        
                                    // А теперь воспользоваться свойством Length для вывода
                                    // содержимого массива nums
                                    Console.Write("Содержимое массива nums: ");
                                    for (int i = 0; i < nums.Length; i++)
                                        Console.Write(nums[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _090_Length_Трехмерный_Массив
                        { // Использовать свойство Length трехмерного массива
                            class LengthDemo3D
                            {
                                static void Main()
                                {
                                    int[,,] nums = new int[10, 5, 6];
                                    Console.WriteLine("Длина массива nums равна " + nums.Length);
                                }
                            }
                        }
                        ```
                        
                    - Поменять местами содержимое элементов массива
                        
                        ```csharp
                        using System;
                        
                        namespace _091_Меняем_Местами_Элементы_Массива
                        { // Поменять местами содержимое элементов массива
                            class RevCopy
                            {
                                static void Main()
                                {
                                    int i, j;
                                    int[] nums1 = new int[10];
                                    int[] nums2 = new int[10];
                        
                                    for (i = 0; i < nums1.Length; i++) nums1[i] = i;
                                    Console.Write("Исходное содержимое массива: ");
                                    for (i = 0; i < nums2.Length; i++)
                                        Console.Write(nums1[i] + " ");
                                    Console.WriteLine();
                        
                                    // Скопировать элементы массива nums1 в массив nums2 в обратном порядке
                                    if (nums2.Length >= nums2.Length) // Проверить, достаточно ли
                                                                      // длины массива nums2
                                        for (i = 0, j = nums1.Length - 1; i < nums1.Length; i++, j--)
                                            nums2[j] = nums1[i];
                        
                                    Console.Write("Содержимое массива в обратном порядке: ");
                                    for (i = 0; i < nums2.Length; i++)
                                        Console.Write(nums2[i] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Применение Length в зубчатых массивах
                        
                        ```csharp
                        using System;
                        
                        namespace _092_Length_В_Зубчатых_Массивах
                        { // Продемонстрировать применение свойства Length при обращении со ступенчатыми массивами
                            class Jagged
                            {
                                static void Main()
                                {
                                    int[][] network_nodes = new int[4][];
                                    network_nodes[0] = new int[3];
                                    network_nodes[1] = new int[7];
                                    network_nodes[2] = new int[2];
                                    network_nodes[3] = new int[5];
                        
                                    int i, j;
                        
                                    // Имитировать данные об ипользовании ЦП
                                    for (i = 0; i < network_nodes.Length; i++)
                                        for (j = 0; j < network_nodes[i].Length; j++)
                                            network_nodes[i][j] = i * j + 70;
                        
                                    Console.WriteLine("Общее количество узлов сети: " + 
                                        network_nodes.Length + "\n");
                        
                                    for (i = 0; i < network_nodes.Length; i++)
                                    {
                                        for (j = 0; j < network_nodes[i].Length; j++)
                                        {
                                            Console.Write("Использование в узле сети " + i + 
                                                " ЦП " + j + ": ");
                                            Console.Write(network_nodes[i][j] + "% ");
                                            Console.WriteLine();
                                        }
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - Неявно типизированный ступенчатый массив
                        
                        ```csharp
                        using System;
                        
                        namespace _093_Неявно_Типизированный_Зубчатый_Массив
                        { // Продемонстрировать неявно типизированный зубчатый массив
                            class Jagged
                            {
                                static void Main()
                                {
                                    var jagged = new[]
                                    {
                                        new[] {1, 2, 3, 4 },
                                        new[] {9, 8, 7 },
                                        new[] {11, 12, 13, 14, 15 }
                                    };
                                    for (int j = 0; j < jagged.Length; j++)
                                    {
                                        for (int i = 0; i < jagged[j].Length; i++)
                                            Console.Write(jagged[j][i] + " ");
                                        Console.WriteLine();
                                    }
                                }
                            }
                        }
                        ```
                        
                    - **Оператор цикла foreach**
                        
                        ```csharp
                        using System;
                        
                        namespace _094_Оператор_Цикла_Foreach
                        { // Использовать оператор цикла foreach
                            class ForeachDemo
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[] nums = new int[10];
                        
                                    // Задать первоначальные значения элементов массиваnums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                        
                                    // Использовать цикл foreach для вывода значений эл-в массива и подсчета их суммы
                                    foreach (int x in nums)
                                    {
                                        Console.WriteLine("Значение элемента равно:" + x);
                                        sum += x;
                                    }
                                    Console.WriteLine("Сумма равна: " + sum);
                                }
                            }
                        }
                        ```
                        
                        ```csharp
                        using System;
                        
                        namespace _096_Обращаемся_Через_foreach_К_Двумерному_Массиву
                        { // Использовать оператор цикла foreach для обращения к двумерному массиву
                            class ForeachDemo2
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[,] nums = new int[3, 5];
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 3; i++)
                                        for (int j = 0; j < 5; j++)
                                            nums[i, j] = (i + 1) * (j + 1);
                                    // Использовать цикл foreаch для вывода значений элементов массива и подсчета их суммы
                                    foreach (int x in nums)
                                        {
                                        Console.WriteLine("Значение элемента равно: " + x);
                                        sum += x;
                                    }
                                    Console.WriteLine("Сумма равна: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Завершаем foreach через break
                        
                        ```csharp
                        using System;
                        
                        namespace _095_Завершаем_foreach_через_break
                        { // Использовать оператор break для преждевременного завершения цикла foreach
                            class ForeachDemo
                            {
                                static void Main()
                                {
                                    int sum = 0;
                                    int[] nums = new int[10];
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                                    // Использовать foreach для вывода зн-й эл-в массива и подсчета их суммы
                                    foreach (int x in nums)
                                    {
                                        Console.WriteLine("" + x);
                                        sum += x;
                                        if (x == 4) break; // прервать цикл, как только индекс массива достигнет 4
                                    }
                                    Console.WriteLine("Сумма первых 5 элементов: " + sum);
                                }
                            }
                        }
                        ```
                        
                    - Поиск в массиве с помощью оператора цикла foreach
                        
                        ```csharp
                        using System;
                        
                        namespace _097_Поиск_в_Массиве_с_Помощью_foreach
                        { // Поиск в массиве с помощью оператора цикла foreach
                            class Search
                            {
                                static void Main()
                                {
                                    int[] nums = new int[10];
                                    int val;
                                    bool found = false;
                        
                                    // Задать первоначальные значения элементов массива nums
                                    for (int i = 0; i < 10; i++)
                                        nums[i] = i;
                                    val = 5;
                        
                                    // Использовать цикл foreach для поиска заданного значения в массиве nums
                                    foreach (int x in nums)
                                    {
                                        if (x == val)
                                        {
                                            found = true;
                                            break;
                                        }
                                    }
                                    if (found)
                                        Console.WriteLine("Значение найдено");
                                }
                            }
                        }
                        ```
                        
                    - Строки
                        
                        ```csharp
                        using System;
                        
                        namespace _098_Создание_и_Выведение_Символьной_Строки
                        { // Создать и вывести символьную строку
                            class StringDemo
                            {
                                static void Main()
                                {
                                    char[] charray = { 'Э', 'т', 'о', ' ', 'с', 'т', 'р', 'о', 'к', 'а', };
                        
                                    string str1 = new string(charray);
                                    string str2 = "Еще одна строка.";
                        
                                    Console.WriteLine(str1);
                                    Console.WriteLine(str2);
                                }
                            }
                        }
                        ```
                        
                    - Операции со строками
                        
                        ```csharp
                        using System;
                        using System.Globalization;
                        using System.Reflection.Emit;
                        
                        namespace _099_Некоторое_Операции_Над_Строками
                        { // Некоторые операции со строками
                            class StrOps
                            {
                                static void Main()
                                {
                                    string str1 = "Программировать в .NET лучше всего на C#.";
                                    string str2 = "Программировать в .NET лучше всего на C#.";
                                    string str3 = "Строки в C# весьма эффективны.";
                                    string strUp, strLow;
                                    int result, idx;
                        
                                    Console.WriteLine("str1: " + str1);
                                    Console.WriteLine("Длина строки str1: " + str1.Length);
                        
                                    // Создать варианты строки str1, набранные прописными и строчными буквами
                                    strLow = str1.ToLower(CultureInfo.CurrentCulture);
                                    strUp = str1.ToUpper(CultureInfo.CurrentCulture);
                                    Console.WriteLine("Вариант строки str1, " + 
                                        "набранный строчными буквами:\n" + strLow);
                                    Console.WriteLine("Вариант строки str1, " +
                                        "набранный прописными буквами:\n" + strUp);
                                    Console.WriteLine();
                        
                                    // Вывести строку str1 посимвольно
                                    Console.WriteLine("Вывод строки str1 посимвольно.");
                                    for (int i = 0; i < str1.Length; i++)
                                        Console.Write(str1[i]);
                        
                                    Console.WriteLine("\n");
                                    // Сравнить строки способом порядкового сравнения
                                    if (str1 == str2)
                                        Console.WriteLine("str1 == str2");
                                    else 
                                        Console.WriteLine("str1 != str2");
                                    if (str1 == str3)
                                        Console.WriteLine("str1 == str3");
                                    else
                                        Console.WriteLine("str1 != str3");
                        
                                    // Сравнить сроки с учетом культурной среды
                                    result = string.Compare(str3, str1, StringComparison.CurrentCulture);
                                    if (result == 0)
                                        Console.WriteLine("Строки str1 и str3 равны");
                                    else if (result < 0)
                                        Console.WriteLine("Строка str1 меньше строки str3");
                                    else
                                        Console.WriteLine("Строка str1 больше строки str3");
                                    Console.WriteLine();
                        
                                    // Присвоить новую строку переменной str2
                                    str2 = "Один Два Три Один";
                        
                                    // Поиск подстроки
                                    idx = str2.IndexOf("Один", StringComparison.Ordinal);
                                    Console.WriteLine("Индекс первого вхождения подстроки <Один>: " + idx);
                                    idx = str2.LastIndexOf("Один", StringComparison.Ordinal);
                                    Console.WriteLine("Индекс последнего вхождения подстроки <Один>: " + idx);
                                }
                            }
                        }
                        ```
                        
                    - Массивы строк
                        
                        ```csharp
                        using System;
                        
                        namespace _100_Массивы_Строк
                        { // Продемонстрировать массивы строк
                            class StringArrays
                            {
                                static void Main()
                                {
                                    string[] str = { "Это", "очень", "простой", "тест." };
                                    Console.WriteLine("Исходный массив: ");
                                    for (int i = 0; i < str.Length; i++)
                                        Console.Write(str[i] + " ");
                                    Console.WriteLine("\n");
                        
                                    // Изменить строку
                                    str[1] = "тоже";
                                    str[3] = "до предела тест!";
                        
                                    Console.WriteLine("Видоизмененный массив: ");
                                    for (int i = 0; i < str.Length; i++)
                                        Console.Write(str[i] + " ");
                                }
                            }
                        }
                        ```
                        
                    - Выводим число словами
                        
                        ```csharp
                        using System;
                        
                        namespace _101_Отдельные_Цифры_Числа_Словами
                        { // Вывести отдельные цифры целого числа словами
                            class ConvertDigitsToWords
                            {
                                static void Main()
                                {
                                    int num;
                                    int nextdigit;
                                    int numdigits;
                                    int[] n = new int[20];
                                    string[] digits = { "ноль", "один", "два", "три", "четыре", "пять", 
                                        "шесть", "семь", "восемь", "девять"};
                                    num = 1908;
                        
                                    Console.WriteLine("Число: " + num);
                                    Console.Write("Число словами: ");
                                    nextdigit = 0;
                                    numdigits = 0;
                        
                                    // Получить отдельные цифры и сохранить их в массиве n
                                    do
                                    {
                                        nextdigit = num % 10;
                                        n[numdigits] = nextdigit;
                                        numdigits++;
                                        num = num / 10;
                                    }
                                    while (num > 0);
                                    numdigits--;
                        
                                    // Вывести полученные слова
                                    for (; numdigits >= 0; numdigits--)
                                        Console.Write(digits[n[numdigits]] + " ");
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Метод Substring()
                        
                        ```csharp
                        using System;
                        
                        namespace _102_Метод_Substring
                        { // Применить метод Substring()
                            class Substr
                            {
                                static void Main()
                                {
                                    string orgstr = "В C# упрощается обращение со строками.";
                                    // 
                                    string substr = orgstr.Substring(5, 20);
                        
                                    Console.WriteLine("orgstr: " + orgstr);
                                    Console.WriteLine("substr: " + substr);
                                }
                            }
                        }
                        ```
                        
                    - Применение строк в операторах switch
                        
                        ```csharp
                        using System;
                        
                        namespace _103_Применение_Строк_в_Операторах_Switch
                        { // Продемонстрировать управление оператором switch посредством строк
                            class StringSwitch
                            {
                                static void Main()
                                {
                                    string[] strs = { "один", "два", "три", "два", "один" };
                        
                                    foreach (string s in strs)
                                    {
                                        switch (s)
                                        {
                                            case "один":
                                                Console.Write(1);
                                                break;
                                            case "два":
                                                Console.Write(2);
                                                break;
                                            case "три":
                                                Console.Write(3);
                                                break;
                                        }
                                    }
                                    Console.WriteLine();
                                }
                            }
                        }
                        ```
                        
                    - Блоки кода пустые
                        
                        ```csharp
                        
                        ```
                        
                - ************Тезисы************
                    
                    if (условие) оператор;
                    
                    for (инициализация; условие; итерация) оператор;
                    
                    count = count + 1; ⇒ count++;
                    count = count - 1; ⇒ count—;
                    
                    - ******************************Оператор switch******************************
                        
                        ```csharp
                        switch (выражение)
                        {
                        	case константа1:
                        		последовательность операторов
                        		break;
                        	case константа2:
                        		последовательность операторов
                        		break;
                        	case константа 3:
                        		последовательность операторов
                        		break;
                        	...
                        	default:
                        		последовательность операторов
                        		break;
                        }
                        ```
                        
                    - ****************Цикл for****************
                        
                        ```csharp
                        for (инициализация; условие; итерация)
                        {
                        	последовательность операторов;
                        }
                        ```
                        
                    - ****************************************Оператор цикла while****************************************
                        
                        `while (условие) оператор;`
                        
                    - **********************************************Оператор цикла do-while**********************************************
                        
                        ```csharp
                        do 
                        {
                        	операторы
                        }
                        while ( условие );
                        ```
                        
                    - ************************************************************Общая форма определения класса************************************************************
                        
                        ```csharp
                        class имя_класса
                        {
                        	// Объявление переменных экземпляра.
                        	доступ тип переменная1;
                        	доступ тип переменная2;
                        	//...
                        	доступ тип переменнаяN;
                        
                        	// Объявление методов.
                        	доступ возвращаемый_тип метод1 (параметры)
                        	{
                        		// тело метода
                        	}
                        	доступ возвращаемый_тип метод2 (параметры)
                        	{
                        		// тело метода
                        	}
                        		// ...
                        	доступ возвращаемый_тип методы (параметры)
                        	{
                        		// тело метода
                        	}
                        }
                        
                        class Building
                        {
                        	public int Floors;    // количество этажей
                        	public int Area;      // общай площадь здания
                        	public int Occupants; // количество жильцов
                        
                        	Building house = new Building(); // создать объект типа Building
                        	
                        	// объект.член
                        	house.Floors = 2;
                        
                        	Building house; // объявить ссылку на объект
                        	house = new Building(); // распределить память для объекта типа Building
                        
                        	// Форма определения метода:
                        	доступ возвращаемый_тип имя (список_параметров)
                        	{	
                        		// тело метода
                        	}
                        }
                        ```
                        
                    - ************************************************************************Общая форма определения конструктора и деструктора************************************************************************
                        
                        ```csharp
                        доступ имя_класса(список_параметров)
                        {
                        	// тело конструктора
                        }
                        
                        ********************************new Оператор********************************
                        new имя_класса(список_аргументов)
                        
                        ~имя_класса()
                        {
                        	// код деструктора
                        }
                        ```
                        
                    - **************Массивы**************
                        
                        ```csharp
                        тип[] имя_массива = new тип[размер]
                        тип[] имя_массива = {val1, val2, val3, ..., valN};
                        [,..., ] имя_массива = new тип[размер1, размер 2, ..., размерN];
                        int[,,] multidim = new int[4, 10, 3];
                        	multidim[2, 4, 1] = 100;
                        
                        тип[,] имя_массива = 
                        {
                        	{val, val, val, ...,val,},
                        	{val, val, val, ...,val,},
                        							...
                        	{val, val, val, ...,val,}
                        };
                        
                        ************************************************************Ступенчатые (Зубчатые) Массивы************************************************************
                        тип[][] имя_массива = new тип[размер][];
                        
                        int[][] jagged = new int[3][];
                        jagged[0] = new int[4];
                        jagged[1] = new int[3];
                        jagged[2] = new int[5];
                        
                        foreach (тип имя_переменной_цикла in коллекция) оператор;
                        ```
                        
                    - ************Строки************
                        
                        ```jsx
                        string Substring(int индекс_начала, int длина)
                        Индекс_начала - начальный индекс исходной строки
                        Длина - длина выбираемой подстроки
                        ```
                        
                - ******************************Ожидания, Мысли******************************
                    
                    **Глава 8**. Подробнее о методах и классах - 60 страниц и 37 программ
                    Ожидаю узнать о методах и классах, что позволит глубже погрузиться в изучение C#.
                    Планирую изучить Главу за неделю (к 12.11.23). Можно и быстрее, но есть другие материалы.
                    
            
            [C#7.0 Карманный справочник](https://www.notion.so/C-7-0-1b6ac268b0b2487994aa178d2a9af44e?pvs=21)
            
            [********************************************************Язык программирования С#7. Троелсен Э., Джепикс Ф. 21.09.23 -******************************************************** ](https://www.notion.so/7-21-09-23-f34c8792204e4eab8b2e8694b5ce13b1?pvs=21)
            
            [**C# для школьников. Мартин Дрейер. Изучение книги 17.09.23 -** ](https://www.notion.so/C-17-09-23-0f95deb271b64e73a310009881690e27?pvs=21)
            
            [**C# программирование. Джеффри Рихтер. Изучение книги 17.09.23 -** ](https://www.notion.so/C-17-09-23-aabc3f6eb55d41c5b6703bca7c51f556?pvs=21)
            
        - ******************Что необходимо для написания программ на языке C#******************
            1. Пакет Microsoft .NET Framework
            http://msdn.microsoft.com/ru-ru/netframework/aa569263.aspx.
            2. Среда разработки для .Net Framework. Среда разработки нужна для того, чтобы сделать процесс работы максимально удобным - Microsoft Visual C#
            http://www.microsoft.com/rus/express/vcsharp.
            3. И наконец, нужно скопировать файлы примеров на диск своего компьютера. Распакуйте архив и сохраните его содержимое в любой папке и запомните, где она расположена - находящиеся в ней файлы вам понадобятся позже
            http://intuit.ru/software/school/cs2kids/examples.zip
    - ******C++******
        - **********Видео**********
            
            [Курс по С++](https://www.youtube.com/watch?v=kRcbYLK3OnQ&list=PLQOaTSbfxUtCrKs0nicOg2npJQYSPGO9r&pp=iAQB) для начинающих
            
        - **********Книги**********
    - ************Python************
        - ********************************Основные моменты********************************
            - ********База********
                - Что самое важное в языке? - **Объекты**
                - Главная идея - **Все сущности - Объекты**
                - Объект - это экземпляр Класса
                - **Класс - это шаблон или прототип для создания Объектов.** 
                На основании одного Класса можно создавать много разных Объектов.
                - **У каждого Объекта есть Атрибуты**
                - **Атрибут Объекта называется Методом, если его значение - ФУНКЦИЯ**.
                - Отличие **Списка** от **Словаря** в том, что в Списке просто перечислены элементы, а в Словаре - пары “Ключ : Значение”.
                И в Словарях и в Списках может быть любое количество элементов
                - **[Стандарты РЕР8](https://peps.python.org/)**
            - **Строки**
                - [Возможности f-строк](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals)
            - **[Материал](https://docs.python.org/3/tutorial/controlflow.html#match-statements) об операторе match, который используется для проверки шаблона**
            - **Встроенные функции**
                
                `print("Hello Python") 
                type(), id (), len(), sum(), input()
                round(), min(), max(), int(), str(), bool()`
                и много-много других
                
                - Функция **dir** и атрибуты объектов
                    
                    С помощью этой функции можно получить названия всех атрибутов того или иного объекта.
                    На примере функция отображаем имена всех атрибутов объекта “Строка” (name).
                    
                    ```csharp
                    name = 'Bogdan'
                    print(dir(name))
                    	РЕЗУЛЬТАТ:
                    ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', 
                    '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', 
                    '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', 
                    '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', 
                    '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 
                    'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 
                    'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 
                    'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 
                    'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 
                    'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 
                    'upper', 'zfill']
                    
                    **************Как вызывать данные методы? Очень просто - используем ТОЧКУ:
                    name = 'Bogdan'
                    print(name.upper())**************
                    ```
                    
            - **Все доступные встроенные функции и их [описание](https://docs.python.org/3/library/functions.html)**
            - **Свои функции**
                - С помощью ключевого слова **def** мы можем создавать свои собственные функции
                У каждой функции есть Имя и Тело (набор строк, который выполняется при каждом вызове функции
                Также есть Параметры, которые находятся в круглых скобках.
                Возврат результата (ключевое слово - **return**).
            - **********************************************Инструкции (Statements)**********************************************
                
                Инструкция выполняет **Действие** 
                
                ```python
                my_name = 'Bogdan' # Присвоение значения
                # Условная инструкция
                if my_name:
                		print(my_name)
                # Импортирование модуля
                import datetime
                ```
                
        - **[Курс от Академии Яндекса](https://education.yandex.ru/handbook/python)**
            - **Введение**
                
                Хендбук поможет овладеть основным синтаксисом и принципами языка.
                Для этого не потребуется специальной подготовки - достаточно знаний по информатике, логике и математике на уровне школьной программы. Кроме основных конструкций в учебнике рассмотрены разные подходы к программированию.
                В последней главе вы прикоснетесь к главной суперсиле языка - большому количеству прикладных библиотек.
                
                Python - интерпретируемый язык, поэтому для запуска программы требуется программа - **интерпретатор**.
                
            - ********************Блоки кода********************
                - **Задачи**
                    - 001_Привет, Яндекс!
                        
                        **Задача**: 
                        Когда мы приходим на встречу, то первым делом здороваемся. Давайте тоже поприветствуем Яндекс.
                        **Формат вывода:** Одна строка: “Привет, Яндекс!”
                        
                        ```csharp
                        print("Привет, Яндекс!")
                        ```
                        
                    - 002_Привет, всем!
                        
                        **Формат ввода:** Одна строка - имя пользователя программы
                        **Формат вывода:** В первой строке написан вопрос “Как Вас зовут?”.
                        Во второй строке - приветствие пользователя: “Привет %username%”.
                        
                        ```csharp
                        username = input("Как тебя зовут?\n")
                        print("Привет, " + username + ".")
                        ```
                        
                    - 003_Излишняя автоматизация
                        
                        **Ввод:** Одна строка - весьма полезная информация
                        
                        **Вывод:** Трижды повторенная весьма полезная информация
                        
                        ```csharp
                        txt = "2 x 2 = 4\n"
                        print(txt * 3)
                        
                        txt = input("Введи ценную информацию: ")
                        print((txt + "\n") * 3)
                        ```
                        
                    - 004_Сдача
                        
                        **Задача**: 
                        Чаще всего автоматизация идет на пользу.
                        Одна из задач, в которой лучше исключить человеческий фактор - подсчет сдачи.
                        Определите, какую сдачу нужно выдать тому, кто купил 2,5кг черешни по цене 38 руб/кг. 
                        
                        **Формат ввода:** Одно натуральное число - номинал купюры пользователя (≥ 100)
                        **Формат вывода:** Одно натуральное число - размер сдачи
                        
                        ```csharp
                        money = int(input())
                        amount = int(2.5 * 38)
                        print(money - amount)
                        ```
                        
                    - 005_Магазин
                        
                        **Задача**: 
                        Кроме черешни в магазине продается множество других товаров, которые продаются на развес.
                        Давайте автоматизируем расчет сдачи и для них!
                        
                        **Формат ввода:** 
                        Три натуральных числа:
                         - цена товара
                         - вес товара
                         - количество денег у пользователя
                        **Формат вывода:** Одно целое число - сдача, которую требуется отдать пользователю
                        
                        ```csharp
                        Мое решение:
                        price = int(input("Введите цену товара: "))
                        weight = int(input("Введите вес товара: "))
                        money = int(input("Количество денег у пользователя: "))
                        amount = money - price * weight
                        print(amount)
                        ```
                        
                        ```csharp
                        price = int(input())
                        weight = int(input())
                        money = int(input())
                        print(money - price * weight)
                        ```
                        
                    - 006_Чек
                        
                        **Задача**: 
                        Сдачу посчитать, конечно, все могут, но красивый чек напечатать - не так просто.
                        
                        **Формат ввода:** 
                         - Название товара
                         - Цена товара
                         - Вес товара
                         - Количество денег у пользователя
                        **Формат вывода:** 
                        Чек
                        <название товара> - <вес>кг - <цена>руб/кг 
                        Итого:<итоговая стоимость>руб
                        Внесено:<количество денег от пользователя>руб
                        Сдача:<сдача>руб
                        
                        ```csharp
                        Мое решение:
                        good = input("Название товара: ")
                        height = int(input("вес: "))
                        price = int(input("цена: "))
                        money = int(input("Внесено: "))
                        amount = height * price
                        money_back = money - amount
                        
                        print("Чек")
                        print(f"{good} - {height}кг - {price}руб/кг")
                        print(f"Итого: {amount}руб")
                        print(f"Внесено: {money}руб")
                        print(f"Сдача: {money_back}руб")
                        ```
                        
                        ```csharp
                        name = input()
                        price = int(input())
                        weight = int(input())
                        money = int(input())
                        print("Чек")
                        print(name, "-", str(weight) + "кг -", str(price) + "руб/кг")
                        print("Итого:", str(weight * price) + "руб")
                        print("Внесено:", str(money) + "руб")
                        print("Сдача:", str(money - weight * price) + "руб")
                        ```
                        
                    - 007_Делу - время, потехе - час
                        
                        **Задача**: 
                        Давайте передохнем от автоматизации и сделаем что-то действительно интересное
                        
                        **Формат ввода:** Одно натуральное число N
                        **Формат вывода:** N строк с фразой: “Купи слона!”
                        
                        ```csharp
                        N = int(input())
                        print("Купи слона!\n" * N)
                        ```
                        
                    - 008_Наказание
                        
                        **Задача**: 
                        Наше развлечение не осталось незамеченным… И наказание нам выбрали соответствующее.
                        
                        **Формат ввода:** 
                        В первой строке записано одно натуральное число N
                        Во второй строке записана часть наказания.
                        **Формат вывода:** 
                        N строк вида: Я больше никогда не буду писать “<часть наказания>”!
                        
                        ```csharp
                        N = int(input())
                        string = input()
                        print(("Я больше никогда не буду писать \"" + string + "\"" + "!""\n") * N)
                        ```
                        
                    - 009_Деловая колбаса
                        
                        **Задача**: 
                        Настало время для действительно серьезных задач…
                        В детском саду 2 ребенка съедают 2 куска колбасы за 2 минуты.
                        Сколько кусков колбасы за N минут съедят M детей?
                        
                        **Формат ввода:**
                        В первой строке записано натуральное число N≥ 1
                        Во второй строке записано натуральное число M ≥ 1
                        **Формат вывода:** 
                        Одно натуральное число - количество кусков колбасы, съеденных детьми.
                        **********************Примечание:**********************
                        Гарантируется, что в результате вычислений будет получено натуральное число.
                        
                        ```csharp
                        N = int(input())  # minutes
                        M = int(input())  # children
                        pieces_of_sausage = int(M * N / 2)
                        print(pieces_of_sausage)
                        ```
                        
                    - 010_Детский сад - штаны на лямках
                        
                        **Задача**: 
                        В продолжение темы детского сада давайте и там что-нибудь автоматизируем.
                        За каждым ребенком закреплен шкафчик и кровать. Номер шкафчика состоит из трех цифр:
                         - номер группы в саду
                         - номер кроватки закрепленной за ребенком
                         - порядковый номер ребенка в списке группы.
                        Воспитатель просит сделать программу, которая по имени ребенка и номеру его шкафчика формирует “красивую” карточку для личного дела.
                        **Формат ввода:** 
                        В первой строке записано имя ребенка
                        Во второй строке записан номер шкафчика
                        **Формат вывода:** 
                        Карточка в виде::
                        Группа №<номер группы>.
                        <номер ребенка в списке>. <имя ребенка>.
                        Шкафчик: <номер шкафчика>.
                        Кроватка: <номер кроватки>.
                        
                        ```csharp
                        name = input()
                        number = int(input())
                        group = number // 100
                        list = number % 10
                        bed = number // 10 - number // 100 * 10
                        
                        print("Группа №" + str(group))
                        print(str(list) + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + str(bed) + ".")
                        
                        name = input()
                        number = int(input())
                        group = str(number // 100)
                        list = str(number % 10)
                        bed = str(number // 10 - number // 100 * 10)
                        
                        print("Группа №" + group)
                        print(list + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + bed + ".")
                        
                        name = input()
                        number = int(input())
                        print("Группа №" + str(number // 100)
                        print(str(number % 10) + ". " + name)
                        print("Шкафчик: " + str(number) + ".")
                        print("Кроватка: " + str(number // 10 - number // 100 * 10) + ".")
                        
                        name = input()
                        number = int(input())
                        print(f"Группа №{number // 100}.")
                        print(f"{number % 10}. {name}".)
                        print(f"Шкафчик: {number}.")
                        print(f"Кроватка: {number // 10 - number // 100 * 10}.")
                        ```
                        
                    - 011_Автоматизация игры
                        
                        **Задача**: 
                        Все в том же детском саду ребята очень любят играть с цифрами.
                        Одна из таких игр - перестановка цифр четырехзначного числа.
                        Напишите программу для робота-няни, которая из числа **********abcd**********  составляет число **********badc.**********
                        **Формат ввода:** 
                        Одно четырехзначное число
                        **Формат вывода:** 
                        Одно четырехзначное число - результат перестановки
                        
                        ```csharp
                        abcd = int(input())
                        a = str(abcd // 1000)
                        b = str(abcd // 100 - abcd // 1000 * 10)
                        c = str(abcd // 10 - abcd // 100 * 10)
                        d = str(abcd % 10)
                        print(b + a + d + c)
                        
                        abcd = input()
                        print(abcd[1] + abcd[0] + abcd[3] + abcd[2])
                        ```
                        
                    - 012_Интересное сложение
                        
                        **Задача**: 
                        Один малыш из детского сада услышал от старшей сестры о некоем действии с числами - сложении.
                        И как это часто бывает - он не до конца разобрался, как работает сложение. Например, не совсем понял, как произвести перенос разряда.
                        Теперь он хочет научить сложению остальных ребят и просит написать программу, которая поможет ему в качестве наглядного материала.
                        **Формат ввода:** 
                        В первой и второй строках записаны натуральные числа меньше 1000
                        **Формат вывода:** 
                        Одно число - результат сложения введенных чисел без учета переносов.
                        
                        ```csharp
                        num1 = int(input())
                        num2 = int(input())
                        
                        digit1_num1 = num1 % 10
                        digit1_num2 = num2 % 10
                        sum1 = (digit1_num1 + digit1_num2) % 10
                        
                        digit2_num1 = num1 // 10 - num1 // 100 * 10
                        digit2_num2 = num2 // 10 - num2 // 100 * 10
                        sum2 = (digit2_num1 + digit2_num2) % 10
                        
                        digit3_num1 = num1 // 100
                        digit3_num2 = num2 // 100
                        sum3 = (digit3_num1 + digit3_num2) % 10
                        
                        print(str(sum3) + str(sum2) + str(sum1))
                        ```
                        
                    - 013_Дед Мороз и конфеты
                        
                        **Задача**: 
                        Настало самое главное событие в детском саду - новогодний утренник.
                        Хорошо замаскированная робоняня в роли Деда Мороза решила раздать детям конфеты так, чтобы каждому досталось поровну.
                        Напишите для робоняни алгоритм, который поможет распределить конфеты.
                        **Формат ввода:** 
                        В первой строке указано количество детей на утреннике.
                        Во второй строке - количество конфет в конфетном отсеке робоняни.
                        **Формат вывода:** 
                        Сначала выведите количество конфет, которое выдано каждому ребенку, а затем количество конфет, что осталось в конфетном отсеке.
                        
                        ```csharp
                        red = int(input())
                        green = int(input())
                        blue = int(input())
                        
                        count = red + blue + 1
                        print(count)
                        ```
                        
                    - 014_Шарики и ручки
                        
                        **Задача**: 
                        Иногда ребята в детском саду скучают, поэтому они постоянно придумывают себе не очень сложные, но веселые по их мнению, игры.
                        В группе есть ящик с шариками, количество которых детям заранее неизвестно, следующих цветов:
                         - красный
                         - зеленый
                         - синий
                        Игра заключается в том, что каждый ребенок подходит к ящику и, не глядя, вытаскивает один шарим, победителем считается тот, кто первым вытащит зеленый шарик.
                        Как вы думаете, через какое максимальное количество ходов дети выяснять победителя игры?
                        **Формат ввода:** 
                        Три натуральных числа, каждое на новой строке (количество красных, зеленых и синих шаров соответственно).
                        **Формат вывода:** 
                        Одно число - максимальное количество ходов, которое потребуется для определения победителя.
                        
                        ```csharp
                        red = int(input())
                        green = int(input())
                        blue = int(input())
                        
                        count = red + blue + 1
                        print(count)
                        ```
                        
                    - 015_В ожидании доставки
                        
                        **Задача**: 
                        Сегодня в N часов M минут хозяин магазина заказал доставку нового товара. Оператор сказал, что продукты доставят через T минут. 
                        Сколько будет времени на электронных часах, когда привезут долгожданные продукты?
                        **Формат ввода:** 
                        В первой строке записано натуральное число N (0 ≤ N < 24).
                        Во второй строке записано натуральное число M (0 ≤ M < 60).
                        В третьей строке записано натуральное число T (30 ≤ T < 10^9).
                        **Формат вывода:** 
                        Одна строка, представляющая циферблат электронных часов.
                        
                        ```csharp
                        n = int(input())  # hours
                        m = int(input())  # minutes
                        t = int(input())  # delivery
                        
                        time_hours_digit2 = ((n + (t + m) // 60) % 24) // 10
                        time_hours_digit1 = ((n + (t + m) // 60) % 24) % 10
                        time_minutes_digit2 = ((m + t) % 60) // 10
                        time_minutes_digit1 = ((m + t) % 60) % 10
                        
                        print(str(time_hours_digit2) + str(time_hours_digit1) + 
                              ":" + str(time_minutes_digit2) + str(time_minutes_digit1))
                        ```
                        
                    - 016_Доставка
                        
                        **Задача**: 
                        Продуктовый склад и магазин находятся на одной дороге города Н.
                        Склад находится на отметке А км, а магазин - В км. 
                        Средняя скорость автомобиля, доставляющего товары, С км/ч.
                        За какое время продукты попадают со склада в магазин?
                        **Формат ввода:** 
                        Три натуральных числа А, В и С, каждое на отдельной строке.
                        **Формат вывода:** 
                        Одно рациональное число с точностью до сотых.
                        
                        ```csharp
                        a = int(input())  # store
                        b = int(input())  # shop
                        c = int(input())  # speed
                        
                        t = float((b - a) / c)
                        print(round(t, 2))
                        ```
                        
                    - 017_Ошибка кассового аппарата
                        
                        **Задача**: 
                        Мы уже помогали магазину с расчетами и формированием чеков, но сегодня кассовый аппарат вместо привычных продавцу десятичных чисел начал выдавать двоичные.
                        Техподдержка приедет только завтра, а магазин должен продолжать работать. Надо помочь.
                        **Формат ввода:** 
                        В первой строке записано десятичное число - общая сумма купленных в магазине товаров на данный момент.
                        Во второй строке указано двоичное число - сумма за последнюю покупку.
                        **Формат вывода:** 
                        Одно десятичное число - сумма прибыли за день с учетом последней покупки.
                        
                        ```csharp
                        amount_dec = int(input())
                        sum_last = str(input())
                        sum_last_bin = str("0b" + sum_last)
                        
                        sum_last_int = int(sum_last_bin, 2)
                        amount_day = sum_last_int + amount_dec
                        print(amount_day)
                        ```
                        
                    - 018_Сдача 10
                        
                        **Задача**: 
                        Кстати, несмотря на ошибку аппарата, сдачу тоже нужно отдавать
                        **Формат ввода:** 
                        Цена покупки - двоичное число, выданное кассовым аппаратом.
                        Номинал купюры пользователя - десятичное число
                        **Формат вывода:** 
                        Одно десятичное число - сдача, которую потребуется отдать пользователю
                        **Примечание**: 
                        Все числа, используемые в задаче - целые
                        
                        ```csharp
                        price = input()
                        money = int(input())
                        
                        price_bin = str("0b" + price)
                        price_dec = int(price_bin, 2)
                        money_back = money - price_dec
                        
                        print(money_back)
                        ```
                        
                    - 019_Украшение чека
                        
                        **Задача**: 
                        Давайте приведем в порядок чек, который печатали ранее.
                        Все строки должны быть длиной в 35 символов
                        **Формат ввода:** 
                         - Название товара
                         - Цена товара
                         - Вес товара
                         - Количество денег у пользователя
                        **Формат вывода:** 
                        Красивый чек в формате:
                        ================Чек=================
                        Товар:                                                           <продукт>
                        Цена:                               <число>кг * <число>руб/кг
                        Итого:                                                        <число>руб
                        Внесено:                                                    <число>руб
                        Сдача:                                                        <число>руб
                        ===================================
                        **Примечание**: 
                        В данный момент примеры ниже визуализируются неправильно
                        
                        ```csharp
                        name = input()
                        price_name = int(input())
                        weight = int(input())
                        money = int(input())
                        
                        count = price_name * weight
                        money_back = money - count
                        
                        print(str("=" * 16 + "Чек" + "=" * 16))
                        print(f"Товар:{name:>29}")
                        s = str(weight) + "кг" + " * " + str(price_name)+ "руб/кг"
                        print("Цена:" + " " * (35 - 5 - len(s)) + s)
                        print(f"Итого:{count:>26}руб")
                        print(f"Внесено:{money:>24}руб")
                        print(f"Сдача:{money_back:26}руб")
                        print(str("=" * 35))
                        ```
                        
                    - 020_Мухи отдельно, котлеты отдельно
                        
                        **Задача**: 
                        Вернемся в магазин, хозяин которого уже привык полагаться на всемогущую автоматизацию.
                        Помогите ему разобраться с одной проблемой. Далее его история:
                        ”Пару дней назад я купил две партии котлет и по случайности высыпал их на один прилавок. Общий вес котлет составил N килограмм, а ценник - M рублей за килограмм.
                        Сегодня я обнаружил, что накладные на эти виды котлет потерялись, но я помню, что первый вид котлет стоил K1 рублей за килограмм, а второй - K2.
                        Помогите мне вспомнить вес каждой партии котлет, чтобы поставить их на учет.
                        **Формат ввода:** 
                        В первой строке записано натуральное число N
                        Во второй строке - натуральное число M
                        В третьей строке - натуральное число K1
                        В четвертой строке - натуральное число K2
                        Причем доподлинно известно, что второй вид котлет стоит меньше, чем первый.
                        **Формат вывода:** 
                        Два натуральных числа, записанных через пробел - вес обеих партий котлет.
                        
                        ```csharp
                        n = int(input())
                        m = int(input())
                        k1 = int(input())
                        k2 = int(input())
                        x = n * (k2 - m)  // (k2 - k1)
                        print(x, n - x)
                        ```
                        
                - 001_Первая программа “Привет, Мир!” - от 15.11.2023
                    
                    ```csharp
                    print("Hi, Dudes and Mazafackaz!")
                    ```
                    
                - 002_Операции со строками
                    
                    ```csharp
                    name = "User"
                    print(f"Good day, {name}!") 
                    print("Гляди, йопт!:")
                    print(f"{123:0>9}")
                    print(f"{123:0<9}")
                    print(f"{123:0^9}")
                    
                    phrase = input("Ну-ка скажи че-нить?")
                    print(f"{phrase}  Это ты написал, не я!")
                    
                    print(ord("t"), ord("w"))  ==>  116 119  получение кодов символов
                    print(chr(116), chr(119))  ==>  t w      и наоборот
                    ```
                    
                - 
                
                ```python
                
                ```
                
            - **2.1 Ввод и вывод данных. Операции с числами, строками. Форматирование**
                
                В данном курсе мы будем писать программы без графического пользовательского интерфейса, т.е. без кнопок, текстовых полей ввода и тд.
                Программы будут принимать на вход данные от пользователя с клавиатуры (а чуть позже мы научимся работать с файловым вводом выводом), а выводить результат будут на экран.
                Все взаимодействие с программой будет происходить в командной строке или консоли.
                
                Внутри f-строк можно обращаться к переменным, используя фигурные скобки, а также производить операции, выполнять функции и подставлять их результаты в данную строку. И это только малая часть возможностей f-строк.
                Использование f-строк является приоритетным способом форматирования. Наряду с f-строками существует функция format(), которая также предназначена для удобного форматирования (мы рассмотрим ее чуть позже). Также форматирование строк может производиться с помощью символа %. 
                В строках можно применять управляющие символы, начинающиеся с символа бэкслэш \:
                
                - \n - переход на новую строку
                - \t - табуляция
                - \r - возврат каретки в начало строки
                - \b - возврат каретки на один символ
                
                Кроме того, с помощью бэкслэша можно экранировать символы, то есть делать их частью выводимой строки. Например, для вывода символа \ необходимо его экранировать самим собой: `print("\\")`
                
                В функции`print()` кроме параметра sep существует еще параметр `end`, который определяет символ в конце строки.
                Значение по умолчанию для него - переход на новую строку (`\n`). Если вывести строки с помощью нескольких использований функции `print(),` то вывод каждой из них будет осуществлен с новой строки: 
                
                ```csharp
                print("Привет, Пользователь!")
                print("Как дела?")
                
                Привет, Пользователь!
                Как дела?
                ```
                
                Над строками можно производить следующие операции: 
                
                - Сложение (конкатенация строк)
                - Умножение строки на целое число
                
                Результатом сложения строк будет новая строка, представляющая собой записанные последовательно складываемые строки (строки как бы склеиваются друг с другом, образуя новую строку)
                
                При умножении строки на целое число п получается новая строка, состоящая из п дублированной исходной строки.
                Например, выведем 10 символов - подряд: `print("-" * 10)`
                **Работа с числами**
                
                Для создания целочисленной переменной в программе достаточно назначить ей имя и присвоить целочисленное значение: `п = 10`
                По аналогии создаются вещественные числовые переменные, только в качестве разделителя целой и дробной частей используется десятичный разделитель “точка”: `pi = 3.14`
                Для преобразования строк в числа и наоборот используются следующие функции:
                
                - int() - преобразует строку (или вещественное число) в целое число. Дополнительно можно указать, в какой системе счисления было записано исходное число. По умолчанию используется десятичная система. При конвертации вещественного числа в целое отбрасывается дробная часть.
                - float() - преобразует строку (или целое число) в вещественное число
                - str() - преобразует значения (в общем случае не только числовые) в строки
                
                Рассмотрим несколько примеров применения этих функций
                
                ```csharp
                n_1 = "1"
                n_2 = "2"
                print(n_1 + n_2)
                n_1 = int(n_1)
                n_2 = int(n_2)
                Print(n_1 + n_2)
                В результате выполнения программы получим:
                12
                3
                ```
                
                Первый результат - результат сложения (конкатенации) двух строк. 
                Второй - результат сложения целых чисел, которые были преобразованы из строк функцией `int().`
                
                ```csharp
                x = 3.89
                x = int(x)
                print(x)
                ```
                
                Здесь программа выведет в консоли результат 3.
                Дробная часть после десятичного разделителя была отброшена при преобразовании в целое число.
                
                ```csharp
                width = "3.7"
                height = "2.5"
                s = float(width) * float(height)
                print(s)
                ```
                
                Программа выведет 9.25
                А чтобы вводить целые или вещественные числа с клавиатуры, можно использовать уже знакомую нам функцию input() в сочетании с функциями int() и float():
                
                ```csharp
                int_number = int(input())
                float_number = float(input())
                ```
                
                Для работы с числовыми переменными доступны следующие математические операции:
                
                - Сложение - x + y;
                - Вычитание - x - y;
                - Умножение - x * y;
                - Деление - x / y;
                - Возведение в степень x ** y
                
                Используем все эти операции в следующей программе:
                
                ```csharp
                n = 25
                x = 0.5
                print(n + x)
                print(n - x)
                print(n * x)
                print(n / x)
                print(n ** x)
                Вывод программы будет таким:
                25.5
                24.5
                12.5
                50.0
                5.0
                ```
                
                Необходимо учитывать, что если выполняется операция деления или хотя бы один из операндов является вещественным числом, то результат также будет вещественным.
                Например, выполнение следующего кода выведет на экран 2.0: `print(4 / 2)`
                Для округления вещественных чисел при выводе можно использовать уже известные нам f-строки. 
                Например, выведем квадратный корень из 2 с точностью 2 знака после запятой: `print(f"{2 ** 0/5:.2f}")`
                Для целых чисел дополнительно доступны операции:
                
                - целочисленное деление - x // y;
                - остаток от деления - x % y.
                
                Эти операции можно использовать, например, для получения определенных цифр числа. 
                Получим последнюю цифру числа 1234 (т.е. остаток от деления на 10):
                `last_digit = 1234 % 10`
                Для получения предпоследней цифры нужно “отрезать” последнюю цифру целочисленным делением на 10, а затем у нового числа найти последнюю цифру - уже известным способом:
                `penultimate_digit = 1234 // 10 % 10`
                
            - **2.2 Условный оператор**
                
                ```python
                yesterday_temp = int(input())
                today_temp = int(input())
                if today_temp > yesterday_temp:
                    print("Today is warmer than yesterday")
                elif today_temp < yesterday_temp:
                    print("Today is colder than yesterday")
                else:
                    print("Today such temperature as yesterday")
                
                В качестве условия может выступать результат операции сравнения:
                 - > - больше
                 - >= - больше или равно
                 - < - меньше
                 - <= - меньше или равно
                 - == - равно
                 - != - не равно
                
                 - and - логическое И для двух суловий. Возвращает True, если оба условия истинны, иначе False
                 - or - логическое ИЛИ для двух условий. Возвращает False, если оба условия ложны, иначе True
                 - not - логическое НЕ для одного условия. Возвращает False для истинного условия, и наоборот.
                ```
                
                ```python
                print("Enter first and last letters of english alphabet")
                first_letter = input()
                last_letter = input()
                if (first_letter == "a" or first_letter == "A") and (
                    last_letter == "z" or last_letter == "Z"):
                    print("That's right, homie!")
                else:
                    print("Wrong, babe")
                ```
                
                ```python
                В логическом операторе можно использовать двойное неравенство:
                if x >= 0 and x < 100 ==> if 0 <= x < 100: ...
                
                text = input()
                if "добр" in text:
                    print("Встретилось 'доброе' слово.")
                else:
                    print("Добрых слов не найдено")
                
                color = input()
                match color:
                    case 'red' | 'yellow':
                        print('Stop!')
                    case 'green':
                        print('You can go!')
                    case _:
                        print('Incorrect input')
                ```
                
                В версии 3.10 языка появился оператор match. В простейшем случае он последовательно сравнивает значение выражения с заранее заданными в операторах case. А затем выполняет код в операторе case, значение в котором соответствует проверяемому. Выше описана программа, которая сравнивает значение текущего сигнала светофора с одним из трех вариантов.
                Обратите внимание, что для проверки выполнения условия ИЛИ в операторе case не используется логическая операция or. Ее нельзя использовать, поскольку она применяется для переменных логического типа, а в примере перечисляются значения-строки. Вместо нее мы используем специальных оператор |.
                Последний оператор case выполняется всегда и сработает в случае, если ни одно из предыдущих условий не сработало. Оператор match похож на оператор switch других языков программирования -  C++, JavaScript и т.д.
                     Рассмотрим некоторые полезные встроенные функции.
                 - Для определения длины строки (а также других коллекций) используется функция len().
                 - Для определения максимального и минимального из нескольких значений (не только числовых) используются функции max() и min() соответственно.
                 - Функция abs() используется для определения модуля числа.
                
                Рассмотрим применение встроенных функций в следующем примере. Обратите внимание на строки, начинающиеся со знака #. Так в Python обозначаются комментарии - линии, которые не выполняются интерпретатором, а служат для пояснения кода. 
                
                ```python
                m = 12
                n = 19
                k = 25
                
                print(max(m, n, k))  # max number
                
                line_1 = "m"
                line_2 = "n"
                line_3 = "k"
                
                print (min(line_1, line_2, line_3))  # min string
                print(len(str(2 ** 2023)))  # amount of digits in number 2 in 2023 degree
                ```
                
                ```python
                
                ```
                
            - **2.3 Циклы**
                
                ```python
                saved_pwd = "right_password"
                pwd = input("Enter the password: ")
                while pwd != saved_pwd:
                    pwd = input("Enter the password: ")
                print("Password right! Access allowed!")
                ```
                
                Обратите внимание, что внутри тела цикла в примере ниже использована пустая инструкция pass.
                Она ничего не делает в программе и нужна для соответствия кода синтаксису языка, т.к. тело цикла не может быть пустым (иначе будет синтаксическая ошибка и программа не будет работать. 
                
                ```python
                saved_pwd = "right_password"
                while input("Enter the password: ") != saved_pwd:
                    pass
                print("Password is right! Access allowed!")
                ```
                
                В версии 3.8 появился **моржовый оператор** (walrus operator). Он записывается как := и позволяет одновременно вычислить выражение, присвоить результат переменной и вернуть это значение, например, в условие.
                Давайте напишем программу, которая будет здороваться со всеми людьми, чьи имена введет пользователь. Сигнал для остановки - ввод строки “СТОП”:
                
                ```python
                name = input("Enter your name: ")
                while name != "STOP":
                    print(f"Hello, {name}!")
                    name = input("Enter your name: ")
                print("Program is over!")
                А теперь перепишем эту программу с использованием моржового оператора:
                while (name := input("Enter your name: ")) != "STOP":
                    print(f"Hello, {name}!")
                print("Program is over!")
                ```
                
                Благодаря моржовому оператору из программы были убраны строки, в которых считывалось имя первый раз до цикла, а также в теле цикла. 
                Теперь имя считывается только непосредственно на этапе проверки, выполняется ли условие продолжения цикла.
                     Итак, цикл while обычно применяется в тех случаях, когда заранее не известно, сколько итераций будет выполнено, но известно условие, при котором цикл продолжает работу.
                Если количество итераций заранее известно, то предпочтительнее использовать цикл for. Он применяется совместно с итерируемой переменной. Очень часто ей дают имя i и используют в теле цикла, а ее значение изменяется на каждой итерации в соответствии с диапазоном, заданным функцией range().
                Функция range() может принимать от одного до трех целочисленных аргументов:
                 - range(n) -  возвращает диапазон целых чисел от 0 до n - 1. Например, range(4) вернет диапазон целых чисел: 0, 1, 2, 3
                 - range(k, n) - возвращает диапазон целых чисел от k до n - 1. Например, range(1, 5) вернет диапазон целых чисел : 1, 2, 3, 4
                 - range(k, n, s) - возвращает диапазон целых чисел от k до n - 1 с шагом s. Например, range(1, 10, 2) вернет диапазон целых чисел: 1, 3, 5, 7, 9 
                Выведем на экран n целых чисел, начиная с 0 (n вводится пользователем):
                
                ```python
                n = int(input("Enter amount of numbers: "))
                for i in range(n):
                    print(i)
                Выведем на экран целые числа в диапазоне от k до n - 1 (k, n вводятся пользователем):
                k = int(input("Enter the begining of scope: "))
                n = int(input("Enter the end (without exception) of scope: "))
                for i in range(k, n):
                    print(i)
                Выведем на экран все целые четные числа в диапазоне от 0 до n (n вводится пользователем):
                n = int(input("Enter the end of scope: "))
                for i in range(0, n + 1, 2):
                    print(i)
                Используя в функции range() отрицательный шаг, можно запустить цикл в обратном порядке:
                n = int(input("Enter the amount of numbers: "))
                for i in range(n, -1, -1):
                    print(i)
                ```
                
                Обратите внимание: изменение значения итерируемой переменной внутри тела цикла не имеет смысла, т.к. будет перезаписано на следующей итерации очередным значением из диапазона функции range(). Например, следующий код по-прежнему выведет числа от 0 до n - 1, несмотря на изменение значения итерируемой переменной в теле цикла:
                
                ```python
                n = int(input("Enter n: "))
                for i in range(n):
                    print(i)
                    i = 100
                ```
                
            - **2.4 Вложенные циклы**
                
                Давайте рассмотрим следующую задачу: требуется сгенерировать все возможные комбинации строчных букв английского алфавита длиной четыре символа. Вот как можно решить эту задачу:
                
                ```python
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                print(f"{chr(ord('a') + i)}{chr(ord('a') + j)}{chr(ord('a') + 
                                k)}{chr(ord('a') + l)}")
                ```
                
                Задача решена полным перебором букв алфавита. В начале программы запускается внешний цикл, который отвечает за генерацию первой буквы. Внешний цикл фиксирует очередное значение итерируемой переменной - это будет смещение в алфавите относительно начальной буквы.
                     Далее запускается внутренний цикл, отвечающий за генерацию второй буквы.
                Процесс повторяется, пока все свои итерации не совершит внешний цикл. Внутри функции print() использованы известные нам функции chr() и ord(). Функция ord() использована для возврата кода начальной буквы алфавита (а), к нему прибавляется текущее смещение, задаваемое итерируемыми переменными i и j. А далее для полученных кодов функция chr() возвращает буквы.
                     Циклы могут иметь любую степень вложенности. Однако не стоит этим злоупотреблять, т.к. работа программы существенно замедляется и О-большое растет.
                
                Циклы for и while можно останавливать при наступлении определенного условия. Для этого используется оператор break. Рассмотрим следующий пример:
                
                ```python
                password = "right_password"
                while True:
                    if input("Enter the password: ") == password:
                        print("Access is allowed!")
                        break
                ```
                
                В примере мы запускаем бесконечный цикл, в котором просим пользователя ввести пароль и сравниваем результат с верным паролем. В случае если введенный пароль совпал с верным, то выводим фразу “Пароль принимается” и останавливаем цикл.
                     Так как операторов break в цикле может быть много, анализировать такие программы становится тяжело из-за того, что сложно сказать, где будет точка выхода из цикла для разных входных данных. Поэтому использованием данного оператора лучше не злоупотреблять.
                     При использовании оператора break во вложенных циклах он останавливает только тот цикл, в котором непосредственно вызывается. Дополним первый пример с генерацией строк условием: сгенерировать последовательно строки по алфавиту до строки auff: 
                
                ```python
                flag = False
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                text = f"{chr(ord('a') + i)}{chr(ord('a') + j)}{chr(ord('a') +
                                k)}{chr(ord('a') + l)}"
                                if text == "auff":
                                    print(text)
                                    flag = True
                                    break
                                print(text)
                            if flag:
                                break
                        if flag:
                            break
                    if flag:
                        break
                ```
                
                Обычно флаг устанавливают в начальное значение False (флаг опущен), а при выполнении какого-то условия в программе флаг устанавливают в значение True (флаг поднят). При генерации комбинации “auff” происходит вывод этой комбинации, “поднятие” флага и остановка внутреннего цикла. После завершения внутреннего цикла происходит проверка состояния флага, и если флаг поднят, то останавливается и внешний цикл.
                В циклах for и while можно останавливать текущую итерацию и переходить к следующей с помощью оператора continue. При использовании вложенных циклов оператор continue действует только на тот цикл, в котором непосредственно находится.
                Перепишем программу из первого примера так, чтобы не выводить комбинации с одинаковыми буквами (aaaa, bbbb и т.д.)
                
                ```python
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                if i == j == k == l:
                                    continue
                                print(f"{chr(ord('a')+ i)}{chr(ord('a') + j)}{chr(ord('a') + 
                                k)}{chr(ord('a') + l)}")
                Как уже было сказано, не стоит злоупотребять операторами breаk и continue. На самом деле последнюю программу можно
                написать проще, без использования оператора continue:
                for i in range(26):
                    for j in range(26):
                        for k in range(26):
                            for l in range(26):
                                if i != j != k != l:
                                    print(f"{chr(ord('a') + i)}{chr(ord('a') + 
                                    j)}{chr(ord('a') + k)}{chr(ord('a') + l)}")
                В циклах while и for можно использовать оператор else. Записанный в нем код будет выполняться, когда для
                цикла while нарушится условие продолжения, а для цикла for закончатся итерации. Напишем программу, которая
                будет считывать строки, пока пользователь не введет "СТОП":
                
                while input("Enter string (STOP to discontinue): ") != "STOP":
                    pass
                else:
                    print("Cycle is over!")
                После завершения цикла сработает оператор else, и код внутри него выведет строку "Цикл завершен".
                ```
                
                Оператор break влияет на поведение оператора else в циклах. Если в цикле сработал оператор break, то цикл сразу завершается, а код в операторе else выполняться не будет. Перепишем предыдущий пример, добавив проверку: если введенное значение равно “ignore_else”, то остановим цикл с помощью break:
                
                ```python
                while (text := input("Enter string (STOP to discontinue): ")) != "STOP":
                    if text == "ignore_else":
                        break
                else:
                    print("Cycle is over!")
                ```
                
                Когда пользователь введет “СТОП”, цикл попадет в блок else, и в терминале появится строка “Цикл завершен”. А при вводе “ignore_else” сработает оператор break, и цикл завершится, не выполняя код в else.
                
            - **3.1 Строки, кортежи, списки**
                
                В первом параграфе мы познакомились с таким типом данных как строка (str).
                Мы умеем складывать строки, умножать их на число и даже сравнивать между собой.
                Если рассмотреть строку детальнее, то она состоит из символов, каждый из которых стоит на своем месте. Другими словами, строка - упорядоченная последовательность (коллекция) символов. 
                Слово “коллекция” в Python применяется не только к строкам. Коллекциями в Python также называют типы данных, в которых можно хранить сразу несколько значений.
                В упорядоченных коллекциях, к которым относится строка, каждое значение автоматически имеет свой номер - индекс. Индексация в коллекциях Python начинается со значения 0. При этом пробел, запятая, управляющие символы \n, \t и прочие тоже получают свой индекс в строке. Для доступа к определенному символу строки по индексу нужно указать его в квадратных скобках сразу после имени переменной.
                
                ```python
                Создадим программу, которая выводит первый символ строки, введенной пользователем: 
                text = input()
                print(text[0])
                Если пользователь введет пустую строку, то наша программа выдаст ошибку.
                ```
                
                В пустой строке нет символов, и программа вышла за пределы строки. Таким образом, нельзя получить значение по индексу, который за пределами строки. Перед обращением к символу строки по индексу можно проверять, не выходит ли он за пределы строки, используя известную нам функцию len следующим образом:
                
                ```python
                text = input('Enter the string: ')
                i = int(input('Enter the symbol index: '))
                if i < len(text):
                    print(text[i])
                else:
                    print('Index is out of range!')
                Однако в Python можно упростить эту запись, убрав из нее функцию len.
                И тогда в качестве индекса просто будет использоваться отрицательное число:
                text = input
                print(text[-1]) 
                ```
                
                Таким образом, последний символ имеет индекс -1, предпоследний -2 и т.д.
                Так как строка - упорядоченная коллекция, то можно пройти по этой коллекции в цикле, указав в качестве индекса итерируемую переменную цикла. Например, вывести на строке каждый символ введенной пользователем строки:
                
                ```python
                text = input()
                for i in range(len(text)):
                		print(text[i])
                ```
                
                Существует и другой способ пройти по символам строки в цикле. Если не требуется на каждой итерации цикла знать индекс текущего символа, то цикл можно оформить следующим образом:
                
                ```python
                text = input()
                for letter in text:
                    print(letter, end = '|')
                ```
                
                При такой записи цикла программа проходит не по индексам строки, а непосредственно по ее символам. Так, переменная letter на каждой итерации цикла принимает значение очередного символа строки text.
                Если требуется совместить проход непосредственно по символам строки с определением индекса итерации, то можно воспользоваться функцией enumerate. Она возвращает пары значений - номер элемента коллекции и сам этот элемент. Эта функция удобна, когда нужно пройти именно по элементам коллекции, но при этом еще и знать индекс каждого элемента.
                
                ```python
                text = input()
                for i, letter in enumerate(text):
                    print(f'{i}. {letter}', end = '|')
                ```
                
                Для строк в Python существует еще одна полезная операция - срез (slice).
                Срез позволяет взять часть строки, указав начальный и конечный индексы (конечный индекс не включается в диапазон). Также можно указать шаг, с которым срез будет взять (по умолчанию шаг 1). 
                Например, в одном из прошлых параграфов мы аналогичным образом использовали функцию range.
                Кроме того, в срезах можно использовать отрицательную индексацию. А если срез выходит за пределы строки, то программа не упадет с ошибкой, а просто вернет существующую часть строки.
                Следующий пример показывает возможные варианты использования срезов: 
                
                ```python
                text = input()
                print(text[8:11])
                print(text[:6])
                print(text[8:])
                print(text[:])
                print(text[::2])
                ```
                
                Обратите внимание, строка является неизменяемой коллекцией. Это означает, что изменить отдельный символ строки нельзя. Например, попытаемся в следующей программе изменить значение одного из символов строки:
                
                ```python
                word = 'world'
                word[0] = 'n'
                Программа выдаст ошибку.
                ```
                
                Мы уже знаем, что взаимодействовать с переменными в Python можно с помощью операций и функций. Рассмотрим еще один способ взаимодействия - методы.
                Методы похожи на функции, но вызываются не сами по себе, а для конкретной переменной. Для каждого типа данных есть свой набор методов. Чтобы вызвать метод, его нужно указать через точку после имени переменной. В круглых скобках после имени метода дополнительно можно обозначить аргументы (параметры) вызываемого метода, как это делаем с функциями.
                Например, у строк есть метод islower(), который проверяет, что в строке не встречаются большие буквы, и возвращает в таком случае значение True, иначе - False:
                
                ```python
                print('a'.islower())
                print('A'.islower())
                ```
                
                В следующей таблице перечислены часто используемые методы строк и примеры их работы. Важный момент: методы строк не меняют исходную строку, а возвращают новое значение, которое можно сохранить в переменной.
                
                | Метод | Пример | Результат | Описание |
                | --- | --- | --- | --- |
                | str.capitalize() | string01 = 'hello, World!'
                print('Method capitalize: ', string01.capitalize()) | Hello, world! | Возвращает копию строки, у которой первая буква заглавная, а остальные приведены к строчным. |
                | str.count(sub) | string02 = 'Hello, world!'
                print('Method count(\'l\'): ', string02.count('l')) | 3 | Возвращает кол-во неперекрывающихся вхождений подстроки sub. К примеру, если искать в строке “ААААА” неперекрывающиеся значения “АА”, то первое вхождение будет на первых двух, следующее на 3й и 4й. Больше неперекрывающихся вхождений нет. Так, поиск последующих вхождений подстроки происходит с индекса, который следует за последним найденным вхождением. |
                | str.endswith(suffix) | print('Method endswith(\'world!\'): ', string02.endswith('world!')) | True | Возвращает True, если строка оканчивается на подстроку suffix. Иначе возвращает False. suffix может быть кортежем проверяемых окончаний строки. |
                | str.find(sub) | print('Method find(\'o\'): ', string02.find('o')) | 4 | Возвращает индекс первого вхождения подстроки sub. Если подстрока не найдена, то возвращает -1 |
                | str.index(sub) | print('Method index(\'o\'): ', string02.index('o')) | 4 | Возвращает индекс первого вхождения подстроки sub. Вызывает исключение ValueError, если подстрока не найдена. Тема ошибок (исключений) будет разбираться на одном из следующих параграфов.  |
                | str.isalnum() | string03 = 'abc123'
                print('Method isalnum(): ', string01.isalnum(), string02.isalnum(), string03.isalnum()) | False False True | Возвращает True, если все символы строки являются буквами и цифрами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.isalpha() | string04 = 'Letters'
                print('Method isalpha(): ', string01.isalpha(), string02.isalpha(), string03.isalpha(), string04.isalpha()) | False False False True | Возвращает True, если все символы строки являются буквами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.isdigit() | string05 = '123'
                print('Method isdigit(): ', string01.isdigit(), string02.isdigit(), string03.isdigit(), string04.isdigit(), string05.isdigit()) | False False False False True | Возвращает True, если все символы строки являются цифрами и в строке есть хотя бы один символ. Иначе возвращает False |
                | str.islower() | print('Method islower(): ', string01.islower(), string02.islower(), string03.islower(), string04.islower(), string05.islower()) | False False True False False | Возвращает True, если все буквы в строке маленькие и в строке есть хотя бы одна буква. Иначе возвращает False |
                | str.isupper() | string06 = 'HELLO WORLD 123!'
                print('Method isupper(): ', string01.isupper(), string02.isupper(), string03.isupper(), string04.isupper(), string05.isupper(), string06.isupper()) | False False False False False True | Возвращает True, если все буквы в строке большие и в строке есть хотя бы одна буква. Иначе возвращает False |
                | str.join(str_col) | string07 = ['1', '2', '3']
                print('Method join(str_col): ', ';'.join(string07)) | 1;2;3 | Возвращает строку, полученную конкатенацией (сложением) строк - элементов коллекции str_col (обозначение коллекции с элементами типа данных “строка”). Разделителем является строка, для которой вызван метод.  |
                | str.ljust(width, fillchar) | print('Method ljust(width, fillchar): ', string04.ljust(10, '=')) | Letters=== | Возвращает строку длиной width с выравниваем по левому краю. Строка дополняется справа символами fillchar до требуемой длины. По умолчанию значение fillchar - пробел |
                | str.rstrip(chars) | string08 = 'stringBCCA'
                print('Method rstrip(chars): ', string08.rstrip('ABC')) | string | Возвращает строку, у которой в конце удалены символы, встречающиеся в строке chars. Если значение chars не задано, то пробельные символы удаляются. |
                | str.split(sep) | string09 = 'one, two, three'
                print('Method split(sep): ', string09.split(',')) | ['one', ' two', ' three'] | Возвращает список строк по разделителю sep. По умолчанию sep - любое кол-во пробельных символов |
                | str.startwith(prefix) | print('Method startwith(prefix): ', string02.startswith('Hello')) | True | Возвращает True, если строка начинается на подстроку prefix, иначе возвращает False. prefix моет быть кортежем проверяемых префиксов строки. Под кортежами подразумевается неизменяемая последовательность элементов |
                | str.strip(chars) | string10 = 'abc Hello, world! cba'
                print('Method strip(chars): ', string10.strip('abc') | Hello, world! | Возвращает строку, у которой в начале и в конце удалены символы, встречающиеся в строке chars. Если значение chars не задано, то пробельные символы удаляются |
                | str.title() | print('Method title(): ', string01.title()) | Hello, World! | Возвращает строку, в которой каждое отдельное слово начинается с буквы в верхнем регистре, а остальные буквы идут в нижнем |
                | str.upper() | print('Method upper(): ', string02.upper()) | HELLO, WORLD! | Возвращает копию строки, у которой все буквы приведены к верхнему регистру |
                | str.zfill(width) | print('Method zfill(width): ', string05.zfill(7)) | 0000123 | Возвращает строку, дополненную слева символами “0” до длины width |
                
                Рассмотрим еще одну коллекцию в Python - список (list). Этот тип данных является упорядоченной коллекцией, которая может в качестве элементов иметь значения любого типа данных.
                Одни из способов создания списков - перечислить его элементы в квадратных скобках и присвоить это значение переменной, которая и станет в итоге списком в программе:
                `numbers = [10, 20, 30]`
                В примере мы создали список, состоящий из трех элементов - целых чисел. Список может хранить значения любого типа, поэтому можно создать список со следующими элементами:
                `mixed_list = [10, 20.55, 'text']`
                Индексация в списках работает также, как и в строках - начальный индекс 0. Можно использовать отрицательные индексы, а также доступны срезы:
                
                ```python
                numbers = [10, 20, 30, 40, 50]  
                print(numbers[0])  # 10
                print(numbers[-1]  # 50
                print(numbers[1:3])  # [20, 30]
                print(numbers[::-1]  # [50, 40, 30, 20, 10]
                ```
                
                В отличие от строки, список относится к изменяемой коллекции. У списка можно изменить отдельный элемент, добавить новые или удалить существующие. Для изменения существующего элемента нужно указать его в левой части операции присваивания, а в правой указать новое значение этого элемента:
                
                ```python
                numbers = [10, 20, 50]
                numbers[2] = 30
                print(numbers)  # [10, 20, 30]
                ```
                
                Если требуется добавить элемент в конец списка, то можно использовать метод **append()**. 
                Например. напишем программу, в которой список последовательно заполняется 10 целочисленными значениями с клавиатуры:
                
                ```python
                numbers = []
                for i in range(10):
                		numbers.append(int(input())
                print(numbers)    # [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                ```
                
                Для удаления элемента из списка применяется операция del. Нужно указать индекс элемента, который требуется удалить: 
                
                ```python
                numbers = [10, 20, 50]
                del numbers[-1]
                print(numbers)  # [10, 20]
                С помощью del можно удалить несколько элементов списка. Для этого вместо одного элемента указываем срез:
                numbers = [1, 2, 3, 4, 5]
                del numbers[::2]
                print(numbers)  # [2, 4]
                ```
                
                ```python
                1 in [1, 2, 3]  # True
                4 not in [1, 2, 3]  # True
                [1, 2] + [3, 4, 5]  # [1, 2, 3, 4, 5]
                [1, 2, 3] * 3  # [1, 2, 3, 1, 2, 3, 1, 2, 3]
                len([1, 2, 3])  # 3
                min([1, 2, 3])  # 1
                max([1, 2, 3])  # 3
                [1, 2, 3, 2, 1].index(2)  # 1
                [1, 1, 1, 2, 3, 1].count(1)  # 4
                
                s = [1, 2]
                s.append(3)
                print(s)  # [1, 2, 3]
                
                s.clear()
                print(s)  # []
                
                [1, 2, 3].copy()  # [1, 2, 3]
                
                s.extend([3, 4, 5])
                print(s)  # [1, 2, 3, 4, 5]
                
                s.insert(1, 12)  # [1, 12, 2]
                
                s = [1, 2, 3]
                x = s.pop()
                print(x, s)  # 3 [1, 2]
                
                s = [1, 2, 3, 2, 1]
                s.remove(2)
                print(s)  # [1, 3, 2, 1]
                s.reverse()
                print(s)  # [1, 2, 3, 1]
                s.sort()  # [1, 1, 2, 3]
                
                s = [2, 3, 1]
                new_s = sorted(s, reverse = True)
                print(new_s)  # [3, 2, 1]
                ```
                
                Еще одной коллекцией в Python является кортеж (tuple). 
                Кортеж является неизменяемой упорядоченной коллекцией. В кортеже нельзя заменить значение элемента, добавить или удалить элемент. Простыми словами, кортеж - неизменяемый список. Свойство неизменяемости используется для защиты от случайных или намеренных изменений.
                Задать кортеж можно следующим образом:
                `numbers = (1, 2, 3, 4, 5)`
                Если нужно создать кортеж из одного элемента, то запись будет такой:
                `one_number = (1, )`
                Запятая в примере показывает, что в скобках не совершается операция, а идет перечисление элементов кортежа.
                Для кортежей доступны те операции и методы списков, которые не изменяют исходный кортеж.
                В качестве примера использования кортежей приведем программу для обмена значений двух переменных: 
                
                ```python
                a = 1
                b = 2
                (a, b) = (b, a)  #  a, b = b, a
                print(f"a = {a}, b = {b}")  # можно опустить круглые скобки и записать так: a = 2, b = 1
                ```
                
                Между коллекциями можно производить преобразования. Покажем на примере преобразования строки в список и кортеж (элементы строки, символы становятся элементами списка и кортежа соответственно): 
                
                ```python
                text = "Привет, мир!"
                list_symbols = list(text)
                tuple_symbols = tuple(text)
                text_from_list = str(list_symbols)
                print(list_symbols)
                print(tuple_symbols)
                print(text_from_list)
                
                Вывод программы: 
                ['П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!']
                ('П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!')
                ['П', 'р', 'и', 'в', 'е', 'т', ',', ' ', 'м', 'и', 'р', '!']
                ```
                
                Обратите внимание: преобразование коллекций к типу данных str не объединяет элементы этой коллекции в одну строку, а возвращает представление коллекции в виде строки.
                
            - **3.2 Множества, словари**
                
                Еще одна коллекция - множество (set). Чтобы задать множество, можно перечислить его элементы внутри фигурных скобок:
                `vowels = {'a', 'e', 'i', 'o', 'u'}`
                Для создания пустого множества следует использовать функцию set() без аргументов, а для определения количества элементов используется уже известная нам функция len():
                `empty_set = set()
                print(f'Lenth of the empty set is {len(empty_set)}.')  # Length of the empty set is 0`
                Множество можно получить из других коллекций, применив к ним функцию set(). Например, создадим множество из строки:
                
                ```python
                word = 'collection'
                letters = set(word)
                print(letters)
                Выполнив программу два раза, получим следующий вывод программы:
                {'i', 'c', 'e', 'n', 'l', 't', 'o'}
                {'i', 'l', 'c', 't', 'e', 'n', 'o'}
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
                ```python
                
                ```
                
            
            ```python
            
            ```
            
        - ******************************************************Курс от Богдана YouTube 15:40 Закладка 01:24******************************************************
            - 001
                
                ```csharp
                print('Hello, Bogdan')
                print(print)
                
                name = input("Enter your name: ")
                print("Hello, " + name)
                ```
                
            - 002
                
                ```csharp
                print(10, 'Bogdan', True)
                print(print) # Показывает встроенная ли функция в Python
                print(input)
                print(dir)
                print(dir())
                print(dir(__builtins__)) # List of all Built-ins functions in Python
                ```
                
            - 003
                
                ```python
                name = 'johnny begood' # input("Enter your name: ")
                age = '40' # input("How old are you?: ")
                city = 'Krasnodar' # input("Which city do you live?: ")
                print("Your name is: " + name)
                print("You are " + age + " years old")
                print("You live in " + city)
                
                print(name.capitalize()) # Пишет с большой буквы
                print(name.split())     # Разбивает на слова и выводит в виде массива
                print(name)
                print(name.upper())     # большими буквами
                print(dir(name))
                ```
                
            - 004_Отступы и форматирование кода, комментарии
                
                ```csharp
                # Отступы и форматирование кода, комментарии
                def my_name(name):
                    print(name)
                
                my_name('Bogdan')
                # Ctrl + Shift + P -> format - Форматирование кода (не работает)
                my_list =       [1, 2,      3  ]
                
                print(   my_list)
                
                # This is comment
                # Ctrl + / - comment string or piece of code
                # Ctrl + Shift + K - remove full string
                ```
                
            - 005_Выражения
                
                ```csharp
                # Выражения (Expressions)
                print(10 + 5)
                print(print(10 + 5))
                
                print(input("Enter your name: "))
                ```
                
            - 006_Statements (Инструкции)
        - **Книга [Python на примерах.](https://drive.google.com/file/d/1TnGL9KEeOdM1iLB7vqfZDKJVhs9nPSKl/view?usp=drive_link) Васильев А.**
            - **Блоки кода**
                - 001
                    
                    ```python
                    print("Начинаем вычисления!")
                    a = 4
                    print("Значение переменной a = ", a)
                    b = 12
                    print("Значение переменной b = ", b)
                    c = b / a
                    print("Результат деления b / a = ", c)
                    print("Вычисления закончены!")
                    ```
                    
                - 002_Программа_с_Вводом_и_Выводом_Данных
                    
                    ```python
                    print("Давайте познакомимся!")  # Выводится сообщение
                    name = input("Как Вас зовут? ")  # Считываем введенное пользователем значение.
                                                    # Результат записывается в переменную name
                    print("Добрый день,", name + "!")  # Выводится новое сообщение
                    ```
                    
                - 003_Арифметические_Операторы
                    
                    ```python
                    a = (5 + 2) ** 2 - 3 * 2    # Результат 43
                    b = 6 - 5 / 2               # Результат 3.5
                    c = 10 // 4 + 10 % 3        # Результат 3
                    print("Результаты вычислений: ")  # Результаты вычислений выводим на экран
                    print(a, b, c)
                    
                    print(bin(18))  # Двоичный формат
                    print(hex(24548))  # 16-ричный формат
                    print(oct(358))  # 8-ричный формат
                    print(max(3, 4, 8, 9, 14, 1, -5, 18, 0, 2))
                    print(min(3, 4, 8, 9, 14, 1, -5, 18, 0, 2))
                    print(oct(pow(2,10)))  # Возведение в степень и конв-я в 8-ричный формат
                    import math
                    print(round(math.pi, 2))
                    ```
                    
                - 004_Использование_Функции_eval()
                    
                    ```python
                    a = "(5 + 2) ** 2 - 3 * 2"  # Текстовое значение
                    b = "6 - 5 / 2"             # Текстовое значение
                    c = "10 // 4 + 10 % 3"      # Текстовое значение
                    print("Результаты вычислений")  # Результаты вычислений выводим на экран.
                    print(a + " =", eval(a))    # Для "Вычисления" текстовых выражений
                    print(b + " =", eval(b))    # используем функцию eval()
                    print(c + " =", eval(c))
                    ```
                    
                - 005_Побитовые_Операторы
                    
                    ```python
                    a = 70 >> 3  # 01000110 - убираем 3 позиции справа, остается 01000 = 8 
                    # (еще проще - 3 раза делим на 2 без остатка 70 / 2 = 35 / 2 = 17 / 2 = 8)
                    b = ~a  # 0100 -> 10111 = -9
                    c = a << 1  # 0100 = 01000 (8 * 2 = 16)
                    print(a, b, c)
                    print(7 | 3, 7 & 3, 7 ^ 3)
                    ```
                    
                - 006_Логические_Операторы
                    
                    ```python
                    a = True
                    b = not a
                    print(a, b)
                    c = a and b
                    d = a or b
                    print(c, d)
                    ```
                    
                - 007_Снова_Логические_Операторы
                    
                    ```python
                    x = 10          # Числовая переменная
                    y = 20          # Числовая переменная
                    z = x and y     # Логическое И
                    print(z)        # Результат логического И
                    z = x or y      # Логическое ИЛИ
                    print(z)        # Результат логического ИЛИ
                    print(not x)    # Логическое отрицание
                    ```
                    
                - 008_Операторы_Сравнения
                    
                    ```python
                    a = 100
                    b = 200
                    print(a < b, a >= b, a == 100, b != 199)
                    ```
                    
                - 009_Тернарный_Оператор
                    
                    ```python
                    a = float(input("Введите первое число: "))  # Считывается первое число
                    b = float(input("Введите второе число: "))  # Считывается второе число
                    value_1 = "Первое число больше второго!"  # Первое значение
                    value_2 = "Второе число не меньше первого!"  # Второе значение
                    res = value_1 if a > b else value_2  # Вызывается тернарный оператор
                    print(res)          # Отображается результат
                    ```
                    
                - 010_Условный_Оператор
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит значение
                    if type(res) == int:  # Используем условный оператор для проверки типа введенного пользователем значения
                        print("Вы ввели целое число!")  # Если целое число
                    else:           # Если что-то другое
                        print("Это точно не целое число!")
                    print("Работа завершена!")  # После выполнения условного оператора
                    ```
                    
                - 011_Упрощенная_Форма_Условного_Оператора
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит занчение
                    resType = type(res)  # Тип значения запоминаем в переменной
                    if resType == int:  # Используем условные операторы (упрощенная форма)
                        print("Это целое число!")  # для проверки типа введенного пользователем значения
                    if resType == float:  # Если число действительное
                        print("Это действительное число!")
                    if resType != int and resType != float:  # Если не число
                        print("Наверное, это текст!")
                    print("")
                    ```
                    
                - 012_Условный_Оператор_с_Проверкой_Нескольких_Условий
                    
                    ```python
                    res = eval(input("Введите что-нибудь: "))  # Пользователь вводит значение
                    resType = type(res)  # Тип значения запоминаем в переменной
                    if resType == int:  # Используем условные операторы для проверки введенного значения
                        print("Это целое число!")
                    elif resType == float:  # Если действительное число
                        print("Это действительное число!")
                    else:                   # Если не число
                        print("Наверное, это текст!")
                    print("Работа завершеня!")
                    ```
                    
                - 013_Сумма_Натуральных_Чисел_и_Оператор_Цикла
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых. Формируем текст для
                    text = "1 + 2 ... + " + str(n) + " ="  # отображения результата
                    i = 1  # Итерационная переменная для оператора цикла
                    s = 0  # Переменная для записи суммы
                    while i <= n:  # Оператор цикла для вычисления суммы
                        s = s + i  # Добавляем слагаемое к сумме
                        i = i + 1  # Изменяем итерационную переменную
                    print(text, s) # Отображаем результат
                    ```
                    
                - 014_Оператор_цикла_с_break_Инструкцией
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых
                    text = "1 + 2 + ... +" + str(n) + " ="  # Формируем текст для отображения результата
                    i = 1  # Итерационная переменная для оператора цикла
                    s = 0  # Переменная для записи суммы
                    while True:  # Оператор цикла для вычисления суммы
                        s += i  # Добавляем слагаемое к сумме
                        i += 1  # Изменяем итерационную переменную
                        if i > n:
                            break  
                    print(text,s)  # Отображаем результат
                    ```
                    
                - 015_Вычисление_Площади_Фигуры_и_Операторы_Цикла
                    
                    ```python
                    n = 500  # Кол-во разных интервалов, на которые делятся стороны единичного квадрата
                    dz = 1 / n  # "Цена деления" - расстояние между соседними точками
                    pts = 0  # Кол-во точек, которые попадают внутрь области
                    i = 0  # Начальное значение идекса, определяющего столбец точек
                    while i <= n:  # Внешний оператор цикла. Перебираем столбцы точек
                        x = dz * i  # х - координата точки
                        j = 0  # Начальное значение второго индекса для точек столбца
                        while j <= n:  # Внутренний оператор цикла. Перебираем точки в одном столбце
                            y = dz * j  # у - координата точки
                            if y <= x and y >= x ** 2:  # Условный оператор: проверяем, попала ли точка внутрь области
                                pts = pts + 1  # Еще одна точка внутри области
                            j = j + 1  # Значение второго индекса увеличиваем на единицу
                        i = i + 1  # Значение первого индекса увеличиваем на единицу
                    s = pts / (n + 1) ** 2  # Вычисляем площадь фигуры
                    print("Площадь фигуры: ", s)  #  Отображаем результат
                    ```
                    
                - 016_Вычисление_Суммы_Чисел_For
                    
                    ```python
                    print("Сумма натуральных чисел")
                    n = 100  # Количество слагаемых
                    text = "1 + 2 + ... + " + str(n) + " ="  # Формируем текст для отображения результата
                    s = 0  # Переменная для записи суммы
                    for i in range(1, n + 1):  # Оператор цикла для вычисления суммы
                        s = s + i  # Добавляем слагаемое к сумме
                    print(text, s)  # Отображаем результат
                    ```
                    
                - 017_Текст_в_Операторе_Цикла
                    
                    ```python
                    txt = "Python - Текст для оператора цикла!"  # Текст для оператора цикла
                    i = 1  # Переменная для нумерации букв
                    empty = 0  # Переменная для подсчета пробелов
                    for s in txt:  # Оператор цикла
                        t = str(i) + "-я буква: "  # Формируем вспомогательный текст
                        if s == " ":  # Игнорируем пробелы
                            empty += 1
                            continue
                        print(t, s)  # Выводим сообщение
                        i += 1  # Изменяем номер буквы
                    print("Количество пробелов: ", empty)
                    print("Работа программы завершена!")  # Команда после завершения оператора цикла
                    ```
                    
                - 018_Оператор_Цикла_с_else_Блоком
                    
                    ```python
                    print("Проверяем содержимое списка: ")  # Начинаем проверку списка
                    # Список для проверки. Текста не содержит. При проверке альтернативного списка
                    # следует пометить как комментарий следующую строку
                    myList = [1, 3 + 2j, True, 4.0]  # Альтернативный список с текстом
                    # При проверке этого списка следует отменить комментарий для следующей строки (и удалить пробел)
                    print("Список: ", myList)  # Отображаем содержимое списка 
                    for s in myList:  # Проверяем элемент на "текстовость"
                        if type(s) == str:  # Если элемент текстовый
                            print("В списке есть текстовые элементы!")
                            break  # Завершается выполнение оператора цикла
                    else:  # Блок else оператора цикла. Выполняется только если не выполнялась инструкция break
                        print("В списке нет текстовых элементов!")  # Отображается сообщение 
                        # об отсутствии текстовых элементов
                    print("Проверка закончена")  # Сообщение о завершении проверки
                    ```
                    
                - 019_Сопадение_Элементов_в_Списках
                    
                    ```python
                    print("Поиск совпадающих элементов.")  # 
                    A = [2, False, 9.1, 2 - 1j, "hello", 5, "Python"]  # Первый список
                    B = [5, 3, "HELLO", 7, 12.5, "Python", True, False]  # Второй список
                    print("1-й список: ", A)  # Отображаем содержимое первого списка
                    print("2-й список: ", B)  # Отображаем содержимое второго списка
                    print("Совпадают: ")  # 
                    i = 0  # Индекс для нумерации элементов 1-го списка
                    for a in A:  # Внешний оператор цикла. Перебираем элементы 1-го списка
                        i += 1  # Новый индекс элемента из 1-го списка
                        j = 0  # Индекс для нумерации элементов 2-го списка
                        for b in B:  # Перебираем элементы 2-го списка
                            j += 1  # Новый индекс элемента из 1-го списка
                            if a == b:  # Условный оператор. Проверяем равенство элементов
                                txt = str(i) + "-й элемент из 1-го списка и "
                                txt = txt + str(j) + "-й элемент из 2-го списка"
                                print(txt)
                    print("Завершение программы")
                    ```
                    
                - 020_Обработка_Исключительной_Ситуации
                    
                    ```python
                    print("Решаем уравлнение ax = b")  # Начало try-блока (основной код)
                    try:  # Определяем первый параметр. Возможна ошибка при преобразовании текста в число
                        a = float(input("Введите a: "))  # Определяем второй параметр. Возможна ошибка при 
                        b = float(input("Введите b: "))  # преобразовании текста в число
                        x = b / a  # Решение уравнения. Возможна ошибка при делении на ноль
                        print("Решение уравнения: x = ", x)  # Отображается значение для корня уравнения.
                    except:  # Команда выполняется. если до этого не возникли ошибки.
                        print("Вы ввели некорректные данные!")  # Команда выполняется только если ранее
                    # Команда выполняется после блока try-except
                    print("Спасибо, работа программы завершена")  # при выполнении основного кода возникла ошибка
                    ```
                    
                - 021_Обработка_Ошибок_Разных_Типов
                    
                    ```python
                    print("Решаем уравнение ax = b")  # Начало try-блока (основной код)
                    try:  # Определяем первый параметр. Возм ошибка при преобразовании текста
                        a = float(input("a: "))  # в число. Определяем второй параметр. 
                        b = float(input("b: "))  # Возможна та же ошибка
                        x = b / a  # Решение ур-я. Возможна ошибка при делении на ноль
                        print("Решение уравнения: x = ", x)  # Отображается значение для корня уравнения
                    except ValueError:  # Вспомогательный код. Команда выполняется, если пользователь
                        print("Нужно было ввести число!")  # ввел некорректное значение
                    except ZeroDivisionError:  # Команда выполняется при попытке деления на ноль
                        print("Внимание! Делить на ноль нельзя!") 
                    print("Спасибо, работа команды завершена!") # Команда вып-ся после блока try-except
                    ```
                    
                - 022_Объявление_Функций
                    
                    ```python
                    def your_name():  # Функция без аргументов
                        print("Добрый день!")  # Отображается сообщение
                        name = input("Как Вас зовут? ")  # Запоминается введенный пользователем текст
                        return name  # Результат функции
                    def say_hello(txt):  # Функция с одним аргументом
                        print("Здравствуйте,", txt + "!")  # Отображается сообщение
                    my_name = your_name()  # Вызываем функцию и результат записываем в переменную
                    say_hello(my_name)  # Вызываем функцию аргументом
                    ```
                    
                - 023_Математические_Функции
                    
                    ```python
                    def my_exp(x, n):  # Функция для вычисления экспоненты
                        s = 0  # Начальное значение суммы ряда
                        q = 1  # Начальное значение добавки
                        for k in range(n + 1):  # Оператор цикла для вычисления ряда
                            s += q  # Добавка к сумме
                            q *= x / (k + 1)  # Новая добавка
                        return s  # Результат функции
                    x = 1  # Аргумент для экспоненты
                    for n in range(11):  # Оператор цикла для многократного вызова функции
                        print("n = ", n, "->", my_exp(x, n))  # вычисления экспоненты
                    ```
                    
                - 024_Значения_Аргументов_по_Умолчанию
                    
                    ```python
                    def print_text(txt = "Значение аргумента по умолчанию"):  # 1я функция с одним 
                        print(txt)  # аргументом. У аргумента есть значение по умолчанию
                    def show_args(a, b = "Второй аргумент не указан"):  # 2я функция с двумя
                        print(a, b)  # аргументами. У второго аргумента есть значение по умолчанию
                    def my_func(x = "1-й аргумент x.", y = "2-й аргумент y."):  # 3я функция с двумя
                        print(x, y)  # аргументами. У аргументов есть значения по умолчанию
                    print_text("Аргумент указан явно.")  # Проверяем рабоут 1й функции. Передан один аргумент
                    print_text()  # Функции аргументы не передаются
                    show_args("Первый аргумент.", "Второй аргумент.")  # Проверяем работу 2й функции
                    show_args("Первый аргумент.")  # Функции передан один аргумент
                    my_func()  # Проверяем работу 3й функции. Аргументы не передаются
                    my_func("Один из аргументов.")  # Функции передан один аргумент идентифицирован явно
                    my_func(y = "Один из аргументов.")
                    ```
                    
                - 025_Ссылка_на_Функцию
                    
                    ```python
                    def my_func(txt):  # Исходная функция
                        print("Функция my_func:", txt)
                    new_func = my_func  # Переменной присваивается имя функции
                    new_func("Вызов через new_func.")  # Вызываем функцию через переменную
                    ```
                    
                - 026_Метод_Последовательных_Приближений
                    
                    ```python
                    def solve_eqn(f, x0, n):  # Описание функции для решения уравнения
                        x = x0  # Начальное приближение для корня
                        for k in range(1, n + 1):  # Оператор цикла для вычисления приближений для решения
                            x = f(x)  # Итерационная формула
                        return x  # Результат функции
                    def eqn_1(x):  # Функция, определяющая 1е уравнение
                        return(x ** 2 + 5) / 6  # Значение функции
                    def eqn_2(x):  # Функция, определяющая второе уравнение
                        return(6 * x - 5) ** 0.5  # Значение функции
                    x = solve_eqn(eqn_1, 0, 10)  # Решаем 1е уравнение
                    print("1-е уравнение: x = ", x)  # Отображаем результат
                    x = solve_eqn(eqn_2, 4, 10)  # Решаем 2е уравнение
                    print("2-е уравнение: x =", x)
                    ```
                    
                - 027_Решение_Дифференциального_Уравнения
                    
                    ```python
                    import math  # Импорт математического модуля
                    def solve_deqn(f, x0, y0, x):  # Функция для решения дифференциального ур-я
                        n = 1000  # Кол-во отрезков, на которые делится интервал поиска решения
                        dx = (x - x0) / n  # Расстояние между соседними узловыми точками
                        x = x0  # Начальная точка
                        y = y0  # Начальное значение функции
                        for k in range(1, n + 1):  # Оператор цикла для вычисления решения
                            y = y + dx * f(x, y)  # Значение функции в узловой точке
                            x = x + dx  # Следующая узловая точка
                        return y  # Результат функции
                    
                    def diff_eqn(x, y):  # Функция, определяющая дифф. ур-е
                        return 2 * x - y  # Результат
                    
                    def y(x):  # Функция точного решения ур-я
                        return 2 * (x - 1) + 5 * math.exp(-x)
                    
                    h = 0.5  # Шаг приращения по аргументу
                    for k in range(0, 6):  # Выч-е рез-та для неск зн-й аргумента
                        x = k * h  # Значение аргумента
                        print("Числовое решение: ")  # Числовое решение
                        print("x = ", x, "-> y(x) = ", solve_deqn(diff_eqn, 0, 3, x))
                        print("Точное решение: ")  # Точное решение
                        print("x =", x, "-> y(x) =", y(x))
                    ```
                    
                - 028_Рекурсия_Числа_Фибоначчи
                    
                    ```python
                    n = int(input("Введите кол-во чисел в последовательности?: "))
                    def Fib(n):  # Функция для вычисления чисел Фибоначчи рекурсией
                        
                        if n == 1 or n == 2:  # Первое и второе равны 1
                            return 1
                        else:  # Числа в посл-ти равно сумме двух предыдущих
                            return Fib(n - 1) + Fib(n - 2)
                    print("Числа Фибоначчи: ")  # Проверяем работу функции
                    for i in range(1, n):  # Числа печатаются в одной строке через пробел
                        print(Fib(i), end = " ")  #
                    ```
                    
                - 029_Рекурсия_для_Метода_Последовательных_Приближений
                    
                    ```python
                    def solve(f, x0, n):  # Описание функции для решения уравнения
                        if n == 0:  # Используем рекурсию. Начальное приближение
                            return x0
                        else:  # Рекурсивное соотношение
                            return solve(f, f(x0), n - 1)
                    def eqn(x):  # Функция, определяющая уравнение
                        return(x **2 + 5) / 6  # Значение функции
                    x = solve(eqn, 0, 10)  # Решаем уравнение
                    print("Решение уравнения: x =", x)  # Отображаем результат
                    ```
                    
                - 030_Лямбда_Функции
                    
                    ```python
                    def find_value(f, x):  # Функция для отображения значения другой функции
                        print("x =", x, "-> f(x) =", f(x))
                    my_func = lambda x: 1 / (1 + x ** 2)  # Переменной присваивается ссылка на лямбда-функцию
                    find_value(my_func, 2.0)  # Проверяем результат
                    find_value(lambda x: x * (1 - x), 0.5)  # Аргументом передана лямбда-функция
                    z = 1 + (lambda x, y: x * y - x ** 2) (2, 3) ** 2  # Исп-е лямбда-функции в выражении
                    print("z =", z)
                    ```
                    
                - 031_Функция_как_Результат_Функции
                    
                    ```python
                    def my_pow(n):  # Ф-я в кач-ве рез-та возвращает ф-ю
                        return lambda x: x ** n
                    for n in range(1, 4):  # Проверяем результат
                        for x in range(1, 11):  # Внешний и внутренний циклы
                            print(my_pow(n) (x), end = " ")  # Выводим результат вызова функции
                        print()  # Переходим к новой строке
                    ```
                    
                - 032_Локальная_и_Глобальная_Переменные
                    
                    ```python
                    x = 100  # Глобальная переменная
                    def test_vars():  # Описание функции
                        x = "Локальная переменная"  # Локальная переменная
                        print("В теле функции x =", x)  # Проверяем значение переменной в теле функции
                    test_vars()  # Выполняем функцию
                    print("Вне функции x =", x)  # Проверяем значение переменной вне тела функции
                    ```
                    
                - 033_Глобальные_Переменные
                    
                    ```python
                    def test_vars():  # Описание функции
                        print("В теле функции x =", x)  # Проверяем зн-е переменной в теле ф-и.
                    x = "глобальная переменная"  # Значение пер-й х в теле не присваивается
                    test_vars()  # Выполняем функцию
                    print("Вне функции x =", x)  # Проверяем зн-е пер-й вне тела функции
                    ```
                    
                - 034_Использование_Инструкции
                    
                    ```python
                    x = 100  # Глобальная переменная
                    def test_vars():  # Описание функции
                        global x, y  # Объявляем глобальные переменные
                        print("В теле функции x =", x)  # Проверяем значение переменной х
                        y = 200  # Значение глобальной переменной у
                        print("В теле функции y =", y)  # Проверяем зн-е переменной у
                        x = 300  # Значение глобальной переменной х
                        test_vars()  # Выполняем функцию
                        print("Вне тела функции x =", x)  # Проверяем зн-е х вне тела функции
                        print("Вне тела функции y =", y)  # Проверяем зн-е у вне тела функции
                    ```
                    
                - 035_Использование_Вложенных_Функций
                    
                    ```python
                    def sq_sum():  # Внешняя функция
                        def get_n():  # Вложенная функция для считывания кол-ва слагаемых
                            n = int(input("Слагаемых в сумме: "))  # Считываем числовое значение
                            return n  # Рез-т ф-и get_n() - целое число
                        def find_sq_sum():  # Влож ф-я для выч-я суммы квадратов натур чисел
                            s = 0  # Нач-е зн-е суммы
                            for i in range(1, n + 1):  # Оп-р цикла для вычисления суммы
                                s += i ** 2  # Новое слагаемое в сумме
                            return s  # Результат ф-и find_sq_sum()
                        n = get_n()  # Определяем кол-во слагаемыхв сумме
                        return find_sq_sum  # Рез-т ф-и sq_sum() - вложенная функция
                    z = sq_sum()()  # Вычисляем сумму квадратов чисел
                    print("", z)
                    ```
                    
                - 036_Вычисление_Факториала
                    
                    ```python
                    def factor(mode = True):  # Ф-я для выч-я факториала и двойного факториала
                        def sf(n):  # Вложенная функция для выч-я факториала числа
                            s = 1  # Нач зн-е произведения
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= 1  # Уменьшение индекса на 1
                            return s  # Рез-т влож ф-и
                        def df(n):  # Влож ф-я для выч-я двойного факториала числа
                            s = 1  # Нач зн-е пр-я
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= 2  # Уменьшение индекса на 2
                            return s  # Рез-т влож ф-и
                        if mode:  # Если аргумент mode равен True
                            return sf  # Ссылка на ф-ю для выч-я факториала
                        else:  # Если аргумент равен False
                            return df  # Ссылка на ф-ю для выч-я двойного факториала
                    n = int(input("Введите число: "))
                    print(f"{n}! =", factor()(n))  # Вызываем ф-ю factor() для выч-я факториала
                    print(f"{n}! =", factor(True)(n))
                    print(f"{n}!! =", factor(False)(n))  # Выз-м ф-ю factor() для выч-я двойного факториала
                    ```
                    
                - 037_Факториал_и_Двойной_Факториал
                    
                    ```python
                    def factor(mode = True):  # Ф-я для выч-я факториала и двойного факториала
                        def f(n, d):  # Вложенная ф-я для выч-я обычного / двойного факт
                            s = 1  # Нач зн-е пр-я
                            i = n  # Нач зн-е индекса
                            while i > 1:  # Условие
                                s *= i  # Умножение на индекс
                                i -= d  # Уменьшение индекса
                            return s  # Рез-т влож ф-и
                        d = 1 if mode else 2  # Зн-е декремента для индекса
                        return lambda n: f(n, d)  # Рез-т ф-и. Лямбда-функция
                    print("5! =", factor()(5))  # Выз-м ф-ю factor() для выч-я факт
                    print("5! =", factor(True)(5))
                    print("5!! =", factor(False)(5))  # Выз-м ф-ю factor() для выч-я двойного факт
                    ```
                    
                - 038_Еще_Один_Способ_Вычислить_Факториал
                    
                    ```python
                    def factorial(n):  # Ф-я для выч-я факториала числа
                        if n == 1:
                            return 1
                        else:  # Рекурсия
                            return n * factorial(n - 1)
                    def dfactorial(n):  # Функция для вычисления двойного факториала
                        if n == 1 or n == 2:
                            return n
                        else:  # Рекурсия
                            return n * dfactorial(n - 2)
                    def factor(mode = True):  # Ф-я для выч-я факт и двойного факт
                        return factorial if mode else dfactorial  # Рез-т - ссылка на внеш ф-ю
                    n = int(input("Введите число: "))
                    print(f"{n}! =", factor()(n))  # Выз-м ф-ю factor() для выч-я факт 
                    print(f"{n}! =", factor(True)(n))
                    print(f"{n}!! =", factor(False)(n))  # Выз-м ф-ю для выч-я двойного факт
                    ```
                    
                - 039_Вычисление_Производной
                    
                    ```python
                    def D(f):  # Ф-я для выч-я производной
                        def df(x, dx = 0.001):  # Влож ф-я. Выч-т прибл зн-е производной
                            return(f(x + dx) - f(x)) / dx  # Рез-т влож ф-и
                        return df  # Рез-т ф-и - производная
                    def f1(x):  # Первая ф-я для диф-я
                        return x ** 2
                    def f2(x):  # Вторая ф-я для диф-я
                        return 1 / (1 + x)
                    
                    # Ф-я для отображения производной в неск точках. Аргументы такие: 
                    # F - производная (приближенная). 
                    # Nmax - кол-во точек (минус один).
                    # Xmax - правая граница по аргументу. 
                    # dx - приращение аргумента 
                    # f - производная (аналитически)
                    def show(F, Nmax, Xmax, dx, f):
                        for i in range(Nmax + 1):  # Точки, в кот выч-ся производная
                            x = i * Xmax / Nmax  # Значение аргумента
                            print(F(x), F(x, dx), f(x), sep = " -> ")  # Прибл и точное зн-е пр-й
                    F1 = D(f1)  # Пр-я для первой ф-и
                    F2 = D(f2)  # Пр-я для второй ф-и
                    print("Производная (x ** 2) ' = 2x: ")  # Зн-я в разных точках пр-й для 1й ф-и
                    show(F1, 5, 1, 0.01, lambda x: 2 * x)
                    print("Производная (1 / (1 + )) ' = -1 / (1 + x) ** 2: ")  # Зн-я в разн точках пр-й для 2й ф-и
                    show(F2, 5, 1, 0.01, lambda x: -1 / (1 + x) ** 2)
                    ```
                    
                
                ```python
                
                ```
                
                ```python
                ******def****** имя_функции(аргументы):
                		команды
                ```
                
            - **Выжимки**
                - **Глава 1. Первые программы на Python**
                    1. Программа, написанная на Python - это последовательность команд. Для выполнения этих команд используется специальная программа-интерпретатор.
                    2. В программе могут использоваться переменные. В Python переменная ссылается на значение, а не содержит его, как во многих других языках программирования.
                    3. В Python существует несколько типов данных. Числовые значения реализуются данными типа int float и complex (комплексные числа). Для обозначения мнимой части комплексного числа используют букву j (большую или маленькую). Бинарные, восьмеричные и шестнадцатеричные литералы вводятся соответственно с префиксами 0b, 0o и 0x (вторая буква после нуля может быть большой или маленькой).
                    4. Тексту соответствует тип str. Текстовые литералы заключаются в двойные (или одинарные) кавычки.
                    5. С помощью типа bool реализуются логические значения. Данные этого типа могут принимать значения True и False. Логические значения являются подвидом целочисленного типа данных, и поэтому могут использоваться в арифметических вычислениях.
                    6. Тип переменной явно указывать не нужно - он определяется на основе значения, на которое ссылается переменная.
                    7. Для ввода данных с консоли используют функцию input(), а для вывода - print().
                    8. Для ввода в программный код комментария используют символ #. Все, что находится справа от этого символа, интерпретатором игнорируется. 
                    9. Основные операторы Python можно разделить на четыре группы: арифметические, побитовые, логические и операторы сравнения.
                    10. Арифметические операторы: +, -, *, /, // (целочисленное деление), %, ** (возведение в степень).
                    11. Побитовые операторы: ~ (побитовое отрицание), & (побитовое И), | (побитовое ИЛИ), ^ (побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ), << (побитовый сдвиг влево), >> (побитовые сдвиг вправо).
                    12. Логические операторы or (логическое ИЛИ), and (логическое И), not (логическое отрицание).
                    13. Операторы сравнения: >, <, <=, >=, ==, !=. Также к операторам сравнения обычно относят оператор проверки идентичности объектов is и оператор проверки неидентичности объектов is not.
                    14. Оператор присваивания имеет сокращенные формы: например, команду вида x = x + y можно записать в виде x += y. Такого типа сокращенные выражения можно использовать для всех арифметических и побитовых операторов.
                    15. Функция eval() позволяет вычислить выражение, которое в виде текста передано аргументом функции.
                    16. Для подключения модулей используется инструкция import, после которой указывается имя подключаемого модуля. При использовании переменный (функций) из подключенного модуля имя модуля (через точку) указывается перед именем переменной (функции). 
                    17. Тернарный оператор имеет три операнда и возвращает значение в зависимости от истинности или ложности некоторого условия (один из операндов тернарного оператора).
                - **Глава 2. Управляющие инструкции**
                    1. Условный оператор позволяет выполнять различные блоки кода в зависимости от истинности или ложности некоторого условия.
                    2. В условном операторе после ключевого слова if указывается условие, которое проверяется при выполнении оператора. Если условие истинно, выполняется блок команд после условия. Если условие ложно, выполняется блок команд после ключевого слова else.
                    3. В условном операторе else-блок не является обязательным. Также в условном операторе могут использоваться elif-блоки, что позволяет проверять в условном операторе последовательно несколько условий и выполнять для каждого из них отдельный блок команд.
                    4. Оператор цикла while позволяет многократно выполнять предопределенный набор команд.
                    5. После ключевого слова while в операторе цикла указывается условие.
                    Оператор выполняется, пока условие истинно. Условие проверяется в начале выполнения оператора, и затем каждый раз после выполнения группы команд оператора цикла.
                    6. Оператор цикла for удобен в том случае, если необходимо произвести перебор элементов некоторой последовательности. После ключевого слова for указывается переменная для выполнения перебора элементов последовательности, которая, в свою очередь, указывается после ключевого слова in. Переменная последовательно принимает значения элементов последовательности, и для каждого такого значения выполняется блок команд оператора цикла.
                    7. В качестве последовательности, которая указывается в операторе цикла for можно, кроме прочего, указывать текст, списки или виртуальную числовую последовательность, созданную с помощью функции range().
                    8. Инструкции break и continue используются в операторах цикла while и for соответственно для прекращения выполнения оператора цикла или для прекращения выполнения текущего цикла.
                    9. В операторах цикла (while и for) может использоваться else-блок, который выполняется по завершении работы оператора и при условии, что завершение работы оператора цикла не связано с выполнением инструкции break.
                    10. Механизм обработки исключительных ситуаций базируется на использовании инструкции try-except. Если при выполнении программного кода, помеченного ключевым словом try, возникает ошибка, она может быть перехвачена и обработана в одном из блоков, отмеченных инструкцией except. Для каждого except-блока после ключевого слова except можно указать тип ошибки (исключения), которая обрабатывается этим блоком.
                    
                    ```python
                    Обработка ошибок и исключений:
                    
                    ****************try:
                    		# основной код 
                    except Тип_ошибки_1:
                    		# вспомогательный код
                    except Тип_ошибки_2:
                    		# вспомогательный код
                    ...
                    except Тип_ошибки_N:
                    		# вспомогательный код****************
                    
                    В инструкции try-except помимо блоков try и except могут также использоваться блоки else и finally.
                    Общий шаблон инструкции в этом случае такой:
                    try:
                    		# основной код
                    except Тип_ошибки_1:
                    		# вспомогательный код
                    except Тип_ошибки_2:
                    		# вспомогательный код
                    ...
                    except Тип_ошибки_N
                    		# вспомогательный код
                    else: 
                    		# код для случая, если ошибки не было
                    finally: 
                    		# код, который выполняется всегда
                    ```
                    
                - **Глава 3. Функции**
                    1. При описании функции используем идентификатор def, после которого указывается имя функции, список аргументов (в круглых скобках) и, после двоеточия, программный код функции. 
                    2. Инструкция return в теле функции приводит к завершению выполнения программного кода функции, а значение, указанное после инструкции return, возвращается в качестве результата функции. 
                    3. При описании функции создается объект типа function. 
                    Имя функции является ссылкой на объект функции. 
                    Ссылка на объект функции может присваиваться переменной. В этом случае переменная будет ссылкой на функцию, и эта переменная может использоваться как имя функции.
                    4. Имя функции может передаваться аргументом другой функции.
                    5. Функция может возвращать в качестве результата функцию. В этом случае возвращается ссылка на функцию-результат.
                    6. У аргументов могут быть значения по умолчанию. Значение аргументов по умолчанию указываются через знак равенства после имени аргументов. Аргументы со значениями по умолчанию указываются в списке аргументов функции последними.
                    7. При описании функции в теле функции можно использовать вызов описываемой функции (обычно с другими аргументами). Такая ситуация называется рекурсией.
                    8. Лямбда-функция или анонимная функция - это функция без имени. Такие функции могут использоваться, например, для передачи аргументом в другие функции или возвращаться в качестве результата функции.
                    Описывается лямбда-функция с помощью ключевого слова lambda, после которого указывается список аргументов и, через двоеточие, выражение, которое является результатом лямбда-функции.
                    9. Если переменной присваивается значение в теле функции, то такая переменная является локальной. Она доступна только в теле функции. Если переменная в теле функции входит в выражения, но значение ей не присваивается, то такая переменная интерпретируется как глобальная. Чтобы ясвно объявить переменную в теле функции как глобальную, используют ключевое слово global
                    10. В теле функции могут описываться другие функции. Такие функции называются вложенными. 
                    Вложенные функции имеют доступ к переменным в теле внешней функции.
                - **Глава 4. Работа со списками и кортежами**
                - **Схемы и картинки**
                    
                    ![Python_If_Elif_Цикл.drawio.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/f6344d67-935d-4061-b0b2-71519e9f3f2a/Python_If_Elif_%D0%A6%D0%B8%D0%BA%D0%BB.drawio.png)
                    
- **************************Общие моменты**************************
    - ********************************************************Стадии развития разработчика********************************************************
        1. Академические знания 
        2. Стажер (интерн учебный проект)
        3. Junior (боевой опыт в проекте)
        4. Middle (автономность)
        5. Senior (может отвечать уже за других разработчиков)
        
        Разделения по специализациям:
        
        1. Techlead
        2. Teamlead
        3. Архитектор
        4. Руководитель разработки, СТО
        
        С чего начать?
        
        1. Важно понимать, что ************работодателю необходимо решить или закрыть некую проблему************
        2. Высшее образование важно, НО если оно принципиально, можно его получить уже в процессе работы
        3. Учить английский MUST HAVE
        4. Математика нужна в Backend-разработке
        5. Сколько времени нужно? - Фронтенд - от 6 до 9 мес, посложнее - 2 года
        
    - 
        
        Все языки программирования условно делятся на 2 группы:
        
        - Компилируемые
        - Интерпретируемые

### Математика

- **********************************************Линейная алгебра и геометрия**********************************************
- **********************************************Алгебра**********************************************
- **********************************************Математический анализ**********************************************
- **********************************************Дискретная математика**********************************************
- **********************************************Дифференциальные уравнения**********************************************
- **********************************************Теория вероятности и математическая статистика**********************************************

[************************************************************************************************************************Книга. Литвак Н. “Математика для безнадежных гуманитариев”************************************************************************************************************************](https://www.notion.so/762ed0e32248425b962ff94082cecad0?pvs=21)

### 

- Машинное обучение
- Методы оптимизации

### Другое

[******************************************************************************************Станислас Деан. “Как мозг кодирует мысли” Книга******************************************************************************************](https://www.notion.so/d107a256a46c4c2f95d6c809a95cb74c?pvs=21)

- ******************************************************************************************************************Вебинар от GeekBrains. [Получи новую профессию и сразу начни зарабатывать с помощью нейросетей](https://www.youtube.com/watch?v=0vtNWki52Bk&t=3093s) 16.09.2023**
    - ******************Маркетолог******************
        
        ****************************************************Чем занимается маркетолог?****************************************************
        
        ********************************За что отвечает?********************************
        Маркетолог привлекает клиентов к продукту или услуге. Таким образом влияет на прибыль компании. Поэтому это одна из самых востребованных и денежных профессий.
        
        ******Ежедневные задачи:******
        
        - Настраивает рекламные кампании
        - Делает презентации
        - Проводит аналитику рекламы
        - Пишет продающие тексты
        - Делает баннеры
        - Проводит конкурентную разведку
        - Делает сайты
        - Составляет контент-план для соц-сетей
        - Исследует рынок и ЦА
        
        ********************************************************************************************************С чем сталкиваются люди, когда решают сменить профессию и стать маркетологом********************************************************************************************************
        
        1. Долго учиться
        2. На работу не берут без опыта
        3. Конкуренция на рынке, много более опытных специалистов
        4. Во время обучения, как правило, нет дохода от нового направления
    - **********************************************Искусственный интеллект**********************************************
        
        ****************************************************************************************Искусственный интеллект меняет правила игры****************************************************************************************
        Врывайся “с ноги” в новую профессию!
        Стань специалистом с помощью нейросетей и начни зарабатывать деньги всего за месяц
        
        **************************************************Искусственный интеллект - это сложно? Нет!**************************************************
        Это уже наша реальность:
        
        - Про ИИ говорят из каждого утюга
        - ИИ - не только сложное программирование, но и удобные легкие программы, которыми каждый может пользоваться с телефона
        - Нейронные сети выполняют конкретные задачи, главное уметь поставить задачу программе
        
        ****************************************************************************************************Нейросети могут выполнять 90% рутинных задач маркетолога****************************************************************************************************
        Выполняются за считанные минуты
        
        1. Составить тексты для сайтов и дизайн
        2. Писать продающие тексты для рекламы
        3. Сделать презентации
        4. Составить контент-план для соц-сетей
        5. Провести аналитику рекламы
        6. Писать продающие тексты для рассылок
        7. Сделать баннеры, которые заметят
        8. Исследовать рынок и ЦА
        
        ********************************Нейросети - лучший ускоритель для старта в новой профессии********************************
        Сейчас достаточно:
        
        - Найти задачу, за которую готовы заплатить
        - Поставить нейросети правильное ТЗ
        - Передать заказчику результат
        - Получить деньги
    - ********************Уровни маркетологов********************
        
        **************************************************************Уровень 1. Маркетолог-фрилансер 30,000 - 60,000 в месяц**************************************************************
        
        - Быстрые живые деньги
        - Брать несколько заказов параллельно
        - Свободный график
        - Мониторинг бирж для фрилансеров
        - Много разных заказчиков
        - Постоянно новые задачи
        
        ********************Уровень 2. Штатный маркетолог от 100,000 в месяц********************
        
        - Стабильная работа
        - Работа в команде
        - Совмещать с фрилансом
        - Быстрое развитие
        - Возможность обучения
        
        ******************************Уровень 3. Топовый маркетолог. От 150,000 в месяц******************************
        
        - Возможность выбирать интересную компанию и проекты
        - Возможность влиять на прибыль компании и получать KPI
        - Возможность стать тим-лидом и руководить командой маркетологов
        - Потолка по доходу нет
    - **********Приступим к ПРАКТИКЕ! (Заходим на биржу - берем конкретный заказ - выполняем через нейросети**********
        - **Как делаются описания для нейросетей**
            
            *“Ты являешься интернет-маркетологом. Запускаешь новый продукт - подушки. Все продукты разные. Характеристик будет много. Я тебе дам сейчас пример описания одной из подушек. Твоя задача - придумать 3 похожих, но не списанных с примера описания.”*
            Задача должна быть **ОДНА, КОНКРЕТНАЯ и ЧЕТКАЯ**. 
            
            /Нейросеть выдала 3 текста. Они нас устраивают, идем дальше…/
            ******************************”Основываясь на этих текстах, сделай еще 3”****************************** /Не даем сразу 11 текстов, т.к. будет работать на количество, а не на качество, а нам необходимо **КАЧЕСТВО**/  
            /Дальше мы берем каждое описание, добавляем в отдельный файлик и прорабатываем дальше/
            
            **************************************************************************Второй способ (в качестве секретика):************************************************************************** 
            Есть нейронная сеть, которая называется [Gerwin.io](http://Gerwin.io) - отличная российская разработка для работы с текстами и описаниями. Именно она справляется лучше, чем ЧатГПТ, Клауд и др
            
            ****************************Задача перевести видео в текст. 6р/мин (400р/час)****************************
            Заходим на ютуб. Расширение Transcribe & Summary и получаем весь наш текст. 
            Дальше мы можем закинуть через кнопочку этот ролик в ЧатГПТ и он пишет описание - о чем этот ролик, делает списком с эмодзи, пишет вывод даже. 
            Если у нас стоит задача перевести аудио в  транскриб, можно закинуть аудио в ютуб, а оттуда уже транскрибировать. 
            
            ************************************************************************************************************Задача - Из видео сделать текст, а потом презентацию************************************************************************************************************ 
            Берем часть транскриба и идем в Бат (в ЧатГПТ лишь определенное количество символов) 
            Открываем Бат, скидываем текстовый файл с транскрибом и пишем: *********“Привет. Ты являешься организатором важного мероприятия. Твоя задача сейчас прочитать доклад одного из спикеров, выделить основные буллетпойнты выступления и сделать контент для презентации, рассчитанной на 10 слайдов минимум*********”. 
            Далее мы можем взять любой слайд и написать ********************************“Возьми Слайд 2 и напиши к нему короткую информацию к каждому из пунктов…********************************”
            Далее нам необходимо создать саму презентацию. Оформить ее. Нам нужно идти в Power Point? 
            Нет! Мы идем, например, в [ideogram.ai](http://ideogram.ai) - берем контент и генерим картинки. 
            Берем, например red fisker Karma (такой авто), выбираем сделать в виде постера и жмем ок. 
            
            **********************************************Задача: Написать контент-план********************************************** 
            Воспользуемся программой Notion. Назовем тему “Путешествия на Алтай.
            *Ты являешься контент-маркетологом. Ведешь профиль для турагентства, которое продает путевки на Алтай. Нам нужно создать рубрики, которые мы можем использовать в контент-плане.*
            Нейросеть выдала рубрики и их краткое описание.
            *Давай также подумаем над рубриками, которые помогут путешественникам. Важно учесть акклиматизацию, отели, еду, места интересов и страховку. Добавь в этот список вот эти рубрики*.
            Нейросеть выдала 5 рубрик. Далее:
            *Мне нужно теперь, основываясь на этой структуре, выше написать контент-план, который будет состоять из названия поста, вид поста: (пост, reals, карусель), рубрика и краткий план на этот пост. Сделай таблицу, где будут эти столбцы.*
            Нейросеть выдала таблицу с контент-планом. Далее:
            *Основываясь на вышеполученном плане, давай сделаем такой же, но с 5 постами под рубрику “Интересные места на Алтае”*
            Сеть выдает 5 мест на Алтае, но без конкретного описания, а просто основу и теперь мы идем в **бар** и 
            *Привет. Ты являешься гидом на Алтае. Какие бы 10 интересных мест ты бы выделил, чтобы показать их путешественникам.*
            И Нейросеть выдала 10 мест с краткими описаниями.
            Далее идем в DeepL и переводим, например, Телецкое озеро, а с переводом идем в Идеограм и вставляем и просим фото, некинематографичное и ждем картинки.
            
        - ************************************************************Что нужно для быстрого старта?************************************************************
            1. ******************************************************************************Сделать нейросети своими помощниками******************************************************************************
            Это значительно ускорит тебя и на старте даст недосягаемые конкурентные преимущества
            2. **************************************************************************Научиться выполнять самые простые задания в новой профессии**************************************************************************
            С первого же месяца получишь опыт и дополнительный доход 30,000 - 50,000 рублей
            
            ****************В чем фишка востребованного дорогостоящего маркетолога?****************
            
            - **Фундаментальные знания** - есть понимание целевой аудитории и ее потребностей. Знает, как составить оффер и донести клиенту ценность компании
            - **Навыки** - умеет запускать рекламные кампании, считать аналитику. Решает нестандартные задачи
            - **Опыт** - работа с большими проектами и компаниями в разных сферах и с разными каналами трафика
            
            **********************************************************************************************************************************************Как получить современную профессию и стать востребованным маркетологом?**********************************************************************************************************************************************
            
- ************************************************************Модуль: Стартовое обучение наставников 11 - 12.10.2023************************************************************
    - **********Урок 1. Введение. О GeekBrains и роли наставника**********
    - ************************************************************************************************Урок 2. Особенности роли наставника в GeekBrains************************************************************************************************
    - **********************************************************************************************************************Урок 3. Как помочь студентам разобраться в новом материале?**********************************************************************************************************************
        
        ******************************Помоги студенту самостоятельно найти ответ:******************************
        
        - Задавай наводящие вопросы
        - Приводи примеры схожих заданий
        - Попроси студента вспомнить какой подход использовать преподаватель на уроке
        
        **********************Как помочь студенту разобраться в теме?**********************
        
        - **Подскажи студенту вернуться к учебным материалам**. Какая-то из подтем рассказана преподавателем или описана в методичке. Если тема не освещена в материалах урока - поделись ссылками на внешние ресурсы.
        - **Определи значимость темы и расставь приоритеты** совместно со студентом. Например, если завтра дедлайн по сдаче домашнего задания, предложи студенту сфокусироваться на той части вопроса, которая поможет ему справиться с заданием, и обязательно вернись к дополнительным вопросам после.
        - **Предложи студенту изучить дополнительные материалы** - статьи, подкасты, вебинары из открытых источников.
        - **Самостоятельно объясни студенту материал** через уже известное. Используй примеры, аналогии, метафоры. Старайся подбирать такие примеры. которые понятны большинству.
        
        Если ты уже попробовал несколько вариантов, но **студенту по-прежнему сложно разобраться в теме, направь его за ответом к преподавателю**. Обязательно спроси о результатах - показывай свою вовлеченность и восполняй пробелы в знаниях!
        
    - ************************************************Урок 4. Этика наставника************************************************
        
        ************************************************************************************Этические убеждения наставника GeekBrains^************************************************************************************
        
        <aside>
        ⛔ **Нарушает дисциплину**: не отвечает на сообщения студентов, игнорирует вопросы.
        
        </aside>
        
        <aside>
        ✅ **Соблюдает дисциплину**: отвечает каждому студенту в течение 24 часов
        
        </aside>
        
        <aside>
        ⛔ **Транслирует надменность и сухость**. Общается со студентами сухо и грубо.
        
        </aside>
        
        <aside>
        ✅ **Общается приятным дружественным тоном**. Проявляет уважение к студентам
        
        </aside>
        
        <aside>
        ⛔ **Использует шаблонные ответы**. Не учитывает индивидуальные особенности студентов.
        
        </aside>
        
        <aside>
        ✅ **Находит индивидуальный подход** к каждому студенту. Делится своим опытом обучения.
        
        </aside>
        
    - ******************Урок 5. Как построить эффективную коммуникацию со студентами?******************
        - **********************************************************************************Как обозначить свою зону ответственности?**********************************************************************************
            
            Будь готов к тому, что **тематика вопросов от студентов может быть разной** и не всегда лежать в твоей зоне ответственности. Если такое произошло, следуй простым правилам:
            
            - Напомни студенту, что твоя основная задача - помочь разобраться в учебном материале
            - Перенаправь студента к куратору или технической поддержке
        - ************************************************************************************************Как из потока мыслей выделить реальную проблему?************************************************************************************************
            - **Задай уточняющие вопросы**. При большом количестве уточняющих вопросов поясни: ты задаешь так много вопросов, чтобы разобраться во всем как можно лучше и действительно помочь.
            - **Попроси студента привести конкретный пример**. На примере студент детально опишет, что именно в теме ему осталось непонятно.
            - **Опиши по шагам: как ты поможешь в решении вопроса**. Уточни, остались ли у студента еще вопросы по этой теме.
            - **Закончи разговор на позитивной ноте**, сказав: “Я всегда рад помочь тебе! Обращайся!”
        - **************************************************Как работать с негативом?**************************************************
            
            Если **образовательный опыт студента не соответствует** его ожиданиям, он ищет любой канал связи с GeekBrains, иногда **приходит со своей болью к наставнику**. Несколько советов, как действовать в такой ситуации:
            
            - **Вчитайся в сообщение, окажи студенту моральную поддержку**.
            - **Обозначь ответственного за решение проблемы и расскажи, как с ним связаться**
            
            **************************************************************************************************Что точно не стоит делать при работе с негативом:**************************************************************************************************
            
            - Давать шаблонные ответы
            - Задавать дополнительные вопросы
            Все уточняющие вопросы задаст человек, который будет помогать студенту в решении проблемы
            - Игнорировать негатив
            Обязательно отвечай на сообщения, соблюдай правила вежливости и будь тактичен. Своим примером ты покажешь студентам, как стоит выстраивать общение.
        - ****************************************************************************Как давать развивающую обратную связь?****************************************************************************
            
            **”Похвалить” - “Поругать” - “Похвалить”**
            
            - ******************************************************************************Отмечаем положительные моменты в работе******************************************************************************
                - “Приветствую! Отлично выполнено, понравилось, что …”
                - “Добрый день! Проект организован хорошо: …”
            - ************************************************************Говорим, что можно сделать лучше, указываем зоны роста / ошибки************************************************************
                - “Обрати внимание на второй пункт вопроса, в примере этот момент решен иначе. Думаю, что стоит сделать так, как показано в примере …”
                - “В первой задаче в начале ошибка при расчете …”
            - **************************************************************************Даем финальное побуждающее напутствие**************************************************************************
                - “Ты хорошо поработал. Продолжай в том же духе!”
                - “У тебя отлично получается. Ты можешь обратиться ко мне за советом и в следующий раз, буду рад помочь”.
    - ****************************************************************Урок 6. Как поддержать студентов?****************************************************************
        - **************************************************Стадии мотивации студента**************************************************
            
            **В начале обучения** студент находится на пике мотивации
            **********************************************************************На этом этапе важно настроиться на серьезную работу.**********************************************************************
            Для этого можно:
            
            - Поговорить о том, что вдохновляет студента: о его планах, целях, мечтах
            - Поделиться советами по организации учебного процесса и тайм-менеджменту
            
            ************************************************************После прохождения нескольких курсов мотивация студента падает************************************************************
            Проходит этап эйфории и наступает осознание, что впереди долгий и тернистый путь.
            Способы поддержать студентов на этом этапе:
            
            - Своевременно реагировать на запросы
            - Давать развивающую обратную связь
            - Хвалить за маленькие достижения
            
            **Ближе к экватору** обучения мотивация выравнивается
            **********************************************************************************************При общении со студентами в середине программы:**********************************************************************************************
            
            - Делай акцент на том, какой путь они уже прошли, чего достигли
            - Доверяй студентам больше ответственности
            
            **На финишной прямой** мотивации студентов идет вниз
            Причина этому - **синдром самозванца и неуверенность**
            Если студент делится с тобой подобными мыслями:
            
            - Внимательно выслушай его
            - Приободри студента, рассказав о собственном опыте обучения и опыте сокурсников
            - Поделись известными тебе историями успеха
        - ****************************************************************************************Как поддержать мотивацию студента к обучению****************************************************************************************
            
            Это нормально, если тебе трудно определить, на какой стадии мотивации находится студент. Способы поддержки, которые мы перечислили работают практически всегда
            
            **Резюмируем**:
            
            - Фокусируйся на сильных сторонах и достижениях студента
            - Говори о целях обучения
            - Делись личным опытом, рассказывай истории успеха
            - Помогай советом, делись лайфхаками эффективной учебы
        - **********Лайфхаки продуктивного обучения**********
            
            ********************************************************Лайфхаки эффективной учебы:********************************************************
            Несколько рекомендаций, которыми ты можешь поделиться со студентами, если видишь, что им непросто дается учеба:
            
            - Смотреть уроки маленькими блоками и вовлекаться в учебу понемногу, но каждый день
            - Перенести занятия на наиболее продуктивное время дня
            - Задавать больше вопросов преподавателю на уроке и одногруппникам в чате
            - Разнообразить расписание дня: не забыть про физическую активность или хобби, а также общение с друзьями и семьей.
            
    - ****************Урок 7.****************
        
        
- **Видео**
    - **CS50 Harward**
        - [Лекция](https://www.youtube.com/watch?v=SW_UCzFO7X0&t=2s) 01 - 45 мин
        - [Лекция](https://www.youtube.com/watch?v=7fJ42lfCUXg) 02 - 64 мин
        - [Лекция](https://www.youtube.com/watch?v=agdXnmEadCM&t=1s) 03 - 50 мин
        - [Лекция](https://www.youtube.com/watch?v=ej3EA451m2c&t=1s) 04 - 53 мин
    - по 30.11.2023 = 6,000 минут или 100 часов
    - [План как стать программистом](https://www.youtube.com/watch?v=qyosZkVSfe4) - 25 мин
    - [Путь программиста, который почти никто не вывозит](https://www.youtube.com/watch?v=BZ2Ee3HgIVY&t=486s) - 14 мин
    - Python. [Roadmap](https://www.youtube.com/watch?v=i6n9-_oh_2E&t=520s) - 27 мин
    - [Теория вероятностей для программиста](https://www.youtube.com/watch?v=X8W-6RDHqxM) - 13 мин
    - [История одного килобайта](https://www.youtube.com/watch?v=6n8gALZzBx4) - 11 мин
    - [Командная строка для самых маленьких](https://www.youtube.com/watch?v=LtZpdRJvU1A) - 21 мин
    - Языки программирования. [Что нужно знать](https://www.youtube.com/watch?v=PS4S8BnURYU)? - 13 мин
    - [Как изучать программирование](https://www.youtube.com/watch?v=Cser9bunQ7Q) - 31 мин
    - [Вся сложность алгоритмов](https://www.youtube.com/watch?v=cXCuXNwzdfY) - 11 мин
    - Как работать с битами. [Основы программирования](https://www.youtube.com/watch?v=qewavPO6jcA&t=1327s) - 25 мин
    - Вся правда о массивах. [Структуры данных](https://www.youtube.com/watch?v=47_LhSf-ago) - 13 мин
    - Ускорь свой код в миллион раз. [Алгоритмы](https://www.youtube.com/watch?v=cyIw3NKfdGw&t=1177s) - 33 мин
    - [Путь программиста с полного нуля до Дзен за 24 шага](https://www.youtube.com/watch?v=uOa7XtkK1vQ) - 25 мин
    - [Эти книги сделают из тебя хакера](https://www.youtube.com/watch?v=7ijMUXRtnZQ) - 16 мин
    - Володя Моженков - 786 мин
    - [Notion. Полный практический курс с нуля](https://www.youtube.com/watch?v=JbJducQmxqw) - 38 мин
    - Про Kanban простыми словами - 10 мин
    - Как компьютер думает транзисторами - 31 мин
    - Сверхинтеллект. Начало - 70 мин
    - Хакатон. Что такое? Зачем он нужен? - 20 мин
    - Душкин объясняет - 35 мин
    - GeekBrains. Курсы для детей. - 140 мин
    - GeekBrains. Востребованная профессия - 140 мин
    - GeekBrains. Основы программирования - 90 мин
    - GeekBrains. Git - 90 мин
    - Кому не стоит идти в программисты - 17 мин
    - Как делают игры и про игровые движки - 117 мин
    - Прочие по теме - 3,840 мин
- **Распределить**
    - **Распределенные системы**
    - **Теоретическая информатика**
    - **Анализ и принятие решений**
    - **Анализ данных и интеллектуальные системы**
    - **Математическая инженерия в науке и бизнесе**
    - **Промышленная разработка**
    - **Проектирование**
    - **Нейросетевые технологии**
    - **Системное программирование**
    - **Медиа и массовые коммуникации**
    - **Основы программной инженерии**
    - **IT-Менеджмент**
    - **Принципы разработки ПО**
    - **Высокопроизводительные вычисления**
    - **Параллельные вычисления**
    - **Компьютерные сети**

### **1 четверть**

- ********************************************************************************Разработчик - Программист. Специализация********************************************************************************
    - ************************************Основная Программа (28.11.2023 -************************************
        - **Знакомство с языком Python (28.11.23 -**
            - **Лекции (5 уроков)**
                - **[Лекция 1](https://gb.ru/lessons/387269). Знакомство с языком программирования Python - 50 мин**
                    
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681957/attachment/1c087c4ab6843d78755c442d9de3d2bb.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/3681957/attachment/1c087c4ab6843d78755c442d9de3d2bb.pdf)
                    
                    ```python
                    n = int(input())
                    r = range(n, n + 1000)
                    flag = True
                    i = 2
                    while flag:
                        if n % i == 0:  # if remain from division n to i is 0
                            flag = False
                            print(i)
                        elif i > n // 2:  # divider of number can't be more than input divided to 2 number
                            print(n)
                            flag = False
                        i += 1
                    ```
                    
                - ****************Лекция 2. Коллекции данных. Профилирование и отладка - 40 мин****************
                    
                    
                    [Видео](https://gb.ru/lessons/387270)
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681985/attachment/2b53800e2531729158451a1ce970419b.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/4930873/attachment/f47fe672dae3f865d23fd98479dde5f7.pdf)
                    
                    ```python
                    list_1 = []
                    list_1 = list()
                    list_1 = [1, 2, 3, 8]
                    print(f'list_1: {list_1}')
                    print(f'list_1: ', *list_1)  # Вывод через пробел и без квадратных скобочек
                    
                    for i in list_1:
                        print(i, end = ' ')
                        i += 1
                    print(f'\nlen(list_1): {len(list_1)}')
                    
                    print(f'list_1[3]: {list_1[3]}')
                    ```
                    
                    ```python
                    list_1 = [1, 5]
                    print(list_1)
                    list_1.append(8)
                    print(list_1)
                    list_1.append(85)
                    print(list_1)
                    
                    for i in range(5):
                        list_1.append(i)
                        i += 1
                    print(list_1)
                    
                    # Удаление последнего элемента из списка
                    print(list_1.pop())  # 4
                    print(list_1)  
                    print(list_1.pop())  # 3
                    print(list_1)
                    print(list_1.pop())  # 2
                    print(list_1)
                    
                    # Удаление конкретного элемента из списка
                    list_1 = [12, 7, -1, 21, 0]
                    print(list_1.pop(0))  # 12
                    print(list_1)
                    
                    # Добавление элемента на нужную позицию
                    list_1.append(0)
                    print(list_1)
                    print(list_1.insert(2, 11))
                    print(list_1)
                    ```
                    
                    ```python
                    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    print("Выводим нулевой элемент: ", list_1[0])
                    print("Выводим первый элемент: ", list_1[1])
                    print("Выводим последний элемент: ", list_1[len(list_1) - 1])
                    print("Выводим с конца 5й элемент: ", list_1[-5])
                    print("Выводим все элементы по порядку с шагом 1: ", list_1[:])
                    print("Выводим элементы до 2го: ", list_1[:2])
                    print("Выводим элементы, начиная от второго с конца: ", list_1[len(list_1) - 2:])
                    print("Выводим элменты с индекса 2 по 9: ", list_1[2:9])
                    print("Выводим элементы с 6 с : ", list_1[6:-18])
                    print("Выводим элементы с 0 по макс с шагом 6: ", list_1[0:len(list_1):6])
                    print("Выводим все элементы с шагом 6: ", list_1[::6])
                    ```
                    
                    ```python
                    t = ()
                    
                    print(type(t))
                    
                    t = (1)
                    print(type(t))
                    t = (1, )
                    print(type(t))
                    t = (1, 2, 3, 4, 5)
                    print(type(t))
                    t = (1, 2, 3, 4, 5, )
                    print(type(t))
                    
                    v = [1, 8, 9, 4]
                    print(type(v))
                    
                    v = tuple(v)
                    print(type(v))
                    print(v)
                    
                    a, b, c, d = v
                    print(a, b, c, d)
                    ```
                    
                    ```python
                    t = (1, 2, 3, 5,)
                    
                    for i in t:
                        print(i, end = ' ')
                    print()
                    
                    for i in range(len(t)):
                        print(t[i],  end = ' ')
                    ```
                    
                    ```python
                    d = {}
                    d = dict()
                    
                    d['q'] = 'qwerty'
                    print(d)
                    d['w'] = 'werty'
                    print(d['w'])
                    
                    dictionary = {}
                    dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
                    print(dictionary)
                    print(dictionary['left'])
                    print(dictionary['up'])
                    dictionary['left'] = '◄'
                    print(dictionary['left'])
                    # print(dictionary['type'])
                    del dictionary['left']
                    for item in dictionary:
                        print('{}: {}'.format(item, dictionary[item]))
                    dictionary[895] = 98998
                    print(dictionary)
                    print(dictionary.items())
                    
                    for (k, v) in dictionary.items():
                        print(k, v)
                    ```
                    
                    ```python
                    colors = {'red', 'green', 'blue'}
                    print(colors)
                    colors.add('red')
                    print(colors)
                    colors.add('gray')
                    print(colors)
                    colors.remove('red')
                    print(colors)
                    # colors.remove('red')
                    colors.discard('red')
                    print(colors)
                    colors.clear()
                    print(colors)
                    colors.clear()
                    print(colors)
                    
                    q = set()
                    print(q)
                    ```
                    
                    ```python
                    # Операции с множествами
                    a = {1, 2, 3, 5, 8}
                    b = {2, 5, 8, 13, 21}
                    c = a.copy()            # {1, 2, 3, 5, 8}
                    print(c)
                    u = a.union(b)          # {1, 2, 3, 5, 8, 13, 21}
                    print(u)
                    i = a.difference(b)     # {1, 3}
                    print(i)
                    di = a.difference(a)    # set()
                    print(di)
                    dr = b.difference(a)    # {13, 21}
                    print(dr)
                    q = a.union(b).difference(a.intersection(b))  # {1, 21, 3, 13}
                    print(q)
                    ```
                    
                    ```python
                    # Замороженные множества
                    a = {1, 8, 6}
                    b = frozenset(a)
                    print(b)
                    
                    # Задача: Создать список, состоящий из четных чисел от 1 до 100
                    list_1 = []
                    for i in range(1, 101):
                        list_1.append(i)
                    print('program in 3 strings: ', list_1)
                    
                    list_1 = [i for i in range(1, 101)]
                    print('programm in 1 string: ', list_1)
                    
                    list_1 = [i for i in range(1, 101) if not i %2]
                    print('program in 1 string "even numbers": ', list_1)
                    
                    list_1 = [(i, i) for i in range(1, 101) if not i % 2]
                    print('Создадим пары каждому из чисел (кортежи): ', list_1)
                    
                    list_1 = [i * 2 for i in range(10) if not i % 2]
                    print('Умножим значения на 2: ', list_1)
                    ```
                    
                - ****************Лекция 3. Функции, рекурсия, алгоритмы - 35 мин****************
                    
                    
                    [Видео](https://gb.ru/lessons/387271)
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3681992/attachment/6c93769617a21fed4f4bc56585d29c33.pdf)
                    
                    [Методичка](https://gbcdn.mrgcdn.ru/uploads/asset/4930886/attachment/dd26301ff7f87e47e796ba6b67215c45.pdf)
                    
                    ```python
                    def sum_numbers(n):
                        sum = 0
                        for i in range(1, n + 1):
                            sum += i
                        print(sum)
                    n = int(input('Enter the number: '))
                    sum_numbers(n)
                    ```
                    
                    ```python
                    def sum_numbers(n, y = 'Hello'):
                        print(y)
                        sum = 0
                        for i in range(1, n + 1):
                            sum += i
                        return(sum)
                        print('stop') # Не воспринимает эту строку, т.к. уже возвращено значение
                    n = int(input('Enter the number: '))
                    print(sum_numbers(n))
                    a = sum_numbers(n)
                    print(a)
                    ```
                    
                    ```python
                    def sum_str(*args):  # unbounded arguments amount
                        res = ''
                        for i in args:
                            res += i
                        return res
                    print(sum_str('q', 'e', 'i'))
                    print(sum_str('q', 'e', 'i', 'r', 'f'))
                    print(sum_str('1', '8', '9', 'i'))
                    ```
                    
                    ```python
                    module01.py
                    
                    def max1(a, b):
                        if a > b:
                            return a  # else won't work after return
                        return b
                    ```
                    
                    ```python
                    import module01
                    print(module01.max1(15, 9))
                    
                    from module01 import max1
                    print(max1(5, 9))
                    
                    from module01 import *
                    print(max(10, 9))
                    
                    import module01 as m01
                    print(m01.max1(16, 241))
                    ```
                    
                    ```python
                    def fib(n):
                        if n in [1, 2]:
                            return 1
                        return fib(n - 1) + fib(n - 2)
                    
                    list_1 = []
                    for i in range(1, 10):
                        list_1.append(fib(i))
                    print(list_1)
                    ```
                    
                    ```python
                    # Fast sorting
                    
                    def quick_sort(array):
                        if len(array) <= 1:
                            return array
                        else:
                            pivot = array[0]
                        less = [i for i in array[1:] if i <= pivot]
                        greater = [i for i in array[1:] if i > pivot]
                        return quick_sort(less) + [pivot] + quick_sort(greater)
                    
                    print(quick_sort([14, 5, 9, 6, 3, 58, 7, 5, 2, 7]))
                    ```
                    
                    ```python
                    def quick_sort(array):
                        if len(array) <= 1:
                            return array
                        else:
                            pivot = array[0]
                        less = [i for i in array[1:] if i <= pivot]
                        greater = [i for i in array[1:] if i > pivot]
                        return quick_sort(less) + [pivot] + quick_sort(greater)
                    
                    print(quick_sort([10, 5, 2]))
                    ```
                    
                    ```python
                    # Merge sort
                    
                    def merge_sort(nums):
                        if len(nums) > 1:
                            mid = len(nums) // 2
                            left = nums[:mid]
                            right = nums[mid:]
                            merge_sort(left)
                            merge_sort(right)
                            i = j = k = 0
                            while i < len(left) and j < len(right):
                                if left[i] < right[j]:
                                    nums[k] = left[i]
                                    i += 1
                                else:
                                    nums[k] = right[j]
                                    j += 1
                                k += 1
                            while i < len(left):
                                nums[k] = left[i]
                                i += 1
                                k += 1
                            while j < len(right):
                                nums[k] = right[j]
                                j += 1
                                k += 1
                    
                    list_1 = [1, 5, 6, 9, 8, 18, 4, 9, 1, 55, 2, 4, 7]
                    merge_sort(list_1)
                    print(list_1)
                    ```
                    
                - ****************Лекция 4****************
                    
                    ```python
                    
                    ```
                    
                - ****************Лекция 5****************
                    
                    ```python
                    
                    ```
                    
            - **Семинары (10 уроков)**
                
                ```python
                
                ```
                
                - **[Семинар 01](https://gb.ru/lessons/387274)**
                    
                    
                    [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4930953/attachment/d82b5c9437fe83c67401681b4ab00c6c.pdf)
                    
                    Кирилл Панфилов. [Канал Youtube](https://www.youtube.com/channel/UCCC7ihYh4SNQZj26adlk2Kg)
                    
                    - **001**
                        
                        ```python
                        # За день машина проезжает п километров. 
                        # Сколько дней нужно, чтобы проехать маршрут длиной m километров?
                        # При решении этой задачи нельзя пользоваться условиями и циклами
                        
                        import math
                        n = int(input("Введите кол-во километров, которое проезжает за день авто: "))
                        m = int(input("Введите кол-во километров пути: "))
                        days = math.ceil(m / n)
                        print("Количество дней в пути: ", days)
                        
                        Решение на семинаре:
                        per_day = int(input("km per day: "))
                        total = int(input("total kilometers: "))
                        days = (total + per_day - 1) // per_day
                        print(days)
                        
                        import math
                        per_day = int(input("km per day: "))
                        total = int(input("total kilometers: "))
                        days = total // per_day + bool(total % per_day != 0)
                        print(days)
                        ```
                        
                    - **002**
                        
                        ```python
                        # Найдите сумму трехзначного числа
                        
                        num = int(input("Введите трехзначное число: "))
                        sum = num // 100 + (num // 10 - num // 100 * 10) + num % 10
                        print(sum)
                        ```
                        
                    - **003**
                        
                        ```python
                        # В некоторой школе решили набрать три новых математических класса и
                        # оборудовать кабинеты для них новыми партами.
                        # За каждой партой может сидеть два учащихся.
                        # Известно кол-во учащихся в каждом из трех классов.
                        # Выведите наименьшее число парт, которое нужно приобрести для них.\
                        
                        from math import ceil
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = ceil(class_1 / 2) + ceil(class_2 / 2) + ceil(class_3 / 2)
                        print(desks)
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = (class_1 // 2 + bool(class_1 % 2 != 0)) + (class_2 // 2 
                        + bool(class_2 % 2 != 0)) + (class_3 // 2 + bool(class_3 % 2 != 0))
                        print(desks)
                        
                        class_1 = int(input("Enter amount of classmates 1: "))
                        class_2 = int(input("Enter amount of classmates 2: "))
                        class_3 = int(input("Enter amount of classmates 3: "))
                        desks = ((class_1 + 1) // 2) + ((class_2 + 1) // 2) + ((class_3 + 1) // 2)
                        print(desks)
                        
                        ```
                        
                    - **004**
                        
                        ```python
                        # Петя, Катя и Сережа делают из бумаги журавликов.
                        # Вместе они сделали S журавликов.
                        # Сколько журавликов сделал каждый ребенок, если известно, что:
                        # Петя и Сережа сделали одинаковое кол-во журавликов, 
                        # а Катя сделала в 2 раза больше журавликов, чем Петя и Сережа вместе?
                        
                        S = int(input("Введите количество журавликов: "))
                        
                        x = int(S / 6)
                        
                        amount_Peter = x
                        amount_Sergey = x
                        amount_Kate = 4 * x
                        
                        print("Петя сделал:", amount_Peter, "журавликов")
                        print("Сергей сделал:", amount_Sergey, "журавликов")
                        print("Катя сделала:", amount_Kate, "журавликов")
                        ```
                        
                    - **005**
                        
                        ```python
                        # Вагоны в электричке пронумерованы натуральными числами, начиная с 1.
                        # При этом иногда вагоны нумеруются от "головы", иногда - с "хвоста";
                        # Это зависит от того, в какую сторону едет электричка.
                        # в каждом вагоне написан его номер.
                        # Витя сел в i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j.
                        # Он хочет определить сколько всего вагонов в электричке. 
                        # Напишите программу, которая будет это делать или сообщать, 
                        # что без дополнительной информации это сделать невозможно.
                        
                        vagon_number_i = int(input("Введите вагон с головы: "))
                        vagon_number_j = int(input("Введите вагон с хвоста: "))
                        if vagon_number_i != vagon_number_j:
                            vagon_total = vagon_number_i + vagon_number_j - 1
                            print(vagon_total)
                        else:
                            print("Нифига не понять, сколько вагонов!")
                        ```
                        
                    - **006**
                        
                        ```python
                        # Вы пользуетесь общественным транспортом?
                        # Вероятно вы расплачивались за проезд и получали билет с номером.
                        # Счастливым билетом называют такой билет с 6-значным номером, где 
                        # сумма первых трех цифр равна сумме последних трех.
                        # Напишите программу, которая проверяет "счастливость" билета
                        
                        number_of_billet = int(input("Введите номер билета: "))
                        
                        # second_three_digits = 
                        
                        sixth_digit = number_of_billet // 100000
                        print("6 digit: ", sixth_digit)
                        fifth_digit = number_of_billet // 10000 - number_of_billet // 100000 * 10
                        print("6 digit: ", fifth_digit)
                        fourth_digit = number_of_billet // 1000 - number_of_billet // 10000 * 10
                        print("6 digit: ", fourth_digit)
                        third_digit = number_of_billet // 100 - number_of_billet // 1000 * 10
                        print("6 digit: ", third_digit)
                        second_digit = number_of_billet // 10 - number_of_billet // 100 * 10
                        print("6 digit: ", second_digit)
                        first_digit = number_of_billet % 10
                        print("6 digit: ", first_digit)
                        
                        first_half_sum_number = sixth_digit + fifth_digit + fourth_digit
                        second_half_sum_number = third_digit + second_digit + first_digit
                        
                        print("first sum: ", first_half_sum_number)
                        print("second sum: ", second_half_sum_number)
                        
                        if first_half_sum_number == second_half_sum_number:
                            print("Yeah!")
                        else:
                            print("No!")
                        ```
                        
                    - **007**
                        
                        ```python
                        # Дано натуральное число. 
                        # Требуется определить, является ли год с данным номером високосным.
                        # Если год является високосным, то выведите YES, иначе выведите NO.
                        # Напомним, что в соответствии с григорианским календарем, 
                        # год является високосным, если он кратен 4, но не кратен 100
                        # Но также если он кратен 400 - тогда високосный.
                        ```
                        
                    - **008**
                        
                        ```python
                        # Требуется определить, можно ли от шоколадки размером n x m долек отломить
                        # k долек, если разрешается сделать один разлом по прямой между дольками,
                        # т.е. разломить шоколадку на 2 прямоугольника
                        ```
                        
                - **************Семинар 02**************
                    - 009
                        
                        ```python
                        # По данному целому неотрицательному n вычислите значение n!. N! = 1 * 2 * 3 * ... * N 
                        # (произведение всех чисел от 1 до N) 0! = 1 Решить задачу, используя цикл while 
                        # Input: 5 
                        # Output: 120
                        
                        n = int(input("Enter the number: "))
                        i = 1
                        factorial = 1
                        while i <= n:
                            factorial *= i
                            i += 1
                        print(f"{n}! = {factorial}")
                        ```
                        
                    - 010
                        
                        ```python
                        
                        ```
                        
                    - 011
                        
                        ```python
                        
                        ```
                        
                    - 012
                        
                        ```python
                        
                        ```
                        
                    - 013
                        
                        ```python
                        
                        ```
                        
                    - 014
                        
                        ```python
                        
                        ```
                        
                    - 015
                        
                        ```python
                        
                        ```
                        
                    - 016
                        
                        ```python
                        
                        ```
                        
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
                    - 026
                        
                        ```python
                        
                        ```
                        
                    - 027
                        
                        ```python
                        
                        ```
                        
                    - 028
                        
                        ```python
                        
                        ```
                        
                    - 029
                        
                        ```python
                        
                        ```
                        
                    - 030
                        
                        ```python
                        
                        ```
                        
                    - 031
                        
                        ```python
                        Последовательностью Фибоначчи называется
                        последовательность чисел a0
                        , a1
                        , ..., an
                        , ..., где
                        a0
                         = 0, a1
                         = 1, ak
                         = ak-1 + ak-2 (k > 1).
                        Требуется найти N-е число Фибоначчи
                        Input: 7
                        Output: 21
                        Задание необходимо решать через рекурсию
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input("Enter the FIBO index: "))
                        # i = 0
                        
                        # while i < fib_index - 2:
                        #     fib_sum = fib_1 + fib_2
                        #     fib_1 = fib_2
                        #     fib_2 = fib_sum
                        #     i += 1
                        # print(f"The number of your FIBO index is: {fib_2}")
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input('Enter the FIBO index: ')) - 2
                        
                        # while fib_index > 0:
                        #     fib_1, fib_2 = fib_2, fib_1 + fib_2
                        #     fib_index -= 1
                        # print(f'The number of your FIBO index is: {fib_2}')
                        
                        # fib_1 = fib_2 = 1
                        # fib_index = int(input('Enter the FIBO index: '))
                        # #print(fib_1, fib_2, end = ' ')
                        
                        # for i in range(2, fib_index):
                        #     fib_1, fib_2 = fib_2, fib_1 + fib_2
                        # print(fib_2, end = ' ')  # max index = 20577
                        
                        def fibonacci(n):
                            if n in (1, 2):
                                return 1
                            return fibonacci(n - 1) + fibonacci(n - 2)
                        fib_index = int(input('Enter the FIBO index: '))
                        print(fibonacci(fib_index))
                        ```
                        
                    - 032
                        
                        ```python
                        
                        ```
                        
                    - 033
                        
                        ```python
                        
                        ```
                        
                    - 034
                        
                        ```python
                        
                        ```
                        
                    - 035
                        
                        ```python
                        
                        ```
                        
                    - 036
                        
                        ```python
                        
                        ```
                        
                    - 037
                        
                        ```python
                        
                        ```
                        
                - **************Семинар 06**************
                - **************Семинар 07**************
                - **************Семинар 08**************
                - **************Семинар 09**************
                - **************Семинар 10**************
        - **Java: знакомство и как пользоваться базовым API**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Объектно-ориентированное программирование**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Подготовка к дипломному проекту**
        - **Исключения в программировании и их обработка**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Промежуточная контрольная работа по блоку Специализация**
        - **Операционные системы и виртуализация (Linux)**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Контейнеризация**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Базы данных и SQL**
            - **Лекции**
                - **Лекция 1**
                - ****************Лекция 2****************
                - ****************Лекция 3****************
                - ****************Лекция 4****************
                - ****************Лекция 5****************
            - **Семинары**
                - **************Семинар 01**************
                - **************Семинар 02**************
                - **************Семинар 03**************
                - **************Семинар 04**************
                - **************Семинар 05**************
        - **Итоговая контрольная работа по блоку Специализация**
        - **Выбор технологической специализации. Обязательно для продолжения обучения**
    - **********************Факультатив**********************
        - **Веб-верстка HTML/CSS**
            - ************Лекции************
            - ****************Семинары****************
        - **Искусственный интеллект**
            - ************Лекции************
            - ****************Семинары****************
        - **Знакомство с веб-технологиями**
            - ************Лекции************
            - ****************Семинары****************
        - **Парадигмы программирования и языки парадигм**
            - ************Лекции************
            - ****************Семинары****************
        - **Гибкие методологии (Agile, SCRUM, Канбан и другие)**
            - ************Лекции************
            - ****************Семинары****************
        - **Алгоритмы и структуры данных**
            - ************Лекции************
            - ****************Семинары****************
        - **Введение в IoT**
            - ************Лекции************
        - **Компьютерные сети**
            - ************Лекции************
            - ****************Семинары****************
        - **Контроль версий углубленно (GIT)**
            - ************Лекции************
            - ****************Семинары****************
        - **Вводный курс по Big Data**
            - ************Лекции************
            - ****************Семинары****************
        - **MongoDB**
        - **Data Scuence передовые технологии**
        - **Основы информационной безопасности**
- **************************************************Буткемп. Продакт-менеджер 10.11.2023 -**************************************************
    - **[Урок 1.](https://gb.ru/lessons/375308) Как создать продукт за 30 дней и 30 ночей [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/5483238/attachment/87a27929f807b15ca922340ffca2e50f.pdf)**
        - **************************Преподаватель**************************
            
            ****************************************Станислав Завершинский -**************************************** Founder/CEO стартапов, трекер-консультант ФРИИ
            
            - Founder и CEO стартапа CommTrade (B2B SaaS на рынке США и РФ). Успешные раунды от бизнес-ангела и от акселератора в США, оценка компании в 2 млн долларов
            - СРО стартапа Longevity Hub, консультант стартапов в фонде и акселераторе ФРИИ
            - Проходил акселерации в РФ, США и Европе. С 2014 года запускаю стартапы и продукты, стараюсь помогать проектам развиваться разумно.
            - Найти мои бредни можно тут: https://t.me/reflinc
            
        - **Что мы будем делать и как делать?**
            - 30 дней буткемпа
            - 60 минут занятие
            - Минимум необходимой теории - максимум практики
            - 1 общий продукт
            
            <aside>
            💡 Полное погружение в разработку, запуск и управление продуктом с нуля!
            
            </aside>
            
            **********************************Работа над продуктом:**********************************
            
            - **************Гипотезы и lean canvas**************
            - Конкурентный анализ + Customer Research
            - Как не терять продуктовый подход в работе + Как привлечь пользователей?
            - Питчинг + Продуктовый дизайн и MVP
            - Инвестиции
            - ********************************Карьерные советы********************************
            
            ************************************************************Для того, чтобы буткемп прошел продуктивно, вам необходимо:************************************************************
            
            - Внимательно смотреть все лекции, а еще лучше - **выполнять практические задачи**, так вовлеченность в обучение выше
            - Выполнять **домашние задания** - только так вы погрузитесь в специальность максимально
            - **Участвовать в обсуждениях** в комментариях под вебинаром
        - ******************************************************************************Как создать продукт за 30 дней и 30 ночей
        День 1:****************************************************************************** Разбор задачи по созданию продукта “Буткемп” и инструментов его реализации
            
            ************************************************************************************************************************************************Что такое продукт? - Товар или услуга, которую можно предложить рынку, и которая:************************************************************************************************************************************************
            
            - будет удовлетворять потребности клиентов
            - будет достигать поставленные цели компании
            
            ****************************************************Другие определения продукта:****************************************************
            
            - Способ конкретной реализации нашей идеи и конкретный способ зарабатывать деньги (А. Морейнис)
            - Клиент х Бизнес х Технологии (Марти Кеган)
            - Все, что может быть полезно людям настолько, что они готовы за это заплатить (Аноним)
            
            ******************Сформулируйте гипотезу своего продукта, запуском которого вы хотели бы заняться******************
            
            ************************************************************Какой продукт мы будем делать?************************************************************
            
            **Продукт**: Разрабатываем и запускаем курс-bootcamp для молодых продактов “Как создать продукт за 30 дней и 30 ночей”
            
            <aside>
            💡 **Гипотеза**: У молодых специалистов специальностей продакт-менеджмент будет востребован короткий курс в формате марафона, на котором по шагам ежедневно будет создаваться продукт и освещаться методы и инструментарий запуска продуктов.
            
            </aside>
            
            **********************Soft Skills**********************
            
            - **********************************************Умение решать проблемы!**********************************************
            - Коммуникационные навыки
            - Гибкость
            - Личная эффективность (Тайм-менеджмент)
            - Управление ожиданиями стейкхолдерами
            - Лидерские навыки
            - Умение гасить конфликты
            - Умение говорить “нет”
            - Навыки мотивации команды
            
            ********************Hard Skills********************
            
            - **********************************************Работа с пользователями**********************************************
                - CustDev
                - Customer Journey Map
            - ************************************Работа с метриками************************************
                - Работа с системами аналитики (Я.Метрика, Google Analytics, мобильная аналитика)
                - Проведение А/В тестов
                - Расчет юнит-экономики
            - ****************************************************Понимание рынка и продукта****************************************************
                - Определение объема рынка (TAM, SAM, SOM)
                - Определение стратегии выхода на рынок (ADL-матрица, 5 сил Портера, SWOT-анализ, PEST-анализ
                - Определение бизнес-модели продукта (Lean Canvas, Business Model Canvas, Value Proposition)
            - ****************************************************************Выстраивание процессов разработки****************************************************************
                - Управление разработкой:
                - Фреймворки приоритизации продуктовых задач
                - Формирование дорожной карты продукта
            
            ************************************************************А что будет дальше?
            Вводный урок 2: “Продакты создают продукт!”************************************************************
            Определяем верхнеуровневый план работ и зоны ответственности продакта и проджекта
            
            ********************************Домашнее задание********************************: Продумайте верхнеуровневую гипотезу своего продукта и пропишите подробный план - дорожную карту работы над его запуском по шагам.
            
    - **[Урок 2.](https://gb.ru/lessons/375309) Product development. [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/5483241/attachment/5724e27bdfc85abc07f98472e896d036.pdf)**
        
        ********************************Вводный урок 2:******************************** “Продакты создают продукт!” Определяем верхнеуровневый план работ и зоны ответственности продакта и проджекта.
        
        - ****************************************************************************************************************************************************************************************************************************************************Product development - (разработка нового продукта) процесс создания и вывода нового продукта (товара или услуги) на рынок.****************************************************************************************************************************************************************************************************************************************************
            
            Что включает в себя Product Development:
            
            - Изменения в существующий продукт
            - Полная переработка продукта
            - Расширение продуктовой линейки
            - Новая продуктовая линейка
            - Новое позиционирование
            - Абсолютно новый продукт
            
            **************************************************Этапы Product development**************************************************
            
            1. Формулирование проблемы
            2. Генерация и проверка гипотез продукта
            3. Экономический анализ
                1. Оценка объемов рынка
                2. Оценка прибыльности и точки безубыточности (юнит-экономика)
            4. Запуск MVP продукта
                1. Первая версия продукта
                2. Первые пользователи
                3. Внесенные изменения
            5. Реализация и запуск полноценного продукта
            6. Масштабирование
            
            ********************************************************Генерация и проверка гипотез********************************************************
            
            Необходимо сформировать список гипотез и найти дешевые способы проверить их
            На какие вопросы необходимо ответить?:
            
            - **Какая боль решается?** - Не могу позволить репетитора для ребенка так дорого
            - **Кто ваш клиент?** - Женщины 35+ с детьми школьного возраста
            - **Какие каналы продвижения будут использоваться?** - ВК, Инстаграм, Фэйсбук, реклама в лифте
            - **Кто ваши конкуренты?** - Обычные репетиторы
            - **Какое ваше конкурентное преимущество?** - Низкая цена
            
            **************************Экономический анализ - Считаем экономику продукта, чтобы подтвердить ее жизнеспособность**************************
            
            - Оцениваем объемы рынка вашего продукта, и потенциальную долю, которую планируется занять, таким образом мы оцениваем примерную выручку продукта
            - Считаем юнит-экономику продукта, чтобы на старте понимать, может ли продукт приносить прибыль
                
                TAM - 1 млрд руб
                SAM - 100 млн руб
                SOM - 10 млн руб
                
            
            **********Запуск MVP-продукта. Первая версия продукта**********
            С помощью максимально простой реализации запускаем первую версию продукта
            **********************************************Критерии запуска:
             -********************************************** Быстро (до месяца)
             - Закрывает 1 боль
             - Ограниченная аудитория
             - Ограниченный ассортимент
            
            **Цель**: продукт должен как можно быстрее столкнуться с реальностью. Столкновение с реальностью вызывает страх, но это лучший способ запуска продукта.
            **Примеры**: 
             - https://web.archive.org/web/20130517200909/http://skyeng.ru/
             - https://web.archive.org/web/20030220173514/http://www.ozon.ru/
            
        - ******************************************************************************Как будем работать мы? - Мы начнем с гипотезы и lean canvas:******************************************************************************
            - **Формируем lean canvas продукта “Буткемп”**: Сегменты потребителей, их проблемы и боли? (часть 1: Потребители, проблемы, решения)
            - **Формируем lean canvas продукта “Буткемп”**: Сегменты потребителей, их проблемы и боли? (часть 2: Альтернативы, ранние последователи, кого мы забыли)
            - **Формируем lean canvas продукта “Буткемп”**: Часть 3. А что по ценностному предложению и нечестным преимуществам? Каналы продвижения и финансы.
            - **Формируем lean canvas продукта “Буткемп”**: Часть 4. Каналы продвижения и финансы. Финализируем канву. Задумываемся про Business Model Canvas
            
            **************************************************************************************************Продолжим исследованиями потенциальной аудитории:**************************************************************************************************
            
            - **Customer Research**: Разбираем цели и стратегию нашего продукта и способы их достижения
            - **Customer Research**: Определяем и считаем рынок нашего продукта
            - **Customer Research**: Определяемся с моделями монетизации
            - **Customer Research**: Генерируем гипотезы по продукту (Часть 1: Мультивселенные идей и риски продукта)
            - **Customer Research**: Генерируем гипотезы по продукту (Часть 2: Приземляем идеи)
            - **Customer Research**: Валидируем гипотезы (Количественные и качественные исследования)
            
            ************************Подумаем над привлечением аудитории и посмотрим, что там у конкурентов, и есть ли они:************************
            
            - **Как привлечь пользователей?** Выбираем каналы продвижения для нашего продукта
            - Юнит-экономика (часть 1)
            - Юнит-экономика (часть 2). Определяемся, какие каналы будут самыми эффективными, и в которые мы будем вкладываться
            - **Конкурентный анализ**: Анализируем конкурентов и их буткемпы.
            
            ************************Сделаем-таки продукт:************************
            
            - **Продуктовый дизайн**: Думаем над дизайном продукта (часть 1)
            - **Продуктовый дизайн**: Прорабатываем CJM продукта (часть 2)
            - **Продуктовый дизайн**: (Часть 3) Финализируем идеи для дизайна и делаем набросок
            - **Zero-code** или создаем сайт для буткемпа своими руками (часть 1: Выбираем инструмент)
            - **Zero-code** или создаем сайт для буткемпа своими руками (часть 2: Тильда - я у мамы фронтендер и папин вебмастер)
            
            ****Запускаем продукт:****
            
            - **Подводим итоги создания продукта**: Как развивать продукт не теряя продуктового подхода
            - **Финальный питчинг**: Что рассказываем о продукте?
            
            ****************************************************************Поговорим о работе и ее методах:
            Как не терять продуктовый подход в работе:****************************************************************
            
            - ТРИЗ / АРИП, GIST / Impact / Road Planning
            - Метод Канбан, Scrum Framework, HADI
            - Модель культур Шнейдера / OKR / Workplace Learning/ Кайдзен / Теория ограничений и развития систем
            
            **************************************************************************************************************************************Подумаем, где достать инвестиции и как рассказать о нашем продукте:**************************************************************************************************************************************
            
            - **А если я стартап? Инвестиции**: Как привлечь инвестиции на развитие нашего продукта?
            - Как посчитать финансовую модель продукта и полную экономику компании?
            
            ********************************************************************************************Поговорим, как стать продактом и найти работу:********************************************************************************************
            
            - **Разговор с продактом**: “Перспективы профессии и мой путь становления или почему ушел из проджектов в продакты, а затем в стартаперскую вечность”
            - **Карьерные советы**: Как в [hh.ru](http://hh.ru) найти именно ту вакансию, которую ты хочешь. Распространенная путаница с функционалом. Как составить резюме.
        - **Product VS Progect**
            
            ********************Product -Куда? Что? (Бизнес + Рынок + Разработка********************
            
            - Отвечает за результат продукта
            - Формулирует и проверяет гипотезы
            - Формирует видение продукта
            - Определяет ключевые метрики продукта
            - Приоритезирует бэклог
            - Отлеживает успешность внедренных улучшений
            - Решает любую проблему, возникшую в команде
            - Управляет ожиданиями стейкхолдеров
            
            ********************Project - Как? (Сроки + Бюджет + Команда)********************
            
            - Отвечает за процесс реализации
            - Помогает команде разработки оценить и декомпозировать проект
            - Ведет планирование
            - Формирует дорожную карту
            - Контролирует время разработки
            - Управляет ожиданиями продакта
        
        ****************************А что будет дальше?****************************
        Формируем lean canvas продукта “Буткемп”: Сегменты потребителей, их проблемы и боли? (Часть 1: Потребители, проблемы, решения.
        
        ************************************Домашнее задание:************************************ Подготовить по продукту категории потребителей, проблем и решений.
        
- ******************************************************************************Буткемп. Программирование 10.11.2023 -******************************************************************************
    - ********************Блоки кода********************
        - **************001_**************
            
            ```csharp
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            
            namespace _001_Буткемп
            {
                internal class Program
                {
                    static void Main(string[] args)
                    {
                        int n = 5;
                        int[] array = new int[n];
                        for (int i = 0; i < n; i++)
                            array[i] = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine("[" + string.Join(" ", array) + "]");
                        Console.WriteLine(array[3]);
                        // Сложность алгоритма О(1)
                        // [4, 5, 3, 1, 2] - чтобы выяснить сумму операций,
                        // необходимо 5 операций или О(п)
                        // [1, 2, 3, 4, 5] = O(n + lg n) - поиск в отсортированном массиве
                        // ((5 + 1) / 2) * 5 = О(1)
            
                        int sum = 0;
                        for (int i = 0; i < n; i++)
                            sum += array[i];
                        Console.WriteLine("Сумма: "sum); // O(n)
                    }
                }
            }
            ```
            
        - ********002_********
        
        ```csharp
        
        ```
        
        ```csharp
        
        ```
        
    - ******************************Ссылки и Статьи******************************
        
        Статья “J[ava память](https://habr.com/ru/post/549176/)” - Прочитана
        
        Статья [“Java память 2.0”](https://habr.com/ru/articles/489360/) - Прочитана
        
    - **Лекция 5. TCP/IP, HTTP и основы сетевого взаимодействия (35 мин)**
        
        [Лекция](https://gb.ru/lessons/375190)
        
        [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4949573/attachment/8d24affe2cb8685fd4177102822bb226.pdf)
        
        **************************************Что будет на уроке?**************************************
        
        - Поговорим о том, что происходит, когда вы вводите адрес в браузере и нажимаете Ввод
        
        В сетевом взаимодействии задействована масса элементов
        Для удобства их решили разделить на группы или слои
        
        **********************************************Немного про URL в браузере**********************************************
        
        - Протокол - http://
        - Имя сервера - geekbrains
        - Порт - :80
        - Путь к документу - lesson/123456/
        - Имя документа - index.html
        
        ************************************************Стек сетевых протоколов:************************************************
        
        | Уровень | Протоколы |
        | --- | --- |
        | Прикладной | HTTP, FTP, SMTP |
        | Транспортный | TCP, UDP |
        | Сетевой | IP |
        | Канальный | Ethernet, Wi-Fi |
        
        **Немного про протокол TCP/IP**
        
        - По протоколу ТСР можно передавать произвольные наборы байтов с одного узла сети на другой
        - Узлы идентифицируются числовым IP-адресом
        - Система DNS позволяет использовать текстовые названия вместо IP-адресов
        - На одном сервере может быть запущено несколько приложений на разных ТСР-портах
        
        **Немного про порты ТСР. Стандартные порты ТСР**
        
        - 20/21 - FTP
        - 22 - SSH
        - 53 - DNS
        - 80/8080 - HTTP
        - 110 - POP3
        - 443 - HTTPS
        - 3389 - RDP
        - Всего портов 65535
        
        **Немного про протокол НТТР**
        
        - Человеку удобнее обращаться не за наборами байт, а за читаемыми и понятно названными документами
        - По этой причине поверх протокола TCP/IP был добавлен протокол НТТР
    - ********Лекция 6. Пузырьковая сортировка********
        - ****************************Задания на собеседованиях****************************
            - [Дополнительные материалы. Вопросы для собеседования аналитик](https://gbcdn.mrgcdn.ru/uploads/asset/4947985/attachment/44c07b0aaba80c987f1b1871cbe205ec.docx)
            - [Дополнительные материалы. Задание на собеседование в Расчётный центр](https://gbcdn.mrgcdn.ru/uploads/asset/4947988/attachment/825ea471c386122a556ea1a44c7bde96.docx)
            - [Дополнительные материалы. Задание Программист SQL ETL](https://gbcdn.mrgcdn.ru/uploads/asset/4947990/attachment/136e19895c085665aa4f77138c628bef.docx)
- **Знакомство с базами данных 22.10.23 - 14.11.23**
    - ************Лекции************
        - ********************************************************************Урок 1. Знакомство с базами данных********************************************************************
            - **Приветствие**
                
                На этом уроке мы начнем знакомиться с базами данных. Сразу оговорюсь: важно различать концепцию и инструменты для работы с ней. 
                Базы данных - это **концепция**, а системы управления базами данных (СУБД) - **инструмент**.
                
                Приведу аналогию: есть математика и есть калькулятор. 
                Учить базы данных через СУБД - то же самое, что учить математику через калькулятор. Мы хорошо справимся с некоторыми математическими операциями, но все наши знания будут привязаны на инструменте, на том, как решать задачи с его помощью.
                
                На этом курсе мы немного поговорим и про языки, и про программные средства для работы с базами данных. Но основное внимание уделим концепции: посмотрим, почему базы данных работают именно так. Что происходит под капотом, как все это сделать без СУБД.
                
            - **Первые базы данных**
                
                Многие думают, что базы данных появились во второй половине 20 века, но это не так. Картотеки, библиотеки, книги учета и результаты переписи населения - все это базы данных. При этом первая перепись населения прошла в 1897 году.
                
                Получается, базы данных были, а инструменты для удобной и быстрой их обработки - нет. Работать с данными приходилось вручную, поэтому результаты переписи 1897 года появились только к 1905. Процесс обработки информации занял 8 лет.
                
                Сегодня работать с данными можно гораздо быстрее, благодаря компьютерам. Но факт остается фактом: базы данных использовались давно, просто по-другому.
                
            - **Функционал баз данных**
                
                Базы данных нужны для хранения обработки и быстрого извлечения информации. Попробуем рассмотреть этот функционал на примере.
                Представим большую картинную галерею. Нам нужно собрать информацию о картинах и каталогизировать ее. чтобы было удобно работать. Т.е. хранить, обрабатывать и быстро извлекать информацию.
                
                Как мы можем организовать информацию? Как будем находить картины определенного художника, жанра или года создания? Давайте попробуем собрать информацию обо всех картинах в каталоге.
                
            - **Иерархическая модель**
                
                Сперва соберем информацию обо всех художниках и запишем ее в базу данных (наш каталог). Художники будут на вершине иерархии. Затем информацию о них можно категоризировать: в одной части каталога будут российские художники, в другой зарубежные. 
                Следующий шаг - выделить разные жанры для картин российских и зарубежных художников: пейзаж, натюрморт, портрет.
                
                ![Слайд 003.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/472345b3-bdf8-47c2-ae6b-d88e22601de0/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_003.jpg)
                
                Добавим в эту структуру художников. Например, среди российских пейзажистов выделим Шишкина и Айвазовского, а затем внесем информацию об их знаменитых картинах - “Утро в сосновом лесу” и “Девятый вал”. Также с зарубежными художниками: натюрморты писал Ван Гог, пример картины - “12 подсолнухов в вазе”.
                
                ![Слайд 002.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/2a157794-b2e1-4e22-a46f-b5ecc0fcc05b/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_002.jpg)
                
                Итак, у нас появился каталог. Можно ли с ним работать?
                Да, все картины мы можем разложить по этой структуре. Ее называют **иерархической**. 
                Но все ли в ней в порядке? Полностью ли она нас устраивает? Какие могут быть ограничения? Достаточно простые: художники могут писать в нескольких жанрах, а у картин может быть несколько авторов. Например, у Ван Гога кроме натюрмортов есть известные портреты. Можем положить их в нашу иерархию (для этого выделим еще одну ячейку).
                
                ![Слайд 001.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/ef787393-0d51-4815-b7d3-f357585f53bc/%D0%A1%D0%BB%D0%B0%D0%B9%D0%B4_001.jpg)
                
                В этом решении есть сложности. если нам понадобится найти все картины Ван Гога, сперва придется искать его среди зарубежных художников, а затем перебирать разные жанры. Только потом мы сможем получить все картины, которые он написал. Работать с таким каталогом сложно.
                Кроме того, у картины может быть несколько авторов. Например, медведей из “Утра в сосновом лесу” писал не Шишкин, а другой художник - Савицкий. Коллекционер Третьяков стер его подпись, когда покупал картину. Возможно, у Третьякова была иерархическая модель базы данных, и когда он собирал коллекцию, он не мог взять картины нескольких авторов.
                
                Что же делать с такой картиной? Если мы свяжем ее сразу с несколькими авторами в каталоге, можем потерять информацию: всех ли авторов мы нашли? Придется пробежаться по всем картинам и поискать, нет ли у них “Утра в сосновом лесу”.
                
                <aside>
                💡 **********************************************************************************************************************************************************************************При создании иерархической базы данных мы изначально фиксируем сценарий ее использования.**********************************************************************************************************************************************************************************
                
                </aside>
                
                В каталоге, который мы создали, удобно искать картины всех российских и зарубежных писателей, а также картины по жанрам. Т.е. наша иерархическая структура рассчитана на определенный круг задач. Если мы получим задачу, которая не была заложена в структуру, столкнемся с проблемами
                
                Можно ли поменять модель так, чтобы решить новую задачу? Да, но это тоже будет решение для частного случая. Мы можем пронумеровать все картины и подготовить для них предметный указатель. Сперва по уже составленной иерархии с российскими / зарубежными художниками и жанрами. Затем, если у нас будет другая задача, по другой иерархии (в зависимости от сценария использования)
                
                - **Задание**
                    
                    Что закрепить знания на практике, выполните небольшое задание: соберите предметный указатель или подготовьте иерархическую структуру, которая позволит находить картины, написанные во второй половине 19 века.
                    
                - **Вариант решения**
                    
                    У этой задачи нет единственного варианта решения, поэтому рассмотрим самое распространенное:
                    
                    ************************************************Год написания картины - Страна художника - Жанр - Другая информация************************************************
                    
                    Мы можем начать каталог с года написания картин. В зависимости от года будем указывать страну художника, потом жанр и другую информацию. Все, что дальше, нас пока не так интересует. Наша задача - получить картины, написанные в тот или иной год.
                    
                    **************Важно!************** Если мы поднимем в иерархии информацию, которая нам нужна в первую очередь, пользоваться каталогом будет проще.
                    Из такого каталога мы можем взять всю информацию с 1850 по 1900 годы. Но это не просто и не удобно. Иерархическая система долго помогала человечеству структурировать данные, но сейчас, когда у нас есть компьютеры, мы можем посмотреть и на другие модели хранения информации. 
                    
            - **Задача: телефонный справочник**
                
                С иерархической моделью хранения данных мы немного разобрались. Узнали, что она не гибкая, приходится сразу определять сценарий работы с такой базой данных.
                Теперь посмотрим, можно ли работать по-другому. Для этого начнем решать задачу - создадим телефонный справочник. Сначала он будет простым, но потом начнет усложняться: мы будем постепенно решать возникающие проблемы.
                
                Для решения понадобится Ексель, Гугл Таблицы или Опен Оффис. Рекомендуем собирать таблицу параллельно с преподавателем, чтобы понимать, что происходит и решать возникающие проблемы.
                
                - **Минимальные данные**
                    
                    Минимальные данные, которые нам нужны - ФИО человека и номер его телефона. Для этого хватит двух столбцов.
                    
                    | ФИО | Номер телефона |
                    | --- | --- |
                    | Иванов Иван Иванович | 12345678 |
                    | Петров Петр Петрович | 12345687 |
                    | Васильев Василий Васильевич | 12345679 |
                    
                    Если мне нужен телефон Петрова, я сперва ищу фамилию, а затем смотрю номер телефона, который указан рядом. Кажется все просто. Но база данных - это толкьо модель реальности, и реальность не всегда может в нее укладываться. Попробуйте себя в роли тестировщика, подумайте, есть ли какая проблема, которую эта таблица не решит?
                    
                    Думаю, многие догадались: в жизни у нас не один номер телефона. У многих есть личный и рабочий. Как их разместить в таблице? Например, добавить столбец “Дополнительный номер телефона”.
                    
                    | ФИО | Номер телефона | Дополнительный номер телефона |
                    | --- | --- | --- |
                    | Иванов Иван Иванович | 12345678 | 87654321 |
                    | Петров Петр Петрович | 12345687 | 78654321 |
                    | Васильев Василий Васильевич | 12345679 | 97654321 |
                    
                    Итак, проблему с двумя номерами телефонов мы решили: если у кого-то один номер, “дополнительную” ячейку мы можем оставить пустой, если два номера, заполним ее тоже. 
                    Подумайте, какие еще проблемы могут быть в этой модели и как их можно решить?
                    
                - **Увеличиваем количество номеров**
                    
                    Одна из очевидных проблем - номеров может быть больше, чем два: например, личный, рабочий, для поездок, для рекламы в интернете или просто старый, которым мы уже не пользуемся, но хранить информацию хотим. Мы не можем сказать заранее, сколько у человека номеров. Здесь как с массивами: если мы заранее не знаем количество элементов, нам тяжело определить, какой массив будет нужен для хранения информации.
                    
                    Как решить эту проблему? Сделаем таблицу, которая позволяет хранить больше номеров.
                    
                    | ФИО | Телефон 1 | Телефон 2 | Телефон 3 | Телефон 4 | Телефон 5 |
                    | --- | --- | --- | --- | --- | --- |
                    | Иванов Иван Иванович | 123 | 124 | 125 | 126 | 127 |
                    | Петров Петр Петрович | 234 | 231 |  |  |  |
                    | Васильев Василий Васильевич | 456 |  |  |  |  |
                    
                    Из-за Иванова с пятью номерами получилась таблица с множеством пустых ячеек. Это тоже проблема - много пространства тратим впустую. Решение рабочее, но не такое хорошее, как мы хотели.
                    Кроме того, название столбцов отличаются только номерами. Непонятно, какой из них личный, какой рабочий, а какой для поездок. Можно переименовать их, но это тоже не 100% решение: мы не можем предусмотреть все ситуации использования этих номеров. Хорошо бы хранить для каждого из них комментарий. Как это сделать?
                    
                - **Избавляемся от пустых ячеек**
                    
                    Раньше каждому человеку соответствовал какой-то номер или набор номеров. Сейчас я сделаю по-другому; запишу ФИО человека столько раз, сколько у него телефонов и к каждому телефону добавлю комментарий. Т.е. таблица будет расти не вширь, а вниз.
                    
                    | ФИО | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов Иван Иванович | 123 | личный |
                    | Иванов Иван Иванович | 124 | рабочий |
                    | Иванов Иван Иванович | 125 | для поездок |
                    | Иванов Иван Иванович | 126 | для объявлений в интернете |
                    | Иванов Иван Иванович | 127 | старый, возможно, неактуальный |
                    | Иванов Иван Иванович | 234 | личный |
                    | Иванов Иван Иванович | 235 | рабочий |
                    | Иванов Иван Иванович | 456 | личный |
                    
                    Теперь я могу ввести в поиск фамилию человека и выбрать нужный телефон из набора его номеров. Ориентироваться буду по комментарию.
                    Такое решение можно использовать для хранения неограниченного количества номеров для каждого человека. Мы решили часть проблем: таблица более сжатая, в ней нет пустых ячеек, мы добавили комментарии, так что работать с телефонами теперь будет удобнее.
                    
                - **Работаем с дублями**
                    
                    Но проблемы в таблице еще остались. Как вы думаете, какие?
                    Если мы дополним информацию о человеке, появится много дублей. Объем данных, который мы будем хранить, сильно увеличится:
                    
                    | ФИО | Телефон | Комментарий | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- | --- | --- |
                    | Иванов И. И. | 123 | личный | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 124 | рабочий | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 125 | для поездок | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | 126 | интернет | Казань | 12.02.1990 | женат |
                    
                    Если кроме телефона мы захотим еще хранить адрес, дату рождения и семейное положение, в каждую строку с новым номером человека эту информацию придется копировать. В примере адрес, день рождения и статус Иванова повторяется 4 раза, от записи к записи они никак не меняются.
                         Из программирования вы уже знаете термин “захардкорженная информация”. Если мы что-то написали руками, а не сделали с помощью переменной, нужно внимательно следить: если условия задачи поменяются, менять придется все.
                    Представим ситуацию, что Иванов развелся. Тогда в каждой записи придется исправить его семейное положение. Если мы это сделаем только в одном месте, возникнет путаница. Получается, такая форма хранения информации добавляет нам много сложностей даже за исключением того, что ее нужно дублировать каждый раз.
                    
                    Кроме того, адресов у человека тоже может быть несколько: например, по прописке или фактический. Соответственно, помимо нескольких записей для хранения номеров телефонов добавятся записи с адресами. Информации о человеке тоже можно добавить больше, чем на 3 столбца.
                    Таблица сильно разрастается, следить за ней становится все сложнее. Если мы поменяем фактический адрес или семейное положение, нужно будет в каждой копии записи внести изменение.
                    Пожалуйста, заполните ваши таблицы, чтобы мы видели всю картину. Добавьте еще 3 столбца и внесите информацию о каждом персонаже. Посмотрите, какой объемной стала таблица.
                    
                - **Разбиваем таблицу**
                    
                    Что можно сделать с этой проблемой? Разбить информацию на несколько таблиц и вынести в них всю повторяющуюся информацию:
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов И. И. | 123 | личный |
                    | Иванов И. И. | 124 | рабочий |
                    | Иванов И. И. | 125 | для поездок |
                    | Иванов И. И. | 126 | интернет |
                    | Иванов И. И. | 127 | старый |
                    
                    | Петров П. П. | 234 | личный |
                    | --- | --- | --- |
                    | Петров П. П. | 235 | рабочий |
                    | Васильев В. В. | 456 | личный |
                    
                    Мы выделили столбцы “Чей телефон” (в нем указали ФИО людей), “Телефон” и “Комментарий”. По сути, это та таблица, которая у нас была. В ней содержится минимальная информация, которую целесообразно дублировать.
                    В основной таблице останется информация о персонажах: их адреса, дни рождения и семейное положение.
                    
                    | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- |
                    | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | Петров П. П. | Москва | 23.04.1983 | женат |
                    | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Основная таблица сильно уменьшилась в размерах после того, как мы убрали дублирущуюся информацию. Осталось всего три контакта. Если нам нужно найти номер конкретного человека, воспользуемся дополнительной таблицей.
                    Если вы попробуете экстраполировать ситуацию, т.е. посмотрите, что случится, если мы будем увеличивать количество людей и номеров телефонов, вы увидите, что наше предыдущее решение будет очень разрастаться, а в последнее - нет. В нем информация будет добавляться по минимуму. С такой таблицей уже можно работать вручную.
                    
                - **Добавляем идентификаторы**
                    
                    Но у этого решения тоже есть проблемы. Как вы думаете, какие? И как их можно решить?
                    Сложность в том, что может быть несколько однофамильцев или полных тезок. Приведу пример: добавлю в основную таблицу еще одного Иванова Ивана Ивановича. Но он будет жить не в Казани, а в Санкт-Петербурге, у него будет другой день рождения и семейное положение.
                    
                    | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- |
                    | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | Иванов И. И. | Санкт-Петербург | 18.09.2001 | холост |
                    | Петров П. П. | Москва | 23.04.1983 | женат |
                    | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Если оставить все как есть, то ни я, ни компьютер не сможем разобраться, какой номер телефона относится к одному Иванову, а какой ко второму.
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | Иванов И. И. | 123 | личный |
                    | Иванов И. И. | 124 | рабочий |
                    | Иванов И. И. | 125 | для поездок |
                    | Иванов И. И. | 126 | интернет |
                    | Иванов И. И. | 127 | старый |
                    | Иванов И. И. | 527 | личный |
                    | Петров П. П. | 234 | личный |
                    | Петров П. П. | 235 | рабочий |
                    | Васильев В. В. | 456 | личный |
                    
                    Если бы мы использовали прошлое решение, можно было бы найти нового человека по адресу. Но мы уже разбили таблицу надвое и будем с этим работать.
                    Чтобы решить проблему, добавим уникальные идентификаторы. Пронумеруем людей в списке: id - число, которое будет своим для каждой записи. У нас четыре человека, значит будет 4 номера.
                    
                    | id | ФИО | Адрес | Д/р | Статус |
                    | --- | --- | --- | --- | --- |
                    | 1 | Иванов И. И. | Казань | 12.02.1990 | женат |
                    | 2 | Иванов И. И. | Санкт-Петербург | 18.09.2001 | холост |
                    | 3 | Петров П. П. | Москва | 23.04.1983 | женат |
                    | 4 | Васильев В. В. | Белгород | 21.05.1998 | холост |
                    
                    Теперь в столбце “Чей телефон” будем указывать не ФИО, а идентификатор.
                    Идентификатор будет связывать две таблицы.
                    
                    | Чей телефон | Телефон | Комментарий |
                    | --- | --- | --- |
                    | 1 | 123 | личный |
                    | 1 | 124 | рабочий |
                    | 1 | 125 | для поездок |
                    | 1 | 126 | интернет |
                    | 1 | 127 | старый |
                    | 2 | 527 | личный |
                    | 3 | 234 | личный |
                    | 3 | 235 | рабочий |
                    | 4 | 456 | личный |
                    
                    Если нам понадобится найти номер Иванова из Санкт-Петербурга, сперва нужно будет узнать его идентификатор в основной таблице (id 2), а затем посмотреть, какой номер ему соответствует в связанной таблице. Так мы решим проблему тезок.
                    
                - **Первичный и внешний ключи**
                    
                    Столбик с идентификатором в основной таблице - это первичный ключ. Так называют уникальную информацию, которая помогает нам идентифицировать каждую конкретную запись в таблице.
                    Столбик “Чей телефон” в дополнительной таблице - это внешний ключ. Он не уникален, но по нему можно найти нужную запись.
                    
                    Подробнее о ключах мы будем говорить на будущих курсах. Сейчас самое важное - понять, что если мы связываем несколько таблиц, нужен уникальный идентификатор, чтобы понимать, какая запись где находится.
                    С одной стороны, мы получили огромную пользу от того, что разбили информацию на разные таблицы, но, с другой стороны, нельзя терять связи между данным, которые в этих таблицах хранятся.
                    
            - **Реляционные базы данных**
                
                Мы решили задачу: разбили одну большую таблицу с неуникальной информацией на две, в которых нет повторов. По сути, и первое и второе решения позволяют работать с информацией одинаково, но физически занимают разное количество ячеек. Первое решение более громоздкое. Если мы воспользуемся вторым, сэкономим память и ресурсы.
                
                Мы создали связи между таблицами и получили **реляционную базу данных** - базу, в которой данные распределены по отдельным связанный между собой таблицам.
                Мы связали две таблицы, но ограничиваться ими не обязательно. У человека может быть несколько адресов, и их тоже можно вынести в новую таблицу.
                Попробуйте выделить третью таблицу с адресами, связать ее с основной по первичному ключу и поискать информацию по конкретному человеку.
                
            - **Заключение**
                
                Итак, попробуйте добавить в базу данных третью таблицу с адресами и посмотреть, как она будет работать. Задание простое, но оно поможет закрепить все те шаги, которые мы прошли сегодня на уроке.
                
                На следующей лекции мы разберем, как получать информацию из разных связанных таблиц. 
                
        - **Урок 2. Работа с данными из разных таблиц**
            
            
            [Лекция](https://gb.ru/lessons/370770)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3667113/attachment/844d1bd3c23dab6272fe11def84c1f6d.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353408/attachment/62e10c1f45c2f380c4ef756d6efb3eeb.pdf)
            
        - ******************************************************************************Урок 3. Создание структуры базы данных******************************************************************************
            
            
            [Лекция](https://gb.ru/lessons/370770)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3603631/attachment/351a73c23d3f4ef616bbe9a5e3d54ff2.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353417/attachment/8443f7de1588a65e1af83261f0923fee.pdf)
            
        - **********************************************************Урок 4. Дополнительная лекция**********************************************************
            
            
            [Лекция](https://gb.ru/lessons/370771)
            
            [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/3937508/attachment/a1ad27c097b9789ff17a03bf6e07e5d6.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353430/attachment/747f92ce50fab2c29b2681e1fd88f122.pdf)
            
            [Конспект лекции](https://gbcdn.mrgcdn.ru/uploads/asset/4353430/attachment/747f92ce50fab2c29b2681e1fd88f122.pdf)
            
    - ****************Семинары****************
        - [Семинар 1.](https://gb.ru/lessons/372097) Знакомство с базами данных
        - [Семинар 2](https://gb.ru/lessons/372098). Работа с данными из разных таблиц
        - [Семинар 3](https://gb.ru/lessons/372099). Создание структуры базы данных

[Знакомство с языками программирования 16.09.23 - ](https://www.notion.so/16-09-23-6459d2aea20140db9609b045f04937e9?pvs=21)

[Модуль: Введение в контроль версий 29.08.23 - 12.09.23](https://www.notion.so/29-08-23-12-09-23-80b9c86289284de9a690f74bde3064b5?pvs=21)

[Модуль: Введение в математику 17.08.23 - ](https://www.notion.so/17-08-23-1264e9e92f6244f3a4a186e540e68657?pvs=21)

[Модуль: Математика и информатика для программистов 17.08 - ](https://www.notion.so/17-08-3badacf67b9e4fd3b6ed84fa7eb2a75d?pvs=21)

[Модуль: Введение в программирование (лекции) 17.08.23 - 04.09.23](https://www.notion.so/17-08-23-04-09-23-adc6f241cdea4a2d8b0680244dfb7986?pvs=21)

- Модуль: Знакомство со специализациями 12.09.23
    - **************************************************************************Урок 1. Знакомство со специализациями 33 мин**************************************************************************
        - ************Ссылки************
            - [Лекция](https://gb.ru/lessons/362961)
            - [Презентация](https://gbcdn.mrgcdn.ru/uploads/asset/4283992/attachment/ffa632a026336c61c47e11b1d59b2705.pdf)
            - [Колесо компетенций](https://gbcdn.mrgcdn.ru/uploads/asset/4283993/attachment/4e7be2c979f70296ddc4c77d4f5c6f16.pdf)
            - [Матрица Декарта](https://gbcdn.mrgcdn.ru/uploads/asset/4286371/attachment/ac712e44c516bb26b57453666520d636.pdf)
        - ************Спикеры************
            - ********************************Александр Волчек********************************
            Генеральный директор GttkBrains, Идеолог программы Разработчик
                - Начал карьеру системным администратором, вырос до СЕО топовых компаний России
                - Руководил департаментом программного обеспечения и электроники в Mecasoft International в Минске
                - Разработал программное обеспечение для компаний Intel, Samsung, SEH Malasia, Infineon
                - Руководил проектами в TMI-Tech в Тулузе, Франция
                - Был совладельцем и управляющим партнером в “Бизнес молодости”
                - В “Мегаплане” из коммерческого директора вырос до генерального, увеличив продажи в 12 раз
                - Создал торговую платформу АГРО24 и образовательные проекты [A2.LIFE](http://A2.LIFE) и ПОТОК24
            - ******************************Александр Сагун******************************
            Исполнительный директор GttkBrains, Идеолог программы Разработчик
                - Прошел путь от программиста до исполнительного директора в EdTech-компании GttkBrains
                - За полгода выстроил с нуля CRM-систему для государственной поликлиники
                - Проект под его руководством занял второе место в мире по разработке на SAP
                - Руководил ИТ-разработкой в “Техносиле”
                - За полгода выстроил ИТ-отдел в Х5 Retail Group
                - Пришел в “Бизнес молодость” автоматизировать продажи и вырос до исполнительного директора
                - Автоматизировал свой бизнес и за год увеличил продажи в 8 раз
        - ****************************************Сегодня в программе:****************************************
            1. Разберем 5 специализаций в разработке:
                1. Кто такие
                2. Что делают
                3. Какими инструментами пользуются
                4. Кому подойдет
                5. Что изучим на Разработчике
            2. Покажем траектории развития по специализациям
            3. Дадим тесты на рефлексию по каждому направлению
            4. Расскажем, как сменить специализацию
            5. Обсудим первый месяц обучения
        - ******************************5 специализаций******************************
            
            **********************************************Фундамент разработчика:**********************************************
            
            - **Программист**
                
                Разрабатывает программное обеспечение с помощью написания кода.
                
                **Конечный результат работы:** 
                
                Код, благодаря которому программное обеспечение обладает нужными функциями и работает исправно.
                
                ****************************Примеры задач:****************************
                
                - Разработчики XRM-систем: Bitrix 24
                - Веб-разработчики: создают сайты
                - Разработчики игр: прописывают физические свойства предметов, программируют механику действий
                - Разработка искусственного интеллекта
                
                ************************Среды задач:************************
                
                - Android Studio
                - Webflow (CMS)
                - GitHub (Контроль версий)
                - Редактор кода Sublime Text 3
                - MySQL (СУБД)
                - Atom: работа с кодом
                
                ******************************************Уровни программистов:******************************************
                
                - 6 месяцев - 1,5 года: Junior, младший специалист. Знает основы профессии, выполняет несложное ТЗ
                - 1,5 - 3 года: Middle, специалист среднего уровня. Умеет работать с ТЗ, реализует функционал, понимает задачи проекта
                - 4 - 6 лет: Senior, старший специалист. Определяет способы реализации задачи. Отвечает за других специалистов в команде.
                
                ****************************************Деление по видам и типам.**************************************** 
                
                - ****************************************Базовое распределение:****************************************
                    - Frontend
                    - Backend
                    - Fullstack
                - **************************************************Емкость рынка ИТ-вакансий**************************************************
                    - 2020 - 41 млн
                    - 2021 - 51 млн
                    - 2022 - 66 млн
                    - 2023 - 90 млн
                    - 2024 - 127 млн
                    - 2025 - 190 млн
                    
                    ******************************************************************************************************************************************************************************149 млн новых вакансий до 2025 года по всему миру, из них:******************************************************************************************************************************************************************************
                    
                    - 1 млн - Защита данных
                    - 6 млн - Кибербезопасность
                    - 20 млн - Анализ данных, машинное обучение ИИ
                    - 23 млн - Облачные решения
                    - 98 млн - Разработка ПО
                    
                    **************************************************************Программист - не одна профессия**************************************************************
                    
                    - Системный аналитик
                    - Проджект-менеджер
                    - Тестировщик
                    - Аналитик
                    - Продакт-менеджер
                    - Data Science
                    - DevOps
                    - Team Lead
                    - Архитектор
                    - СТО
                    - Машинное обучение
                - ****************************************Операционные системы****************************************
                    - Linux
                    - AmigaOS
                    - FreeBSD
                    - macOS
                    - Microsoft Windows
                    - ReactOS
                    - Plan 9
                    - Inferno OS
                    - MenuetOS
                    - KolibriOS
                    - ОС Эльбрус
                    - iOS
                    - Android
                    - BlackBerryOS
                    - LG webOS
                    - Облачная Chrome OS
                    - tvOS
                    - watchOS
                    - Haiku
                    - Solaris
                    - OpenVMS
                    - Tizen
                    - KaiOS
                - ********************************************************************Деление по языкам программирования********************************************************************
                    - Pascal
                    - C
                    - Fortran
                    - Assembly language
                    - AspectJ
                    - BASIC
                    - C#
                    - C++
                    - Chef
                    - CSS
                    - Dart
                    - Delphi
                    - Elixir
                    - Erlang
                    - Genie
                    - Go
                    - Groovy
                    - Haskell
                    - HTML
                    - HTML5
                    - Java
                    - JavaScript
                    - Julia
                    - Kotlin
                    - Lisp
                    - Matlab
                    - Mercury
                    - Node.js
                    - Objective-C
                    - Perl
                    - PHP
                    - PureBasic
                    - Python
                    - R
                    - React.js
                    - Ruby
                    - Rust
                    - Sass
                    - Scala
                    - SQL
                    - Swift
                    - TypeScript
                    - Vala
                    - Visual Basic .NET (VB.NET)
                - **********************************Деление по видам и типам**********************************
                    - **********************************************Программное обеспечение**********************************************
                        - Desktop
                        - Mobile
                        - Оборудование
                    - **************Отрасли**************
                        - Финансовые технологии
                        - Образование и обучение
                        - Искусственный интеллект
                        - Биотехнологии
                        - Еда и продукты питания
                        - Машинное обучение
                        - Аналитика
                        - Маркетинг и реклама
                        - Автомобильные технологии
                        - Сельское хозяйство и фермеры
                        - Космические технологии
                        - Искусство
                        - Наука
                        - Ювелирная индустрия
                        - Мобильные приложения
                        - Разработка программного обеспечения на заказ
                        - Большие данные
                        - Блокчейн
                        - Бытовая электроника
                        - Консалтинг
                        - Компьютеры
                        - Потребительские товары
                        - Информационная безопасность
                        - Строительство
                        - Облачные вычисления
                        - Медиа
                        - Доставка
                        - Беспилотники
                        - Базы данных
                        - Платформы для разработки
                        - Электронные технологии
                        - Государство
                        - Туристическая индустрия
                        - Тесты и измерения
                        - Электронная коммерция, маркетплейсы
                        - Аукционы
                        - Торговые платформы
                        - Доски объявлений
                        - Электронные каталоги
                        - Энергия
                        - Мероприятия
                        - Электронное обучение
                        - Генетика
                        - Геймификация
                        - Домашние сервисы
                        - Спорт
                        - Энергосбережение
                        - Аренда
                        - Найм персонала
                        - Фитнес
                        - Мебель
                        - Декор
                        - Игровые технологии
                        - Дизайн
                        - Зеленые технологии
                        - Игорная индустрия
                        - Подарки
                        - Здоровье и медицина
                        - Умный дом
                        - Образ жизни
                        - Интернет вещей
                        - Инфраструктура
                        - Ювелирная индустрия
                        - Юридическая индустрия
                        - Билеты
                        - SaaS
                        - Программное обеспечение
                        - Логистика
                        - Общественные организации
                        - Рестораны и общепит
                        - Компьютерные сети
                        - Ритейл-технологии
                        - Полезные ископаемые
                        - Навигация
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Программист
                        - Можете работать:
                            - Программистом
                            - Тестировщиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Системный аналитик
                            - DevOps
                            - Проджект-менеджер
                            - Тестировщик
                            - Аналитик
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Системным аналитиком
                            - Тестировщиком
                    - 3 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Системный аналитик
                            - DevOps
                            - Проджект-менеджер
                            - Тестировщик
                            - Аналитик
                            - Продакт-менеджер
                            - ML/DS
                            - СТО
                            - Team Lead
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Системным аналитиком
                            - Тестировщиком
                            - DevOps
                            - ML/DS
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Умеете структурировать информацию
                    - Не терпите беспорядок
                    - Последовательны
                    - Понимаете, как строятся процессы, шаг за шагом
                    - Вдумчивы и внимательны к деталям
                    - Нравится решать прикладные задачи, связанные с реальным миром
                    - Нравится автоматизировать процессы вокруг себя
                    - В беспорядочном наборе информации видите последовательность
                    - Умеете выстраивать структуру
                - ****************************************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике:****************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Дискретная математика
                    - Тестирование
                    - Базы данных
                    - Проектирование ПО
                    - Контроль версий
                    - Знакомство с выбранным языком программирования
                    - Процедурное программирование
                    
                    ********************Языки программирования:********************
                    
                    - Java
                    - Python
                    - JavaScript
                    - C#; C++
                    - PHP
                    - SQL
                    - HTML
            - **Тестировщик**
                
                Проверяет программное обеспечение с помощью тестов, чтобы выявить ошибки и передать на исправление разработчикам.
                
                ****************************************************Конечный результат работы:****************************************************
                
                Переданные в отдел разработки ошибки, учет которых улучшит работу программного обеспечения.
                
                ****************************************************Какие бывают тестировщики:****************************************************
                
                - Тестирование вручную (Manual QA)
                - Автоматизированное тестирование (Automation QA)
                
                **********************Тестировать можно все, что угодно:**********************
                
                - Оборудование
                - Процессы
                - Программы и приложения
                - Мнения (с помощью опросов)
                - и многое-многое другое
                
                Задачи тестировщика меняются в зависимости от отрасли.
                
                ****************************Примеры задач:****************************
                
                - Тестирование продукта
                    - Поиск ошибок в продукте, гипотезе, оборудовании
                    - Разработка методов тестирования
                    - Написание сценариев тестирования
                    - Реализация сценариев тестирования
                - При обнаружении ошибок
                    - Передача данных об ошибках
                    - Документирование найденных ошибок
                - Анализ
                    - Классификация ошибок и внесение их в базу данных
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Тестировщик
                        - Можете работать:
                            - Тестировщиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - Тестировщик
                            - Аналитик
                        - Можете работать:
                            - QA-Automation
                            - Аналитиком
                            - Тестировщиком
                    - 3 год
                        - Можете развиваться в профессии:
                            - Программист
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - QA-Automation
                            - Аналитик
                        - Можете работать:
                            - Программистом
                            - Аналитиком
                            - Тестировщиком
                            - QA-Automation
                - ********************************************************Специальность для вас, если:********************************************************
                    - Нравится выискивать ошибки и уязвимости
                    - Интересно смотреть на ИТ-продукт со всех сторон
                    - Интересно продумывать сценарии пользователя
                    - Нравится улучшать продукт своими руками
                    - Интересно погружаться в продукты и изучать их изнутри
                    - У вас аналитический склад ума
                    - Вы усидчивы и внимательны
                    - У вас системный подход к решению проблем
                    - Интересно смотреть на одно ПО с разных точек зрения
                    - Любопытны
                    - Смотрите на работу критично
                - ************************************************************************************************************Технологии с которыми вы познакомитесь на Разработчике************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Ручное тестирование
                    - Автоматическое тестирование
                    - Локализация дефектов
                    - Тестирование веб-приложений
                    - Тест-кейсы
                    - Тест-менеджмент
                    - Тест-аналитика
                    
                    ********************************************************Языки программирования и ОС:********************************************************
                    
                    - Linux
                    - CSS
                    - HTML
                    - SQL
                    - Java
            - **Аналитик**
                
                Собирает и обрабатывает информацию, формирует отчеты и помогает бизнесу принимать взвешенные решения.
                
                ****************************************************Конечный результат работы:****************************************************
                
                - Свод актуальных данных, позволяющий ставить конкретные задачи по созданию продукта.
                
                **********************************************Какие бывают аналитики:**********************************************
                
                - Бизнес-аналитик
                - Маркетинговый аналитик
                - Финансовый аналитик
                - Продуктовый аналитик
                - Веб-аналитик
                - И многие другие
                
                **********************************Деление по видам и типам:**********************************
                
                - ETL-аналитик
                - BI-аналитик
                - Аналитик
                - Аналитик Big Data
                - Data-инженер
                - ETL-разработчик
                - Архитектор данных
                
                ****************************************************************************Аналитик, когда пересекается с программированием:****************************************************************************
                
                - Искусственный интеллект
                - Data Science
                - Machine Learning
                - Нейронные сети
                
                ************************Среды задач:************************
                
                - Визуализация данных в Power BI
                - Подготовка отчетов в различных форматах
                - Работа с базами данных. Создание запроса в SQL
                - Создание инфраструктуры хранения данных
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Аналитик
                        - Можете работать:
                            - Младшим аналитиком
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Программистом
                            - Тестировщиком
                            - ML/DS
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                            - ML/DS
                        - Можете работать:
                            - Аналитиком
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Обладаете критическим мышлением
                    - Замечаете ошибки других
                    - Умеете и любите работать с большим объемом информации
                    - Ищете закономерности, наблюдая за миром
                    - Перед тем, как взяться за задачу, сначала проводите анализ
                    - Внимательны к мелочам
                    - Умеете из большого объема информации достать суть
                    - Способы сделать убедительный вывод на основе анализа
                - ********************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике:********************************************************************************************
                    - Базы данных
                    - Unit-экономика
                    - Google Analytics
                    - Яндекс.Метрика
                    - Flowchart
                    - Excel
                    - A/B-тесты
                    - task-трекинг
                    - SQL
                    - Python
            - **Проджект-менеджер**
                
                Отвечает за процессы, касающиеся организации рабочего процесса ИТ-проекта
                
                **************************************Конечный результат:**************************************
                
                - Организованная деятельность внутри команды и вовремя сданные задачи
                
                ************************************Какие бывают Проджект-менеджеры:************************************
                
                - Общий менеджер
                Выполнение основных задач компании
                - Проектный менеджер
                Обеспечение результатов и качества конкретного проекта
                - Менеджер в ИТ
                Создание качественного ИТ-продукта
                - ************************************************************************Какими проектами руководят в Digital************************************************************************
                    - POS-терминалы
                    - Digital ART
                    - Digital гаджеты
                    - Компьютеры и планшеты
                    - Мобильные приложения
                    - Смартфоны
                    - Социальные сети
                    - Локальные сети
                    - Веб-сайты
                    - Цифровое телевидение
                    - Игровые консоли
                    - Оффлайн-магазины
                    - Интерактивные экраны
                    - Терминалы самообслуживания
                - **********************Среды задач**********************
                    - ************************Task-трекеры************************
                        - Мегаплан
                        - Notion
                        - Slack
                        - Youtrack
                        - Trello
                        - Jira
                        - Microsoft Teams
                        - Microsoft Project
                    - **********************CRM-системы**********************
                        - amoCRM
                        - SAP CRM
                        - Битрикс24
                        - Мегаплан
                    - **********************************Системы аналитики**********************************
                        - Google Аналитика
                        - AppMetrica
                        - Google AdWords
                        - Яндекс.Метрика
                - ****************************************Какие задачи решает?****************************************
                    - Регулярно проводит планирование, оценку задач и их согласование
                    - Делает стоимость и сроки изменений разумными
                    - Достигает цели в установленные сроки и в рамках ресурсов
                    - Доносит до разработки продуктовую цель
                    - Помогает сформировать у заказчика реалистичные ожидания
                    - Устраняет конфликт ожиданий между бизнес-заказчиком и программистом
                    - Ведет проекты с учетом времени, задач, приоритетов и ресурсов
                    - Задает руководящий вектор проекту и проектному офису
                    - Определяет приоритеты по задачам
                    - Прорабатывает список задач с проектной командой
                    - Ставит задачи другим сотрудникам в команде
                    - Уточняет и согласовывает требования
                    - Контролирует исполнение
                    - Несет ответственность за результат
                    - Работает с изменениями и рисками
                    - Готовит набор документов по стандартам
                    - Пишет отчеты для заказчика
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Проджект-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Любите общаться с людьми, легко идете на контакт
                    - Умеете вести переговоры
                    - Системно мыслите
                    - Любите играть в стратегии
                    - У вас развиты организационные способности
                    - Нравится видеть результаты работы в действии
                    - Интересно ставить задачи и контролировать их выполнение
                - **************************************************************************************************************Технологии, с которыми вы познакомитесь на Разработчике**************************************************************************************************************
                    
                    **********Темы:**********
                    
                    - Управление командой
                    - Стандарты менеджмента
                    - Основы программирования
                    - Веб-программирование
                    - Составление проектной документации
                    - Контроль версий
                    
                    ****************************************Программы и сервисы:****************************************
                    
                    - Notion
                    - Trello
                    - Jira
                    - Confluence
                    - Kanban
                    - Scrum
            - **Продакт-менеджер**
                
                Администрирует процесс создания продукта от генерации идеи до ее реализации и выхода на рынок.
                
                **************************************Конечный результат:**************************************
                
                - ИТ-продукт, готовый к продаже и пользованию
                - ****************************************Какие задачи решает:****************************************
                    - Изучает рынок, чтобы создать востребованный продукт
                    - Знает все о конкурентах, чтобы опередить их
                    - Управляет ценностью продукта. Делает его лучше, чтобы подороже продать и больше заработать
                    - Управляет жизненным циклом продукта.
                    Руководит процессами продукта: от создания до реализации и улучшения
                    - Развивает каналы продаж
                    Помогает выстраивать стратегии по маркетингу и продвижению продукта
                    - Анализирует эффективность внедрений
                    Следит за тем, чтобы трудозатраты на выполнение задач окупались
                    - Управляет командой
                    Критический взгляд и применение методологий гибкой разработки в работе разработчиков и дизайнеров
                    - Управляет финансовыми ресурсами
                    Решает, сколько и каких ресурсов требует доработка и улучшение продукта. 
                    Осуществляет расчеты с командой
                    - Разрабатывает стратегию управления продуктом
                - **********************Среды задач**********************
                    - ************************Task-трекеры************************
                        - Мегаплан
                        - Notion
                        - Slack
                        - Youtrack
                        - Trello
                        - Jira
                        - Microsoft Teams
                        - Microsoft Project
                    - **********************CRM-системы**********************
                        - amoCRM
                        - SAP CRM
                        - Битрикс24
                        - Мегаплан
                    - **********************************Системы аналитики**********************************
                        - Google Аналитика
                        - AppMetrica
                        - Google AdWords
                        - Яндекс.Метрика
                    - ************************************************************************************************************Сервисы протоколирования, планирования, анализа данных************************************************************************************************************
                        - Miro
                        - Webflow
                        - Google Sheets
                        - Guide
                        - Figma
                        - Tilda
                        - Excel
                - ****************************************************Пример карьерного развития****************************************************
                    - 1 год
                        - Можете развиваться в профессии:
                            - Продакт-менеджер
                        - Можете работать:
                            - Продакт-менеджером
                    - 2 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                    - 3 год
                        - Можете развиваться в профессии:
                            - Аналитик
                            - Программист
                            - Тестировщик
                            - Проджект-менеджер
                            - Продакт-менеджер
                        - Можете работать:
                            - Проджект-менеджером
                            - Продакт-менеджером
                - ********************************************************Специальность для вас, если:********************************************************
                    - Хотите создавать ИТ-продукты от идеи до запуска
                    - Умеете смотреть на продукт глазами клиента
                    - Легко идете на контакт с людьми
                    - Обладаете аналитическим мышлением
                    - Интересно ставить задачи и контролировать их выполнение
                    - Хотите развивать креативные идеи
                    - Интересно исследовать рынок и работу конкурентов
                - ************Технологии, с которыми вы познакомитесь на Разработчике:************
                    
                    **********Темы:**********
                    
                    - Unit-экономика
                    - Привлечение инвестиций
                    - Финансы
                    - Бизнес-кейсы
                    - Просчет бизнес-моделей
                    - Аналитика
                    - Тестирование гипотез
                    - Управление командой
                    - Основы программирования
                    
                    ****************************************Программы и сервисы:****************************************
                    
                    - Figma
                    - Trello
                    - Notion
                    - Jira
                    - Tilda
    - **********************Факультатив**********************
        - [Востребованная профессия. Как выбрать востребованную профессию в ИТ?](https://www.youtube.com/watch?v=Z74XmSGHfiM) ************145 мин************
        - **********************Тестировщик**********************
            
            
        - ********************************Продакт-менеджер********************************
            - Минусы
                - Постоянные переработки
                - Повышенная нагрузка и стресс
                - Повышенные риски выгорания
            - Плюсы
                - Всегда интересно
                - Понимание, как создать продукт, продать его и масштабировать бизнес
                - Перспектива роста не ограничена
    - ************Анкета************
        - **Что будет хорошо, если я стану программистом?**
            1. Постоянная умственная работа
            2. Возможность работать удаленно из любой точки мира
            3. Высокий спрос на рынке труда
            4. Доход выше среднего
            5. Мое оборудование будет постоянно апгрейдиться
            6. Сам планирую свой график
            7. Прокачка Самодисциплины
        - ****************************************************************************************Что будет плохо, если я стану программистом?****************************************************************************************
            1. Недостаток свободного времени (-)
            2. Регулярные затраты на апгрейд оборудования (-)
            3. Ненормированный график (-)
        - ************************************************************************************Что будет хорошо, если я стану аналитиком?************************************************************************************
            1. Навыки работы с большим массивом данных
            2. Нормированный график и прозрачный функционал специальности
            3. Доход выше среднего
        - ************************Что будет плохо, если я стану аналитиком?************************
            1. Довольно рутинная работа, где креатив сведен к минимуму
            2. Высокая степень ответственности за предоставленные данные
        - **************Что будет хорошо, если я стану тестировщиком?**************
            1. Возможность быть первым, кто тестирует интересный именно вам продукт. 
            2. Причастность к масштабным проектам.
            3. Экспертная позиция в доведении продукта до совершенства.
            4. Можно работать удаленно
            5. Есть возможность найти работу, за рубежом (в Китае)
        - ****************************************************************************************Что будет плохо, если я стану тестировщиком?****************************************************************************************
            1. Монотонные рабочие задачи
            2. Довольно рутинная работа, где креатив сведен к минимуму
            3. Работа с продуктом, созданным другими специалистами
            4. Не сильно большие деньги в сравнении с остальными ИТ-специальностями
        - ************************************Что будет хорошо, если я стану проджект-менеджером?************************************
            1. Причастность к масштабным проектам
            2. Разделение ответственности за результат
            3. Регулярная коммуникация и нетворкинг
        - Ч****************************то будет плохо, если я стану проджект-менеджером?****************************
            1. Много времени уходит на совещания, постановку и контроль исполнения задач
            2. Разделение ответственности за результат
        - ************************************Что будет хорошо, если я стану продакт-менеджером?************************************
            1. Разработка продуктов, отвечающих запросам потребителей, отрасли, рынка
            2. Непрерывное развитие и творческая реализация
        - Ч****************************то будет плохо, если я стану продакт-менеджером?****************************
            1. Высокая степень ответственности за пользователя, бизнес, команду
            2. Недостаток свободного времени в связи с необходимостью быть постоянно погруженным в тренды и аналитику
        - ****************Определились ли вы уже точно до данного занятия, кем хотите быть?****************
        - ******************************************************************************************************************************Изменилось ли видение того, кем вы хотите быть после этого занятия?******************************************************************************************************************************
        - ********************************************************************************************************Кем бы вы хотели быть еще, кроме того, кого вы уже указали?********************************************************************************************************
            - Программистом
            - Аналитиком
            - Тестировщиком
            - Проджект-менеджером
            - Продакт-менеджером
            - Мне достаточно одной специальности, другие не нужны
            - Еще не определился
            - и др, мне не актуальные
        - ******************************************************************************************Сложно ли вам учиться с точки зрения времени?******************************************************************************************
            
            Очень сложно
            
    - ********************************************************************************Модуль: Итоги блока. Выбор специализации********************************************************************************
        - **Урок 1. [Программист](https://gb.ru/lessons/370809) 17 мин**
            
            ### **Основные тезисы:**
            
            1. Программист — творческая личность. Потому что то, как будет выполнена та или иная техническая задача, зависит от тебя (программиста).
            
            2. Python — мощный язык программирования, с точки зрения его применения. Он используется для написания тестов, реализации полноценного веб-приложения или в соревнованиях по созданию искусственного интеллекта для игр.
            
            3. Веб-технологии — это не только создание сайтов, но и магия, происходящая с момента клика по ссылке до отображения сайта на странице.
            
            4. Большинство серверов стоит на операционной системе Linux, поэтому большая часть разработки связана именно с ней.
            
            5. Чтобы собрать программное обеспечение, объектно-ориентированное программирование делит всё на множество маленьких кирпичиков, каждый из которых в дальнейшем можно изменить.
            
            6. Алгоритмы надо знать, чтобы понимать, какой алгоритм подходит для того или иного случая — будь то большой разносортный массив данных или набор повторяющихся элементов, которым требуется сортировка.
            
            7. Обработчики исключений используются, чтобы при возникновении какой-либо ошибки программа знала, что делать.
            
            8. Автоматизированное тестирование часто спасает и помогает разработчику при решении каких-то задач. Без тестирования ни одно программное обеспечение не может жить и развиваться длительное время.
            
            9. SQL — тот язык, на котором программа общается с базой данных. Так отделяется слой хранения данных от слоя обработки данных.
            
            10. Важно уметь читать и составлять ER-диаграммы для более эффективного выполнения задач, поставленных, например, аналитиком.
            
            11. Контейнер в программировании — это маленькая операционная система, где запущен только один главный процесс, например, ваша программа. Это даёт возможность управлять контейнерами и их взаимодействиями, а также составлять целую систему из маленьких частей, которые можно менять и разделять.
            
            12. Архитектура ПО — это совокупность важнейших решений об организации системы. Именно архитектура программного обеспечения больше коррелирует с творчеством.
            
            13. Система контроля версий — неотъемлемая часть разработки на сегодняшний день. Она позволяет выстраивать командную работу и обеспечивает безопасный откат версий программ.
            
            14. CI/CD — инструменты, которые решают проблему доставки ПО на веб-сервер или в магазины, а также помогают запланировать и провести автоматическое тестирование как целого приложения, так и отдельных изменений в его коде.
            
            15. Парадигмы программирования — совокупность идей и понятий, определяющих стиль написания компьютерных программ.
            
            16. Профессия «Программист» — широкий спектр специализаций. Есть фронтенд-разработка, бэкенд-разработка и так далее. Да, вам придётся сделать выбор. Однако находясь в одной специализации, вы сможете глубоко изучить её, а обретя хорошую базу знаний, переключиться на другое направление программирования.
            
            ### **Юрий Секин рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Типичный программист](https://t.me/tproger_official)
            
            2. [Точка входа в программирование](https://t.me/prog_point)
            
            3. [Soft Skillz](https://t.me/soft_skillz)
            
            4. [Книги по программированию](https://t.me/devs_books)
            
            5. [Инструменты программиста](https://t.me/prog_tools)
            
            **Литературу:**
            
            1. [«Паттерны проектирования» Эрик Фримен, Элизабет Фримен](https://clck.ru/sLP5L)
            
            2. [«Чистый код» Роберт Мартин](https://www.labirint.ru/books/642466)
            
            3. [«Совершенный код. Мастер-класс» Стив Макконнелл](https://www.labirint.ru/books/272529)
            
            4. [«Алгоритмы: построение и анализ» Томас Кормен, Чарльз Лейзерсон](https://vk.com/wall-54530371_2325)
            
            5. [«Искусство программирования» (все тома) Дональд Кнут](https://vk.com/wall-54530371_113285)
            
            6. [«Сколько стоит программный проект» Стив Макконнелл](https://clck.ru/sLPQp)
            
            7. [«Эмоциональный интеллект» Дэниел Гоулман](https://www.labirint.ru/books/788316)
            
            8. [«Человеческий фактор: успешные проекты и команды» Том Демарко](https://clck.ru/sLPTD)
            
            9. [«Психбольница в руках пациентов» Алан Купер](https://clck.ru/epuT3)
            
            **Сайты:**
            
            1. [HTML Academy](https://htmlacademy.ru/)
            
            2. [Code Basics](https://ru.code-basics.com/)
            
            3. [Coding Game](https://www.codingame.com/start)
            
            4. [Codecademy](https://www.codecademy.com/)
            
            5. [Scrimba](https://scrimba.com/)
            
            6. [freeCodeCamp](https://www.freecodecamp.org/)
            
            **Тренажёры:**
            
            1. [Tproger](https://tproger.ru/)
            
            2. [Тренировки по алгоритмам](https://yandex.ru/yaintern/algorithm-training)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 2. [Тестировщик](https://gb.ru/lessons/370810) 06 мин**
            
            ### **Основные тезисы:**
            
            1. Специалист по тестированию занимается поиском ошибок путём моделирования ситуаций, которые могут возникнуть у пользователя или у других программ и приложений, работающих с тестированием приложения. Задача тестировщика — найти ошибки и передать их в команду разработки для улучшения продукта.
            
            2. Python — один из самых популярных языков программирования с простым и понятным синтаксисом. На нём вы сможете создавать приложения практически на любых платформах и решать множество других задач.
            
            3. Объектно-ориентированное программирование (ООП) — один из наиболее популярных подходов к разработке программного обеспечения. Применяя его, программу делят на уникальные блоки, которые называются объектами. Объекты имеют аналоги в реальном мире — например, человек-пользователь. Данные внутри называются свойствами, а функции — методами.
            
            4. Язык Java — инструмент для решения задач по принципам ООП и написания программ в стиле ООП.
            
            5. Тестирование — процесс проверки программного обеспечения на соответствие между реальным поведением программы и её ожидаемым поведением. Используется, чтобы проверить работоспособность программы и исправить найденные ошибки.
            
            6. Тест-аналитика — анализ продукта перед тестированием: определение критериев качества, целей тестирования; создание тестовых случаев в соответствии с критериями качества и целями тестирования.
            
            7. Техники тест-дизайна применяются для составления чек-листов и тест-кейсов, а также для тестирования по пользовательским сценариям.
            
            8. Обработчики исключений используются, чтобы научить программу правильно обрабатывать критические ошибки.
            
            9. Чаще юнит-тесты пишут программисты, а не тестировщики. Программистам надо уметь работать с юнит-тестами, на уровне «умею писать», в то время как тестировщикам нужна теоретическая база и понимание, что это.
            
            10. Около 90% серверов стоят на операционной системе Linux, поэтому большая часть разработки связана именно с ней.
            
            11. API — программный интерфейс приложения, набор компонентов, посредством которых ИТ-продукт может взаимодействовать с другим ИТ-продуктом. Тестирование API даёт проверить, соответствует ли ПО ожиданиям, с точки зрения надёжности, производительности и безопасности.
            
            12. Диаграммы состояний позволяют описать поведение отдельно взятого объекта. Используются для описания последовательности переходов объекта из одного состояния в другое. Диаграммы состояний показывают все возможные состояния, в которых может находиться объект, а также процесс смены состояний в результате внешнего влияния.
            
            13. Тестирование веб-приложений — процесс проверки веб-приложений на ошибки в работе с помощью сценариев тестирования, имитирующих действия пользователей.
            
            14. Тестирование мобильных приложений — процесс проверки мобильных приложений на ошибки в работе путём создания искусственных сценариев, имитирующих действия пользователей.
            
            ### **Дмитрий Криницын рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Серьёзный тестировщик](https://t.me/serious_tester)
            
            2. [Тестировщик от бога](https://t.me/godoftesting)
            
            3. [QA — Automation](https://t.me/qa_automation)
            
            **Литературу:**
            
            1. [«Программист-прагматик. Путь от подмастерья к мастеру» Эндрю Хант, Дэвид Томас](https://clck.ru/sLT9Q)
            
            2. [«Выразительный JavaScript. Современное веб-программирование» Марейн Хавербеке](https://vk.com/wall-51126445_40916)
            
            3. [«Архитектура компьютера», Эндрю Таненбаум](https://clck.ru/sLTKT)
            
            4. [«Рефакторинг Улучшение существующего кода» Мартин Фаулер](https://www.labirint.ru/books/601754)
            
            5. [«Эффективная работа с унаследованным кодом» Майкл Физерс](https://www.labirint.ru/books/231685)
            
            6. [«Head First. Паттерны проектирования» Эрик Фримен, Берт Бейтс, Кэти Сьерра, Элизабет Робсон](https://www.labirint.ru/books/632960)
            
            7. [«Код. Тайный язык информатики» Чарльз Петцольд](https://clck.ru/sLTT9)
            
            8. [«Введение в компьютерные науки» Гленн Брукшир, Деннис Брилов](https://www.labirint.ru/books/720522)
            
            9. [«Грокаем алгоритмы. Иллюстрированное пособие для программистов и любопытствующих» Адитья Бхаргава](https://clck.ru/sLTXv)
            
            10. [«Непрерывное развёртывание ПО» Джез Хамбл, Дейвид Фарли](https://www.labirint.ru/books/534957)
            
            11. [«Принципы юнит-тестирования» Хориков Владимир](https://clck.ru/sLTZP)
            
            12. [«Тестирование программного обеспечения. Базовый курс» Станислав Куликов](https://svyatoslav.biz/software_testing_book)
            
            13. [«Тестирование Дот Ком» Роман Савин](https://clck.ru/sLTnF)
            
            14. [«Тестирование программного обеспечения» Канер Сэм, Фолк Джек, Нгуен Енг Кек](https://clck.ru/sLTzk)
            
            15. [«Тестирование черного ящика» Борис Бейзер](https://clck.ru/sLwgv)
            
            16. [«Искусство тестирования программ» Гленфорд Майерс, Том Баджетт, Кори Сандлер](https://clck.ru/sLTtD)
            
            17. [«Ключевые процессы тестирования» Рекс Блэк](https://clck.ru/sLTs6)
            
            18. [«Гибкое тестирование» Лиза Криспин, Джанет Грегори](https://clck.ru/sLwko)
            
            19. [«Автоматизированное тестирование программного обеспечения» Элфрид Дастин, Джефф Рэшка, Джон Пол](https://www.chitai-gorod.ru/catalog/book/1175642)
            
            20. [«Как тестируют в Google» Арбон Джейсон, Каролло Джефф, Уиттакер Джеймс](https://clck.ru/sLTwn)
            
            21. [«Дневник охотника за ошибками. Путешествие через джунгли проблем безопасности программного обеспечения» Тобиас Клейн](https://clck.ru/sLwnh)
            
            22. [«Software Testing» Ron Patton](https://www.amazon.com/Software-Testing-Ron-Patton/dp/0672327988)
            
            23. [«Agile-тестирование. Обучающий курс для всей команды» Джанет Грегори, Лайза Криспин](https://www.mann-ivanov-ferber.ru/books/agile-testirovanie)
            
            24. [«Быстрое тестирование» Роберт Калбертсон, Крис Браун, Гэри Кобб](https://ru.bookmate.com/books/V0eiYpnv)
            
            **Видео:**
            
            1. [Alexei Barantsev - YouTube](https://www.youtube.com/channel/UCVMFyEVvaBDQ3PrExtCH0uw)
            
            2. [QAGuild - YouTube](https://www.youtube.com/channel/UCHtyBZ2XbtsRmNiAxh48RGg)
            
            3. [Heisenbug](https://www.youtube.com/channel/UCX6fjZa167tSy_4ryTLcOBw)
            
            4. [iTechArt - YouTube](https://www.youtube.com/channel/UC5f8qKFSxMcxpIlc29w9zJQ)
            
            **Сайты:**
            
            1. [Software-Testing.Ru](https://software-testing.ru/)
            
            2. [Gcoder](https://gcoder.ru/category/study/qa)
            
            3. [Автоматизация тестирования с помощью Selenium и Python · Stepik](https://stepik.org/course/575/promo)
            
            4. [ISTQB Foundation Level Certification – The Definitive Guide](http://tryqa.com/istqb-certification-the-definitive-guide)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 3. [Аналитик](https://gb.ru/lessons/370811) 04 мин**
            
            ### **Основные тезисы:**
            
            1. Аналитик — это специалист, который собирает и обрабатывает информацию, формирует отчёты и прогнозы. Главная задача аналитика — подготовить данные, которые помогут бизнесу принять взвешенное решение по тому или иному вопросу.
            
            2. Agile, SCRUM, Канбан и другие гибкие методологии — технологии и инструменты управления проектами, которые используются для построения эффективного взаимодействия всех членов команды или рабочей группы, постановки задач и реализации целей проекта.
            
            3. Веб-технологии — это не только создание сайтов, но и техническая сторона работы интернета, облачные хранилища, где физически хранятся файлы, а также фронтенд, бэкенд.
            
            4. Python — один из самых популярных языков программирования с простым и понятным синтаксисом. На нём вы сможете создавать приложения практически на любых платформах и решать множество других задач.
            
            5. Таблицы — основной инструмент работы аналитика. В них удобно собирать, обрабатывать и анализировать данные, а также визуализировать информацию.
            
            6. Business Intelligence (BI) — это бизнес-аналитика. Она включает в себя визуализацию, а также BI-системы, такие как Power BI.
            
            7. Язык Python имеет специализированные библиотека, которые используются для упрощения работы аналитиков.
            
            8. Навыки, полученные после изучения специализации «Аналитик», пригодятся не только в работе аналитика, но и в других сферах — например, в продакт- и проджект-менеджменте.
            
            ### **Андрей Вельгушев рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [LEFT JOIN](https://t.me/leftjoin)
            
            2. [Дашбордец](https://t.me/dashboardets)
            
            3. [Дата-сторителлинг](https://t.me/data_publication)
            
            4. [Бизнес-анализ & IT](https://t.me/bamrus)
            
            5. [Reveal the Data](https://t.me/revealthedata)
            
            **Литературу:**
            
            1. [«Базы данных» С.М Диго](https://clck.ru/sCwUd)
            
            2. [«Путь аналитика. Практическое руководство IT-специалиста» Прерва А., Иванова В.](https://clck.ru/sM4uy)
            
            3. [«Разработка требований к программному обеспечению» Карл Вигерс](https://clck.ru/sM4x4)
            
            4. [«Азбука системного мышления» Донелли Медоуз](https://www.mann-ivanov-ferber.ru/books/azbuka-sistemnogo-myishleniya)
            
            5. [«Графики, которые убеждают всех» Богачев А.](https://clck.ru/sM53N)
            
            6. [«Системное мышление» Левенчук А.](https://clck.ru/sM56F)
            
            7. [«Как измерить все, что угодно. Оценка стоимости нематериального в бизнесе» Дуглас У. Хаббард](https://clck.ru/sM56p)
            
            8. [«Голая статистика» Чарльз Уилан](https://clck.ru/sM58Y)
            
            9. [«DAMA-DMBOK: Data Management Body of Knowledge» (2-е издание)](https://www.labirint.ru/books/732389)
            
            10. [«Аналитическая культура. От сбора данных до бизнес-результатов» Карл Андерсон](https://www.mann-ivanov-ferber.ru/books/analiticheskaya-kultura)
            
            11. [«Азбука аналитики» Ю. Курносов](https://clck.ru/sM5Bi)
            
            12. [«Веб-аналитика 2.0 на практике» А. Кошик](https://clck.ru/sM5CG)
            
            13. [«Lean Analytics» Алистер Кролл](https://clck.ru/sM5EE)
            
            14. [«Искусство статистики» Дэвид Шпигельхалтер](https://www.mann-ivanov-ferber.ru/books/iskusstvo-statistiki)
            
            15. [«Google Таблицы. Это просто Евгений Намоконов» Ренат Шагабутдинов](https://www.mann-ivanov-ferber.ru/books/google-tabliczyi-eto-prosto)
            
            16. [«Маркетинг от потребителя» Роджер Бест](https://www.mann-ivanov-ferber.ru/books/sse/mbmanagement)
            
            17. [«Данные: визуализируй, расскажи, используй» Коул Нассбаумер Нафлик](https://www.mann-ivanov-ferber.ru/books/dannye-vizualiziruj-rasskazhi-ispolzuj)
            
            18. [«Измеряйте самое важное» Джон Дорр](https://www.mann-ivanov-ferber.ru/books/izmeryajte-samoe-vazhnoe)
            
            19. [«Почему. Руководство по поиску причин и принятию решений» Саманта Клейнберг](https://www.mann-ivanov-ferber.ru/books/pochemu-rukovodstvo)
            
            20. [«Управление на основе данных» Тим Филлипс](https://www.mann-ivanov-ferber.ru/books/upravlenie-na-osnove-dannyix)
            
            21. [«Говори на языке диаграмм» Джин Желязны](https://www.mann-ivanov-ferber.ru/books/mif/026)
            
            22. [«Визуализация данных при помощи дашбордов и отчетов в Excel» Дик Куслейка](https://clck.ru/sLsZt)
            
            23. [«Now You see it: Simple visualization techniques for quantitative analysis» Стивен Фью](https://clck.ru/sLsfg)
            
            24. [«Искусство визуализации в бизнесе» Нейтан Яу](https://clck.ru/sLsh6)
            
            25. [«Анализ данных в Tableau на практике, 100 советов, уроков и стратегий от мастера Дзен в Tableau» Райан Слипер](https://clck.ru/sLspc)
            
            **Сайты:**
            
            1. [Crayon. Blog](https://bigdata-madesimple.com/)
            
            2. [Database Trends and Applications](https://www.dbta.com/)
            
            3. [Tableau. Blog](https://www.tableau.com/about/blog)
            
            4. [Capterra](https://blog.capterra.com/articles/business-intelligence)
            
            5. [Data Talks](https://datatalks.rt.ru/)
            
            6. [Open Data Science](https://ods.ai/)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 4. [Проджект-менеджер](https://gb.ru/lessons/370812) 20 мин**
            
            ### **Основные тезисы:**
            
            1. В большинстве компаний проджект-менеджер — связующее звено между всеми подразделениями, куда входят аналитики, дизайнеры, тестировщики, программисты, заказчики, подрядчики.
            
            2. Хороший проджект-менеджер определяется незаметностью своей деятельности. Его задача — обеспечить стабильность работы всей команды. А если он работает плохо, то сразу возникает множество ошибок и проблем, связанных с коммуникацией и сбором требований, реализуется не тот продукт, который ожидает заказчик.
            
            3. На курсе «Проджект-менеджер» вы освоите те компетенции, которые потребуются, чтобы довести продукт до релиза и конечного пользователя, а правильно сформированное ожидание заказчика превратилось во что-то осязаемое и твёрдое.
            
            4. Python — довольно лёгкий язык для входа в профессию и понимания основных концепций программирования. Освоив его, вы сможете говорить на одном языке с разработчиками и предлагать какие-то более подходящие решения задач.
            
            5. Не обязательно быть экспертом в каком-то языке программирования, главное — понять работу алгоритмов и то, как разработчики пишут код. Синтаксис Python как раз позволит это изучить.
            
            6. Agile представляет собой семейство гибких методологий, куда входят SCRUM, Канбан и прочие. Это также набор принципов и правил по работе с продуктом.
            
            7. Гибкие методологии пришли на смену традиционной системе управления проектами — Waterfall, когда разные зоны выполняются по очереди. Например, сначала идёт проектирование, затем — дизайн, разработка, тестирование и т. д.
            
            8. От метода Waterfall сейчас отказываются, так как ожидаемый и реальный результаты почти всегда не сходятся, на это затрачивается много времени, а проекты в итоге получаются массивными, неповоротливыми и негибкими.
            
            9. Тема «Веб-технологии» отвечает на вопросы, что такое интернет, как работают хостинги, сайты и домены, а также как собираются и рендерятся страницы.
            
            10. Жизненный цикл проекта — это некий набор этапов, который повторяется из раза в раз даже на базе одной компании. В рамках жизненного цикла проекта есть пять основных этапов — инициирование, планирование, исполнение, контроль и завершение проекта.
            
            11. Жизненный цикл продукта — это последовательность этапов, через которые проходит каждый выпущенный товар с момента своего появления на рынке до момента ухода с рынка. Зачастую продукт формируется исходя из какой-то проблемы и боли пользователя.
            
            12. Технология разработки в ИТ — процесс создания продукта в ИТ с нуля до готового продукта. В зависимости от типа вашей компании, будете работать в совершенно разном составе, что также зависит от проекта.
            
            13. Основные этапы жизненного цикла проекта — инициирование и планирование. На этапе инициирования вы обладаете только гипотезой, что конкретно хотите сделать. Ваши задачи, как проджекта — создать финансовую модель, понять, сколько примерно будет стоить продукт, как его разрабатывать и каким образом он будет выглядеть. Зачастую это работа в команде, но владеть этими компетенциями надо.
            
            14. Планирование — этап, на котором вы знаете, какой продукт хотите получить. На этом этапе планируется бюджет, сколько человеческого и временного ресурса потребуется, а также определяются реперные точки для формирования того или иного решения.
            
            15. Одна из важных компетенций в работе проджект-менеджера — понимание критического пути. Это последовательность задач, которая влияет на реализацию следующих задач.
            
            16. Финансовый менеджмент — это система управления финансами компании или проектов, направленная на достижение стратегических тактических целей, структурирование расходов, прогнозирование рисков и дохода. Важно понимать, насколько эффективно работает команда и сколько стоит ваше подразделение или модуль.
            
            17. MVP — минимально жизнеспособный продукт — тестовая версия товара, услуги или сервиса с минимальным набором функций, которая несёт ценность для конечного потребителя. Это концепция, с которой вам придётся работать постоянно, так как продукту зачастую нужно проверить какую-то тестовую гипотезу в сжатые сроки, потому что разработка стоит дорого, а выполнить задачу надо быстро.
            
            18. Зачастую самые классные ИТ-продукты создаются по основной концепции MVP. Сначала делается минимальная версия, она тестируется на пользователе, далее пробник идёт в массовую разработку, где наращиваются различные дополнения.
            
            19. Диаграммы состояний помогают описать поведение отдельно взятого объекта. Используются для описания последовательности переходов объекта из одного состояния в другое.
            
            20. Работа проектного менеджера сопряжена с разного рода коммуникациями. Поэтому важно быть спокойным, уметь думать на шаг вперёд и быть тем, к кому можно обратиться за помощью.
            
            21. Soft skills для проектного менеджера — одна из важнейших компетенций в рамках визуальной успешности работы. Но есть и трудности, связанные с умением отказать заказчику, например, в построении космолёта за месяц, а также с поддержанием эмоционального баланса в работе самой команды.
            
            22. Мониторинг и контроль — важные этапы в жизненном цикле проекта, отвечающие за его реализацию. Этап мониторинга связан со входом в операционные процессы работы команды, с ежедневной коммуникацией с сотрудниками и сверкой с установленными сроками. Контроль — этап, отвечающий за правильное формирование текущего состояния и отчётности — команда работает эффективно, все понимают, что делают.
            
            23. Проджект-менеджер должен быть готов к решению проблем, массово поступающих от коллег из разных отделов. Поэтому коммуникация — один из блоков создания и реализации продуктов.
            
            24. Сервис-менеджмент считается базисом в рамках проектного управления. Вы должны понимать, где и как работают специалисты разных отделов, например, дизайнеры, разработчики, тестировщики, чтобы в сложной ситуации суметь сориентироваться.
            
            25. Проджект-менеджер должен знать, как используются разные онлайн-сервисы для эффективной работы команды.
            
            26. SQL — язык управления базами данных. С его помощью можно извлекать, структурировать и выводить необходимую информацию.
            
            27. Завершение проекта — это заключительная стадия в рамках жизненного цикла проекта. Во время написания документации вы будете проводить рефлексию того, как сработали выстроенные вами процессы, насколько получившийся продукт эффективен и многое другое.
            
            ### **Роман Рыбкин рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [No Flame No Game](https://t.me/proproduct)
            
            2. [UX Horn](https://t.me/uxhorn)
            
            3. [Индекс дятла](https://t.me/dindex)
            
            4. [Менеджер от боженьки](https://t.me/pm_god)
            
            5. [Junior PM](https://t.me/junior_pm)
            
            6. [Project management | IT](https://t.me/pm_and_it)
            
            7. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
            
            8. [PMCLUB — про проекты, продукты и людей](https://t.me/pmclub)
            
            9. [Тимлид Леонид](https://t.me/teamleadleonid)
            
            10. [Владимир Завертайлов | Управление digital-проектами и продуктами](https://t.me/sibirix)
            
            11. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
            
            **Литературу:**
            
            1. [«Deadline», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
            
            2. [«Сделано», Скотт Беркун](https://www.mann-ivanov-ferber.ru/books/sdelano)
            
            3. [«Основы проектного менеджмента», Джозеф Хигни](https://www.mann-ivanov-ferber.ru/books/osnovyi-proektnogo-menedzhmenta)
            
            4. [«Путь scrum-мастера», Зузана Шохова](https://clck.ru/sM5GU)
            
            5. [«Канбан», Дэвид Андерсон](https://www.mann-ivanov-ferber.ru/books/kanban)
            
            6. [«Человеческий фактор: успешные проекты и команды», Том ДеМарко, Тимоти Листер](https://clck.ru/avy4h)
            
            7. [«Цели и ключевые результаты. Полное руководство по внедрению OKR», Пол Нивен и Бен Ламорт](https://www.mann-ivanov-ferber.ru/books/celi-i-klyuchevye-rezultaty)
            
            8. [«Эмоциональный интеллект для менеджеров проектов», Энтони Мерсино](https://www.chitai-gorod.ru/catalog/book/1014639)
            
            9. [«Исследование трендов», Мартин Реймонд](https://www.mann-ivanov-ferber.ru/books/issledovanie-trendov)
            
            10. [«Постигая Agile», Эндрю Стэллман, Дженнифер Грин](https://www.chitai-gorod.ru/catalog/book/1181653)
            
            11. [«Управление продуктом в Scrum», Роман Пихлер](https://www.mann-ivanov-ferber.ru/books/upravlenie-produktom-v-scrum)
            
            12. [«Цель. Процесс непрерывного совершенствования», Элияху Голдратт](https://clck.ru/reQVv)
            
            13. [«Цель-2. Дело не в везении», Элияху Голдратт](https://www.litres.ru/eliyahu-goldratt/cel-2-delo-ne-v-vezenii)
            
            14. [«Как привести дела в порядок», Дэвид Аллен](https://clck.ru/QdGrQ)
            
            15. [«Управление проектами, людьми и собой», Николай Товеровский](https://clck.ru/sM5PC)
            
            16. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
            
            17. [«От хорошего к великому» Джим Коллинз](https://www.mann-ivanov-ferber.ru/books/sse/good-great)
            
            18. [«Путь камикадзе», Эдвард Йордон](https://www.chitai-gorod.ru/catalog/book/1028345)
            
            19. [«Руководство PMBOK + Agile», Хеннер Ширенбер, Мойра Листер, Штефан Кирмсе](https://clck.ru/sM5TS)
            
            20. [«Scrum. Революционный метода управления проектами», Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
            
            21. [«Управление повседневным хаосом», Александр Фридман](https://clck.ru/sM5VC)
            
            22. [«Черная книга менеджера», Слава Панкратов](https://ru.bookmate.com/books/ZlzbUFjl)
            
            **Сайты:**
            
            1. [GoPractice](https://gopractice.ru/)
            
            2. [No Flame No Game](https://nfng.pro/)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок5. [Продакт-менеджер](https://gb.ru/lessons/370813) 51 мин**
            
            ### **Основные тезисы:**
            
            1. Для меня профессия «Продакт-менеджер» не столько специализация, сколько профессиональный путь, основанный на философии того, как смотреть на продукты в целом, понимать их и развивать. На первом месте стоит не работа с языками программирования, а коммуникация с людьми, исследование пользователей, чтобы придумывать новую функциональность для продукта, а также перевод разработчикам требований бизнеса и наоборот.
            
            2. Профессия «Продакт-менеджер» считается наиболее универсальной. Навыки, приобретённые в рамках этой специализации, пригодятся практически в любой компании, даже там, где нет собственных сайтов.
            
            3. Среди программистов наблюдается серьёзный уровень конкуренции за место в компании. Иная ситуация обстоит с продактами. Если вы сильный специалист в отрасли, альтернативы вам не будет.
            
            4. Компания в первую очередь будет ценить вас за отраслевой опыт, доплачивая процент к зарплате. И с этой точки зрения, важно смотреть на свою карьерную траекторию, когда растёте профессионально — как вертикально, так и горизонтально. Например, вчера вы работали продакт-менеджером или стажёром, а сегодня стали руководителем продакт-менеджмента и директором по продукту. Или можете двигаться в разных направлениях в рамках одной сферы.
            
            5. Продакт-менеджер администрирует процесс создания продукта от появления идеи до её реализации и выхода на рынок. Главная задача — создать ИТ-продукт, готовый к продаже и пользованию.
            
            6. При всей свой сложности процесс продакт-менеджмента достаточно известен и изучен. Есть понятные инструменты и технологии, они универсальны. Главное — быть компетентным в той или иной отрасли, чтобы иметь финансовые выгоды.
            
            7. Требуется знать клиентов, конкурентов, а также модели поведения пользователя. Важна и управленческая составляющая профессии, так как коммуницировать с людьми придётся часто.
            
            8. В продакт-менеджменте всегда есть что-то от проджект-менеджера. Например, продакт-менеджер часто ведёт какой-то проект, из-за чего этих специалистов путают.
            
            9. Я всегда считал, что продакт-менеджер — это человек, который делает проекты. Всю его деятельность можно засунуть в проектную, то есть встретиться с проектным треугольником ограничений. Поэтому важно знать, как происходит управление проектами.
            
            10. Так как в последнее время ИТ перешло на гибкие методологии, важно изучить историю, связанную с таким понятием, как Agile, и со всем, что в него входит. Agile — некая философия, в рамках которой действуют не только программисты, но и предприниматели. Эта методология полезна там, где есть управление людьми и взаимодействие с командой.
            
            11. Важно заметить, что продакт-менеджер, работающий в популярной методологии SCRUM, называется Product Owner. Это своеобразная роль в команде, которую с высокой вероятностью займёт продакт-менеджер. Он будет отвечать за финальное решение по продукту, чтобы удовлетворить цели стейкхолдеров. Стейкхолдер — тот, кто заинтересован в развитии продукта и получает от этого прибыль.
            
            12. Одним из важных аспектов продакт-менеджмента служит Customer Development, что подразумевает развитие пользователя. Это «библия» продакт-менеджера, с которой тесно связана Customer Journey Map, юнит-экономика, исследование пользователя, а также такие фреймворки, как Job To Be Done.
            
            13. Стоит особенно обратить внимание на soft skills, так как работа продакт-менеджера подразумевает коммуникацию с людьми и управление ими. Эти навыки позволят общаться с заказчиками, подрядчиками, командой разработки и генеральным директором.
            
            14. Продакт-менеджер — это своеобразный мостик между командой разработчиков и высшим руководством. Поэтому важно знать даже те дисциплины и инструменты, которые, на первый взгляд, кажутся лишними. Например, язык программирования Python.
            
            15. Python — один из самых распространённых языков программирования в мире, а по некоторым рейтингам — самый распространённый. Изучив его, вы сможете общаться с разработчиками и программистами по всему миру, а также решать многие продуктовые задачи.
            
            16. Гибкие методологии (Agile, SCRUM, Канбан) служат для большинства команд программистов и разработчиков основным рабочим процессом. Есть также технологии, отвечающие за принципы планирования фич в продукте.
            
            17. Множество стартапов в ИТ-отрасли связано с вебом. То есть на должности продакт-менеджера вы, так или иначе, будете работать с чем-то, что находится в интернете, используя для этого подходящий язык программирования, например, гипертекстовую разметку HTML.
            
            18. Придётся познакомиться с разными технологическими стеками и «частями» разработки: бэкенд, фронтенд, фулстек.
            
            19. В последнее время стало популярным такое понятие, как развитие ИТ-экосистем. Если вы попадёте в достаточно крупную ИТ-компанию, например, Сбербанк или МТС, то будете не просто разрабатывать сайты и приложения, а смотреть на всё это как на связанные друг с другом элементы, использующие одинаковые базы знаний и архитектуру. Это позволит лучше понимать, что сейчас происходит с веб-технологиями и куда всё движется.
            
            20. Жизненный цикл проекта связан с треугольником ограничений проекта, куда входят ресурсы, необходимое качество, которое надо достигнуть, и дедлайны. Есть даже известная шутка: «Выберите два из трёх: быстро, дёшево и качественно», — которая вышла из жизненного цикла проекта при работе в треугольнике ограничений.
            
            21. Жизненный цикл продукта больше относится к теоретическим дисциплинам. Однако её также важно изучить, чтобы не делать таких ошибок, которые в своё время совершал директор по продукту Kodak, когда компания продолжала развивать, по сути, умирающий продукт в условиях глобальной цифровизации.
            
            22. Так как вы осваиваете профессию «Продакт-менеджера» в рамках сферы ИТ, то зачастую будете разрабатывать ИТ-продукты разной величины.
            
            23. Этот курс позволит вам не только понять, как разрабатывать ИТ-продукты, но и узнать, какие стадии они проходят в ИТ-компаниях. Вы будете заниматься прототипированием, вёрсткой, а также постановкой задач дизайнерам, фронтенд- и бэкенд-разработчикам. Эти действия помогут создать и вывести на рынок новый или доработать уже существующий продукт, повысив его потребительскую ценность.
            
            24. В некотором смысле всё, что связано с бизнес-моделями, считается универсальной дисциплиной для любого продукта.
            
            25. У продакт-менеджеров в дисциплине, связанной с бизнес-моделями, есть своя библия. Например, Александр Остервальдер и Ив Пиньё придумали множество важных методологий рассмотрения, создания и развития бизнес-моделей.
            
            26. Вы познакомитесь с такими инструментами, как Lean Canvas и Business Model Canvas.
            
            27. В процессе изучения специализации «Продакт-менеджер» вам часто будут попадаться не переведённые с английского языка термины. Их много, однако это упростит поиск бесплатного контента в интернете по указанной теме.
            
            28. Всё, что связано с исследованиями (продукта, конкурентов), аналитикой, формированием гипотез роста и их проверкой, считается важным аспектом деятельности продакт-менеджера, который неизбежен в любой компании.
            
            29. HADI-циклы — состояние, когда вы постоянно находитесь в циклическом поиске гипотез роста и их проверке. Всё эти действия направлены на улучшение потребительской ценности продукта.
            
            30. Юнит-экономика — одна из тех дисциплин, которая в целом интересна продакт-менеджеру, но считается довольно побочным продуктом деятельности.
            
            31. За показатели, входящие в любую юнит-экономику продукта, как правило, отвечают другие подразделения. Для них это KPI — key performance indicators — ключевые показатели эффективности. А для продакт-менеджера — показатель того, сходится юнит-экономика или нет.
            
            32. Зачастую продакт-менеджеру не хватает ресурсов, чтобы протестировать свои гипотезы при помощи разработчиков. Поэтому чтобы самостоятельно доказать гипотезу, используется zero-coding, вложенный в конструктор. К zero-coding относится, например, конструктор лендингов.
            
            33. Создание MVP — одна из базовых дисциплин продакт-менеджмента. MVP — Minimal Viable Product — минимально жизнеспособный продукт для пользователя, на котором тестируется большое число гипотез. А для многих предпринимателей это целая философия по созданию стартапа.
            
            34. Диаграммы состояний — достаточно специфичная, но полезная дисциплина для продакт-менеджера, который самостоятельно вручную систематизирует информацию. То есть готовя задание разработчикам, вам необходимо разговаривать с ними на одном языке, а, значит, уметь составлять диаграммы.
            
            35. Диаграммы состояний связаны с созданием блок-схем и таблиц, чтобы описать разработчикам то, что вы от них хотите.
            
            36. Работа продакт-менеджера на 90% состоит из коммуникаций. Поэтому важно развивать определённые навыки, которые в мире принято называть soft skills.
            
            37. К soft skills относится навык презентации, коммуникации, публичных выступлений и лидерства. Их важно развивать самостоятельно и в рамках этого курса.
            
            38. Когда продакт-менеджер тестирует гипотезы или исследует потребителей, он должен знать тот фундамент, который заложен в классическом маркетинге. Всё, что относится к сегментации, позиционированию, изучению клиента и созданию уникального торгового предложения, входит в дисциплину «Основы маркетинга».
            
            39. Знания, полученные на курсе «Основы маркетинга», пригодятся вам для понимания более сложных концепций в продакт-менеджменте. Например, познакомитесь с концепцией развития потребительской ценности в продукте через фреймворк Job to be Done.
            
            40. Введение в продуктовую аналитику — дисциплина, после изучения которой вы научитесь правильно ставить задачи специалисту по аналитике.
            
            41. SQL, или Structured Query Language — это язык поисковых запросов. Курс «Базы данных и SQL» похож на курс по продуктовой аналитике, так как в рамках него вы также научитесь ставить задачи и узнаете, как работают аналитики.
            
            42. Знание баз данных позволит вам правильно проектировать архитектуру ИТ-продукта.
            
            43. В рамках специализации «Продакт-менеджер» вы будете изучать дисциплины, которые могут пригодиться или нет. К последним относятся инструменты для анализа и визуализации данных. Как правило, в компаниях всегда есть специалисты, отвечающие, например, за дизайн, и вам не потребуется самим делать те же презентации.
            
            44. Часто в своей работе продакт-менеджеры используют таск-трекеры. Таск-трекеры — места, где либо вам ставят задачи — заказчики компании, например, из отдела маркетинга или продаж, либо это делаете вы, но для разработчиков.
            
            45. Важно изучить принципы работы тех инструментов, которыми пользуются исполнители поставленной вами задачи. Например, в среде дизайнеров используется Figma или Sketch.
            
            46. Так как работа продакт-менеджера в большей степени связана с коммуникациями, вам обязательно понадобятся такие инструменты, как Slack, Jira, YouTrack, а также их российские аналоги.
            
            47. Вам, как продакт-менеджеру, придётся знать и уметь развивать продукт, используя различные фреймворки. Поэтому для вас уже написаны некие библии — читайте Александра Остервальдера, изучайте людей, которые придумали технологию Job to be Done, произвёдшую революцию в продуктовом мышлении. Это приведёт к успеху вас и бизнес, где вы будете работать продакт-менеджером.
            
            48. Коммуникация, изучение клиентов и трекинг задач — три столпа, на которых строится рабочий день продакт-менеджера. И даже если вы интроверт, это не послужит каким-то барьером для подобной специальности. Можно уйти в уединённое место и спокойно заняться, например, продуктовой аналитикой или проектированием продукта.
            
            49. Мой рабочий день, как директора по продукту, начинается с мониторинга статусов по текущим задачам и просмотра новых. Далее я коммуницирую с исполнителями по поводу пролонгирования сроков и выясняю, по каким причинам это происходит.
            
            50. Часто весь рабочий день посвящается коммуникациям в различных сервисах, типа Zoom, или совещаниям, где придумываются и обосновываются разные фичи по продукту.
            
            51. Нередко приходится делать презентации, чтобы рассказать о том или ином продукте.
            
            52. Я часто выступаю на разных конференциях и форумах. Цель этого — показать развитие бренда компании через донесение благ, которые она даёт.
            
            53. Иногда я работаю с таблицами, чтобы самостоятельно проанализировать какие-то цифры и написать техническое задание программистам и разработчикам. И в каких-то случаях я могу поручить это продакт-менеджеру, находящемуся у меня в подчинении, а где-то — нет. Например, когда надо придумать какую-то сложную архитектуру.
            
            54. Продакт-менеджмент — специализация, где вы освоите язык программирования, позанимаетесь аналитикой и приобретёте коммуникативные навыки. И после окончания обучения перед вами не встанет вопрос о трудоустройстве, так как ваши знания и навыки пригодятся в разных сферах.
            
            ### **Ярослав Карасёв рекомендует:**
            
            **Телеграмм каналы:**
            
            1. [Притчи продуктолога](https://t.me/product_proverbs)
            
            2. [Grow Horse](https://t.me/growhorse)
            
            3. [Продукторий Владимира Меркушева](https://t.me/vladimir_merkushev)
            
            4. [Improve Your Product (на украинском языке)](https://t.me/toceo)
            
            5. [Strategic move: стратегия, бизнес-модели, продукты](https://t.me/strategic_move)
            
            6. [Игорь Кузнецов о темных паттернах](https://t.me/brainshare)
            
            7. [Индекс дятла](https://t.me/dindex)
            
            8. [Alexcouncil⚡](https://t.me/alexcouncil)
            
            9. [Fresh Product Manager](https://t.me/FreshProductGo)
            
            10. [Epic Growth — рост продуктов](https://t.me/epicgrowth)
            
            11. [Product Management](https://t.me/ruspm)
            
            12. [FEDOR BORSHEV](https://t.me/pmdaily)
            
            13. [Сергей Колганов - psilonsk - об управлении проектами](https://t.me/psilonsk)
            
            14. [ProductSense](https://t.me/productsense)
            
            15. [Нормально делай, нормально будет](https://t.me/normalno_delaj)
            
            16. [Analysis Paradisis](https://t.me/analysis_paradisis)
            
            **Литературу:**
            
            1. [«На крючке. Как создавать продукты-хиты», Марти Кэган](https://clck.ru/sM5Y7)
            
            2. [«Построение бизнес-моделей», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5aX)
            
            3. [«Разработка ценностных предложений», Александр Остервальдер, Ив Пинье](https://clck.ru/sM5b3)
            
            4. [«Стратегия голубого океана», В. Чан Ким, Рене Моборн](https://www.mann-ivanov-ferber.ru/books/paperbook/blueoceanstrategy)
            
            5. [«Спроси маму: как общаться с клиентами и подтвердить правоту своей бизнес-идеи, если все кругом врут», Роб Фитцпатрик](https://alpinabook.ru/catalog/book-sprosi-mamu)
            
            6. [«Поведенческая экономика. Почему люди ведут себя иррационально и как на этом заработать», Дэн Ариели](https://clck.ru/sM5cL)
            
            7. [«Как чашка за чашкой строилась Starbucks», Говард Шульц](https://clck.ru/sM5dN)
            
            8. [«Покупатель на крючке», Нир Эяль и Райан Хувер](https://clck.ru/sM5fT)
            
            9. [«Корпорация гениев. Как управлять командой творческих людей», Эд Кэтмелл](https://www.litres.ru/ed-ketmell/korp-8645061/chitat-onlayn)
            
            10. [«Стартап. Настольная книга основателя», Стив Бланк, Боб Дорф](https://clck.ru/sM5g9)
            
            11. [«Позиционирование: битва за умы», Джек Траут, Эл Райс](https://www.chitai-gorod.ru/catalog/book/1001412)
            
            12. [«Как создать продукт, который купят. Метод Lean Customer Development», Синди Альварес](https://clck.ru/sM5i5)
            
            13. [«Когда кофе и капуста конкуренты», Алан Клемент](https://jobs-to-be-done.ru/)
            
            14. [«Scrum» Джефф Сазерленд](https://www.mann-ivanov-ferber.ru/books/scrum)
            
            15. [«Intercom on Product Management», Des Traynor](https://www.intercom.com/resources/books/intercom-product-management)
            
            16. [«Intercom on Jobs-to-be-Done», Des Traynor](https://www.intercom.com/resources/books/intercom-jobs-to-be-done)
            
            17. [«Growth hacks», Aladdin Happy](https://clck.ru/sM5s8)
            
            18. [«Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World with OKRs», Джон Доер](https://clck.ru/sM5un)
            
            19. [«Закон успешных инноваций. Зачем клиент «нанимает» ваш продукт и как знание об этом помогает новым разработкам», Клейтон Кристенсен](https://clck.ru/sM5ux)
            
            20. [«Deadline. Роман об управлении проектами», Том ДеМарко](https://www.mann-ivanov-ferber.ru/books/biznesroman/deadline1)
            
            21. [«Jobs To Be Done», Энтони Ульвик](https://jobs-to-be-done.ru/jobs-to-be-done-1)
            
            **Видео:**
            
            1. [20 Years of Product Management in 25 Minutes by Dave Wascha](https://www.youtube.com/watch?v=i69U0lvi89c)
            
            2. [The art of innovation | Guy Kawasaki | TEDxBerkeley](https://www.youtube.com/watch?v=Mtjatz9r-Vc)
            
            3. [Margaret Gould Stewart: How giant websites design for you (and a billion others, too)](https://www.youtube.com/watch?v=quJdL9ggETI)
            
            4. [Epic Growth Conference: Михаил Трутнев (Ultimate Guitar). Повышающий продажи маркетинговый абсурд](https://www.youtube.com/watch?v=1gwGRRGaEMo)
            
            5. [Андрей Хусид (CEO RealtimeBoard). Как построить команду и процессы, ориентированные на быстрый рост](https://www.youtube.com/watch?v=C1U4MD6DPI8)
            
            ### **Рекомендации от GeekBrains:**
            
            **Книги:**
            
            1. [Подборка книг по программированию](https://frontendblok.com/tools/book)
            
            2. [«Персональная стратегия» Александр Кравцов](https://www.mann-ivanov-ferber.ru/books/personalnaya-strategiya/)
            
            **Подкасты:**
            
            1. Fragmented — подкаст о том, как стать лучшим разработчиком ПО
            
            2. Сушите вёсла — о разработке, аналитике, тестировании и других аспектах создания приложений
            
            3. CoRecursive — истории, скрывающиеся за кодом, от экспертов в мире разработки
            
            4. Signals And Threads — интервью о тонкостях разработки с инженерами из глобальной торговой компании Jane Street
            
            5. Software Engineering Radio — еженедельные беседы о ПО
            
            6. Microsoft Research Podcast — о передовых технологиях Microsoft Research
            
        - **Урок 6. [Анкета](https://gb.ru/lessons/370814)**

[GeekSpeak_DigitalMaster&Geek 29.08.23](https://www.notion.so/GeekSpeak_DigitalMaster-Geek-29-08-23-aa30243466594a049ded9f22ac2d6e04?pvs=21)

[GeekSpeak_Разработчик](https://www.notion.so/GeekSpeak_-e00605266e27470ead7afc2ffaf56414?pvs=21)

[GeekSpeak_Ученые](https://www.notion.so/GeekSpeak_-fbad24d8cc42402eb5d6c0a997895ecc?pvs=21)

[GeekSpeak_Выпускники](https://www.notion.so/GeekSpeak_-57ae0561f3494bcc8ebfa4f1ca71708b?pvs=21)

[Команда ИТ](https://www.notion.so/c2ba2db575bc4046b7abd1be27e1f544?pvs=21)

### Материалы

- ****************Картинки и файлы****************
    - **Стратегия чтения**
        
        ![Стратегия чтения.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a25d6e31-f5ff-4203-a548-07fdbf7ce4df/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F.png)
        
    - **001_Hello_world**
        
        ![001_Hello_world.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/3a4399c6-8fb2-452e-a3af-c6495b7b65cb/001_Hello_world.jpg)
        
    - **Приветствие пользователя**
        
        ![002_Hello_username.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/2a5e7bae-659a-40b4-8c31-a86d311ff760/002_Hello_username.jpg)
        
    - **************************************Сложение двух чисел. Алгоритм**************************************
        
        ![003_Example.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/e8a50fa5-5f61-4a1f-aded-4c17024c2dd5/003_Example.jpg)
        
    - **Задача про гири. Алгоритмы нахождения максимума и минимума**
        
        ![Задача 1 Гири через Массив.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dbdf8170-2a89-489a-b8dc-f45e51db942f/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D0%93%D0%B8%D1%80%D0%B8_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2.jpg)
        
        ![Задача 1 Гири.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/215cbcec-6096-466e-ab85-32dd5c3e145a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D0%93%D0%B8%D1%80%D0%B8.png)
        
        ![Семинар 1. Задача 2.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6c2dcb8e-b3b2-4a51-acde-e4dbd0cfa4b3/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_2.png)
        
    - **Задача про собаку и двух друзей. Алгоритм**
        
        ![Задача 3 Друзья и собака.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6fdd05bc-1359-482d-94b5-d9a3f4fef4ca/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3_%D0%94%D1%80%D1%83%D0%B7%D1%8C%D1%8F_%D0%B8_%D1%81%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0.png)
        
    - **Сумма элементов массива. Алгоритм**
        
        ![Задача №1 с массивами про чек.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/54e180e1-403b-4968-bdb8-80591a2d9ed5/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%87%D0%B5%D0%BA.jpg)
        
    - **Сумма элементов массива с нечетными индексами. Алгоритм**
        
        ![Задача №2 с массивами про сумму нечетных индексов.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e0e1248d-e154-4a26-a772-2922a7de70b6/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_2_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%81%D1%83%D0%BC%D0%BC%D1%83_%D0%BD%D0%B5%D1%87%D0%B5%D1%82%D0%BD%D1%8B%D1%85_%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%BE%D0%B2.jpg)
        
        ![Задача №3 с массивами про сумму нечетных значений.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dab50576-7300-4f59-bb00-b5686615b57a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D1%81%D1%83%D0%BC%D0%BC%D1%83_%D0%BD%D0%B5%D1%87%D0%B5%D1%82%D0%BD%D1%8B%D1%85_%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9.jpg)
        
    - **Перевернуть массив и записать его в обратном порядке. Алгоритм**
        
        ![Задача №5 с массивами про переворот и обратный порядок.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6cb513cf-bd0a-4578-a9ed-1269f520645a/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_5_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D0%BF%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D1%80%D0%BE%D1%82_%D0%B8_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D1%8B%D0%B9_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D0%BA.jpg)
        
    - **Скалярное произведение векторов. Алгоритм**
        
        ![Задача на скалярное произведение.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/47b6dece-761a-4026-86e7-9937366ebf4c/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BD%D0%B0_%D1%81%D0%BA%D0%B0%D0%BB%D1%8F%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5.jpg)
        
    - ************************************************************************Индивидуальное приветствие. Алгоритм************************************************************************
        
        ![005_Examples.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/40317881-66c1-4f20-8a0c-4ce9881f3861/9b7910e5-e345-44e3-a0b0-49d15fc507a5/005_Examples.jpg)
        
    - **********Блок-схема на основе псевдокода**********
        
        ![Блок-схема на основе псевдокода.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7bfc9c58-e8d4-4fbf-a5c4-050cc62731d8/%D0%91%D0%BB%D0%BE%D0%BA-%D1%81%D1%85%D0%B5%D0%BC%D0%B0_%D0%BD%D0%B0_%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B5_%D0%BF%D1%81%D0%B5%D0%B2%D0%B4%D0%BE%D0%BA%D0%BE%D0%B4%D0%B0.jpg)
        
    - **Алгоритмы. Домашние задания**
        
        ![ДЗ_Семинар2_Введение в программирование_Общий.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/afc70beb-1156-4337-afe1-910b928b5254/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D0%B1%D1%89%D0%B8%D0%B9.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Общий_без_привязки_чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8d5a7a66-46e1-4d47-b9e4-004376eca557/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D0%B1%D1%89%D0%B8%D0%B9_%D0%B1%D0%B5%D0%B7_%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B8_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Отдельный_файл_комплекса.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a47edab7-e5e3-442d-a362-36d5167ac753/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%84%D0%B0%D0%B9%D0%BB_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%B0.jpg)
        
        ![ДЗ_Семинар2_Введение в программирование_Отдельный_файл_комплекса_без_привязки_чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a11d887a-2ac0-446c-b535-9eb1b93982b1/%D0%94%D0%97_%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%802_%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9E%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%84%D0%B0%D0%B9%D0%BB_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%B0_%D0%B1%D0%B5%D0%B7_%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B8_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
    - **Задача нахождения среднего арифметического. Алгоритм**
        
        ![Среднее арифметическое 4 чисел.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e429e243-a65d-4fd8-8d14-38eaaeebd968/%D0%A1%D1%80%D0%B5%D0%B4%D0%BD%D0%B5%D0%B5_%D0%B0%D1%80%D0%B8%D1%84%D0%BC%D0%B5%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_4_%D1%87%D0%B8%D1%81%D0%B5%D0%BB.jpg)
        
    - **Нахождение всех четных чисел от 1 до 15. Алгоритм**
        
        ![Семинар 1. Задача 1.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59921daa-8974-4a46-9faf-5fc1255e43a4/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_1.png)
        
    - **Блок-схема по нахождению выхода из лабиринта**
        
        ![Лабиринт ДЗ.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4e7de1b-baf9-48f2-8d31-6ac05d4fbe14/%D0%9B%D0%B0%D0%B1%D0%B8%D1%80%D0%B8%D0%BD%D1%82_%D0%94%D0%97.png)
        
    - **Задача по нахождению факториала**
        
        ![Нахождение факториала N.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a88f11e-0c31-4734-8347-ed906154b3dd/%D0%9D%D0%B0%D1%85%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%B0%D0%BB%D0%B0_N.jpg)
        
    - **Задача по нахождению второго максимального числа в массиве. Алгоритм**
        
        ![Поиск второго после максимума числа.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/06e7be71-6f43-4b00-b2c8-bf42f2d352a2/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B3%D0%BE_%D0%BF%D0%BE%D1%81%D0%BB%D0%B5_%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D1%83%D0%BC%D0%B0_%D1%87%D0%B8%D1%81%D0%BB%D0%B0.jpg)
        
    - **Перевод числа из десятеричной в двоичную систему счисления. Алгоритм**
        
        ![Семинар 1. Задача 3.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9dcec314-bc94-48d7-9076-fc0521565582/%D0%A1%D0%B5%D0%BC%D0%B8%D0%BD%D0%B0%D1%80_1._%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_3.png)
        
        ![Задача. Перевод числа из 10-ной в двоичную систему счисления.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb98c830-92f9-44e5-b3a8-2c08c91231ed/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0._%D0%9F%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4_%D1%87%D0%B8%D1%81%D0%BB%D0%B0_%D0%B8%D0%B7_10-%D0%BD%D0%BE%D0%B9_%D0%B2_%D0%B4%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D1%83%D1%8E_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%83_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F.jpg)
        
    - **Перенести максимальное значение в правый край массива. Алгоритм**
        
        ![Задача №4 с массивами про перенос максимального значения в самый конец.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c73ca00-6054-45ff-8d1e-f48ffcedec38/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_4_%D1%81_%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0%D0%BC%D0%B8_%D0%BF%D1%80%D0%BE_%D0%BF%D0%B5%D1%80%D0%B5%D0%BD%D0%BE%D1%81_%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2_%D1%81%D0%B0%D0%BC%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BD%D0%B5%D1%86.jpg)
        

[Языки](https://www.notion.so/d81420be112945c5894fd52d61a416c6?pvs=21)

[Вопросы:](https://www.notion.so/5c26a52922a1494fb814394d6b350b45?pvs=21)

[Регалии](https://www.notion.so/dd4706fb00db407c8eba7922b8a58115?pvs=21)